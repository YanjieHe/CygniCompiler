#include "Instruction.hpp"
std::wstring InstructionToString(int instruction)
{
	switch (instruction)
	{
	case cast_int_to_double:
		return L"cast_int_to_double";
	case cast_int_to_long:
		return L"cast_int_to_long";
	case cast_float_to_double:
		return L"cast_float_to_double";
	case jump:
		return L"jump";
	case jump_if_true:
		return L"jump_if_true";
	case jump_if_false:
		return L"jump_if_false";
	case push_function:
		return L"push_function";
	case push_method:
		return L"push_method";
	case invoke:
		return L"invoke";
	case logical_and:
		return L"logical_and";
	case logical_or:
		return L"logical_or";
	case logical_not:
		return L"logical_not";
	case add_int:
		return L"add_int";
	case sub_int:
		return L"sub_int";
	case mul_int:
		return L"mul_int";
	case div_int:
		return L"div_int";
	case mod_int:
		return L"mod_int";
	case add_long:
		return L"add_long";
	case sub_long:
		return L"sub_long";
	case mul_long:
		return L"mul_long";
	case div_long:
		return L"div_long";
	case mod_long:
		return L"mod_long";
	case add_float:
		return L"add_float";
	case sub_float:
		return L"sub_float";
	case mul_float:
		return L"mul_float";
	case div_float:
		return L"div_float";
	case add_double:
		return L"add_double";
	case sub_double:
		return L"sub_double";
	case mul_double:
		return L"mul_double";
	case div_double:
		return L"div_double";
	case minus_int:
		return L"minus_int";
	case minus_long:
		return L"minus_long";
	case minus_float:
		return L"minus_float";
	case minus_double:
		return L"minus_double";
	case gt_int:
		return L"gt_int";
	case lt_int:
		return L"lt_int";
	case ge_int:
		return L"ge_int";
	case le_int:
		return L"le_int";
	case eq_int:
		return L"eq_int";
	case ne_int:
		return L"ne_int";
	case gt_long:
		return L"gt_long";
	case lt_long:
		return L"lt_long";
	case ge_long:
		return L"ge_long";
	case le_long:
		return L"le_long";
	case eq_long:
		return L"eq_long";
	case ne_long:
		return L"ne_long";
	case gt_float:
		return L"gt_float";
	case lt_float:
		return L"lt_float";
	case ge_float:
		return L"ge_float";
	case le_float:
		return L"le_float";
	case eq_float:
		return L"eq_float";
	case ne_float:
		return L"ne_float";
	case gt_double:
		return L"gt_double";
	case lt_double:
		return L"lt_double";
	case ge_double:
		return L"ge_double";
	case le_double:
		return L"le_double";
	case eq_double:
		return L"eq_double";
	case ne_double:
		return L"ne_double";
	case eq_string:
		return L"eq_string";
	case ne_string:
		return L"ne_string";
	case eq_object:
		return L"eq_object";
	case ne_object:
		return L"ne_object";
	case push_constant_int:
		return L"push_constant_int";
	case push_constant_long:
		return L"push_constant_long";
	case push_constant_float:
		return L"push_constant_float";
	case push_constant_double:
		return L"push_constant_double";
	case push_constant_string:
		return L"push_constant_string";
	case push_local_int:
		return L"push_local_int";
	case push_local_long:
		return L"push_local_long";
	case push_local_float:
		return L"push_local_float";
	case push_local_double:
		return L"push_local_double";
	case push_local_string:
		return L"push_local_string";
	case push_local_object:
		return L"push_local_object";
	case pop_local_int:
		return L"pop_local_int";
	case pop_local_long:
		return L"pop_local_long";
	case pop_local_float:
		return L"pop_local_float";
	case pop_local_double:
		return L"pop_local_double";
	case pop_local_string:
		return L"pop_local_string";
	case pop_local_object:
		return L"pop_local_object";
	case push_field_int:
		return L"push_field_int";
	case push_field_long:
		return L"push_field_long";
	case push_field_float:
		return L"push_field_float";
	case push_field_double:
		return L"push_field_double";
	case push_field_string:
		return L"push_field_string";
	case push_field_object:
		return L"push_field_object";
	case pop_field_int:
		return L"pop_field_int";
	case pop_field_long:
		return L"pop_field_long";
	case pop_field_float:
		return L"pop_field_float";
	case pop_field_double:
		return L"pop_field_double";
	case pop_field_string:
		return L"pop_field_string";
	case pop_field_object:
		return L"pop_field_object";
	case push_static_int:
		return L"push_static_int";
	case push_static_long:
		return L"push_static_long";
	case push_static_float:
		return L"push_static_float";
	case push_static_double:
		return L"push_static_double";
	case push_static_string:
		return L"push_static_string";
	case push_static_object:
		return L"push_static_object";
	case pop_static_int:
		return L"pop_static_int";
	case pop_static_long:
		return L"pop_static_long";
	case pop_static_float:
		return L"pop_static_float";
	case pop_static_double:
		return L"pop_static_double";
	case pop_static_string:
		return L"pop_static_string";
	case pop_static_object:
		return L"pop_static_object";
	case return_int:
		return L"return_int";
	case return_long:
		return L"return_long";
	case return_float:
		return L"return_float";
	case return_double:
		return L"return_double";
	case return_string:
		return L"return_string";
	case return_object:
		return L"return_object";
	default:
		throw std::wstring(L"not supported instruction");
	}
}
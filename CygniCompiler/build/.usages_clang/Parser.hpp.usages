22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 332 0 0 0 1 # 1 1 1 2 18446744073709551615 6 ifndef 1 2 1 8 18446744073709551615 10 PARSER_HPP 1 9 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 6 define 2 2 2 8 18446744073709551615 10 PARSER_HPP 2 9 2 19 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 15 "Exception.hpp" 3 10 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 16 "Expression.hpp" 4 10 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 12 "Module.hpp" 5 10 5 22 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 11 "Token.hpp" 6 10 6 21 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 string 7 11 7 17 18446744073709551615 1 > 7 17 7 18 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 vector 8 11 8 17 18446744073709551615 1 > 8 17 8 18 18446744073709551615 5 using 9 1 9 6 18446744073709551615 3 std 9 7 9 10 0 2 :: 9 10 9 12 18446744073709551615 6 string 9 12 9 18 1 1 ; 9 18 9 19 18446744073709551615 5 using 10 1 10 6 18446744073709551615 3 std 10 7 10 10 0 2 :: 10 10 10 12 18446744073709551615 6 vector 10 12 10 18 2 1 ; 10 18 10 19 18446744073709551615 5 class 12 1 12 6 18446744073709551615 6 Parser 12 7 12 13 3 1 { 13 1 13 2 18446744073709551615 6 public 14 1 14 7 18446744073709551615 1 : 14 7 14 8 18446744073709551615 6 string 15 2 15 8 3 4 path 15 9 15 13 4 1 ; 15 13 15 14 18446744073709551615 6 vector 16 2 16 8 3 1 < 16 8 16 9 18446744073709551615 5 Token 16 9 16 14 3 1 > 16 14 16 15 18446744073709551615 1 & 16 15 16 16 18446744073709551615 6 tokens 16 17 16 23 5 1 ; 16 23 16 24 18446744073709551615 7 int32_t 17 2 17 9 3 12 tokenPointer 17 10 17 22 6 1 ; 17 22 17 23 18446744073709551615 6 Parser 19 2 19 8 3 1 ( 19 8 19 9 3 6 string 19 9 19 15 7 4 path 19 16 19 20 8 1 , 19 20 19 21 3 6 vector 19 22 19 28 9 1 < 19 28 19 29 18446744073709551615 5 Token 19 29 19 34 10 1 > 19 34 19 35 18446744073709551615 1 & 19 35 19 36 18446744073709551615 6 tokens 19 37 19 43 11 1 ) 19 43 19 44 3 1 ; 19 44 19 45 18446744073709551615 6 Module 21 2 21 8 12 7 Program 21 9 21 16 13 1 ( 21 16 21 17 13 1 ) 21 17 21 18 13 1 ; 21 18 21 19 18446744073709551615 7 private 23 1 23 8 18446744073709551615 1 : 23 8 23 9 18446744073709551615 4 bool 24 2 24 6 18446744073709551615 5 IsEof 24 7 24 12 14 1 ( 24 12 24 13 14 1 ) 24 13 24 14 14 1 ; 24 14 24 15 18446744073709551615 5 Token 25 2 25 7 10 1 & 25 7 25 8 15 4 Look 25 9 25 13 15 1 ( 25 13 25 14 15 1 ) 25 14 25 15 15 1 ; 25 15 25 16 18446744073709551615 4 void 26 2 26 6 18446744073709551615 4 Move 26 7 26 11 16 1 ( 26 11 26 12 16 1 ) 26 12 26 13 16 1 ; 26 13 26 14 18446744073709551615 4 void 27 2 27 6 18446744073709551615 5 Match 27 7 27 12 17 1 ( 27 12 27 13 17 3 Tag 27 13 27 16 18 3 tag 27 17 27 20 19 1 ) 27 20 27 21 17 1 ; 27 21 27 22 18446744073709551615 6 ExpPtr 29 2 29 8 20 5 Block 29 9 29 14 21 1 ( 29 14 29 15 21 1 ) 29 15 29 16 21 1 ; 29 16 29 17 18446744073709551615 6 ExpPtr 30 2 30 8 20 2 If 30 9 30 11 22 1 ( 30 11 30 12 22 1 ) 30 12 30 13 22 1 ; 30 13 30 14 18446744073709551615 6 ExpPtr 31 2 31 8 20 5 While 31 9 31 14 23 1 ( 31 14 31 15 23 1 ) 31 15 31 16 23 1 ; 31 16 31 17 18446744073709551615 6 ExpPtr 32 2 32 8 20 14 DefineVariable 32 9 32 23 24 1 ( 32 23 32 24 24 1 ) 32 24 32 25 24 1 ; 32 25 32 26 18446744073709551615 6 ExpPtr 33 2 33 8 20 14 DefineFunction 33 9 33 23 25 1 ( 33 23 33 24 25 1 ) 33 24 33 25 25 1 ; 33 25 33 26 18446744073709551615 6 ExpPtr 34 2 34 8 20 6 Return 34 9 34 15 26 1 ( 34 15 34 16 26 1 ) 34 16 34 17 26 1 ; 34 17 34 18 18446744073709551615 6 ExpPtr 35 2 35 8 20 9 Statement 35 9 35 18 27 1 ( 35 18 35 19 27 1 ) 35 19 35 20 27 1 ; 35 20 35 21 18446744073709551615 6 ExpPtr 36 2 36 8 20 6 Assign 36 9 36 15 28 1 ( 36 15 36 16 28 1 ) 36 16 36 17 28 1 ; 36 17 36 18 18446744073709551615 6 ExpPtr 37 2 37 8 20 2 Or 37 9 37 11 29 1 ( 37 11 37 12 29 1 ) 37 12 37 13 29 1 ; 37 13 37 14 18446744073709551615 6 ExpPtr 38 2 38 8 20 3 And 38 9 38 12 30 1 ( 38 12 38 13 30 1 ) 38 13 38 14 30 1 ; 38 14 38 15 18446744073709551615 6 ExpPtr 39 2 39 8 20 8 Equality 39 9 39 17 31 1 ( 39 17 39 18 31 1 ) 39 18 39 19 31 1 ; 39 19 39 20 18446744073709551615 6 ExpPtr 40 2 40 8 20 8 Relation 40 9 40 17 32 1 ( 40 17 40 18 32 1 ) 40 18 40 19 32 1 ; 40 19 40 20 18446744073709551615 6 ExpPtr 41 2 41 8 20 4 Expr 41 9 41 13 33 1 ( 41 13 41 14 33 1 ) 41 14 41 15 33 1 ; 41 15 41 16 18446744073709551615 6 ExpPtr 42 2 42 8 20 4 Term 42 9 42 13 34 1 ( 42 13 42 14 34 1 ) 42 14 42 15 34 1 ; 42 15 42 16 18446744073709551615 6 ExpPtr 43 2 43 8 20 5 Unary 43 9 43 14 35 1 ( 43 14 43 15 35 1 ) 43 15 43 16 35 1 ; 43 16 43 17 18446744073709551615 6 ExpPtr 44 2 44 8 20 7 Postfix 44 9 44 16 36 1 ( 44 16 44 17 36 1 ) 44 17 44 18 36 1 ; 44 18 44 19 18446744073709551615 6 ExpPtr 45 2 45 8 20 6 Factor 45 9 45 15 37 1 ( 45 15 45 16 37 1 ) 45 16 45 17 37 1 ; 45 17 45 18 18446744073709551615 4 Type 46 2 46 6 38 9 ParseType 46 7 46 16 39 1 ( 46 16 46 17 39 1 ) 46 17 46 18 39 1 ; 46 18 46 19 18446744073709551615 1 } 47 1 47 2 18446744073709551615 1 ; 47 2 47 3 18446744073709551615 6 inline 48 1 48 7 18446744073709551615 4 bool 48 8 48 12 18446744073709551615 6 Parser 48 13 48 19 3 2 :: 48 19 48 21 14 5 IsEof 48 21 48 26 14 1 ( 48 26 48 27 14 1 ) 48 27 48 28 14 1 { 49 1 49 2 18446744073709551615 6 return 50 2 50 8 18446744073709551615 4 Look 50 9 50 13 15 1 ( 50 13 50 14 15 1 ) 50 14 50 15 15 1 . 50 15 50 16 18446744073709551615 3 tag 50 16 50 19 40 2 == 50 20 50 22 18446744073709551615 3 Tag 50 23 50 26 18 2 :: 50 26 50 28 18446744073709551615 3 Eof 50 28 50 31 41 1 ; 50 31 50 32 18446744073709551615 1 } 51 1 51 2 18446744073709551615 6 inline 52 1 52 7 18446744073709551615 5 Token 52 8 52 13 10 1 & 52 13 52 14 15 6 Parser 52 15 52 21 3 2 :: 52 21 52 23 15 4 Look 52 23 52 27 15 1 ( 52 27 52 28 15 1 ) 52 28 52 29 15 1 { 53 1 53 2 18446744073709551615 6 return 54 2 54 8 18446744073709551615 6 tokens 54 9 54 15 5 1 . 54 15 54 16 42 2 at 54 16 54 18 42 1 ( 54 18 54 19 42 12 tokenPointer 54 19 54 31 6 1 ) 54 31 54 32 42 1 ; 54 32 54 33 18446744073709551615 1 } 55 1 55 2 18446744073709551615 6 inline 56 1 56 7 18446744073709551615 4 void 56 8 56 12 18446744073709551615 6 Parser 56 13 56 19 3 2 :: 56 19 56 21 16 4 Move 56 21 56 25 16 1 ( 56 25 56 26 16 1 ) 56 26 56 27 16 1 { 57 1 57 2 18446744073709551615 3 int 58 2 58 5 18446744073709551615 1 n 58 6 58 7 43 1 = 58 8 58 9 18446744073709551615 6 tokens 58 10 58 16 5 1 . 58 16 58 17 44 4 size 58 17 58 21 44 1 ( 58 21 58 22 44 1 ) 58 22 58 23 44 1 - 58 24 58 25 18446744073709551615 1 1 58 26 58 27 18446744073709551615 1 ; 58 27 58 28 18446744073709551615 2 if 59 2 59 4 18446744073709551615 1 ( 59 5 59 6 18446744073709551615 12 tokenPointer 59 6 59 18 6 1 < 59 19 59 20 18446744073709551615 1 n 59 21 59 22 43 1 ) 59 22 59 23 18446744073709551615 1 { 60 2 60 3 18446744073709551615 12 tokenPointer 61 3 61 15 6 2 ++ 61 15 61 17 18446744073709551615 1 ; 61 17 61 18 18446744073709551615 1 } 62 2 62 3 18446744073709551615 4 else 63 2 63 6 18446744073709551615 1 { 64 2 64 3 18446744073709551615 5 throw 65 3 65 8 18446744073709551615 15 SyntaxException 65 9 65 24 45 1 ( 65 24 65 25 45 4 Look 65 25 65 29 15 1 ( 65 29 65 30 15 1 ) 65 30 65 31 15 1 . 65 31 65 32 18446744073709551615 4 line 65 32 65 36 46 1 , 65 36 65 37 45 4 Look 65 38 65 42 15 1 ( 65 42 65 43 15 1 ) 65 43 65 44 15 1 . 65 44 65 45 18446744073709551615 6 column 65 45 65 51 47 1 , 65 51 65 52 45 17 L"unexpected EOF" 65 53 65 70 18446744073709551615 1 ) 65 70 65 71 45 1 ; 65 71 65 72 18446744073709551615 1 } 66 2 66 3 18446744073709551615 1 } 67 1 67 2 18446744073709551615 6 inline 68 1 68 7 18446744073709551615 4 void 68 8 68 12 18446744073709551615 6 Parser 68 13 68 19 3 2 :: 68 19 68 21 17 5 Match 68 21 68 26 17 1 ( 68 26 68 27 17 3 Tag 68 27 68 30 18 3 tag 68 31 68 34 48 1 ) 68 34 68 35 17 1 { 69 1 69 2 18446744073709551615 2 if 70 2 70 4 18446744073709551615 1 ( 70 5 70 6 18446744073709551615 4 Look 70 6 70 10 15 1 ( 70 10 70 11 15 1 ) 70 11 70 12 15 1 . 70 12 70 13 18446744073709551615 3 tag 70 13 70 16 40 2 == 70 17 70 19 18446744073709551615 3 tag 70 20 70 23 48 1 ) 70 23 70 24 18446744073709551615 1 { 71 2 71 3 18446744073709551615 4 Move 72 3 72 7 16 1 ( 72 7 72 8 16 1 ) 72 8 72 9 16 1 ; 72 9 72 10 18446744073709551615 1 } 73 2 73 3 18446744073709551615 4 else 74 2 74 6 18446744073709551615 1 { 75 2 75 3 18446744073709551615 5 throw 76 3 76 8 18446744073709551615 15 SyntaxException 76 9 76 24 45 1 ( 76 24 76 25 45 4 Look 76 25 76 29 15 1 ( 76 29 76 30 15 1 ) 76 30 76 31 15 1 . 76 31 76 32 18446744073709551615 4 line 76 32 76 36 46 1 , 76 36 76 37 45 4 Look 76 38 76 42 15 1 ( 76 42 76 43 15 1 ) 76 43 76 44 15 1 . 76 44 76 45 18446744073709551615 6 column 76 45 76 51 47 1 , 76 51 76 52 45 15 L"syntax error" 76 53 76 68 18446744073709551615 1 ) 76 68 76 69 45 1 ; 76 69 76 70 18446744073709551615 1 } 77 2 77 3 18446744073709551615 1 } 78 1 78 2 18446744073709551615 1 # 79 1 79 2 18446744073709551615 5 endif 79 2 79 7 18446744073709551615 13 // PARSER_HPP 79 8 79 21 18446744073709551615 0 0 49 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 6 string 49 1 3 0 6 vector 4 1 3 0 6 Parser 6 1 3 0 11 path:Parser 6 1 3 0 13 tokens:Parser 6 1 3 0 19 tokenPointer:Parser 20 1 3 0 18 string:__cxx11:std 10 1 3 0 72 19:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 72 19:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 6 Module 21 1 3 0 14 Program:Parser 21 1 3 0 12 IsEof:Parser 21 1 3 0 11 Look:Parser 21 1 3 0 11 Move:Parser 21 1 3 0 12 Match:Parser 5 1 3 0 3 Tag 10 1 3 0 72 27:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 36 1 3 0 6 ExpPtr 21 1 3 0 12 Block:Parser 21 1 3 0 9 If:Parser 21 1 3 0 12 While:Parser 21 1 3 0 21 DefineVariable:Parser 21 1 3 0 21 DefineFunction:Parser 21 1 3 0 13 Return:Parser 21 1 3 0 16 Statement:Parser 21 1 3 0 13 Assign:Parser 21 1 3 0 9 Or:Parser 21 1 3 0 10 And:Parser 21 1 3 0 15 Equality:Parser 21 1 3 0 15 Relation:Parser 21 1 3 0 11 Expr:Parser 21 1 3 0 11 Term:Parser 21 1 3 0 12 Unary:Parser 21 1 3 0 14 Postfix:Parser 21 1 3 0 13 Factor:Parser 4 1 3 0 4 Type 21 1 3 0 16 ParseType:Parser 6 1 3 0 9 tag:Token 7 1 3 0 7 Eof:Tag 21 1 3 0 13 at:vector:std 9 1 3 0 71 58:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 21 1 3 0 15 size:vector:std 4 1 3 0 15 SyntaxException 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 10 1 3 0 72 68:31:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 0 0 2 0 0 0 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Module.hpp 1529287222 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1529891901
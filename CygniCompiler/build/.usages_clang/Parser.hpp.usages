22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 472 0 0 0 1 # 1 1 1 2 18446744073709551615 6 ifndef 1 2 1 8 18446744073709551615 10 PARSER_HPP 1 9 1 19 18446744073709551615 1 # 2 1 2 2 18446744073709551615 6 define 2 2 2 8 18446744073709551615 10 PARSER_HPP 2 9 2 19 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 15 "Exception.hpp" 3 10 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 16 "Expression.hpp" 4 10 4 26 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 15 "Namespace.hpp" 5 10 5 25 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 11 "Token.hpp" 6 10 6 21 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 6 string 7 11 7 17 18446744073709551615 1 > 7 17 7 18 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 vector 8 11 8 17 18446744073709551615 1 > 8 17 8 18 18446744073709551615 5 using 9 1 9 6 18446744073709551615 3 std 9 7 9 10 0 2 :: 9 10 9 12 18446744073709551615 6 string 9 12 9 18 1 1 ; 9 18 9 19 18446744073709551615 5 using 10 1 10 6 18446744073709551615 3 std 10 7 10 10 0 2 :: 10 10 10 12 18446744073709551615 6 vector 10 12 10 18 2 1 ; 10 18 10 19 18446744073709551615 5 class 12 1 12 6 18446744073709551615 6 Parser 12 7 12 13 3 1 { 13 1 13 2 18446744073709551615 6 public 14 1 14 7 18446744073709551615 1 : 14 7 14 8 18446744073709551615 6 string 15 2 15 8 3 4 path 15 9 15 13 4 1 ; 15 13 15 14 18446744073709551615 6 vector 16 2 16 8 3 1 < 16 8 16 9 18446744073709551615 5 Token 16 9 16 14 3 1 > 16 14 16 15 18446744073709551615 1 & 16 15 16 16 18446744073709551615 6 tokens 16 17 16 23 5 1 ; 16 23 16 24 18446744073709551615 7 int32_t 17 2 17 9 3 12 tokenPointer 17 10 17 22 6 1 ; 17 22 17 23 18446744073709551615 6 Parser 19 2 19 8 3 1 ( 19 8 19 9 3 6 string 19 9 19 15 7 4 path 19 16 19 20 8 1 , 19 20 19 21 3 6 vector 19 22 19 28 9 1 < 19 28 19 29 18446744073709551615 5 Token 19 29 19 34 10 1 > 19 34 19 35 18446744073709551615 1 & 19 35 19 36 18446744073709551615 6 tokens 19 37 19 43 11 1 ) 19 43 19 44 3 1 ; 19 44 19 45 18446744073709551615 8 CodeFile 21 2 21 10 12 7 Program 21 11 21 18 13 1 ( 21 18 21 19 13 1 ) 21 19 21 20 13 1 ; 21 20 21 21 18446744073709551615 7 private 23 1 23 8 18446744073709551615 1 : 23 8 23 9 18446744073709551615 4 bool 24 2 24 6 18446744073709551615 5 IsEof 24 7 24 12 14 1 ( 24 12 24 13 14 1 ) 24 13 24 14 14 1 ; 24 14 24 15 18446744073709551615 5 Token 25 2 25 7 10 1 & 25 7 25 8 15 4 Look 25 9 25 13 15 1 ( 25 13 25 14 15 1 ) 25 14 25 15 15 1 ; 25 15 25 16 18446744073709551615 4 void 26 2 26 6 18446744073709551615 4 Move 26 7 26 11 16 1 ( 26 11 26 12 16 1 ) 26 12 26 13 16 1 ; 26 13 26 14 18446744073709551615 4 void 27 2 27 6 18446744073709551615 5 Match 27 7 27 12 17 1 ( 27 12 27 13 17 3 Tag 27 13 27 16 18 3 tag 27 17 27 20 19 1 ) 27 20 27 21 17 1 ; 27 21 27 22 18446744073709551615 7 wstring 28 2 28 9 20 15 ParseIdentifier 28 10 28 25 21 1 ( 28 25 28 26 21 1 ) 28 26 28 27 21 1 ; 28 27 28 28 18446744073709551615 7 wstring 29 2 29 9 20 18 ParseStringLiteral 29 10 29 28 22 1 ( 29 28 29 29 22 1 ) 29 29 29 30 22 1 ; 29 30 29 31 18446744073709551615 14 AccessModifier 30 2 30 16 23 7 ParseAM 30 17 30 24 24 1 ( 30 24 30 25 24 5 Token 30 25 30 30 10 1 & 30 30 30 31 18446744073709551615 5 token 30 32 30 37 25 1 ) 30 37 30 38 24 1 ; 30 38 30 39 18446744073709551615 6 Module 31 2 31 8 26 9 DefModule 31 9 31 18 27 1 ( 31 18 31 19 27 14 AccessModifier 31 19 31 33 23 8 modifier 31 34 31 42 28 1 ) 31 42 31 43 27 1 ; 31 43 31 44 18446744073709551615 5 Class 32 2 32 7 29 8 DefClass 32 8 32 16 30 1 ( 32 16 32 17 30 14 AccessModifier 32 17 32 31 23 8 modifier 32 32 32 40 31 1 ) 32 40 32 41 30 1 ; 32 41 32 42 18446744073709551615 8 Function 33 2 33 10 32 11 DefFunction 33 11 33 22 33 1 ( 33 22 33 23 33 14 AccessModifier 33 23 33 37 23 8 modifier 33 38 33 46 34 1 ) 33 46 33 47 33 1 ; 33 47 33 48 18446744073709551615 9 Parameter 34 2 34 11 35 14 ParseParameter 34 12 34 26 36 1 ( 34 26 34 27 36 1 ) 34 27 34 28 36 1 ; 34 28 34 29 18446744073709551615 13 LocalVariable 35 2 35 15 37 16 DefLocalVariable 35 16 35 32 38 1 ( 35 32 35 33 38 1 ) 35 33 35 34 38 1 ; 35 34 35 35 18446744073709551615 5 Field 36 2 36 7 39 8 DefField 36 8 36 16 40 1 ( 36 16 36 17 40 14 AccessModifier 36 17 36 31 23 8 modifier 36 32 36 40 41 1 ) 36 40 36 41 40 1 ; 36 41 36 42 18446744073709551615 14 NativeFunction 37 2 37 16 42 17 DefNativeFunction 37 17 37 34 43 1 ( 37 34 37 35 43 1 ) 37 35 37 36 43 1 ; 37 36 37 37 18446744073709551615 6 ExpPtr 39 2 39 8 44 5 Block 39 9 39 14 45 1 ( 39 14 39 15 45 1 ) 39 15 39 16 45 1 ; 39 16 39 17 18446744073709551615 6 ExpPtr 40 2 40 8 44 2 If 40 9 40 11 46 1 ( 40 11 40 12 46 1 ) 40 12 40 13 46 1 ; 40 13 40 14 18446744073709551615 6 ExpPtr 41 2 41 8 44 5 While 41 9 41 14 47 1 ( 41 14 41 15 47 1 ) 41 15 41 16 47 1 ; 41 16 41 17 18446744073709551615 6 ExpPtr 42 2 42 8 44 6 Return 42 9 42 15 48 1 ( 42 15 42 16 48 1 ) 42 16 42 17 48 1 ; 42 17 42 18 18446744073709551615 6 ExpPtr 43 2 43 8 44 9 Statement 43 9 43 18 49 1 ( 43 18 43 19 49 1 ) 43 19 43 20 49 1 ; 43 20 43 21 18446744073709551615 6 ExpPtr 44 2 44 8 44 6 Assign 44 9 44 15 50 1 ( 44 15 44 16 50 1 ) 44 16 44 17 50 1 ; 44 17 44 18 18446744073709551615 6 ExpPtr 45 2 45 8 44 2 Or 45 9 45 11 51 1 ( 45 11 45 12 51 1 ) 45 12 45 13 51 1 ; 45 13 45 14 18446744073709551615 6 ExpPtr 46 2 46 8 44 3 And 46 9 46 12 52 1 ( 46 12 46 13 52 1 ) 46 13 46 14 52 1 ; 46 14 46 15 18446744073709551615 6 ExpPtr 47 2 47 8 44 8 Equality 47 9 47 17 53 1 ( 47 17 47 18 53 1 ) 47 18 47 19 53 1 ; 47 19 47 20 18446744073709551615 6 ExpPtr 48 2 48 8 44 8 Relation 48 9 48 17 54 1 ( 48 17 48 18 54 1 ) 48 18 48 19 54 1 ; 48 19 48 20 18446744073709551615 6 ExpPtr 49 2 49 8 44 4 Expr 49 9 49 13 55 1 ( 49 13 49 14 55 1 ) 49 14 49 15 55 1 ; 49 15 49 16 18446744073709551615 6 ExpPtr 50 2 50 8 44 4 Term 50 9 50 13 56 1 ( 50 13 50 14 56 1 ) 50 14 50 15 56 1 ; 50 15 50 16 18446744073709551615 6 ExpPtr 51 2 51 8 44 5 Unary 51 9 51 14 57 1 ( 51 14 51 15 57 1 ) 51 15 51 16 57 1 ; 51 16 51 17 18446744073709551615 6 ExpPtr 52 2 52 8 44 7 Postfix 52 9 52 16 58 1 ( 52 16 52 17 58 1 ) 52 17 52 18 58 1 ; 52 18 52 19 18446744073709551615 6 ExpPtr 53 2 53 8 44 6 Factor 53 9 53 15 59 1 ( 53 15 53 16 59 1 ) 53 16 53 17 59 1 ; 53 17 53 18 18446744073709551615 4 Type 54 2 54 6 60 9 ParseType 54 7 54 16 61 1 ( 54 16 54 17 61 1 ) 54 17 54 18 61 1 ; 54 18 54 19 18446744073709551615 8 TypeKind 55 2 55 10 62 13 ParseTypeKind 55 11 55 24 63 1 ( 55 24 55 25 63 7 wstring 55 25 55 32 20 4 text 55 33 55 37 64 1 ) 55 37 55 38 63 1 ; 55 38 55 39 18446744073709551615 6 vector 56 2 56 8 9 1 < 56 8 56 9 65 7 wstring 56 9 56 16 20 1 > 56 16 56 17 65 14 ParseNamespace 56 18 56 32 65 1 ( 56 32 56 33 65 1 ) 56 33 56 34 65 1 ; 56 34 56 35 18446744073709551615 1 } 57 1 57 2 18446744073709551615 1 ; 57 2 57 3 18446744073709551615 6 inline 58 1 58 7 18446744073709551615 4 bool 58 8 58 12 18446744073709551615 6 Parser 58 13 58 19 3 2 :: 58 19 58 21 14 5 IsEof 58 21 58 26 14 1 ( 58 26 58 27 14 1 ) 58 27 58 28 14 1 { 59 1 59 2 18446744073709551615 6 return 60 2 60 8 18446744073709551615 4 Look 60 9 60 13 15 1 ( 60 13 60 14 15 1 ) 60 14 60 15 15 1 . 60 15 60 16 18446744073709551615 3 tag 60 16 60 19 66 2 == 60 20 60 22 18446744073709551615 3 Tag 60 23 60 26 18 2 :: 60 26 60 28 18446744073709551615 3 Eof 60 28 60 31 67 1 ; 60 31 60 32 18446744073709551615 1 } 61 1 61 2 18446744073709551615 6 inline 62 1 62 7 18446744073709551615 5 Token 62 8 62 13 10 1 & 62 13 62 14 15 6 Parser 62 15 62 21 3 2 :: 62 21 62 23 15 4 Look 62 23 62 27 15 1 ( 62 27 62 28 15 1 ) 62 28 62 29 15 1 { 63 1 63 2 18446744073709551615 6 return 64 2 64 8 18446744073709551615 6 tokens 64 9 64 15 5 1 . 64 15 64 16 68 2 at 64 16 64 18 68 1 ( 64 18 64 19 68 12 tokenPointer 64 19 64 31 6 1 ) 64 31 64 32 68 1 ; 64 32 64 33 18446744073709551615 1 } 65 1 65 2 18446744073709551615 6 inline 66 1 66 7 18446744073709551615 4 void 66 8 66 12 18446744073709551615 6 Parser 66 13 66 19 3 2 :: 66 19 66 21 16 4 Move 66 21 66 25 16 1 ( 66 25 66 26 16 1 ) 66 26 66 27 16 1 { 67 1 67 2 18446744073709551615 7 int32_t 68 2 68 9 69 1 n 68 10 68 11 70 1 = 68 12 68 13 18446744073709551615 6 tokens 68 14 68 20 5 1 . 68 20 68 21 71 4 size 68 21 68 25 71 1 ( 68 25 68 26 71 1 ) 68 26 68 27 71 1 - 68 28 68 29 18446744073709551615 1 1 68 30 68 31 18446744073709551615 1 ; 68 31 68 32 18446744073709551615 2 if 69 2 69 4 18446744073709551615 1 ( 69 5 69 6 18446744073709551615 12 tokenPointer 69 6 69 18 6 1 < 69 19 69 20 18446744073709551615 1 n 69 21 69 22 70 1 ) 69 22 69 23 18446744073709551615 1 { 70 2 70 3 18446744073709551615 12 tokenPointer 71 3 71 15 6 2 ++ 71 15 71 17 18446744073709551615 1 ; 71 17 71 18 18446744073709551615 1 } 72 2 72 3 18446744073709551615 4 else 73 2 73 6 18446744073709551615 1 { 74 2 74 3 18446744073709551615 5 throw 75 3 75 8 18446744073709551615 15 SyntaxException 75 9 75 24 72 1 ( 75 24 75 25 72 4 Look 75 25 75 29 15 1 ( 75 29 75 30 15 1 ) 75 30 75 31 15 1 . 75 31 75 32 18446744073709551615 4 line 75 32 75 36 73 1 , 75 36 75 37 72 4 Look 75 38 75 42 15 1 ( 75 42 75 43 15 1 ) 75 43 75 44 15 1 . 75 44 75 45 18446744073709551615 6 column 75 45 75 51 74 1 , 75 51 75 52 72 17 L"unexpected EOF" 75 53 75 70 18446744073709551615 1 ) 75 70 75 71 72 1 ; 75 71 75 72 18446744073709551615 1 } 76 2 76 3 18446744073709551615 1 } 77 1 77 2 18446744073709551615 6 inline 78 1 78 7 18446744073709551615 4 void 78 8 78 12 18446744073709551615 6 Parser 78 13 78 19 3 2 :: 78 19 78 21 17 5 Match 78 21 78 26 17 1 ( 78 26 78 27 17 3 Tag 78 27 78 30 18 3 tag 78 31 78 34 75 1 ) 78 34 78 35 17 1 { 79 1 79 2 18446744073709551615 2 if 80 2 80 4 18446744073709551615 1 ( 80 5 80 6 18446744073709551615 4 Look 80 6 80 10 15 1 ( 80 10 80 11 15 1 ) 80 11 80 12 15 1 . 80 12 80 13 18446744073709551615 3 tag 80 13 80 16 66 2 == 80 17 80 19 18446744073709551615 3 tag 80 20 80 23 75 1 ) 80 23 80 24 18446744073709551615 1 { 81 2 81 3 18446744073709551615 4 Move 82 3 82 7 16 1 ( 82 7 82 8 16 1 ) 82 8 82 9 16 1 ; 82 9 82 10 18446744073709551615 1 } 83 2 83 3 18446744073709551615 4 else 84 2 84 6 18446744073709551615 1 { 85 2 85 3 18446744073709551615 5 throw 86 3 86 8 18446744073709551615 15 SyntaxException 86 9 86 24 72 1 ( 86 24 86 25 72 4 Look 86 25 86 29 15 1 ( 86 29 86 30 15 1 ) 86 30 86 31 15 1 . 86 31 86 32 18446744073709551615 4 line 86 32 86 36 73 1 , 86 36 86 37 72 4 Look 86 38 86 42 15 1 ( 86 42 86 43 15 1 ) 86 43 86 44 15 1 . 86 44 86 45 18446744073709551615 6 column 86 45 86 51 74 1 , 86 51 86 52 72 15 L"syntax error" 86 53 86 68 18446744073709551615 1 ) 86 68 86 69 72 1 ; 86 69 86 70 18446744073709551615 1 } 87 2 87 3 18446744073709551615 1 } 88 1 88 2 18446744073709551615 6 inline 89 1 89 7 18446744073709551615 7 wstring 89 8 89 15 20 6 Parser 89 16 89 22 3 2 :: 89 22 89 24 21 15 ParseIdentifier 89 24 89 39 21 1 ( 89 39 89 40 21 1 ) 89 40 89 41 21 1 { 90 1 90 2 18446744073709551615 5 Token 91 2 91 7 10 1 & 91 7 91 8 18446744073709551615 5 token 91 9 91 14 76 1 = 91 15 91 16 18446744073709551615 4 Look 91 17 91 21 15 1 ( 91 21 91 22 15 1 ) 91 22 91 23 15 1 ; 91 23 91 24 18446744073709551615 5 Match 92 2 92 7 17 1 ( 92 7 92 8 17 3 Tag 92 8 92 11 18 2 :: 92 11 92 13 18446744073709551615 10 Identifier 92 13 92 23 77 1 ) 92 23 92 24 17 1 ; 92 24 92 25 18446744073709551615 6 return 93 2 93 8 18446744073709551615 3 std 93 9 93 12 0 2 :: 93 12 93 14 78 8 any_cast 93 14 93 22 78 1 < 93 22 93 23 78 7 wstring 93 23 93 30 20 1 > 93 30 93 31 78 1 ( 93 31 93 32 78 5 token 93 32 93 37 76 1 . 93 37 93 38 18446744073709551615 5 value 93 38 93 43 79 1 ) 93 43 93 44 78 1 ; 93 44 93 45 18446744073709551615 1 } 94 1 94 2 18446744073709551615 6 inline 95 1 95 7 18446744073709551615 7 wstring 95 8 95 15 20 6 Parser 95 16 95 22 3 2 :: 95 22 95 24 22 18 ParseStringLiteral 95 24 95 42 22 1 ( 95 42 95 43 22 1 ) 95 43 95 44 22 1 { 96 1 96 2 18446744073709551615 5 Token 97 2 97 7 10 1 & 97 7 97 8 18446744073709551615 5 token 97 9 97 14 80 1 = 97 15 97 16 18446744073709551615 4 Look 97 17 97 21 15 1 ( 97 21 97 22 15 1 ) 97 22 97 23 15 1 ; 97 23 97 24 18446744073709551615 5 Match 98 2 98 7 17 1 ( 98 7 98 8 17 3 Tag 98 8 98 11 18 2 :: 98 11 98 13 18446744073709551615 6 String 98 13 98 19 81 1 ) 98 19 98 20 17 1 ; 98 20 98 21 18446744073709551615 6 return 99 2 99 8 18446744073709551615 3 std 99 9 99 12 0 2 :: 99 12 99 14 78 8 any_cast 99 14 99 22 78 1 < 99 22 99 23 78 7 wstring 99 23 99 30 20 1 > 99 30 99 31 78 1 ( 99 31 99 32 78 5 token 99 32 99 37 80 1 . 99 37 99 38 18446744073709551615 5 value 99 38 99 43 79 1 ) 99 43 99 44 78 1 ; 99 44 99 45 18446744073709551615 1 } 100 1 100 2 18446744073709551615 1 # 101 1 101 2 18446744073709551615 5 endif 101 2 101 7 18446744073709551615 13 // PARSER_HPP 101 8 101 21 18446744073709551615 0 0 82 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 6 string 49 1 3 0 6 vector 4 1 3 0 6 Parser 6 1 3 0 11 path:Parser 6 1 3 0 13 tokens:Parser 6 1 3 0 19 tokenPointer:Parser 20 1 3 0 18 string:__cxx11:std 10 1 3 0 72 19:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 72 19:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 8 CodeFile 21 1 3 0 14 Program:Parser 21 1 3 0 12 IsEof:Parser 21 1 3 0 11 Look:Parser 21 1 3 0 11 Move:Parser 21 1 3 0 12 Match:Parser 5 1 3 0 3 Tag 10 1 3 0 72 27:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 20 1 3 0 19 wstring:__cxx11:std 21 1 3 0 22 ParseIdentifier:Parser 21 1 3 0 25 ParseStringLiteral:Parser 5 1 3 0 14 AccessModifier 21 1 3 0 14 ParseAM:Parser 10 1 3 0 72 30:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 6 Module 21 1 3 0 16 DefModule:Parser 10 1 3 0 72 31:34:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 5 Class 21 1 3 0 15 DefClass:Parser 10 1 3 0 72 32:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 8 Function 21 1 3 0 18 DefFunction:Parser 10 1 3 0 72 33:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 9 Parameter 21 1 3 0 21 ParseParameter:Parser 4 1 3 0 13 LocalVariable 21 1 3 0 23 DefLocalVariable:Parser 4 1 3 0 5 Field 21 1 3 0 15 DefField:Parser 10 1 3 0 72 36:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 4 1 3 0 14 NativeFunction 21 1 3 0 24 DefNativeFunction:Parser 36 1 3 0 6 ExpPtr 21 1 3 0 12 Block:Parser 21 1 3 0 9 If:Parser 21 1 3 0 12 While:Parser 21 1 3 0 13 Return:Parser 21 1 3 0 16 Statement:Parser 21 1 3 0 13 Assign:Parser 21 1 3 0 9 Or:Parser 21 1 3 0 10 And:Parser 21 1 3 0 15 Equality:Parser 21 1 3 0 15 Relation:Parser 21 1 3 0 11 Expr:Parser 21 1 3 0 11 Term:Parser 21 1 3 0 12 Unary:Parser 21 1 3 0 14 Postfix:Parser 21 1 3 0 13 Factor:Parser 4 1 3 0 4 Type 21 1 3 0 16 ParseType:Parser 5 1 3 0 8 TypeKind 21 1 3 0 20 ParseTypeKind:Parser 10 1 3 0 72 55:33:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 21 1 3 0 21 ParseNamespace:Parser 6 1 3 0 9 tag:Token 7 1 3 0 7 Eof:Tag 21 1 3 0 13 at:vector:std 20 1 3 0 7 int32_t 9 1 3 0 72 68:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 21 1 3 0 15 size:vector:std 4 1 3 0 15 SyntaxException 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 10 1 3 0 72 78:31:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 9 1 3 0 71 91:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 7 1 3 0 14 Identifier:Tag 8 1 3 0 12 any_cast:std 6 1 3 0 11 value:Token 9 1 3 0 71 97:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 7 1 3 0 10 String:Tag 0 0 1 0 0 0 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1531483774
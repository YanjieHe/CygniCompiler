22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 536 0 0 0 1 # 1 1 1 2 18446744073709551615 6 ifndef 1 2 1 8 18446744073709551615 9 TOKEN_HPP 1 9 1 18 18446744073709551615 1 # 2 1 2 2 18446744073709551615 6 define 2 2 2 8 18446744073709551615 9 TOKEN_HPP 2 9 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 3 any 3 11 3 14 18446744073709551615 1 > 3 14 3 15 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 13 unordered_map 5 11 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 3 any 6 12 6 15 1 1 ; 6 15 6 16 18446744073709551615 5 using 7 1 7 6 18446744073709551615 3 std 7 7 7 10 0 2 :: 7 10 7 12 18446744073709551615 13 unordered_map 7 12 7 25 2 1 ; 7 25 7 26 18446744073709551615 5 using 8 1 8 6 18446744073709551615 3 std 8 7 8 10 0 2 :: 8 10 8 12 18446744073709551615 7 wstring 8 12 8 19 3 1 ; 8 19 8 20 18446744073709551615 4 enum 9 1 9 5 18446744073709551615 5 class 9 6 9 11 18446744073709551615 3 Tag 9 12 9 15 4 1 { 10 1 10 2 18446744073709551615 3 Eof 11 2 11 5 5 1 , 11 5 11 6 18446744073709551615 3 Int 12 2 12 5 6 1 , 12 5 12 6 18446744073709551615 4 Long 13 2 13 6 7 1 , 13 6 13 7 18446744073709551615 5 Float 14 2 14 7 8 1 , 14 7 14 8 18446744073709551615 6 Double 15 2 15 8 9 1 , 15 8 15 9 18446744073709551615 4 Char 16 2 16 6 10 1 , 16 6 16 7 18446744073709551615 6 String 17 2 17 8 11 1 , 17 8 17 9 18446744073709551615 10 Identifier 18 2 18 12 12 1 , 18 12 18 13 18446744073709551615 4 True 19 2 19 6 13 1 , 19 6 19 7 18446744073709551615 5 False 20 2 20 7 14 1 , 20 7 20 8 18446744073709551615 3 Add 22 2 22 5 15 1 , 22 5 22 6 18446744073709551615 8 Subtract 23 2 23 10 16 1 , 23 10 23 11 18446744073709551615 8 Multiply 24 2 24 10 17 1 , 24 10 24 11 18446744073709551615 6 Divide 25 2 25 8 18 1 , 25 8 25 9 18446744073709551615 6 Modulo 26 2 26 8 19 1 , 26 8 26 9 18446744073709551615 5 Equal 28 2 28 7 20 1 , 28 7 28 8 18446744073709551615 8 NotEqual 29 2 29 10 21 1 , 29 10 29 11 18446744073709551615 11 GreaterThan 30 2 30 13 22 1 , 30 13 30 14 18446744073709551615 18 GreaterThanOrEqual 31 2 31 20 23 1 , 31 20 31 21 18446744073709551615 8 LessThan 32 2 32 10 24 1 , 32 10 32 11 18446744073709551615 15 LessThanOrEqual 33 2 33 17 25 1 , 33 17 33 18 18446744073709551615 3 And 35 2 35 5 26 1 , 35 5 35 6 18446744073709551615 2 Or 36 2 36 4 27 1 , 36 4 36 5 18446744073709551615 3 Not 37 2 37 5 28 1 , 37 5 37 6 18446744073709551615 6 DefVar 39 2 39 8 29 1 , 39 8 39 9 18446744073709551615 6 DefFun 40 2 40 8 30 1 , 40 8 40 9 18446744073709551615 6 Assign 41 2 41 8 31 1 , 41 8 41 9 18446744073709551615 9 LeftBrace 43 2 43 11 32 1 , 43 11 43 12 18446744073709551615 10 RightBrace 44 2 44 12 33 1 , 44 12 44 13 18446744073709551615 11 LeftBracket 45 2 45 13 34 1 , 45 13 45 14 18446744073709551615 12 RightBracket 46 2 46 14 35 1 , 46 14 46 15 18446744073709551615 15 LeftParenthesis 47 2 47 17 36 1 , 47 17 47 18 18446744073709551615 16 RightParenthesis 48 2 48 18 37 1 , 48 18 48 19 18446744073709551615 3 Dot 50 2 50 5 38 1 , 50 5 50 6 18446744073709551615 5 Comma 51 2 51 7 39 1 , 51 7 51 8 18446744073709551615 9 Semicolon 52 2 52 11 40 1 , 52 11 52 12 18446744073709551615 5 Colon 53 2 53 7 41 1 , 53 7 53 8 18446744073709551615 2 If 55 2 55 4 42 1 , 55 4 55 5 18446744073709551615 4 Else 56 2 56 6 43 1 , 56 6 56 7 18446744073709551615 5 While 57 2 57 7 44 1 , 57 7 57 8 18446744073709551615 3 For 59 2 59 5 45 1 , 59 5 59 6 18446744073709551615 5 Break 60 2 60 7 46 1 , 60 7 60 8 18446744073709551615 6 Return 61 2 61 8 47 1 , 61 8 61 9 18446744073709551615 5 Class 63 2 63 7 48 1 , 63 7 63 8 18446744073709551615 6 Public 64 2 64 8 49 1 , 64 8 64 9 18446744073709551615 7 Private 65 2 65 9 50 1 , 65 9 65 10 18446744073709551615 9 Protected 66 2 66 11 51 1 } 67 1 67 2 18446744073709551615 1 ; 67 2 67 3 18446744073709551615 5 class 69 1 69 6 18446744073709551615 5 Token 69 7 69 12 52 1 { 70 1 70 2 18446744073709551615 6 public 71 1 71 7 18446744073709551615 1 : 71 7 71 8 18446744073709551615 7 int32_t 72 2 72 9 53 4 line 72 10 72 14 54 1 ; 72 14 72 15 18446744073709551615 7 int32_t 73 2 73 9 53 6 column 73 10 73 16 55 1 ; 73 16 73 17 18446744073709551615 3 Tag 74 2 74 5 4 3 tag 74 6 74 9 56 1 ; 74 9 74 10 18446744073709551615 3 any 75 2 75 5 57 5 value 75 6 75 11 58 1 ; 75 11 75 12 18446744073709551615 5 Token 76 2 76 7 52 1 ( 76 7 76 8 52 7 int32_t 76 8 76 15 53 4 line 76 16 76 20 59 1 , 76 20 76 21 52 7 int32_t 76 22 76 29 53 6 column 76 30 76 36 60 1 , 76 36 76 37 52 3 Tag 76 38 76 41 4 3 tag 76 42 76 45 61 1 , 76 45 76 46 52 3 any 76 47 76 50 57 5 value 76 51 76 56 62 1 ) 76 56 76 57 52 1 ; 76 57 76 58 18446744073709551615 6 static 77 2 77 8 18446744073709551615 5 Token 77 9 77 14 52 8 FromName 77 15 77 23 63 1 ( 77 23 77 24 63 7 int32_t 77 24 77 31 53 4 line 77 32 77 36 64 1 , 77 36 77 37 63 7 int32_t 77 38 77 45 53 6 column 77 46 77 52 65 1 , 77 52 77 53 63 7 wstring 77 54 77 61 66 4 name 77 62 77 66 67 1 ) 77 66 77 67 63 1 ; 77 67 77 68 18446744073709551615 6 static 78 2 78 8 18446744073709551615 5 Token 78 9 78 14 52 11 FromInteger 78 15 78 26 68 1 ( 78 26 78 27 68 7 int32_t 78 27 78 34 53 4 line 78 35 78 39 69 1 , 78 39 78 40 68 7 int32_t 78 41 78 48 53 6 column 78 49 78 55 70 1 , 78 55 78 56 68 7 wstring 78 57 78 64 66 4 text 78 65 78 69 71 1 ) 78 69 78 70 68 1 ; 78 70 78 71 18446744073709551615 6 static 79 2 79 8 18446744073709551615 5 Token 79 9 79 14 52 9 FromFloat 79 15 79 24 72 1 ( 79 24 79 25 72 7 int32_t 79 25 79 32 53 4 line 79 33 79 37 73 1 , 79 37 79 38 72 7 int32_t 79 39 79 46 53 6 column 79 47 79 53 74 1 , 79 53 79 54 72 7 wstring 79 55 79 62 66 4 text 79 63 79 67 75 1 ) 79 67 79 68 72 1 ; 79 68 79 69 18446744073709551615 6 static 80 2 80 8 18446744073709551615 5 Token 80 9 80 14 52 12 FromOperator 80 15 80 27 76 1 ( 80 27 80 28 76 7 int32_t 80 28 80 35 53 4 line 80 36 80 40 77 1 , 80 40 80 41 76 7 int32_t 80 42 80 49 53 6 column 80 50 80 56 78 1 , 80 56 80 57 76 7 wstring 80 58 80 65 66 4 text 80 66 80 70 79 1 ) 80 70 80 71 76 1 ; 80 71 80 72 18446744073709551615 1 } 81 1 81 2 18446744073709551615 1 ; 81 2 81 3 18446744073709551615 4 bool 82 1 82 5 18446744073709551615 8 operator 82 6 82 14 80 2 == 82 14 82 16 80 1 ( 82 16 82 17 80 5 const 82 17 82 22 18446744073709551615 5 Token 82 23 82 28 52 1 & 82 28 82 29 18446744073709551615 1 x 82 30 82 31 81 1 , 82 31 82 32 80 5 const 82 33 82 38 18446744073709551615 5 Token 82 39 82 44 52 1 & 82 44 82 45 18446744073709551615 1 y 82 46 82 47 82 1 ) 82 47 82 48 80 1 ; 82 48 82 49 18446744073709551615 6 static 83 1 83 7 18446744073709551615 13 unordered_map 83 8 83 21 83 1 < 83 21 83 22 18446744073709551615 7 wstring 83 22 83 29 66 1 , 83 29 83 30 18446744073709551615 3 Tag 83 31 83 34 4 1 > 83 34 83 35 18446744073709551615 8 keywords 83 36 83 44 84 1 = 83 45 83 46 18446744073709551615 1 { 83 47 83 48 18446744073709551615 1 { 84 2 84 3 18446744073709551615 7 L"true" 84 3 84 10 18446744073709551615 1 , 84 10 84 11 18446744073709551615 3 Tag 84 12 84 15 4 2 :: 84 15 84 17 18446744073709551615 4 True 84 17 84 21 13 1 } 84 21 84 22 18446744073709551615 1 , 84 22 84 23 18446744073709551615 1 { 84 26 84 27 18446744073709551615 8 L"false" 84 27 84 35 18446744073709551615 1 , 84 35 84 36 18446744073709551615 3 Tag 84 37 84 40 4 2 :: 84 40 84 42 18446744073709551615 5 False 84 42 84 47 14 1 } 84 47 84 48 18446744073709551615 1 , 84 48 84 49 18446744073709551615 1 { 84 51 84 52 18446744073709551615 6 L"var" 84 52 84 58 18446744073709551615 1 , 84 58 84 59 18446744073709551615 3 Tag 84 60 84 63 4 2 :: 84 63 84 65 18446744073709551615 6 DefVar 84 65 84 71 29 1 } 84 71 84 72 18446744073709551615 1 , 84 72 84 73 18446744073709551615 1 { 85 2 85 3 18446744073709551615 6 L"fun" 85 3 85 9 18446744073709551615 1 , 85 9 85 10 18446744073709551615 3 Tag 85 11 85 14 4 2 :: 85 14 85 16 18446744073709551615 6 DefFun 85 16 85 22 30 1 } 85 22 85 23 18446744073709551615 1 , 85 23 85 24 18446744073709551615 1 { 85 26 85 27 18446744073709551615 6 L"and" 85 27 85 33 18446744073709551615 1 , 85 33 85 34 18446744073709551615 3 Tag 85 35 85 38 4 2 :: 85 38 85 40 18446744073709551615 3 And 85 40 85 43 26 1 } 85 43 85 44 18446744073709551615 1 , 85 44 85 45 18446744073709551615 1 { 85 48 85 49 18446744073709551615 5 L"or" 85 49 85 54 18446744073709551615 1 , 85 54 85 55 18446744073709551615 3 Tag 85 56 85 59 4 2 :: 85 59 85 61 18446744073709551615 2 Or 85 61 85 63 27 1 } 85 63 85 64 18446744073709551615 1 , 85 64 85 65 18446744073709551615 1 { 86 2 86 3 18446744073709551615 6 L"not" 86 3 86 9 18446744073709551615 1 , 86 9 86 10 18446744073709551615 3 Tag 86 11 86 14 4 2 :: 86 14 86 16 18446744073709551615 3 Not 86 16 86 19 28 1 } 86 19 86 20 18446744073709551615 1 , 86 20 86 21 18446744073709551615 1 { 86 23 86 24 18446744073709551615 5 L"if" 86 24 86 29 18446744073709551615 1 , 86 29 86 30 18446744073709551615 3 Tag 86 31 86 34 4 2 :: 86 34 86 36 18446744073709551615 2 If 86 36 86 38 42 1 } 86 38 86 39 18446744073709551615 1 , 86 39 86 40 18446744073709551615 1 { 86 43 86 44 18446744073709551615 7 L"else" 86 44 86 51 18446744073709551615 1 , 86 51 86 52 18446744073709551615 3 Tag 86 53 86 56 4 2 :: 86 56 86 58 18446744073709551615 4 Else 86 58 86 62 43 1 } 86 62 86 63 18446744073709551615 1 , 86 63 86 64 18446744073709551615 1 { 87 2 87 3 18446744073709551615 8 L"while" 87 3 87 11 18446744073709551615 1 , 87 11 87 12 18446744073709551615 3 Tag 87 13 87 16 4 2 :: 87 16 87 18 18446744073709551615 5 While 87 18 87 23 44 1 } 87 23 87 24 18446744073709551615 1 , 87 24 87 25 18446744073709551615 1 { 87 26 87 27 18446744073709551615 9 L"return" 87 27 87 36 18446744073709551615 1 , 87 36 87 37 18446744073709551615 3 Tag 87 38 87 41 4 2 :: 87 41 87 43 18446744073709551615 6 Return 87 43 87 49 47 1 } 87 49 87 50 18446744073709551615 1 } 87 50 87 51 18446744073709551615 1 ; 87 51 87 52 18446744073709551615 6 static 89 1 89 7 18446744073709551615 13 unordered_map 89 8 89 21 83 1 < 89 21 89 22 18446744073709551615 7 wstring 89 22 89 29 66 1 , 89 29 89 30 18446744073709551615 3 Tag 89 31 89 34 4 1 > 89 34 89 35 18446744073709551615 9 operators 89 36 89 45 85 1 = 89 46 89 47 18446744073709551615 1 { 89 48 89 49 18446744073709551615 1 { 90 2 90 3 18446744073709551615 4 L"+" 90 3 90 7 18446744073709551615 1 , 90 7 90 8 18446744073709551615 3 Tag 90 9 90 12 4 2 :: 90 12 90 14 18446744073709551615 3 Add 90 14 90 17 15 1 } 90 17 90 18 18446744073709551615 1 , 90 18 90 19 18446744073709551615 1 { 91 2 91 3 18446744073709551615 4 L"-" 91 3 91 7 18446744073709551615 1 , 91 7 91 8 18446744073709551615 3 Tag 91 9 91 12 4 2 :: 91 12 91 14 18446744073709551615 8 Subtract 91 14 91 22 16 1 } 91 22 91 23 18446744073709551615 1 , 91 23 91 24 18446744073709551615 1 { 92 2 92 3 18446744073709551615 4 L"*" 92 3 92 7 18446744073709551615 1 , 92 7 92 8 18446744073709551615 3 Tag 92 9 92 12 4 2 :: 92 12 92 14 18446744073709551615 8 Multiply 92 14 92 22 17 1 } 92 22 92 23 18446744073709551615 1 , 92 23 92 24 18446744073709551615 1 { 93 2 93 3 18446744073709551615 4 L"/" 93 3 93 7 18446744073709551615 1 , 93 7 93 8 18446744073709551615 3 Tag 93 9 93 12 4 2 :: 93 12 93 14 18446744073709551615 6 Divide 93 14 93 20 18 1 } 93 20 93 21 18446744073709551615 1 , 93 21 93 22 18446744073709551615 1 { 94 2 94 3 18446744073709551615 4 L"%" 94 3 94 7 18446744073709551615 1 , 94 7 94 8 18446744073709551615 3 Tag 94 9 94 12 4 2 :: 94 12 94 14 18446744073709551615 6 Modulo 94 14 94 20 19 1 } 94 20 94 21 18446744073709551615 1 , 94 21 94 22 18446744073709551615 1 { 95 2 95 3 18446744073709551615 4 L"=" 95 3 95 7 18446744073709551615 1 , 95 7 95 8 18446744073709551615 3 Tag 95 9 95 12 4 2 :: 95 12 95 14 18446744073709551615 6 Assign 95 14 95 20 31 1 } 95 20 95 21 18446744073709551615 1 , 95 21 95 22 18446744073709551615 1 { 96 2 96 3 18446744073709551615 5 L"==" 96 3 96 8 18446744073709551615 1 , 96 8 96 9 18446744073709551615 3 Tag 96 10 96 13 4 2 :: 96 13 96 15 18446744073709551615 5 Equal 96 15 96 20 20 1 } 96 20 96 21 18446744073709551615 1 , 96 21 96 22 18446744073709551615 1 { 97 2 97 3 18446744073709551615 5 L"!=" 97 3 97 8 18446744073709551615 1 , 97 8 97 9 18446744073709551615 3 Tag 97 10 97 13 4 2 :: 97 13 97 15 18446744073709551615 8 NotEqual 97 15 97 23 21 1 } 97 23 97 24 18446744073709551615 1 , 97 24 97 25 18446744073709551615 1 { 98 2 98 3 18446744073709551615 4 L">" 98 3 98 7 18446744073709551615 1 , 98 7 98 8 18446744073709551615 3 Tag 98 9 98 12 4 2 :: 98 12 98 14 18446744073709551615 11 GreaterThan 98 14 98 25 22 1 } 98 25 98 26 18446744073709551615 1 , 98 26 98 27 18446744073709551615 1 { 99 2 99 3 18446744073709551615 4 L"<" 99 3 99 7 18446744073709551615 1 , 99 7 99 8 18446744073709551615 3 Tag 99 9 99 12 4 2 :: 99 12 99 14 18446744073709551615 8 LessThan 99 14 99 22 24 1 } 99 22 99 23 18446744073709551615 1 , 99 23 99 24 18446744073709551615 1 { 100 2 100 3 18446744073709551615 5 L">=" 100 3 100 8 18446744073709551615 1 , 100 8 100 9 18446744073709551615 3 Tag 100 10 100 13 4 2 :: 100 13 100 15 18446744073709551615 18 GreaterThanOrEqual 100 15 100 33 23 1 } 100 33 100 34 18446744073709551615 1 , 100 34 100 35 18446744073709551615 1 { 101 2 101 3 18446744073709551615 5 L"<=" 101 3 101 8 18446744073709551615 1 , 101 8 101 9 18446744073709551615 3 Tag 101 10 101 13 4 2 :: 101 13 101 15 18446744073709551615 15 LessThanOrEqual 101 15 101 30 25 1 } 101 30 101 31 18446744073709551615 1 , 101 31 101 32 18446744073709551615 1 { 102 2 102 3 18446744073709551615 4 L"(" 102 3 102 7 18446744073709551615 1 , 102 7 102 8 18446744073709551615 3 Tag 102 9 102 12 4 2 :: 102 12 102 14 18446744073709551615 15 LeftParenthesis 102 14 102 29 36 1 } 102 29 102 30 18446744073709551615 1 , 102 30 102 31 18446744073709551615 1 { 103 2 103 3 18446744073709551615 4 L")" 103 3 103 7 18446744073709551615 1 , 103 7 103 8 18446744073709551615 3 Tag 103 9 103 12 4 2 :: 103 12 103 14 18446744073709551615 16 RightParenthesis 103 14 103 30 37 1 } 103 30 103 31 18446744073709551615 1 , 103 31 103 32 18446744073709551615 1 { 104 2 104 3 18446744073709551615 4 L"[" 104 3 104 7 18446744073709551615 1 , 104 7 104 8 18446744073709551615 3 Tag 104 9 104 12 4 2 :: 104 12 104 14 18446744073709551615 11 LeftBracket 104 14 104 25 34 1 } 104 25 104 26 18446744073709551615 1 , 104 26 104 27 18446744073709551615 1 { 105 2 105 3 18446744073709551615 4 L"]" 105 3 105 7 18446744073709551615 1 , 105 7 105 8 18446744073709551615 3 Tag 105 9 105 12 4 2 :: 105 12 105 14 18446744073709551615 12 RightBracket 105 14 105 26 35 1 } 105 26 105 27 18446744073709551615 1 , 105 27 105 28 18446744073709551615 1 { 106 2 106 3 18446744073709551615 4 L"{" 106 3 106 7 18446744073709551615 1 , 106 7 106 8 18446744073709551615 3 Tag 106 9 106 12 4 2 :: 106 12 106 14 18446744073709551615 9 LeftBrace 106 14 106 23 32 1 } 106 23 106 24 18446744073709551615 1 , 106 24 106 25 18446744073709551615 1 { 107 2 107 3 18446744073709551615 4 L"}" 107 3 107 7 18446744073709551615 1 , 107 7 107 8 18446744073709551615 3 Tag 107 9 107 12 4 2 :: 107 12 107 14 18446744073709551615 10 RightBrace 107 14 107 24 33 1 } 107 24 107 25 18446744073709551615 1 , 107 25 107 26 18446744073709551615 1 { 108 2 108 3 18446744073709551615 4 L"." 108 3 108 7 18446744073709551615 1 , 108 7 108 8 18446744073709551615 3 Tag 108 9 108 12 4 2 :: 108 12 108 14 18446744073709551615 3 Dot 108 14 108 17 38 1 } 108 17 108 18 18446744073709551615 1 , 108 18 108 19 18446744073709551615 1 { 109 2 109 3 18446744073709551615 4 L"," 109 3 109 7 18446744073709551615 1 , 109 7 109 8 18446744073709551615 3 Tag 109 9 109 12 4 2 :: 109 12 109 14 18446744073709551615 5 Comma 109 14 109 19 39 1 } 109 19 109 20 18446744073709551615 1 , 109 20 109 21 18446744073709551615 1 { 110 2 110 3 18446744073709551615 4 L";" 110 3 110 7 18446744073709551615 1 , 110 7 110 8 18446744073709551615 3 Tag 110 9 110 12 4 2 :: 110 12 110 14 18446744073709551615 9 Semicolon 110 14 110 23 40 1 } 110 23 110 24 18446744073709551615 1 , 110 24 110 25 18446744073709551615 1 { 111 2 111 3 18446744073709551615 4 L":" 111 3 111 7 18446744073709551615 1 , 111 7 111 8 18446744073709551615 3 Tag 111 9 111 12 4 2 :: 111 12 111 14 18446744073709551615 5 Colon 111 14 111 19 41 1 } 111 19 111 20 18446744073709551615 1 } 111 20 111 21 18446744073709551615 1 ; 111 21 111 22 18446744073709551615 7 wstring 113 1 113 8 66 16 TokenTagToString 113 9 113 25 86 1 ( 113 25 113 26 86 3 Tag 113 26 113 29 4 3 tag 113 30 113 33 87 1 ) 113 33 113 34 86 1 ; 113 34 113 35 18446744073709551615 1 # 114 1 114 2 18446744073709551615 5 endif 114 2 114 7 18446744073709551615 12 // TOKEN_HPP 114 8 114 20 18446744073709551615 0 0 88 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 3 any 49 1 3 0 13 unordered_map 49 1 3 0 7 wstring 5 1 3 0 3 Tag 7 1 3 0 7 Eof:Tag 7 1 3 0 7 Int:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Char:Tag 7 1 3 0 10 String:Tag 7 1 3 0 14 Identifier:Tag 7 1 3 0 8 True:Tag 7 1 3 0 9 False:Tag 7 1 3 0 7 Add:Tag 7 1 3 0 12 Subtract:Tag 7 1 3 0 12 Multiply:Tag 7 1 3 0 10 Divide:Tag 7 1 3 0 10 Modulo:Tag 7 1 3 0 9 Equal:Tag 7 1 3 0 12 NotEqual:Tag 7 1 3 0 15 GreaterThan:Tag 7 1 3 0 22 GreaterThanOrEqual:Tag 7 1 3 0 12 LessThan:Tag 7 1 3 0 19 LessThanOrEqual:Tag 7 1 3 0 7 And:Tag 7 1 3 0 6 Or:Tag 7 1 3 0 7 Not:Tag 7 1 3 0 10 DefVar:Tag 7 1 3 0 10 DefFun:Tag 7 1 3 0 10 Assign:Tag 7 1 3 0 13 LeftBrace:Tag 7 1 3 0 14 RightBrace:Tag 7 1 3 0 15 LeftBracket:Tag 7 1 3 0 16 RightBracket:Tag 7 1 3 0 19 LeftParenthesis:Tag 7 1 3 0 20 RightParenthesis:Tag 7 1 3 0 7 Dot:Tag 7 1 3 0 9 Comma:Tag 7 1 3 0 13 Semicolon:Tag 7 1 3 0 9 Colon:Tag 7 1 3 0 6 If:Tag 7 1 3 0 8 Else:Tag 7 1 3 0 9 While:Tag 7 1 3 0 7 For:Tag 7 1 3 0 9 Break:Tag 7 1 3 0 10 Return:Tag 7 1 3 0 9 Class:Tag 7 1 3 0 10 Public:Tag 7 1 3 0 11 Private:Tag 7 1 3 0 13 Protected:Tag 4 1 3 0 5 Token 20 1 3 0 7 int32_t 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 6 1 3 0 9 tag:Token 4 1 3 0 7 any:std 6 1 3 0 11 value:Token 10 1 3 0 71 76:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 76:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 76:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 76:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 14 FromName:Token 10 1 3 0 71 77:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 77:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 71 77:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 17 FromInteger:Token 10 1 3 0 71 78:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 78:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 78:65:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 15 FromFloat:Token 10 1 3 0 71 79:33:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 79:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 79:63:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 18 FromOperator:Token 10 1 3 0 71 80:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 80:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 80:66:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 8 1 3 0 10 operator== 10 1 3 0 71 82:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 31 1 3 0 17 unordered_map:std 9 1 3 0 8 keywords 9 1 3 0 9 operators 8 1 3 0 16 TokenTagToString 10 1 3 0 72 113:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 0 0 1 0 0 0 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1529314563
22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 619 0 0 0 1 # 1 1 1 2 18446744073709551615 6 ifndef 1 2 1 8 18446744073709551615 9 TOKEN_HPP 1 9 1 18 18446744073709551615 1 # 2 1 2 2 18446744073709551615 6 define 2 2 2 8 18446744073709551615 9 TOKEN_HPP 2 9 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 3 any 3 11 3 14 18446744073709551615 1 > 3 14 3 15 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 13 unordered_map 5 11 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 3 any 6 12 6 15 1 1 ; 6 15 6 16 18446744073709551615 5 using 7 1 7 6 18446744073709551615 3 std 7 7 7 10 0 2 :: 7 10 7 12 18446744073709551615 13 unordered_map 7 12 7 25 2 1 ; 7 25 7 26 18446744073709551615 5 using 8 1 8 6 18446744073709551615 3 std 8 7 8 10 0 2 :: 8 10 8 12 18446744073709551615 7 wstring 8 12 8 19 3 1 ; 8 19 8 20 18446744073709551615 4 enum 9 1 9 5 18446744073709551615 5 class 9 6 9 11 18446744073709551615 3 Tag 9 12 9 15 4 1 { 10 1 10 2 18446744073709551615 3 Eof 11 2 11 5 5 1 , 11 5 11 6 18446744073709551615 3 Int 12 2 12 5 6 1 , 12 5 12 6 18446744073709551615 4 Long 13 2 13 6 7 1 , 13 6 13 7 18446744073709551615 5 Float 14 2 14 7 8 1 , 14 7 14 8 18446744073709551615 6 Double 15 2 15 8 9 1 , 15 8 15 9 18446744073709551615 4 Char 16 2 16 6 10 1 , 16 6 16 7 18446744073709551615 6 String 17 2 17 8 11 1 , 17 8 17 9 18446744073709551615 10 Identifier 18 2 18 12 12 1 , 18 12 18 13 18446744073709551615 4 True 19 2 19 6 13 1 , 19 6 19 7 18446744073709551615 5 False 20 2 20 7 14 1 , 20 7 20 8 18446744073709551615 3 Add 22 2 22 5 15 1 , 22 5 22 6 18446744073709551615 8 Subtract 23 2 23 10 16 1 , 23 10 23 11 18446744073709551615 8 Multiply 24 2 24 10 17 1 , 24 10 24 11 18446744073709551615 6 Divide 25 2 25 8 18 1 , 25 8 25 9 18446744073709551615 6 Modulo 26 2 26 8 19 1 , 26 8 26 9 18446744073709551615 5 Equal 28 2 28 7 20 1 , 28 7 28 8 18446744073709551615 8 NotEqual 29 2 29 10 21 1 , 29 10 29 11 18446744073709551615 11 GreaterThan 30 2 30 13 22 1 , 30 13 30 14 18446744073709551615 18 GreaterThanOrEqual 31 2 31 20 23 1 , 31 20 31 21 18446744073709551615 8 LessThan 32 2 32 10 24 1 , 32 10 32 11 18446744073709551615 15 LessThanOrEqual 33 2 33 17 25 1 , 33 17 33 18 18446744073709551615 3 And 35 2 35 5 26 1 , 35 5 35 6 18446744073709551615 2 Or 36 2 36 4 27 1 , 36 4 36 5 18446744073709551615 3 Not 37 2 37 5 28 1 , 37 5 37 6 18446744073709551615 6 DefVar 39 2 39 8 29 1 , 39 8 39 9 18446744073709551615 6 DefFun 40 2 40 8 30 1 , 40 8 40 9 18446744073709551615 6 Assign 41 2 41 8 31 1 , 41 8 41 9 18446744073709551615 9 LeftBrace 43 2 43 11 32 1 , 43 11 43 12 18446744073709551615 10 RightBrace 44 2 44 12 33 1 , 44 12 44 13 18446744073709551615 11 LeftBracket 45 2 45 13 34 1 , 45 13 45 14 18446744073709551615 12 RightBracket 46 2 46 14 35 1 , 46 14 46 15 18446744073709551615 15 LeftParenthesis 47 2 47 17 36 1 , 47 17 47 18 18446744073709551615 16 RightParenthesis 48 2 48 18 37 1 , 48 18 48 19 18446744073709551615 3 Dot 50 2 50 5 38 1 , 50 5 50 6 18446744073709551615 5 Comma 51 2 51 7 39 1 , 51 7 51 8 18446744073709551615 9 Semicolon 52 2 52 11 40 1 , 52 11 52 12 18446744073709551615 5 Colon 53 2 53 7 41 1 , 53 7 53 8 18446744073709551615 2 If 55 2 55 4 42 1 , 55 4 55 5 18446744073709551615 4 Else 56 2 56 6 43 1 , 56 6 56 7 18446744073709551615 5 While 57 2 57 7 44 1 , 57 7 57 8 18446744073709551615 3 For 59 2 59 5 45 1 , 59 5 59 6 18446744073709551615 5 Break 60 2 60 7 46 1 , 60 7 60 8 18446744073709551615 6 Return 61 2 61 8 47 1 , 61 8 61 9 18446744073709551615 5 Class 63 2 63 7 48 1 , 63 7 63 8 18446744073709551615 6 Public 64 2 64 8 49 1 , 64 8 64 9 18446744073709551615 7 Private 65 2 65 9 50 1 , 65 9 65 10 18446744073709551615 9 Protected 66 2 66 11 51 1 , 66 11 66 12 18446744073709551615 8 Internal 67 2 67 10 52 1 , 67 10 67 11 18446744073709551615 6 Module 69 2 69 8 53 1 , 69 8 69 9 18446744073709551615 9 Namespace 70 2 70 11 54 1 , 70 11 70 12 18446744073709551615 4 Uses 71 2 71 6 55 1 , 71 6 71 7 18446744073709551615 6 Native 72 2 72 8 56 1 , 72 8 72 9 18446744073709551615 1 } 73 1 73 2 18446744073709551615 1 ; 73 2 73 3 18446744073709551615 5 class 75 1 75 6 18446744073709551615 5 Token 75 7 75 12 57 1 { 76 1 76 2 18446744073709551615 6 public 77 1 77 7 18446744073709551615 1 : 77 7 77 8 18446744073709551615 7 int32_t 78 2 78 9 58 4 line 78 10 78 14 59 1 ; 78 14 78 15 18446744073709551615 7 int32_t 79 2 79 9 58 6 column 79 10 79 16 60 1 ; 79 16 79 17 18446744073709551615 3 Tag 80 2 80 5 4 3 tag 80 6 80 9 61 1 ; 80 9 80 10 18446744073709551615 3 any 81 2 81 5 62 5 value 81 6 81 11 63 1 ; 81 11 81 12 18446744073709551615 5 Token 82 2 82 7 57 1 ( 82 7 82 8 57 7 int32_t 82 8 82 15 58 4 line 82 16 82 20 64 1 , 82 20 82 21 57 7 int32_t 82 22 82 29 58 6 column 82 30 82 36 65 1 , 82 36 82 37 57 3 Tag 82 38 82 41 4 3 tag 82 42 82 45 66 1 , 82 45 82 46 57 3 any 82 47 82 50 62 5 value 82 51 82 56 67 1 ) 82 56 82 57 57 1 ; 82 57 82 58 18446744073709551615 6 static 83 2 83 8 18446744073709551615 5 Token 83 9 83 14 57 8 FromName 83 15 83 23 68 1 ( 83 23 83 24 68 7 int32_t 83 24 83 31 58 4 line 83 32 83 36 69 1 , 83 36 83 37 68 7 int32_t 83 38 83 45 58 6 column 83 46 83 52 70 1 , 83 52 83 53 68 7 wstring 83 54 83 61 71 4 name 83 62 83 66 72 1 ) 83 66 83 67 68 1 ; 83 67 83 68 18446744073709551615 6 static 84 2 84 8 18446744073709551615 5 Token 84 9 84 14 57 11 FromInteger 84 15 84 26 73 1 ( 84 26 84 27 73 7 int32_t 84 27 84 34 58 4 line 84 35 84 39 74 1 , 84 39 84 40 73 7 int32_t 84 41 84 48 58 6 column 84 49 84 55 75 1 , 84 55 84 56 73 7 wstring 84 57 84 64 71 4 text 84 65 84 69 76 1 ) 84 69 84 70 73 1 ; 84 70 84 71 18446744073709551615 6 static 85 2 85 8 18446744073709551615 5 Token 85 9 85 14 57 9 FromFloat 85 15 85 24 77 1 ( 85 24 85 25 77 7 int32_t 85 25 85 32 58 4 line 85 33 85 37 78 1 , 85 37 85 38 77 7 int32_t 85 39 85 46 58 6 column 85 47 85 53 79 1 , 85 53 85 54 77 7 wstring 85 55 85 62 71 4 text 85 63 85 67 80 1 ) 85 67 85 68 77 1 ; 85 68 85 69 18446744073709551615 6 static 86 2 86 8 18446744073709551615 5 Token 86 9 86 14 57 12 FromOperator 86 15 86 27 81 1 ( 86 27 86 28 81 7 int32_t 86 28 86 35 58 4 line 86 36 86 40 82 1 , 86 40 86 41 81 7 int32_t 86 42 86 49 58 6 column 86 50 86 56 83 1 , 86 56 86 57 81 7 wstring 86 58 86 65 71 4 text 86 66 86 70 84 1 ) 86 70 86 71 81 1 ; 86 71 86 72 18446744073709551615 1 } 87 1 87 2 18446744073709551615 1 ; 87 2 87 3 18446744073709551615 4 bool 88 1 88 5 18446744073709551615 8 operator 88 6 88 14 85 2 == 88 14 88 16 85 1 ( 88 16 88 17 85 5 const 88 17 88 22 18446744073709551615 5 Token 88 23 88 28 57 1 & 88 28 88 29 18446744073709551615 1 x 88 30 88 31 86 1 , 88 31 88 32 85 5 const 88 33 88 38 18446744073709551615 5 Token 88 39 88 44 57 1 & 88 44 88 45 18446744073709551615 1 y 88 46 88 47 87 1 ) 88 47 88 48 85 1 ; 88 48 88 49 18446744073709551615 6 static 89 1 89 7 18446744073709551615 13 unordered_map 89 8 89 21 88 1 < 89 21 89 22 18446744073709551615 7 wstring 89 22 89 29 71 1 , 89 29 89 30 18446744073709551615 3 Tag 89 31 89 34 4 1 > 89 34 89 35 18446744073709551615 8 keywords 89 36 89 44 89 1 = 89 45 89 46 18446744073709551615 1 { 89 47 89 48 18446744073709551615 1 { 89 48 89 49 18446744073709551615 7 L"true" 89 49 89 56 18446744073709551615 1 , 89 56 89 57 18446744073709551615 3 Tag 89 58 89 61 4 2 :: 89 61 89 63 18446744073709551615 4 True 89 63 89 67 13 1 } 89 67 89 68 18446744073709551615 1 , 89 68 89 69 18446744073709551615 1 { 90 15 90 16 18446744073709551615 8 L"false" 90 16 90 24 18446744073709551615 1 , 90 24 90 25 18446744073709551615 3 Tag 90 26 90 29 4 2 :: 90 29 90 31 18446744073709551615 5 False 90 31 90 36 14 1 } 90 36 90 37 18446744073709551615 1 , 90 37 90 38 18446744073709551615 1 { 91 15 91 16 18446744073709551615 6 L"var" 91 16 91 22 18446744073709551615 1 , 91 22 91 23 18446744073709551615 3 Tag 91 24 91 27 4 2 :: 91 27 91 29 18446744073709551615 6 DefVar 91 29 91 35 29 1 } 91 35 91 36 18446744073709551615 1 , 91 36 91 37 18446744073709551615 1 { 92 15 92 16 18446744073709551615 6 L"fun" 92 16 92 22 18446744073709551615 1 , 92 22 92 23 18446744073709551615 3 Tag 92 24 92 27 4 2 :: 92 27 92 29 18446744073709551615 6 DefFun 92 29 92 35 30 1 } 92 35 92 36 18446744073709551615 1 , 92 36 92 37 18446744073709551615 1 { 93 15 93 16 18446744073709551615 6 L"and" 93 16 93 22 18446744073709551615 1 , 93 22 93 23 18446744073709551615 3 Tag 93 24 93 27 4 2 :: 93 27 93 29 18446744073709551615 3 And 93 29 93 32 26 1 } 93 32 93 33 18446744073709551615 1 , 93 33 93 34 18446744073709551615 1 { 94 15 94 16 18446744073709551615 5 L"or" 94 16 94 21 18446744073709551615 1 , 94 21 94 22 18446744073709551615 3 Tag 94 23 94 26 4 2 :: 94 26 94 28 18446744073709551615 2 Or 94 28 94 30 27 1 } 94 30 94 31 18446744073709551615 1 , 94 31 94 32 18446744073709551615 1 { 95 15 95 16 18446744073709551615 6 L"not" 95 16 95 22 18446744073709551615 1 , 95 22 95 23 18446744073709551615 3 Tag 95 24 95 27 4 2 :: 95 27 95 29 18446744073709551615 3 Not 95 29 95 32 28 1 } 95 32 95 33 18446744073709551615 1 , 95 33 95 34 18446744073709551615 1 { 96 15 96 16 18446744073709551615 5 L"if" 96 16 96 21 18446744073709551615 1 , 96 21 96 22 18446744073709551615 3 Tag 96 23 96 26 4 2 :: 96 26 96 28 18446744073709551615 2 If 96 28 96 30 42 1 } 96 30 96 31 18446744073709551615 1 , 96 31 96 32 18446744073709551615 1 { 97 15 97 16 18446744073709551615 7 L"else" 97 16 97 23 18446744073709551615 1 , 97 23 97 24 18446744073709551615 3 Tag 97 25 97 28 4 2 :: 97 28 97 30 18446744073709551615 4 Else 97 30 97 34 43 1 } 97 34 97 35 18446744073709551615 1 , 97 35 97 36 18446744073709551615 1 { 98 15 98 16 18446744073709551615 8 L"while" 98 16 98 24 18446744073709551615 1 , 98 24 98 25 18446744073709551615 3 Tag 98 26 98 29 4 2 :: 98 29 98 31 18446744073709551615 5 While 98 31 98 36 44 1 } 98 36 98 37 18446744073709551615 1 , 98 37 98 38 18446744073709551615 1 { 99 15 99 16 18446744073709551615 9 L"return" 99 16 99 25 18446744073709551615 1 , 99 25 99 26 18446744073709551615 3 Tag 99 27 99 30 4 2 :: 99 30 99 32 18446744073709551615 6 Return 99 32 99 38 47 1 } 99 38 99 39 18446744073709551615 1 , 99 39 99 40 18446744073709551615 1 { 100 15 100 16 18446744073709551615 8 L"class" 100 16 100 24 18446744073709551615 1 , 100 24 100 25 18446744073709551615 3 Tag 100 26 100 29 4 2 :: 100 29 100 31 18446744073709551615 5 Class 100 31 100 36 48 1 } 100 36 100 37 18446744073709551615 1 , 100 37 100 38 18446744073709551615 1 { 101 15 101 16 18446744073709551615 9 L"public" 101 16 101 25 18446744073709551615 1 , 101 25 101 26 18446744073709551615 3 Tag 101 27 101 30 4 2 :: 101 30 101 32 18446744073709551615 6 Public 101 32 101 38 49 1 } 101 38 101 39 18446744073709551615 1 , 101 39 101 40 18446744073709551615 1 { 102 15 102 16 18446744073709551615 10 L"private" 102 16 102 26 18446744073709551615 1 , 102 26 102 27 18446744073709551615 3 Tag 102 28 102 31 4 2 :: 102 31 102 33 18446744073709551615 7 Private 102 33 102 40 50 1 } 102 40 102 41 18446744073709551615 1 , 102 41 102 42 18446744073709551615 1 { 103 15 103 16 18446744073709551615 12 L"protected" 103 16 103 28 18446744073709551615 1 , 103 28 103 29 18446744073709551615 3 Tag 103 30 103 33 4 2 :: 103 33 103 35 18446744073709551615 9 Protected 103 35 103 44 51 1 } 103 44 103 45 18446744073709551615 1 , 103 45 103 46 18446744073709551615 1 { 104 15 104 16 18446744073709551615 11 L"internal" 104 16 104 27 18446744073709551615 1 , 104 27 104 28 18446744073709551615 3 Tag 104 29 104 32 4 2 :: 104 32 104 34 18446744073709551615 8 Internal 104 34 104 42 52 1 } 104 42 104 43 18446744073709551615 1 , 104 43 104 44 18446744073709551615 1 { 105 15 105 16 18446744073709551615 9 L"module" 105 16 105 25 18446744073709551615 1 , 105 25 105 26 18446744073709551615 3 Tag 105 27 105 30 4 2 :: 105 30 105 32 18446744073709551615 6 Module 105 32 105 38 53 1 } 105 38 105 39 18446744073709551615 1 , 105 39 105 40 18446744073709551615 1 { 106 15 106 16 18446744073709551615 12 L"namespace" 106 16 106 28 18446744073709551615 1 , 106 28 106 29 18446744073709551615 3 Tag 106 30 106 33 4 2 :: 106 33 106 35 18446744073709551615 9 Namespace 106 35 106 44 54 1 } 106 44 106 45 18446744073709551615 1 , 106 45 106 46 18446744073709551615 1 { 107 15 107 16 18446744073709551615 7 L"uses" 107 16 107 23 18446744073709551615 1 , 107 23 107 24 18446744073709551615 3 Tag 107 25 107 28 4 2 :: 107 28 107 30 18446744073709551615 4 Uses 107 30 107 34 55 1 } 107 34 107 35 18446744073709551615 1 , 107 35 107 36 18446744073709551615 1 { 108 15 108 16 18446744073709551615 9 L"native" 108 16 108 25 18446744073709551615 1 , 108 25 108 26 18446744073709551615 3 Tag 108 27 108 30 4 2 :: 108 30 108 32 18446744073709551615 6 Native 108 32 108 38 56 1 } 108 38 108 39 18446744073709551615 1 } 108 39 108 40 18446744073709551615 1 ; 108 40 108 41 18446744073709551615 6 static 110 1 110 7 18446744073709551615 13 unordered_map 110 8 110 21 88 1 < 110 21 110 22 18446744073709551615 7 wstring 110 22 110 29 71 1 , 110 29 110 30 18446744073709551615 3 Tag 110 31 110 34 4 1 > 110 34 110 35 18446744073709551615 9 operators 110 36 110 45 90 1 = 110 46 110 47 18446744073709551615 1 { 110 48 110 49 18446744073709551615 1 { 111 2 111 3 18446744073709551615 4 L"+" 111 3 111 7 18446744073709551615 1 , 111 7 111 8 18446744073709551615 3 Tag 111 9 111 12 4 2 :: 111 12 111 14 18446744073709551615 3 Add 111 14 111 17 15 1 } 111 17 111 18 18446744073709551615 1 , 111 18 111 19 18446744073709551615 1 { 112 2 112 3 18446744073709551615 4 L"-" 112 3 112 7 18446744073709551615 1 , 112 7 112 8 18446744073709551615 3 Tag 112 9 112 12 4 2 :: 112 12 112 14 18446744073709551615 8 Subtract 112 14 112 22 16 1 } 112 22 112 23 18446744073709551615 1 , 112 23 112 24 18446744073709551615 1 { 113 2 113 3 18446744073709551615 4 L"*" 113 3 113 7 18446744073709551615 1 , 113 7 113 8 18446744073709551615 3 Tag 113 9 113 12 4 2 :: 113 12 113 14 18446744073709551615 8 Multiply 113 14 113 22 17 1 } 113 22 113 23 18446744073709551615 1 , 113 23 113 24 18446744073709551615 1 { 114 2 114 3 18446744073709551615 4 L"/" 114 3 114 7 18446744073709551615 1 , 114 7 114 8 18446744073709551615 3 Tag 114 9 114 12 4 2 :: 114 12 114 14 18446744073709551615 6 Divide 114 14 114 20 18 1 } 114 20 114 21 18446744073709551615 1 , 114 21 114 22 18446744073709551615 1 { 115 2 115 3 18446744073709551615 4 L"%" 115 3 115 7 18446744073709551615 1 , 115 7 115 8 18446744073709551615 3 Tag 115 9 115 12 4 2 :: 115 12 115 14 18446744073709551615 6 Modulo 115 14 115 20 19 1 } 115 20 115 21 18446744073709551615 1 , 115 21 115 22 18446744073709551615 1 { 116 2 116 3 18446744073709551615 4 L"=" 116 3 116 7 18446744073709551615 1 , 116 7 116 8 18446744073709551615 3 Tag 116 9 116 12 4 2 :: 116 12 116 14 18446744073709551615 6 Assign 116 14 116 20 31 1 } 116 20 116 21 18446744073709551615 1 , 116 21 116 22 18446744073709551615 1 { 117 2 117 3 18446744073709551615 5 L"==" 117 3 117 8 18446744073709551615 1 , 117 8 117 9 18446744073709551615 3 Tag 117 10 117 13 4 2 :: 117 13 117 15 18446744073709551615 5 Equal 117 15 117 20 20 1 } 117 20 117 21 18446744073709551615 1 , 117 21 117 22 18446744073709551615 1 { 118 2 118 3 18446744073709551615 5 L"!=" 118 3 118 8 18446744073709551615 1 , 118 8 118 9 18446744073709551615 3 Tag 118 10 118 13 4 2 :: 118 13 118 15 18446744073709551615 8 NotEqual 118 15 118 23 21 1 } 118 23 118 24 18446744073709551615 1 , 118 24 118 25 18446744073709551615 1 { 119 2 119 3 18446744073709551615 4 L">" 119 3 119 7 18446744073709551615 1 , 119 7 119 8 18446744073709551615 3 Tag 119 9 119 12 4 2 :: 119 12 119 14 18446744073709551615 11 GreaterThan 119 14 119 25 22 1 } 119 25 119 26 18446744073709551615 1 , 119 26 119 27 18446744073709551615 1 { 120 2 120 3 18446744073709551615 4 L"<" 120 3 120 7 18446744073709551615 1 , 120 7 120 8 18446744073709551615 3 Tag 120 9 120 12 4 2 :: 120 12 120 14 18446744073709551615 8 LessThan 120 14 120 22 24 1 } 120 22 120 23 18446744073709551615 1 , 120 23 120 24 18446744073709551615 1 { 121 2 121 3 18446744073709551615 5 L">=" 121 3 121 8 18446744073709551615 1 , 121 8 121 9 18446744073709551615 3 Tag 121 10 121 13 4 2 :: 121 13 121 15 18446744073709551615 18 GreaterThanOrEqual 121 15 121 33 23 1 } 121 33 121 34 18446744073709551615 1 , 121 34 121 35 18446744073709551615 1 { 122 2 122 3 18446744073709551615 5 L"<=" 122 3 122 8 18446744073709551615 1 , 122 8 122 9 18446744073709551615 3 Tag 122 10 122 13 4 2 :: 122 13 122 15 18446744073709551615 15 LessThanOrEqual 122 15 122 30 25 1 } 122 30 122 31 18446744073709551615 1 , 122 31 122 32 18446744073709551615 1 { 123 2 123 3 18446744073709551615 4 L"(" 123 3 123 7 18446744073709551615 1 , 123 7 123 8 18446744073709551615 3 Tag 123 9 123 12 4 2 :: 123 12 123 14 18446744073709551615 15 LeftParenthesis 123 14 123 29 36 1 } 123 29 123 30 18446744073709551615 1 , 123 30 123 31 18446744073709551615 1 { 124 2 124 3 18446744073709551615 4 L")" 124 3 124 7 18446744073709551615 1 , 124 7 124 8 18446744073709551615 3 Tag 124 9 124 12 4 2 :: 124 12 124 14 18446744073709551615 16 RightParenthesis 124 14 124 30 37 1 } 124 30 124 31 18446744073709551615 1 , 124 31 124 32 18446744073709551615 1 { 125 2 125 3 18446744073709551615 4 L"[" 125 3 125 7 18446744073709551615 1 , 125 7 125 8 18446744073709551615 3 Tag 125 9 125 12 4 2 :: 125 12 125 14 18446744073709551615 11 LeftBracket 125 14 125 25 34 1 } 125 25 125 26 18446744073709551615 1 , 125 26 125 27 18446744073709551615 1 { 126 2 126 3 18446744073709551615 4 L"]" 126 3 126 7 18446744073709551615 1 , 126 7 126 8 18446744073709551615 3 Tag 126 9 126 12 4 2 :: 126 12 126 14 18446744073709551615 12 RightBracket 126 14 126 26 35 1 } 126 26 126 27 18446744073709551615 1 , 126 27 126 28 18446744073709551615 1 { 127 2 127 3 18446744073709551615 4 L"{" 127 3 127 7 18446744073709551615 1 , 127 7 127 8 18446744073709551615 3 Tag 127 9 127 12 4 2 :: 127 12 127 14 18446744073709551615 9 LeftBrace 127 14 127 23 32 1 } 127 23 127 24 18446744073709551615 1 , 127 24 127 25 18446744073709551615 1 { 128 2 128 3 18446744073709551615 4 L"}" 128 3 128 7 18446744073709551615 1 , 128 7 128 8 18446744073709551615 3 Tag 128 9 128 12 4 2 :: 128 12 128 14 18446744073709551615 10 RightBrace 128 14 128 24 33 1 } 128 24 128 25 18446744073709551615 1 , 128 25 128 26 18446744073709551615 1 { 129 2 129 3 18446744073709551615 4 L"." 129 3 129 7 18446744073709551615 1 , 129 7 129 8 18446744073709551615 3 Tag 129 9 129 12 4 2 :: 129 12 129 14 18446744073709551615 3 Dot 129 14 129 17 38 1 } 129 17 129 18 18446744073709551615 1 , 129 18 129 19 18446744073709551615 1 { 130 2 130 3 18446744073709551615 4 L"," 130 3 130 7 18446744073709551615 1 , 130 7 130 8 18446744073709551615 3 Tag 130 9 130 12 4 2 :: 130 12 130 14 18446744073709551615 5 Comma 130 14 130 19 39 1 } 130 19 130 20 18446744073709551615 1 , 130 20 130 21 18446744073709551615 1 { 131 2 131 3 18446744073709551615 4 L";" 131 3 131 7 18446744073709551615 1 , 131 7 131 8 18446744073709551615 3 Tag 131 9 131 12 4 2 :: 131 12 131 14 18446744073709551615 9 Semicolon 131 14 131 23 40 1 } 131 23 131 24 18446744073709551615 1 , 131 24 131 25 18446744073709551615 1 { 132 2 132 3 18446744073709551615 4 L":" 132 3 132 7 18446744073709551615 1 , 132 7 132 8 18446744073709551615 3 Tag 132 9 132 12 4 2 :: 132 12 132 14 18446744073709551615 5 Colon 132 14 132 19 41 1 } 132 19 132 20 18446744073709551615 1 } 132 20 132 21 18446744073709551615 1 ; 132 21 132 22 18446744073709551615 7 wstring 134 1 134 8 71 16 TokenTagToString 134 9 134 25 91 1 ( 134 25 134 26 91 3 Tag 134 26 134 29 4 3 tag 134 30 134 33 92 1 ) 134 33 134 34 91 1 ; 134 34 134 35 18446744073709551615 1 # 135 1 135 2 18446744073709551615 5 endif 135 2 135 7 18446744073709551615 12 // TOKEN_HPP 135 8 135 20 18446744073709551615 0 0 93 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 3 any 49 1 3 0 13 unordered_map 49 1 3 0 7 wstring 5 1 3 0 3 Tag 7 1 3 0 7 Eof:Tag 7 1 3 0 7 Int:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Char:Tag 7 1 3 0 10 String:Tag 7 1 3 0 14 Identifier:Tag 7 1 3 0 8 True:Tag 7 1 3 0 9 False:Tag 7 1 3 0 7 Add:Tag 7 1 3 0 12 Subtract:Tag 7 1 3 0 12 Multiply:Tag 7 1 3 0 10 Divide:Tag 7 1 3 0 10 Modulo:Tag 7 1 3 0 9 Equal:Tag 7 1 3 0 12 NotEqual:Tag 7 1 3 0 15 GreaterThan:Tag 7 1 3 0 22 GreaterThanOrEqual:Tag 7 1 3 0 12 LessThan:Tag 7 1 3 0 19 LessThanOrEqual:Tag 7 1 3 0 7 And:Tag 7 1 3 0 6 Or:Tag 7 1 3 0 7 Not:Tag 7 1 3 0 10 DefVar:Tag 7 1 3 0 10 DefFun:Tag 7 1 3 0 10 Assign:Tag 7 1 3 0 13 LeftBrace:Tag 7 1 3 0 14 RightBrace:Tag 7 1 3 0 15 LeftBracket:Tag 7 1 3 0 16 RightBracket:Tag 7 1 3 0 19 LeftParenthesis:Tag 7 1 3 0 20 RightParenthesis:Tag 7 1 3 0 7 Dot:Tag 7 1 3 0 9 Comma:Tag 7 1 3 0 13 Semicolon:Tag 7 1 3 0 9 Colon:Tag 7 1 3 0 6 If:Tag 7 1 3 0 8 Else:Tag 7 1 3 0 9 While:Tag 7 1 3 0 7 For:Tag 7 1 3 0 9 Break:Tag 7 1 3 0 10 Return:Tag 7 1 3 0 9 Class:Tag 7 1 3 0 10 Public:Tag 7 1 3 0 11 Private:Tag 7 1 3 0 13 Protected:Tag 7 1 3 0 12 Internal:Tag 7 1 3 0 10 Module:Tag 7 1 3 0 13 Namespace:Tag 7 1 3 0 8 Uses:Tag 7 1 3 0 10 Native:Tag 4 1 3 0 5 Token 20 1 3 0 7 int32_t 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 6 1 3 0 9 tag:Token 4 1 3 0 7 any:std 6 1 3 0 11 value:Token 10 1 3 0 71 82:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 14 FromName:Token 10 1 3 0 71 83:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 83:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 71 83:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 17 FromInteger:Token 10 1 3 0 71 84:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 84:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 84:65:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 15 FromFloat:Token 10 1 3 0 71 85:33:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 85:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 85:63:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 18 FromOperator:Token 10 1 3 0 71 86:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 86:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 86:66:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 8 1 3 0 10 operator== 10 1 3 0 71 88:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 88:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 31 1 3 0 17 unordered_map:std 9 1 3 0 8 keywords 9 1 3 0 9 operators 8 1 3 0 16 TokenTagToString 10 1 3 0 72 134:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 0 0 1 0 0 0 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1531318986
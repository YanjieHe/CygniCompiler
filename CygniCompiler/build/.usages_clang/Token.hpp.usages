22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 598 0 0 0 1 # 1 1 1 2 18446744073709551615 6 ifndef 1 2 1 8 18446744073709551615 9 TOKEN_HPP 1 9 1 18 18446744073709551615 1 # 2 1 2 2 18446744073709551615 6 define 2 2 2 8 18446744073709551615 9 TOKEN_HPP 2 9 2 18 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 3 any 3 11 3 14 18446744073709551615 1 > 3 14 3 15 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 6 string 4 11 4 17 18446744073709551615 1 > 4 17 4 18 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 13 unordered_map 5 11 5 24 18446744073709551615 1 > 5 24 5 25 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 3 any 6 12 6 15 1 1 ; 6 15 6 16 18446744073709551615 5 using 7 1 7 6 18446744073709551615 3 std 7 7 7 10 0 2 :: 7 10 7 12 18446744073709551615 13 unordered_map 7 12 7 25 2 1 ; 7 25 7 26 18446744073709551615 5 using 8 1 8 6 18446744073709551615 3 std 8 7 8 10 0 2 :: 8 10 8 12 18446744073709551615 7 wstring 8 12 8 19 3 1 ; 8 19 8 20 18446744073709551615 4 enum 9 1 9 5 18446744073709551615 5 class 9 6 9 11 18446744073709551615 3 Tag 9 12 9 15 4 1 { 10 1 10 2 18446744073709551615 3 Eof 11 2 11 5 5 1 , 11 5 11 6 18446744073709551615 3 Int 12 2 12 5 6 1 , 12 5 12 6 18446744073709551615 4 Long 13 2 13 6 7 1 , 13 6 13 7 18446744073709551615 5 Float 14 2 14 7 8 1 , 14 7 14 8 18446744073709551615 6 Double 15 2 15 8 9 1 , 15 8 15 9 18446744073709551615 4 Char 16 2 16 6 10 1 , 16 6 16 7 18446744073709551615 6 String 17 2 17 8 11 1 , 17 8 17 9 18446744073709551615 10 Identifier 18 2 18 12 12 1 , 18 12 18 13 18446744073709551615 4 True 19 2 19 6 13 1 , 19 6 19 7 18446744073709551615 5 False 20 2 20 7 14 1 , 20 7 20 8 18446744073709551615 3 Add 22 2 22 5 15 1 , 22 5 22 6 18446744073709551615 8 Subtract 23 2 23 10 16 1 , 23 10 23 11 18446744073709551615 8 Multiply 24 2 24 10 17 1 , 24 10 24 11 18446744073709551615 6 Divide 25 2 25 8 18 1 , 25 8 25 9 18446744073709551615 6 Modulo 26 2 26 8 19 1 , 26 8 26 9 18446744073709551615 5 Equal 28 2 28 7 20 1 , 28 7 28 8 18446744073709551615 8 NotEqual 29 2 29 10 21 1 , 29 10 29 11 18446744073709551615 11 GreaterThan 30 2 30 13 22 1 , 30 13 30 14 18446744073709551615 18 GreaterThanOrEqual 31 2 31 20 23 1 , 31 20 31 21 18446744073709551615 8 LessThan 32 2 32 10 24 1 , 32 10 32 11 18446744073709551615 15 LessThanOrEqual 33 2 33 17 25 1 , 33 17 33 18 18446744073709551615 3 And 35 2 35 5 26 1 , 35 5 35 6 18446744073709551615 2 Or 36 2 36 4 27 1 , 36 4 36 5 18446744073709551615 3 Not 37 2 37 5 28 1 , 37 5 37 6 18446744073709551615 6 DefVar 39 2 39 8 29 1 , 39 8 39 9 18446744073709551615 6 DefFun 40 2 40 8 30 1 , 40 8 40 9 18446744073709551615 6 Assign 41 2 41 8 31 1 , 41 8 41 9 18446744073709551615 9 LeftBrace 43 2 43 11 32 1 , 43 11 43 12 18446744073709551615 10 RightBrace 44 2 44 12 33 1 , 44 12 44 13 18446744073709551615 11 LeftBracket 45 2 45 13 34 1 , 45 13 45 14 18446744073709551615 12 RightBracket 46 2 46 14 35 1 , 46 14 46 15 18446744073709551615 15 LeftParenthesis 47 2 47 17 36 1 , 47 17 47 18 18446744073709551615 16 RightParenthesis 48 2 48 18 37 1 , 48 18 48 19 18446744073709551615 3 Dot 50 2 50 5 38 1 , 50 5 50 6 18446744073709551615 5 Comma 51 2 51 7 39 1 , 51 7 51 8 18446744073709551615 9 Semicolon 52 2 52 11 40 1 , 52 11 52 12 18446744073709551615 5 Colon 53 2 53 7 41 1 , 53 7 53 8 18446744073709551615 2 If 55 2 55 4 42 1 , 55 4 55 5 18446744073709551615 4 Else 56 2 56 6 43 1 , 56 6 56 7 18446744073709551615 5 While 57 2 57 7 44 1 , 57 7 57 8 18446744073709551615 3 For 59 2 59 5 45 1 , 59 5 59 6 18446744073709551615 5 Break 60 2 60 7 46 1 , 60 7 60 8 18446744073709551615 6 Return 61 2 61 8 47 1 , 61 8 61 9 18446744073709551615 5 Class 63 2 63 7 48 1 , 63 7 63 8 18446744073709551615 6 Public 64 2 64 8 49 1 , 64 8 64 9 18446744073709551615 7 Private 65 2 65 9 50 1 , 65 9 65 10 18446744073709551615 9 Protected 66 2 66 11 51 1 , 66 11 66 12 18446744073709551615 8 Internal 67 2 67 10 52 1 , 67 10 67 11 18446744073709551615 6 Module 69 2 69 8 53 1 , 69 8 69 9 18446744073709551615 9 Namespace 70 2 70 11 54 1 } 71 1 71 2 18446744073709551615 1 ; 71 2 71 3 18446744073709551615 5 class 73 1 73 6 18446744073709551615 5 Token 73 7 73 12 55 1 { 74 1 74 2 18446744073709551615 6 public 75 1 75 7 18446744073709551615 1 : 75 7 75 8 18446744073709551615 7 int32_t 76 2 76 9 55 4 line 76 10 76 14 56 1 ; 76 14 76 15 18446744073709551615 7 int32_t 77 2 77 9 55 6 column 77 10 77 16 57 1 ; 77 16 77 17 18446744073709551615 3 Tag 78 2 78 5 55 3 tag 78 6 78 9 58 1 ; 78 9 78 10 18446744073709551615 3 any 79 2 79 5 55 5 value 79 6 79 11 59 1 ; 79 11 79 12 18446744073709551615 5 Token 80 2 80 7 55 1 ( 80 7 80 8 55 7 int32_t 80 8 80 15 60 4 line 80 16 80 20 61 1 , 80 20 80 21 55 7 int32_t 80 22 80 29 60 6 column 80 30 80 36 62 1 , 80 36 80 37 55 3 Tag 80 38 80 41 4 3 tag 80 42 80 45 63 1 , 80 45 80 46 55 3 any 80 47 80 50 64 5 value 80 51 80 56 65 1 ) 80 56 80 57 55 1 ; 80 57 80 58 18446744073709551615 6 static 81 2 81 8 18446744073709551615 5 Token 81 9 81 14 55 8 FromName 81 15 81 23 66 1 ( 81 23 81 24 66 7 int32_t 81 24 81 31 60 4 line 81 32 81 36 67 1 , 81 36 81 37 66 7 int32_t 81 38 81 45 60 6 column 81 46 81 52 68 1 , 81 52 81 53 66 7 wstring 81 54 81 61 69 4 name 81 62 81 66 70 1 ) 81 66 81 67 66 1 ; 81 67 81 68 18446744073709551615 6 static 82 2 82 8 18446744073709551615 5 Token 82 9 82 14 55 11 FromInteger 82 15 82 26 71 1 ( 82 26 82 27 71 7 int32_t 82 27 82 34 60 4 line 82 35 82 39 72 1 , 82 39 82 40 71 7 int32_t 82 41 82 48 60 6 column 82 49 82 55 73 1 , 82 55 82 56 71 7 wstring 82 57 82 64 69 4 text 82 65 82 69 74 1 ) 82 69 82 70 71 1 ; 82 70 82 71 18446744073709551615 6 static 83 2 83 8 18446744073709551615 5 Token 83 9 83 14 55 9 FromFloat 83 15 83 24 75 1 ( 83 24 83 25 75 7 int32_t 83 25 83 32 60 4 line 83 33 83 37 76 1 , 83 37 83 38 75 7 int32_t 83 39 83 46 60 6 column 83 47 83 53 77 1 , 83 53 83 54 75 7 wstring 83 55 83 62 69 4 text 83 63 83 67 78 1 ) 83 67 83 68 75 1 ; 83 68 83 69 18446744073709551615 6 static 84 2 84 8 18446744073709551615 5 Token 84 9 84 14 55 12 FromOperator 84 15 84 27 79 1 ( 84 27 84 28 79 7 int32_t 84 28 84 35 60 4 line 84 36 84 40 80 1 , 84 40 84 41 79 7 int32_t 84 42 84 49 60 6 column 84 50 84 56 81 1 , 84 56 84 57 79 7 wstring 84 58 84 65 69 4 text 84 66 84 70 82 1 ) 84 70 84 71 79 1 ; 84 71 84 72 18446744073709551615 1 } 85 1 85 2 18446744073709551615 1 ; 85 2 85 3 18446744073709551615 4 bool 86 1 86 5 18446744073709551615 8 operator 86 6 86 14 83 2 == 86 14 86 16 83 1 ( 86 16 86 17 83 5 const 86 17 86 22 18446744073709551615 5 Token 86 23 86 28 55 1 & 86 28 86 29 18446744073709551615 1 x 86 30 86 31 84 1 , 86 31 86 32 83 5 const 86 33 86 38 18446744073709551615 5 Token 86 39 86 44 55 1 & 86 44 86 45 18446744073709551615 1 y 86 46 86 47 85 1 ) 86 47 86 48 83 1 ; 86 48 86 49 18446744073709551615 6 static 87 1 87 7 18446744073709551615 13 unordered_map 87 8 87 21 86 1 < 87 21 87 22 18446744073709551615 7 wstring 87 22 87 29 69 1 , 87 29 87 30 18446744073709551615 3 Tag 87 31 87 34 4 1 > 87 34 87 35 18446744073709551615 8 keywords 87 36 87 44 87 1 = 87 45 87 46 18446744073709551615 1 { 87 47 87 48 18446744073709551615 1 { 87 48 87 49 18446744073709551615 7 L"true" 87 49 87 56 18446744073709551615 1 , 87 56 87 57 18446744073709551615 3 Tag 87 58 87 61 4 2 :: 87 61 87 63 18446744073709551615 4 True 87 63 87 67 13 1 } 87 67 87 68 18446744073709551615 1 , 87 68 87 69 18446744073709551615 1 { 88 15 88 16 18446744073709551615 8 L"false" 88 16 88 24 18446744073709551615 1 , 88 24 88 25 18446744073709551615 3 Tag 88 26 88 29 4 2 :: 88 29 88 31 18446744073709551615 5 False 88 31 88 36 14 1 } 88 36 88 37 18446744073709551615 1 , 88 37 88 38 18446744073709551615 1 { 89 15 89 16 18446744073709551615 6 L"var" 89 16 89 22 18446744073709551615 1 , 89 22 89 23 18446744073709551615 3 Tag 89 24 89 27 4 2 :: 89 27 89 29 18446744073709551615 6 DefVar 89 29 89 35 29 1 } 89 35 89 36 18446744073709551615 1 , 89 36 89 37 18446744073709551615 1 { 90 15 90 16 18446744073709551615 6 L"fun" 90 16 90 22 18446744073709551615 1 , 90 22 90 23 18446744073709551615 3 Tag 90 24 90 27 4 2 :: 90 27 90 29 18446744073709551615 6 DefFun 90 29 90 35 30 1 } 90 35 90 36 18446744073709551615 1 , 90 36 90 37 18446744073709551615 1 { 91 15 91 16 18446744073709551615 6 L"and" 91 16 91 22 18446744073709551615 1 , 91 22 91 23 18446744073709551615 3 Tag 91 24 91 27 4 2 :: 91 27 91 29 18446744073709551615 3 And 91 29 91 32 26 1 } 91 32 91 33 18446744073709551615 1 , 91 33 91 34 18446744073709551615 1 { 92 15 92 16 18446744073709551615 5 L"or" 92 16 92 21 18446744073709551615 1 , 92 21 92 22 18446744073709551615 3 Tag 92 23 92 26 4 2 :: 92 26 92 28 18446744073709551615 2 Or 92 28 92 30 27 1 } 92 30 92 31 18446744073709551615 1 , 92 31 92 32 18446744073709551615 1 { 93 15 93 16 18446744073709551615 6 L"not" 93 16 93 22 18446744073709551615 1 , 93 22 93 23 18446744073709551615 3 Tag 93 24 93 27 4 2 :: 93 27 93 29 18446744073709551615 3 Not 93 29 93 32 28 1 } 93 32 93 33 18446744073709551615 1 , 93 33 93 34 18446744073709551615 1 { 94 15 94 16 18446744073709551615 5 L"if" 94 16 94 21 18446744073709551615 1 , 94 21 94 22 18446744073709551615 3 Tag 94 23 94 26 4 2 :: 94 26 94 28 18446744073709551615 2 If 94 28 94 30 42 1 } 94 30 94 31 18446744073709551615 1 , 94 31 94 32 18446744073709551615 1 { 95 15 95 16 18446744073709551615 7 L"else" 95 16 95 23 18446744073709551615 1 , 95 23 95 24 18446744073709551615 3 Tag 95 25 95 28 4 2 :: 95 28 95 30 18446744073709551615 4 Else 95 30 95 34 43 1 } 95 34 95 35 18446744073709551615 1 , 95 35 95 36 18446744073709551615 1 { 96 15 96 16 18446744073709551615 8 L"while" 96 16 96 24 18446744073709551615 1 , 96 24 96 25 18446744073709551615 3 Tag 96 26 96 29 4 2 :: 96 29 96 31 18446744073709551615 5 While 96 31 96 36 44 1 } 96 36 96 37 18446744073709551615 1 , 96 37 96 38 18446744073709551615 1 { 97 15 97 16 18446744073709551615 9 L"return" 97 16 97 25 18446744073709551615 1 , 97 25 97 26 18446744073709551615 3 Tag 97 27 97 30 4 2 :: 97 30 97 32 18446744073709551615 6 Return 97 32 97 38 47 1 } 97 38 97 39 18446744073709551615 1 , 97 39 97 40 18446744073709551615 1 { 98 15 98 16 18446744073709551615 8 L"class" 98 16 98 24 18446744073709551615 1 , 98 24 98 25 18446744073709551615 3 Tag 98 26 98 29 4 2 :: 98 29 98 31 18446744073709551615 5 Class 98 31 98 36 48 1 } 98 36 98 37 18446744073709551615 1 , 98 37 98 38 18446744073709551615 1 { 99 15 99 16 18446744073709551615 9 L"public" 99 16 99 25 18446744073709551615 1 , 99 25 99 26 18446744073709551615 3 Tag 99 27 99 30 4 2 :: 99 30 99 32 18446744073709551615 6 Public 99 32 99 38 49 1 } 99 38 99 39 18446744073709551615 1 , 99 39 99 40 18446744073709551615 1 { 100 15 100 16 18446744073709551615 10 L"private" 100 16 100 26 18446744073709551615 1 , 100 26 100 27 18446744073709551615 3 Tag 100 28 100 31 4 2 :: 100 31 100 33 18446744073709551615 7 Private 100 33 100 40 50 1 } 100 40 100 41 18446744073709551615 1 , 100 41 100 42 18446744073709551615 1 { 101 15 101 16 18446744073709551615 12 L"protected" 101 16 101 28 18446744073709551615 1 , 101 28 101 29 18446744073709551615 3 Tag 101 30 101 33 4 2 :: 101 33 101 35 18446744073709551615 9 Protected 101 35 101 44 51 1 } 101 44 101 45 18446744073709551615 1 , 101 45 101 46 18446744073709551615 1 { 102 15 102 16 18446744073709551615 11 L"internal" 102 16 102 27 18446744073709551615 1 , 102 27 102 28 18446744073709551615 3 Tag 102 29 102 32 4 2 :: 102 32 102 34 18446744073709551615 8 Internal 102 34 102 42 52 1 } 102 42 102 43 18446744073709551615 1 , 102 43 102 44 18446744073709551615 1 { 103 15 103 16 18446744073709551615 9 L"module" 103 16 103 25 18446744073709551615 1 , 103 25 103 26 18446744073709551615 3 Tag 103 27 103 30 4 2 :: 103 30 103 32 18446744073709551615 6 Module 103 32 103 38 53 1 } 103 38 103 39 18446744073709551615 1 , 103 39 103 40 18446744073709551615 1 { 104 15 104 16 18446744073709551615 12 L"namespace" 104 16 104 28 18446744073709551615 1 , 104 28 104 29 18446744073709551615 3 Tag 104 30 104 33 4 2 :: 104 33 104 35 18446744073709551615 9 Namespace 104 35 104 44 54 1 } 104 44 104 45 18446744073709551615 1 } 104 45 104 46 18446744073709551615 1 ; 104 46 104 47 18446744073709551615 6 static 106 1 106 7 18446744073709551615 13 unordered_map 106 8 106 21 86 1 < 106 21 106 22 18446744073709551615 7 wstring 106 22 106 29 69 1 , 106 29 106 30 18446744073709551615 3 Tag 106 31 106 34 4 1 > 106 34 106 35 18446744073709551615 9 operators 106 36 106 45 88 1 = 106 46 106 47 18446744073709551615 1 { 106 48 106 49 18446744073709551615 1 { 107 2 107 3 18446744073709551615 4 L"+" 107 3 107 7 18446744073709551615 1 , 107 7 107 8 18446744073709551615 3 Tag 107 9 107 12 4 2 :: 107 12 107 14 18446744073709551615 3 Add 107 14 107 17 15 1 } 107 17 107 18 18446744073709551615 1 , 107 18 107 19 18446744073709551615 1 { 108 2 108 3 18446744073709551615 4 L"-" 108 3 108 7 18446744073709551615 1 , 108 7 108 8 18446744073709551615 3 Tag 108 9 108 12 4 2 :: 108 12 108 14 18446744073709551615 8 Subtract 108 14 108 22 16 1 } 108 22 108 23 18446744073709551615 1 , 108 23 108 24 18446744073709551615 1 { 109 2 109 3 18446744073709551615 4 L"*" 109 3 109 7 18446744073709551615 1 , 109 7 109 8 18446744073709551615 3 Tag 109 9 109 12 4 2 :: 109 12 109 14 18446744073709551615 8 Multiply 109 14 109 22 17 1 } 109 22 109 23 18446744073709551615 1 , 109 23 109 24 18446744073709551615 1 { 110 2 110 3 18446744073709551615 4 L"/" 110 3 110 7 18446744073709551615 1 , 110 7 110 8 18446744073709551615 3 Tag 110 9 110 12 4 2 :: 110 12 110 14 18446744073709551615 6 Divide 110 14 110 20 18 1 } 110 20 110 21 18446744073709551615 1 , 110 21 110 22 18446744073709551615 1 { 111 2 111 3 18446744073709551615 4 L"%" 111 3 111 7 18446744073709551615 1 , 111 7 111 8 18446744073709551615 3 Tag 111 9 111 12 4 2 :: 111 12 111 14 18446744073709551615 6 Modulo 111 14 111 20 19 1 } 111 20 111 21 18446744073709551615 1 , 111 21 111 22 18446744073709551615 1 { 112 2 112 3 18446744073709551615 4 L"=" 112 3 112 7 18446744073709551615 1 , 112 7 112 8 18446744073709551615 3 Tag 112 9 112 12 4 2 :: 112 12 112 14 18446744073709551615 6 Assign 112 14 112 20 31 1 } 112 20 112 21 18446744073709551615 1 , 112 21 112 22 18446744073709551615 1 { 113 2 113 3 18446744073709551615 5 L"==" 113 3 113 8 18446744073709551615 1 , 113 8 113 9 18446744073709551615 3 Tag 113 10 113 13 4 2 :: 113 13 113 15 18446744073709551615 5 Equal 113 15 113 20 20 1 } 113 20 113 21 18446744073709551615 1 , 113 21 113 22 18446744073709551615 1 { 114 2 114 3 18446744073709551615 5 L"!=" 114 3 114 8 18446744073709551615 1 , 114 8 114 9 18446744073709551615 3 Tag 114 10 114 13 4 2 :: 114 13 114 15 18446744073709551615 8 NotEqual 114 15 114 23 21 1 } 114 23 114 24 18446744073709551615 1 , 114 24 114 25 18446744073709551615 1 { 115 2 115 3 18446744073709551615 4 L">" 115 3 115 7 18446744073709551615 1 , 115 7 115 8 18446744073709551615 3 Tag 115 9 115 12 4 2 :: 115 12 115 14 18446744073709551615 11 GreaterThan 115 14 115 25 22 1 } 115 25 115 26 18446744073709551615 1 , 115 26 115 27 18446744073709551615 1 { 116 2 116 3 18446744073709551615 4 L"<" 116 3 116 7 18446744073709551615 1 , 116 7 116 8 18446744073709551615 3 Tag 116 9 116 12 4 2 :: 116 12 116 14 18446744073709551615 8 LessThan 116 14 116 22 24 1 } 116 22 116 23 18446744073709551615 1 , 116 23 116 24 18446744073709551615 1 { 117 2 117 3 18446744073709551615 5 L">=" 117 3 117 8 18446744073709551615 1 , 117 8 117 9 18446744073709551615 3 Tag 117 10 117 13 4 2 :: 117 13 117 15 18446744073709551615 18 GreaterThanOrEqual 117 15 117 33 23 1 } 117 33 117 34 18446744073709551615 1 , 117 34 117 35 18446744073709551615 1 { 118 2 118 3 18446744073709551615 5 L"<=" 118 3 118 8 18446744073709551615 1 , 118 8 118 9 18446744073709551615 3 Tag 118 10 118 13 4 2 :: 118 13 118 15 18446744073709551615 15 LessThanOrEqual 118 15 118 30 25 1 } 118 30 118 31 18446744073709551615 1 , 118 31 118 32 18446744073709551615 1 { 119 2 119 3 18446744073709551615 4 L"(" 119 3 119 7 18446744073709551615 1 , 119 7 119 8 18446744073709551615 3 Tag 119 9 119 12 4 2 :: 119 12 119 14 18446744073709551615 15 LeftParenthesis 119 14 119 29 36 1 } 119 29 119 30 18446744073709551615 1 , 119 30 119 31 18446744073709551615 1 { 120 2 120 3 18446744073709551615 4 L")" 120 3 120 7 18446744073709551615 1 , 120 7 120 8 18446744073709551615 3 Tag 120 9 120 12 4 2 :: 120 12 120 14 18446744073709551615 16 RightParenthesis 120 14 120 30 37 1 } 120 30 120 31 18446744073709551615 1 , 120 31 120 32 18446744073709551615 1 { 121 2 121 3 18446744073709551615 4 L"[" 121 3 121 7 18446744073709551615 1 , 121 7 121 8 18446744073709551615 3 Tag 121 9 121 12 4 2 :: 121 12 121 14 18446744073709551615 11 LeftBracket 121 14 121 25 34 1 } 121 25 121 26 18446744073709551615 1 , 121 26 121 27 18446744073709551615 1 { 122 2 122 3 18446744073709551615 4 L"]" 122 3 122 7 18446744073709551615 1 , 122 7 122 8 18446744073709551615 3 Tag 122 9 122 12 4 2 :: 122 12 122 14 18446744073709551615 12 RightBracket 122 14 122 26 35 1 } 122 26 122 27 18446744073709551615 1 , 122 27 122 28 18446744073709551615 1 { 123 2 123 3 18446744073709551615 4 L"{" 123 3 123 7 18446744073709551615 1 , 123 7 123 8 18446744073709551615 3 Tag 123 9 123 12 4 2 :: 123 12 123 14 18446744073709551615 9 LeftBrace 123 14 123 23 32 1 } 123 23 123 24 18446744073709551615 1 , 123 24 123 25 18446744073709551615 1 { 124 2 124 3 18446744073709551615 4 L"}" 124 3 124 7 18446744073709551615 1 , 124 7 124 8 18446744073709551615 3 Tag 124 9 124 12 4 2 :: 124 12 124 14 18446744073709551615 10 RightBrace 124 14 124 24 33 1 } 124 24 124 25 18446744073709551615 1 , 124 25 124 26 18446744073709551615 1 { 125 2 125 3 18446744073709551615 4 L"." 125 3 125 7 18446744073709551615 1 , 125 7 125 8 18446744073709551615 3 Tag 125 9 125 12 4 2 :: 125 12 125 14 18446744073709551615 3 Dot 125 14 125 17 38 1 } 125 17 125 18 18446744073709551615 1 , 125 18 125 19 18446744073709551615 1 { 126 2 126 3 18446744073709551615 4 L"," 126 3 126 7 18446744073709551615 1 , 126 7 126 8 18446744073709551615 3 Tag 126 9 126 12 4 2 :: 126 12 126 14 18446744073709551615 5 Comma 126 14 126 19 39 1 } 126 19 126 20 18446744073709551615 1 , 126 20 126 21 18446744073709551615 1 { 127 2 127 3 18446744073709551615 4 L";" 127 3 127 7 18446744073709551615 1 , 127 7 127 8 18446744073709551615 3 Tag 127 9 127 12 4 2 :: 127 12 127 14 18446744073709551615 9 Semicolon 127 14 127 23 40 1 } 127 23 127 24 18446744073709551615 1 , 127 24 127 25 18446744073709551615 1 { 128 2 128 3 18446744073709551615 4 L":" 128 3 128 7 18446744073709551615 1 , 128 7 128 8 18446744073709551615 3 Tag 128 9 128 12 4 2 :: 128 12 128 14 18446744073709551615 5 Colon 128 14 128 19 41 1 } 128 19 128 20 18446744073709551615 1 } 128 20 128 21 18446744073709551615 1 ; 128 21 128 22 18446744073709551615 7 wstring 130 1 130 8 69 16 TokenTagToString 130 9 130 25 89 1 ( 130 25 130 26 89 3 Tag 130 26 130 29 4 3 tag 130 30 130 33 90 1 ) 130 33 130 34 89 1 ; 130 34 130 35 18446744073709551615 1 # 131 1 131 2 18446744073709551615 5 endif 131 2 131 7 18446744073709551615 12 // TOKEN_HPP 131 8 131 20 18446744073709551615 0 0 91 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 3 any 49 1 3 0 13 unordered_map 49 1 3 0 7 wstring 5 1 3 0 3 Tag 7 1 3 0 7 Eof:Tag 7 1 3 0 7 Int:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Char:Tag 7 1 3 0 10 String:Tag 7 1 3 0 14 Identifier:Tag 7 1 3 0 8 True:Tag 7 1 3 0 9 False:Tag 7 1 3 0 7 Add:Tag 7 1 3 0 12 Subtract:Tag 7 1 3 0 12 Multiply:Tag 7 1 3 0 10 Divide:Tag 7 1 3 0 10 Modulo:Tag 7 1 3 0 9 Equal:Tag 7 1 3 0 12 NotEqual:Tag 7 1 3 0 15 GreaterThan:Tag 7 1 3 0 22 GreaterThanOrEqual:Tag 7 1 3 0 12 LessThan:Tag 7 1 3 0 19 LessThanOrEqual:Tag 7 1 3 0 7 And:Tag 7 1 3 0 6 Or:Tag 7 1 3 0 7 Not:Tag 7 1 3 0 10 DefVar:Tag 7 1 3 0 10 DefFun:Tag 7 1 3 0 10 Assign:Tag 7 1 3 0 13 LeftBrace:Tag 7 1 3 0 14 RightBrace:Tag 7 1 3 0 15 LeftBracket:Tag 7 1 3 0 16 RightBracket:Tag 7 1 3 0 19 LeftParenthesis:Tag 7 1 3 0 20 RightParenthesis:Tag 7 1 3 0 7 Dot:Tag 7 1 3 0 9 Comma:Tag 7 1 3 0 13 Semicolon:Tag 7 1 3 0 9 Colon:Tag 7 1 3 0 6 If:Tag 7 1 3 0 8 Else:Tag 7 1 3 0 9 While:Tag 7 1 3 0 7 For:Tag 7 1 3 0 9 Break:Tag 7 1 3 0 10 Return:Tag 7 1 3 0 9 Class:Tag 7 1 3 0 10 Public:Tag 7 1 3 0 11 Private:Tag 7 1 3 0 13 Protected:Tag 7 1 3 0 12 Internal:Tag 7 1 3 0 10 Module:Tag 7 1 3 0 13 Namespace:Tag 4 1 3 0 5 Token 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 6 1 3 0 9 tag:Token 6 1 3 0 11 value:Token 20 1 3 0 7 int32_t 10 1 3 0 71 80:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 80:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 80:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 4 1 3 0 7 any:std 10 1 3 0 71 80:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 14 FromName:Token 10 1 3 0 71 81:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 81:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 71 81:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 17 FromInteger:Token 10 1 3 0 71 82:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 82:65:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 15 FromFloat:Token 10 1 3 0 71 83:33:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 83:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 83:63:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 21 1 3 0 18 FromOperator:Token 10 1 3 0 71 84:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 84:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 84:66:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 8 1 3 0 10 operator== 10 1 3 0 71 86:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 10 1 3 0 71 86:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 31 1 3 0 17 unordered_map:std 9 1 3 0 8 keywords 9 1 3 0 9 operators 8 1 3 0 16 TokenTagToString 10 1 3 0 72 130:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 0 0 1 0 0 0 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1530679194
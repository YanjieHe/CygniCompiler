22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3249 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 17 "TypeChecker.hpp" 1 10 1 27 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 8 any_cast 4 12 4 20 1 1 ; 4 20 4 21 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 4 endl 5 12 5 16 2 1 ; 5 16 5 17 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 5 wcout 6 12 6 17 3 1 ; 6 17 6 18 18446744073709551615 57 // TypeChecker::TypeChecker(NamespaceList& namespaceList) 7 1 7 58 18446744073709551615 34 // 	: namespaceList{namespaceList} 8 1 8 35 18446744073709551615 50 // 	, currentNamespace{namespaceList.list.front()} 9 1 9 51 18446744073709551615 14 // 	, global() 10 1 10 15 18446744073709551615 22 // 	, current{&global} 11 1 11 23 18446744073709551615 4 // { 12 1 12 5 18446744073709551615 52 // 	for (Namespace& _namespace : namespaceList.list) 13 1 13 53 18446744073709551615 5 // 	{ 14 1 14 6 18446744073709551615 48 // 		for (CodeFile& codeFile : _namespace.files) 15 1 15 49 18446744073709551615 6 // 		{ 16 1 16 7 18446744073709551615 51 // 			for (ModuleExpPtr& module : codeFile.modules) 17 1 17 52 18446744073709551615 7 // 			{ 18 1 18 8 18446744073709551615 28 // 				module->Accept(this); 19 1 19 29 18446744073709551615 7 // 			} 20 1 20 8 18446744073709551615 50 // 			for (ClassExpPtr& _class : codeFile.classes) 21 1 21 51 18446744073709551615 7 // 			{ 22 1 22 8 18446744073709551615 28 // 				_class->Accept(this); 23 1 23 29 18446744073709551615 7 // 			} 24 1 24 8 18446744073709551615 6 // 		} 25 1 25 7 18446744073709551615 5 // 	} 26 1 26 6 18446744073709551615 4 // } 27 1 27 5 18446744073709551615 11 TypeChecker 28 1 28 12 4 2 :: 28 12 28 14 4 11 TypeChecker 28 14 28 25 4 1 ( 28 25 28 26 4 15 NamespaceRecord 28 26 28 41 5 1 & 28 41 28 42 18446744073709551615 8 nsRecord 28 43 28 51 6 1 ) 28 51 28 52 4 1 : 29 2 29 3 4 8 nsRecord 29 4 29 12 7 1 { 29 12 29 13 18446744073709551615 8 nsRecord 29 13 29 21 6 1 } 29 21 29 22 18446744073709551615 1 { 30 1 30 2 18446744073709551615 5 Scope 31 2 31 7 8 11 globalScope 31 8 31 19 9 1 ( 31 19 31 20 8 7 nullptr 31 20 31 27 18446744073709551615 1 ) 31 27 31 28 8 1 ; 31 28 31 29 18446744073709551615 5 scope 32 2 32 7 10 1 = 32 8 32 9 18446744073709551615 1 & 32 10 32 11 18446744073709551615 11 globalScope 32 11 32 22 9 1 ; 32 22 32 23 18446744073709551615 3 for 33 2 33 5 18446744073709551615 1 ( 33 6 33 7 18446744073709551615 4 auto 33 7 33 11 18446744073709551615 1 & 33 11 33 12 18446744073709551615 4 pair 33 13 33 17 11 1 : 33 18 33 19 12 8 nsRecord 33 20 33 28 6 1 . 33 28 33 29 18446744073709551615 6 record 33 29 33 35 13 1 ) 33 35 33 36 18446744073709551615 1 { 34 2 34 3 18446744073709551615 4 auto 35 3 35 7 18446744073709551615 1 & 35 7 35 8 18446744073709551615 5 nsPtr 35 9 35 14 14 1 = 35 15 35 16 18446744073709551615 4 pair 35 17 35 21 11 1 . 35 21 35 22 18446744073709551615 6 second 35 22 35 28 15 1 ; 35 28 35 29 18446744073709551615 7 Collect 36 3 36 10 16 1 ( 36 10 36 11 16 5 nsPtr 36 11 36 16 14 1 ) 36 16 36 17 16 1 ; 36 17 36 18 18446744073709551615 1 } 37 2 37 3 18446744073709551615 3 for 38 2 38 5 18446744073709551615 1 ( 38 6 38 7 18446744073709551615 4 auto 38 7 38 11 18446744073709551615 1 & 38 11 38 12 18446744073709551615 4 pair 38 13 38 17 17 1 : 38 18 38 19 12 8 nsRecord 38 20 38 28 6 1 . 38 28 38 29 18446744073709551615 6 record 38 29 38 35 13 1 ) 38 35 38 36 18446744073709551615 1 { 39 2 39 3 18446744073709551615 4 auto 40 3 40 7 18446744073709551615 1 & 40 7 40 8 18446744073709551615 5 nsPtr 40 9 40 14 18 1 = 40 15 40 16 18446744073709551615 4 pair 40 17 40 21 17 1 . 40 21 40 22 18446744073709551615 6 second 40 22 40 28 15 1 ; 40 28 40 29 18446744073709551615 5 Check 41 3 41 8 19 1 ( 41 8 41 9 19 5 nsPtr 41 9 41 14 18 1 ) 41 14 41 15 19 1 ; 41 15 41 16 18446744073709551615 1 } 42 2 42 3 18446744073709551615 1 } 43 1 43 2 18446744073709551615 4 void 44 1 44 5 18446744073709551615 11 TypeChecker 44 6 44 17 4 2 :: 44 17 44 19 19 5 Check 44 19 44 24 19 1 ( 44 24 44 25 19 10 shared_ptr 44 25 44 35 20 1 < 44 35 44 36 18446744073709551615 9 Namespace 44 36 44 45 21 1 > 44 45 44 46 18446744073709551615 5 nsPtr 44 47 44 52 22 1 ) 44 52 44 53 19 1 { 45 1 45 2 18446744073709551615 5 Scope 46 2 46 7 8 9 nextScope 46 8 46 17 23 1 ( 46 17 46 18 8 5 scope 46 18 46 23 10 1 ) 46 23 46 24 8 1 ; 46 24 46 25 18446744073709551615 5 Scope 47 2 47 7 8 1 * 47 7 47 8 18446744073709551615 6 parent 47 9 47 15 24 1 = 47 16 47 17 18446744073709551615 5 scope 47 18 47 23 10 1 ; 47 23 47 24 18446744073709551615 5 scope 48 2 48 7 10 1 = 48 8 48 9 18446744073709551615 1 & 48 10 48 11 18446744073709551615 9 nextScope 48 11 48 20 23 1 ; 48 20 48 21 18446744073709551615 7 Collect 49 2 49 9 16 1 ( 49 9 49 10 16 5 nsPtr 49 10 49 15 22 1 ) 49 15 49 16 16 1 ; 49 16 49 17 18446744073709551615 3 for 50 2 50 5 18446744073709551615 1 ( 50 6 50 7 18446744073709551615 4 auto 50 7 50 11 18446744073709551615 1 & 50 11 50 12 18446744073709551615 4 pair 50 13 50 17 25 1 : 50 18 50 19 12 5 nsPtr 50 20 50 25 22 2 -> 50 25 50 27 18446744073709551615 7 modules 50 27 50 34 26 1 ) 50 34 50 35 18446744073709551615 1 { 51 2 51 3 18446744073709551615 6 Module 52 3 52 9 27 1 & 52 9 52 10 18446744073709551615 10 moduleInfo 52 11 52 21 28 1 = 52 22 52 23 18446744073709551615 4 pair 52 24 52 28 25 1 . 52 28 52 29 18446744073709551615 6 second 52 29 52 35 15 1 ; 52 35 52 36 18446744073709551615 11 CheckModule 53 3 53 14 29 1 ( 53 14 53 15 29 10 moduleInfo 53 15 53 25 28 1 ) 53 25 53 26 29 1 ; 53 26 53 27 18446744073709551615 1 } 54 2 54 3 18446744073709551615 3 for 55 2 55 5 18446744073709551615 1 ( 55 6 55 7 18446744073709551615 4 auto 55 7 55 11 18446744073709551615 1 & 55 11 55 12 18446744073709551615 4 pair 55 13 55 17 30 1 : 55 18 55 19 12 5 nsPtr 55 20 55 25 22 2 -> 55 25 55 27 18446744073709551615 7 classes 55 27 55 34 31 1 ) 55 34 55 35 18446744073709551615 1 { 56 2 56 3 18446744073709551615 5 Class 57 3 57 8 32 1 & 57 8 57 9 18446744073709551615 9 classInfo 57 10 57 19 33 1 = 57 20 57 21 18446744073709551615 4 pair 57 22 57 26 30 1 . 57 26 57 27 18446744073709551615 6 second 57 27 57 33 15 1 ; 57 33 57 34 18446744073709551615 10 CheckClass 58 3 58 13 34 1 ( 58 13 58 14 34 9 classInfo 58 14 58 23 33 1 ) 58 23 58 24 34 1 ; 58 24 58 25 18446744073709551615 1 } 59 2 59 3 18446744073709551615 5 scope 60 2 60 7 10 1 = 60 8 60 9 18446744073709551615 6 parent 60 10 60 16 24 1 ; 60 16 60 17 18446744073709551615 1 } 61 1 61 2 18446744073709551615 4 void 62 1 62 5 18446744073709551615 11 TypeChecker 62 6 62 17 4 2 :: 62 17 62 19 29 11 CheckModule 62 19 62 30 29 1 ( 62 30 62 31 29 6 Module 62 31 62 37 27 1 & 62 37 62 38 18446744073709551615 10 moduleInfo 62 39 62 49 35 1 ) 62 49 62 50 29 1 { 63 1 63 2 18446744073709551615 5 Scope 64 2 64 7 8 9 nextScope 64 8 64 17 36 1 ( 64 17 64 18 8 5 scope 64 18 64 23 10 1 ) 64 23 64 24 8 1 ; 64 24 64 25 18446744073709551615 5 Scope 65 2 65 7 8 1 * 65 7 65 8 18446744073709551615 6 parent 65 9 65 15 37 1 = 65 16 65 17 18446744073709551615 5 scope 65 18 65 23 10 1 ; 65 23 65 24 18446744073709551615 5 scope 66 2 66 7 10 1 = 66 8 66 9 18446744073709551615 1 & 66 10 66 11 18446744073709551615 9 nextScope 66 11 66 20 36 1 ; 66 20 66 21 18446744073709551615 3 for 67 2 67 5 18446744073709551615 1 ( 67 6 67 7 18446744073709551615 4 auto 67 7 67 11 18446744073709551615 1 & 67 11 67 12 18446744073709551615 5 field 67 13 67 18 38 1 : 67 19 67 20 39 10 moduleInfo 67 21 67 31 35 1 . 67 31 67 32 18446744073709551615 6 fields 67 32 67 38 40 1 ) 67 38 67 39 18446744073709551615 1 { 68 2 68 3 18446744073709551615 10 CheckField 69 3 69 13 41 1 ( 69 13 69 14 41 5 field 69 14 69 19 38 1 ) 69 19 69 20 41 1 ; 69 20 69 21 18446744073709551615 1 } 70 2 70 3 18446744073709551615 3 for 71 2 71 5 18446744073709551615 1 ( 71 6 71 7 18446744073709551615 4 auto 71 7 71 11 18446744073709551615 1 & 71 11 71 12 18446744073709551615 1 p 71 13 71 14 42 1 : 71 15 71 16 12 10 moduleInfo 71 17 71 27 35 1 . 71 27 71 28 18446744073709551615 9 functions 71 28 71 37 43 1 ) 71 37 71 38 18446744073709551615 1 { 72 2 72 3 18446744073709551615 8 Function 73 3 73 11 44 1 & 73 11 73 12 18446744073709551615 8 function 73 13 73 21 45 1 = 73 22 73 23 18446744073709551615 1 p 73 24 73 25 42 1 . 73 25 73 26 18446744073709551615 6 second 73 26 73 32 15 1 ; 73 32 73 33 18446744073709551615 13 CheckFunction 74 3 74 16 46 1 ( 74 16 74 17 46 8 function 74 17 74 25 45 1 ) 74 25 74 26 46 1 ; 74 26 74 27 18446744073709551615 1 } 75 2 75 3 18446744073709551615 5 scope 76 2 76 7 10 1 = 76 8 76 9 18446744073709551615 6 parent 76 10 76 16 37 1 ; 76 16 76 17 18446744073709551615 1 } 77 1 77 2 18446744073709551615 4 void 78 1 78 5 18446744073709551615 11 TypeChecker 78 6 78 17 4 2 :: 78 17 78 19 34 10 CheckClass 78 19 78 29 34 1 ( 78 29 78 30 34 5 Class 78 30 78 35 32 1 & 78 35 78 36 18446744073709551615 9 classInfo 78 37 78 46 47 1 ) 78 46 78 47 34 1 { 79 1 79 2 18446744073709551615 5 Scope 80 2 80 7 8 9 nextScope 80 8 80 17 48 1 ( 80 17 80 18 8 5 scope 80 18 80 23 10 1 ) 80 23 80 24 8 1 ; 80 24 80 25 18446744073709551615 5 Scope 81 2 81 7 8 1 * 81 7 81 8 18446744073709551615 6 parent 81 9 81 15 49 1 = 81 16 81 17 18446744073709551615 5 scope 81 18 81 23 10 1 ; 81 23 81 24 18446744073709551615 5 scope 82 2 82 7 10 1 = 82 8 82 9 18446744073709551615 1 & 82 10 82 11 18446744073709551615 9 nextScope 82 11 82 20 48 1 ; 82 20 82 21 18446744073709551615 3 for 83 2 83 5 18446744073709551615 1 ( 83 6 83 7 18446744073709551615 4 auto 83 7 83 11 18446744073709551615 1 & 83 11 83 12 18446744073709551615 5 field 83 13 83 18 50 1 : 83 19 83 20 39 9 classInfo 83 21 83 30 47 1 . 83 30 83 31 18446744073709551615 6 fields 83 31 83 37 51 1 ) 83 37 83 38 18446744073709551615 1 { 84 2 84 3 18446744073709551615 10 CheckField 85 3 85 13 41 1 ( 85 13 85 14 41 5 field 85 14 85 19 50 1 ) 85 19 85 20 41 1 ; 85 20 85 21 18446744073709551615 1 } 86 2 86 3 18446744073709551615 3 for 87 2 87 5 18446744073709551615 1 ( 87 6 87 7 18446744073709551615 4 auto 87 7 87 11 18446744073709551615 1 & 87 11 87 12 18446744073709551615 1 p 87 13 87 14 52 1 : 87 15 87 16 12 9 classInfo 87 17 87 26 47 1 . 87 26 87 27 18446744073709551615 9 functions 87 27 87 36 53 1 ) 87 36 87 37 18446744073709551615 1 { 88 2 88 3 18446744073709551615 8 Function 89 3 89 11 44 1 & 89 11 89 12 18446744073709551615 8 function 89 13 89 21 54 1 = 89 22 89 23 18446744073709551615 1 p 89 24 89 25 52 1 . 89 25 89 26 18446744073709551615 6 second 89 26 89 32 15 1 ; 89 32 89 33 18446744073709551615 13 CheckFunction 90 3 90 16 46 1 ( 90 16 90 17 46 8 function 90 17 90 25 54 1 ) 90 25 90 26 46 1 ; 90 26 90 27 18446744073709551615 1 } 91 2 91 3 18446744073709551615 5 scope 92 2 92 7 10 1 = 92 8 92 9 18446744073709551615 6 parent 92 10 92 16 49 1 ; 92 16 92 17 18446744073709551615 1 } 93 1 93 2 18446744073709551615 4 void 94 1 94 5 18446744073709551615 11 TypeChecker 94 6 94 17 4 2 :: 94 17 94 19 41 10 CheckField 94 19 94 29 41 1 ( 94 29 94 30 41 5 Field 94 30 94 35 55 1 & 94 35 94 36 18446744073709551615 5 field 94 37 94 42 56 1 ) 94 42 94 43 41 1 { 95 1 95 2 18446744073709551615 5 field 96 2 96 7 56 1 . 96 7 96 8 18446744073709551615 5 value 96 8 96 13 57 2 -> 96 13 96 15 58 6 Accept 96 15 96 21 58 1 ( 96 21 96 22 58 4 this 96 22 96 26 18446744073709551615 1 ) 96 26 96 27 58 1 ; 96 27 96 28 18446744073709551615 2 if 97 2 97 4 18446744073709551615 1 ( 97 5 97 6 18446744073709551615 5 field 97 6 97 11 56 1 . 97 11 97 12 18446744073709551615 5 value 97 12 97 17 57 2 -> 97 17 97 19 18446744073709551615 4 type 97 19 97 23 59 2 != 97 24 97 26 60 5 field 97 27 97 32 56 1 . 97 32 97 33 18446744073709551615 4 type 97 33 97 37 61 1 ) 97 37 97 38 18446744073709551615 1 { 98 2 98 3 18446744073709551615 5 throw 99 3 99 8 18446744073709551615 13 TypeException 99 9 99 22 62 1 ( 99 22 99 23 62 5 field 99 23 99 28 56 1 . 99 28 99 29 18446744073709551615 5 value 99 29 99 34 57 2 -> 99 34 99 36 18446744073709551615 4 line 99 36 99 40 63 1 , 99 40 99 41 62 5 field 99 42 99 47 56 1 . 99 47 99 48 18446744073709551615 5 value 99 48 99 53 57 2 -> 99 53 99 55 18446744073709551615 6 column 99 55 99 61 64 1 , 99 61 99 62 62 35 L"Cannot implicitly convert type `" 100 8 100 43 18446744073709551615 1 + 100 44 100 45 65 12 TypeToString 101 9 101 21 66 1 ( 101 21 101 22 66 5 field 101 22 101 27 56 1 . 101 27 101 28 18446744073709551615 5 value 101 28 101 33 57 2 -> 101 33 101 35 18446744073709551615 4 type 101 35 101 39 59 1 ) 101 39 101 40 66 1 + 101 41 101 42 65 8 L" to '" 101 43 101 51 18446744073709551615 1 + 101 52 101 53 65 12 TypeToString 102 9 102 21 66 1 ( 102 21 102 22 66 5 field 102 22 102 27 56 1 . 102 27 102 28 18446744073709551615 4 type 102 28 102 32 61 1 ) 102 32 102 33 66 1 + 102 34 102 35 65 4 L"'" 102 36 102 40 18446744073709551615 1 ) 102 40 102 41 62 1 ; 102 41 102 42 18446744073709551615 1 } 103 2 103 3 18446744073709551615 1 } 104 1 104 2 18446744073709551615 4 void 105 1 105 5 18446744073709551615 11 TypeChecker 105 6 105 17 4 2 :: 105 17 105 19 46 13 CheckFunction 105 19 105 32 46 1 ( 105 32 105 33 46 8 Function 105 33 105 41 44 1 & 105 41 105 42 18446744073709551615 8 function 105 43 105 51 67 1 ) 105 51 105 52 46 1 { 106 1 106 2 18446744073709551615 5 Scope 107 2 107 7 8 9 nextScope 107 8 107 17 68 1 ( 107 17 107 18 8 5 scope 107 18 107 23 10 1 ) 107 23 107 24 8 1 ; 107 24 107 25 18446744073709551615 5 Scope 108 2 108 7 8 1 * 108 7 108 8 18446744073709551615 6 parent 108 9 108 15 69 1 = 108 16 108 17 18446744073709551615 5 scope 108 18 108 23 10 1 ; 108 23 108 24 18446744073709551615 5 scope 109 2 109 7 10 1 = 109 8 109 9 18446744073709551615 1 & 109 10 109 11 18446744073709551615 9 nextScope 109 11 109 20 68 1 ; 109 20 109 21 18446744073709551615 3 for 110 2 110 5 18446744073709551615 1 ( 110 6 110 7 18446744073709551615 9 Parameter 110 7 110 16 70 1 & 110 16 110 17 18446744073709551615 1 p 110 18 110 19 71 1 : 110 20 110 21 39 8 function 110 22 110 30 67 1 . 110 30 110 31 18446744073709551615 10 parameters 110 31 110 41 72 1 ) 110 41 110 42 18446744073709551615 1 { 111 2 111 3 18446744073709551615 5 scope 112 3 112 8 10 2 -> 112 8 112 10 73 3 Put 112 10 112 13 73 1 ( 112 13 112 14 73 1 p 112 14 112 15 71 1 . 112 15 112 16 18446744073709551615 4 name 112 16 112 20 74 1 , 112 20 112 21 73 1 p 112 22 112 23 71 1 ) 112 23 112 24 73 1 ; 112 24 112 25 18446744073709551615 1 } 113 2 113 3 18446744073709551615 3 for 114 2 114 5 18446744073709551615 1 ( 114 6 114 7 18446744073709551615 13 LocalVariable 114 7 114 20 75 1 & 114 20 114 21 18446744073709551615 1 v 114 22 114 23 76 1 : 114 24 114 25 39 8 function 114 26 114 34 67 1 . 114 34 114 35 18446744073709551615 9 variables 114 35 114 44 77 1 ) 114 44 114 45 18446744073709551615 1 { 115 2 115 3 18446744073709551615 5 scope 116 3 116 8 10 2 -> 116 8 116 10 73 3 Put 116 10 116 13 73 1 ( 116 13 116 14 73 1 v 116 14 116 15 76 1 . 116 15 116 16 18446744073709551615 4 name 116 16 116 20 78 1 , 116 20 116 21 73 1 v 116 22 116 23 76 1 ) 116 23 116 24 73 1 ; 116 24 116 25 18446744073709551615 1 } 117 2 117 3 18446744073709551615 3 for 118 2 118 5 18446744073709551615 1 ( 118 6 118 7 18446744073709551615 13 LocalVariable 118 7 118 20 75 1 & 118 20 118 21 18446744073709551615 1 v 118 22 118 23 79 1 : 118 24 118 25 39 8 function 118 26 118 34 67 1 . 118 34 118 35 18446744073709551615 9 variables 118 35 118 44 77 1 ) 118 44 118 45 18446744073709551615 1 { 119 2 119 3 18446744073709551615 1 v 120 3 120 4 79 1 . 120 4 120 5 18446744073709551615 5 value 120 5 120 10 80 2 -> 120 10 120 12 58 6 Accept 120 12 120 18 58 1 ( 120 18 120 19 58 4 this 120 19 120 23 18446744073709551615 1 ) 120 23 120 24 58 1 ; 120 24 120 25 18446744073709551615 1 } 121 2 121 3 18446744073709551615 3 for 122 2 122 5 18446744073709551615 1 ( 122 6 122 7 18446744073709551615 6 ExpPtr 122 7 122 13 81 1 & 122 13 122 14 18446744073709551615 1 e 122 15 122 16 82 1 : 122 17 122 18 39 8 function 122 19 122 27 67 1 . 122 27 122 28 18446744073709551615 11 expressions 122 28 122 39 83 1 ) 122 39 122 40 18446744073709551615 1 { 123 2 123 3 18446744073709551615 1 e 124 3 124 4 82 2 -> 124 4 124 6 58 6 Accept 124 6 124 12 58 1 ( 124 12 124 13 58 4 this 124 13 124 17 18446744073709551615 1 ) 124 17 124 18 58 1 ; 124 18 124 19 18446744073709551615 1 } 125 2 125 3 18446744073709551615 5 scope 126 2 126 7 10 1 = 126 8 126 9 18446744073709551615 6 parent 126 10 126 16 69 1 ; 126 16 126 17 18446744073709551615 1 } 127 1 127 2 18446744073709551615 4 void 128 1 128 5 18446744073709551615 11 TypeChecker 128 6 128 17 4 2 :: 128 17 128 19 16 7 Collect 128 19 128 26 16 1 ( 128 26 128 27 16 10 shared_ptr 128 27 128 37 20 1 < 128 37 128 38 18446744073709551615 9 Namespace 128 38 128 47 21 1 > 128 47 128 48 18446744073709551615 5 nsPtr 128 49 128 54 84 1 ) 128 54 128 55 16 1 { 129 1 129 2 18446744073709551615 3 for 130 2 130 5 18446744073709551615 1 ( 130 6 130 7 18446744073709551615 4 auto 130 7 130 11 18446744073709551615 1 & 130 11 130 12 18446744073709551615 4 pair 130 13 130 17 85 1 : 130 18 130 19 12 5 nsPtr 130 20 130 25 84 2 -> 130 25 130 27 18446744073709551615 7 modules 130 27 130 34 26 1 ) 130 34 130 35 18446744073709551615 1 { 131 2 131 3 18446744073709551615 6 Module 132 3 132 9 27 1 & 132 9 132 10 18446744073709551615 10 moduleInfo 132 11 132 21 86 1 = 132 22 132 23 18446744073709551615 4 pair 132 24 132 28 85 1 . 132 28 132 29 18446744073709551615 6 second 132 29 132 35 15 1 ; 132 35 132 36 18446744073709551615 5 scope 133 3 133 8 10 2 -> 133 8 133 10 73 3 Put 133 10 133 13 73 1 ( 133 13 133 14 73 10 moduleInfo 133 14 133 24 86 1 . 133 24 133 25 18446744073709551615 4 type 133 25 133 29 87 1 . 133 29 133 30 18446744073709551615 4 name 133 30 133 34 88 1 , 133 34 133 35 73 10 moduleInfo 133 36 133 46 86 1 ) 133 46 133 47 73 1 ; 133 47 133 48 18446744073709551615 3 for 134 3 134 6 18446744073709551615 1 ( 134 7 134 8 18446744073709551615 4 auto 134 8 134 12 18446744073709551615 1 & 134 12 134 13 18446744073709551615 5 field 134 14 134 19 89 1 : 134 20 134 21 39 10 moduleInfo 134 22 134 32 86 1 . 134 32 134 33 18446744073709551615 6 fields 134 33 134 39 40 1 ) 134 39 134 40 18446744073709551615 1 { 135 3 135 4 18446744073709551615 5 scope 136 4 136 9 10 2 -> 136 9 136 11 73 3 Put 136 11 136 14 73 1 ( 136 14 136 15 73 5 field 136 15 136 20 89 1 . 136 20 136 21 18446744073709551615 4 name 136 21 136 25 90 1 , 136 25 136 26 73 5 field 136 27 136 32 89 1 ) 136 32 136 33 73 1 ; 136 33 136 34 18446744073709551615 1 } 137 3 137 4 18446744073709551615 3 for 138 3 138 6 18446744073709551615 1 ( 138 7 138 8 18446744073709551615 4 auto 138 8 138 12 18446744073709551615 1 & 138 12 138 13 18446744073709551615 1 p 138 14 138 15 91 1 : 138 16 138 17 12 10 moduleInfo 138 18 138 28 86 1 . 138 28 138 29 18446744073709551615 9 functions 138 29 138 38 43 1 ) 138 38 138 39 18446744073709551615 1 { 139 3 139 4 18446744073709551615 8 Function 140 4 140 12 44 1 & 140 12 140 13 18446744073709551615 8 function 140 14 140 22 92 1 = 140 23 140 24 18446744073709551615 1 p 140 25 140 26 91 1 . 140 26 140 27 18446744073709551615 6 second 140 27 140 33 15 1 ; 140 33 140 34 18446744073709551615 5 scope 141 4 141 9 10 2 -> 141 9 141 11 73 3 Put 141 11 141 14 73 1 ( 141 14 141 15 73 8 function 141 15 141 23 92 1 . 141 23 141 24 18446744073709551615 4 name 141 24 141 28 93 1 , 141 28 141 29 73 8 function 141 30 141 38 92 1 ) 141 38 141 39 73 1 ; 141 39 141 40 18446744073709551615 1 } 142 3 142 4 18446744073709551615 1 } 143 2 143 3 18446744073709551615 3 for 144 2 144 5 18446744073709551615 1 ( 144 6 144 7 18446744073709551615 4 auto 144 7 144 11 18446744073709551615 1 & 144 11 144 12 18446744073709551615 4 pair 144 13 144 17 94 1 : 144 18 144 19 12 5 nsPtr 144 20 144 25 84 2 -> 144 25 144 27 18446744073709551615 7 classes 144 27 144 34 31 1 ) 144 34 144 35 18446744073709551615 1 { 145 2 145 3 18446744073709551615 5 Class 146 3 146 8 32 1 & 146 8 146 9 18446744073709551615 9 classInfo 146 10 146 19 95 1 = 146 20 146 21 18446744073709551615 4 pair 146 22 146 26 94 1 . 146 26 146 27 18446744073709551615 6 second 146 27 146 33 15 1 ; 146 33 146 34 18446744073709551615 5 scope 147 3 147 8 10 2 -> 147 8 147 10 73 3 Put 147 10 147 13 73 1 ( 147 13 147 14 73 9 classInfo 147 14 147 23 95 1 . 147 23 147 24 18446744073709551615 4 type 147 24 147 28 96 1 . 147 28 147 29 18446744073709551615 4 name 147 29 147 33 88 1 , 147 33 147 34 73 9 classInfo 147 35 147 44 95 1 ) 147 44 147 45 73 1 ; 147 45 147 46 18446744073709551615 3 for 148 3 148 6 18446744073709551615 1 ( 148 7 148 8 18446744073709551615 4 auto 148 8 148 12 18446744073709551615 1 & 148 12 148 13 18446744073709551615 5 field 148 14 148 19 97 1 : 148 20 148 21 39 9 classInfo 148 22 148 31 95 1 . 148 31 148 32 18446744073709551615 6 fields 148 32 148 38 51 1 ) 148 38 148 39 18446744073709551615 1 { 149 3 149 4 18446744073709551615 5 scope 150 4 150 9 10 2 -> 150 9 150 11 73 3 Put 150 11 150 14 73 1 ( 150 14 150 15 73 5 field 150 15 150 20 97 1 . 150 20 150 21 18446744073709551615 4 name 150 21 150 25 90 1 , 150 25 150 26 73 5 field 150 27 150 32 97 1 ) 150 32 150 33 73 1 ; 150 33 150 34 18446744073709551615 1 } 151 3 151 4 18446744073709551615 3 for 152 3 152 6 18446744073709551615 1 ( 152 7 152 8 18446744073709551615 4 auto 152 8 152 12 18446744073709551615 1 & 152 12 152 13 18446744073709551615 1 p 152 14 152 15 98 1 : 152 16 152 17 12 9 classInfo 152 18 152 27 95 1 . 152 27 152 28 18446744073709551615 9 functions 152 28 152 37 53 1 ) 152 37 152 38 18446744073709551615 1 { 153 3 153 4 18446744073709551615 8 Function 154 4 154 12 44 1 & 154 12 154 13 18446744073709551615 8 function 154 14 154 22 99 1 = 154 23 154 24 18446744073709551615 1 p 154 25 154 26 98 1 . 154 26 154 27 18446744073709551615 6 second 154 27 154 33 15 1 ; 154 33 154 34 18446744073709551615 5 scope 155 4 155 9 10 2 -> 155 9 155 11 73 3 Put 155 11 155 14 73 1 ( 155 14 155 15 73 8 function 155 15 155 23 99 1 . 155 23 155 24 18446744073709551615 4 name 155 24 155 28 93 1 , 155 28 155 29 73 8 function 155 30 155 38 99 1 ) 155 38 155 39 73 1 ; 155 39 155 40 18446744073709551615 1 } 156 3 156 4 18446744073709551615 1 } 157 2 157 3 18446744073709551615 1 } 158 1 158 2 18446744073709551615 4 void 159 1 159 5 18446744073709551615 11 TypeChecker 159 6 159 17 4 2 :: 159 17 159 19 100 5 Visit 159 19 159 24 100 1 ( 159 24 159 25 100 18 ConstantExpression 159 25 159 43 101 1 * 159 43 159 44 18446744073709551615 4 node 159 45 159 49 102 1 ) 159 49 159 50 100 1 { 160 1 160 2 18446744073709551615 3 any 161 2 161 5 103 1 & 161 5 161 6 18446744073709551615 5 value 161 7 161 12 104 1 = 161 13 161 14 18446744073709551615 4 node 161 15 161 19 102 2 -> 161 19 161 21 18446744073709551615 5 value 161 21 161 26 105 1 ; 161 26 161 27 18446744073709551615 2 if 162 2 162 4 18446744073709551615 1 ( 162 5 162 6 18446744073709551615 5 value 162 6 162 11 104 1 . 162 11 162 12 106 4 type 162 12 162 16 106 1 ( 162 16 162 17 106 1 ) 162 17 162 18 106 2 == 162 19 162 21 107 6 typeid 162 22 162 28 18446744073709551615 1 ( 162 28 162 29 18446744073709551615 7 int32_t 162 29 162 36 108 1 ) 162 36 162 37 18446744073709551615 1 ) 162 37 162 38 18446744073709551615 1 { 163 2 163 3 18446744073709551615 4 node 164 3 164 7 102 2 -> 164 7 164 9 18446744073709551615 4 type 164 9 164 13 59 1 = 164 14 164 15 109 4 Type 164 16 164 20 110 2 :: 164 20 164 22 111 3 Int 164 22 164 25 111 1 ( 164 25 164 26 111 1 ) 164 26 164 27 111 1 ; 164 27 164 28 18446744073709551615 1 } 165 2 165 3 18446744073709551615 4 else 166 2 166 6 18446744073709551615 2 if 166 7 166 9 18446744073709551615 1 ( 166 10 166 11 18446744073709551615 5 value 166 11 166 16 104 1 . 166 16 166 17 106 4 type 166 17 166 21 106 1 ( 166 21 166 22 106 1 ) 166 22 166 23 106 2 == 166 24 166 26 107 6 typeid 166 27 166 33 18446744073709551615 1 ( 166 33 166 34 18446744073709551615 7 int64_t 166 34 166 41 112 1 ) 166 41 166 42 18446744073709551615 1 ) 166 42 166 43 18446744073709551615 1 { 167 2 167 3 18446744073709551615 4 node 168 3 168 7 102 2 -> 168 7 168 9 18446744073709551615 4 type 168 9 168 13 59 1 = 168 14 168 15 109 4 Type 168 16 168 20 110 2 :: 168 20 168 22 113 4 Long 168 22 168 26 113 1 ( 168 26 168 27 113 1 ) 168 27 168 28 113 1 ; 168 28 168 29 18446744073709551615 1 } 169 2 169 3 18446744073709551615 4 else 170 2 170 6 18446744073709551615 2 if 170 7 170 9 18446744073709551615 1 ( 170 10 170 11 18446744073709551615 5 value 170 11 170 16 104 1 . 170 16 170 17 106 4 type 170 17 170 21 106 1 ( 170 21 170 22 106 1 ) 170 22 170 23 106 2 == 170 24 170 26 107 6 typeid 170 27 170 33 18446744073709551615 1 ( 170 33 170 34 18446744073709551615 5 float 170 34 170 39 18446744073709551615 1 ) 170 39 170 40 18446744073709551615 1 ) 170 40 170 41 18446744073709551615 1 { 171 2 171 3 18446744073709551615 4 node 172 3 172 7 102 2 -> 172 7 172 9 18446744073709551615 4 type 172 9 172 13 59 1 = 172 14 172 15 109 4 Type 172 16 172 20 110 2 :: 172 20 172 22 114 5 Float 172 22 172 27 114 1 ( 172 27 172 28 114 1 ) 172 28 172 29 114 1 ; 172 29 172 30 18446744073709551615 1 } 173 2 173 3 18446744073709551615 4 else 174 2 174 6 18446744073709551615 2 if 174 7 174 9 18446744073709551615 1 ( 174 10 174 11 18446744073709551615 5 value 174 11 174 16 104 1 . 174 16 174 17 106 4 type 174 17 174 21 106 1 ( 174 21 174 22 106 1 ) 174 22 174 23 106 2 == 174 24 174 26 107 6 typeid 174 27 174 33 18446744073709551615 1 ( 174 33 174 34 18446744073709551615 6 double 174 34 174 40 18446744073709551615 1 ) 174 40 174 41 18446744073709551615 1 ) 174 41 174 42 18446744073709551615 1 { 175 2 175 3 18446744073709551615 4 node 176 3 176 7 102 2 -> 176 7 176 9 18446744073709551615 4 type 176 9 176 13 59 1 = 176 14 176 15 109 4 Type 176 16 176 20 110 2 :: 176 20 176 22 115 6 Double 176 22 176 28 115 1 ( 176 28 176 29 115 1 ) 176 29 176 30 115 1 ; 176 30 176 31 18446744073709551615 1 } 177 2 177 3 18446744073709551615 4 else 178 2 178 6 18446744073709551615 2 if 178 7 178 9 18446744073709551615 1 ( 178 10 178 11 18446744073709551615 5 value 178 11 178 16 104 1 . 178 16 178 17 106 4 type 178 17 178 21 106 1 ( 178 21 178 22 106 1 ) 178 22 178 23 106 2 == 178 24 178 26 107 6 typeid 178 27 178 33 18446744073709551615 1 ( 178 33 178 34 18446744073709551615 7 wchar_t 178 34 178 41 18446744073709551615 1 ) 178 41 178 42 18446744073709551615 1 ) 178 42 178 43 18446744073709551615 1 { 179 2 179 3 18446744073709551615 4 node 180 3 180 7 102 2 -> 180 7 180 9 18446744073709551615 4 type 180 9 180 13 59 1 = 180 14 180 15 109 4 Type 180 16 180 20 110 2 :: 180 20 180 22 116 4 Char 180 22 180 26 116 1 ( 180 26 180 27 116 1 ) 180 27 180 28 116 1 ; 180 28 180 29 18446744073709551615 1 } 181 2 181 3 18446744073709551615 4 else 182 2 182 6 18446744073709551615 2 if 182 7 182 9 18446744073709551615 1 ( 182 10 182 11 18446744073709551615 5 value 182 11 182 16 104 1 . 182 16 182 17 106 4 type 182 17 182 21 106 1 ( 182 21 182 22 106 1 ) 182 22 182 23 106 2 == 182 24 182 26 107 6 typeid 182 27 182 33 18446744073709551615 1 ( 182 33 182 34 18446744073709551615 4 bool 182 34 182 38 18446744073709551615 1 ) 182 38 182 39 18446744073709551615 1 ) 182 39 182 40 18446744073709551615 1 { 183 2 183 3 18446744073709551615 4 node 184 3 184 7 102 2 -> 184 7 184 9 18446744073709551615 4 type 184 9 184 13 59 1 = 184 14 184 15 109 4 Type 184 16 184 20 110 2 :: 184 20 184 22 117 7 Boolean 184 22 184 29 117 1 ( 184 29 184 30 117 1 ) 184 30 184 31 117 1 ; 184 31 184 32 18446744073709551615 1 } 185 2 185 3 18446744073709551615 4 else 186 2 186 6 18446744073709551615 2 if 186 7 186 9 18446744073709551615 1 ( 186 10 186 11 18446744073709551615 5 value 186 11 186 16 104 1 . 186 16 186 17 106 4 type 186 17 186 21 106 1 ( 186 21 186 22 106 1 ) 186 22 186 23 106 2 == 186 24 186 26 107 6 typeid 186 27 186 33 18446744073709551615 1 ( 186 33 186 34 18446744073709551615 7 wstring 186 34 186 41 118 1 ) 186 41 186 42 18446744073709551615 1 ) 186 42 186 43 18446744073709551615 1 { 187 2 187 3 18446744073709551615 4 node 188 3 188 7 102 2 -> 188 7 188 9 18446744073709551615 4 type 188 9 188 13 59 1 = 188 14 188 15 109 4 Type 188 16 188 20 110 2 :: 188 20 188 22 119 6 String 188 22 188 28 119 1 ( 188 28 188 29 119 1 ) 188 29 188 30 119 1 ; 188 30 188 31 18446744073709551615 1 } 189 2 189 3 18446744073709551615 4 else 190 2 190 6 18446744073709551615 1 { 191 2 191 3 18446744073709551615 5 throw 192 3 192 8 18446744073709551615 7 wstring 192 9 192 16 118 1 ( 192 16 192 17 120 8 L"error" 192 17 192 25 18446744073709551615 1 ) 192 25 192 26 120 1 ; 192 26 192 27 18446744073709551615 1 } 193 2 193 3 18446744073709551615 1 } 194 1 194 2 18446744073709551615 4 void 195 1 195 5 18446744073709551615 11 TypeChecker 195 6 195 17 4 2 :: 195 17 195 19 100 5 Visit 195 19 195 24 100 1 ( 195 24 195 25 100 15 UnaryExpression 195 25 195 40 121 1 * 195 40 195 41 18446744073709551615 4 node 195 42 195 46 122 1 ) 195 46 195 47 100 1 { 196 1 196 2 18446744073709551615 4 node 197 2 197 6 122 2 -> 197 6 197 8 18446744073709551615 7 operand 197 8 197 15 123 2 -> 197 15 197 17 58 6 Accept 197 17 197 23 58 1 ( 197 23 197 24 58 4 this 197 24 197 28 18446744073709551615 1 ) 197 28 197 29 58 1 ; 197 29 197 30 18446744073709551615 2 if 198 2 198 4 18446744073709551615 1 ( 198 5 198 6 18446744073709551615 4 node 198 6 198 10 122 2 -> 198 10 198 12 18446744073709551615 4 kind 198 12 198 16 124 2 == 198 17 198 19 18446744073709551615 14 ExpressionKind 198 20 198 34 125 2 :: 198 34 198 36 18446744073709551615 9 UnaryPlus 198 36 198 45 126 1 ) 198 45 198 46 18446744073709551615 1 { 199 2 199 3 18446744073709551615 2 if 200 3 200 5 18446744073709551615 1 ( 200 6 200 7 18446744073709551615 4 node 200 7 200 11 122 2 -> 200 11 200 13 18446744073709551615 7 operand 200 13 200 20 123 2 -> 200 20 200 22 18446744073709551615 4 type 200 22 200 26 59 1 . 200 26 200 27 127 5 IsInt 200 27 200 32 127 1 ( 200 32 200 33 127 1 ) 200 33 200 34 127 2 || 200 35 200 37 18446744073709551615 4 node 200 38 200 42 122 2 -> 200 42 200 44 18446744073709551615 7 operand 200 44 200 51 123 2 -> 200 51 200 53 18446744073709551615 4 type 200 53 200 57 59 1 . 200 57 200 58 128 6 IsLong 200 58 200 64 128 1 ( 200 64 200 65 128 1 ) 200 65 200 66 128 2 || 200 67 200 69 18446744073709551615 4 node 201 4 201 8 122 2 -> 201 8 201 10 18446744073709551615 7 operand 201 10 201 17 123 2 -> 201 17 201 19 18446744073709551615 4 type 201 19 201 23 59 1 . 201 23 201 24 129 7 IsFloat 201 24 201 31 129 1 ( 201 31 201 32 129 1 ) 201 32 201 33 129 2 || 201 34 201 36 18446744073709551615 4 node 201 37 201 41 122 2 -> 201 41 201 43 18446744073709551615 7 operand 201 43 201 50 123 2 -> 201 50 201 52 18446744073709551615 4 type 201 52 201 56 59 1 . 201 56 201 57 130 8 IsDouble 201 57 201 65 130 1 ( 201 65 201 66 130 1 ) 201 66 201 67 130 1 ) 201 67 201 68 18446744073709551615 1 { 202 3 202 4 18446744073709551615 4 node 203 4 203 8 122 2 -> 203 8 203 10 18446744073709551615 4 type 203 10 203 14 59 1 = 203 15 203 16 109 4 node 203 17 203 21 122 2 -> 203 21 203 23 18446744073709551615 7 operand 203 23 203 30 123 2 -> 203 30 203 32 18446744073709551615 4 type 203 32 203 36 59 1 ; 203 36 203 37 18446744073709551615 1 } 204 3 204 4 18446744073709551615 4 else 205 3 205 7 18446744073709551615 1 { 206 3 206 4 18446744073709551615 5 throw 207 4 207 9 18446744073709551615 13 TypeException 207 10 207 23 62 1 ( 207 23 207 24 62 4 node 208 5 208 9 122 2 -> 208 9 208 11 18446744073709551615 4 line 208 11 208 15 63 1 , 208 15 208 16 62 4 node 208 17 208 21 122 2 -> 208 21 208 23 18446744073709551615 6 column 208 23 208 29 64 1 , 208 29 208 30 62 57 L"The '+' operator cannot be applied to operand of type " 209 5 209 62 18446744073709551615 1 + 209 63 209 64 65 12 TypeToString 210 6 210 18 66 1 ( 210 18 210 19 66 4 node 210 19 210 23 122 2 -> 210 23 210 25 18446744073709551615 7 operand 210 25 210 32 123 2 -> 210 32 210 34 18446744073709551615 4 type 210 34 210 38 59 1 ) 210 38 210 39 66 1 ) 210 39 210 40 62 1 ; 210 40 210 41 18446744073709551615 1 } 211 3 211 4 18446744073709551615 1 } 212 2 212 3 18446744073709551615 4 else 213 2 213 6 18446744073709551615 2 if 213 7 213 9 18446744073709551615 1 ( 213 10 213 11 18446744073709551615 4 node 213 11 213 15 122 2 -> 213 15 213 17 18446744073709551615 4 kind 213 17 213 21 124 2 == 213 22 213 24 18446744073709551615 14 ExpressionKind 213 25 213 39 125 2 :: 213 39 213 41 18446744073709551615 10 UnaryMinus 213 41 213 51 131 1 ) 213 51 213 52 18446744073709551615 1 { 214 2 214 3 18446744073709551615 2 if 215 3 215 5 18446744073709551615 1 ( 215 6 215 7 18446744073709551615 4 node 215 7 215 11 122 2 -> 215 11 215 13 18446744073709551615 7 operand 215 13 215 20 123 2 -> 215 20 215 22 18446744073709551615 4 type 215 22 215 26 59 1 . 215 26 215 27 127 5 IsInt 215 27 215 32 127 1 ( 215 32 215 33 127 1 ) 215 33 215 34 127 2 || 215 35 215 37 18446744073709551615 4 node 215 38 215 42 122 2 -> 215 42 215 44 18446744073709551615 7 operand 215 44 215 51 123 2 -> 215 51 215 53 18446744073709551615 4 type 215 53 215 57 59 1 . 215 57 215 58 128 6 IsLong 215 58 215 64 128 1 ( 215 64 215 65 128 1 ) 215 65 215 66 128 2 || 215 67 215 69 18446744073709551615 4 node 216 4 216 8 122 2 -> 216 8 216 10 18446744073709551615 7 operand 216 10 216 17 123 2 -> 216 17 216 19 18446744073709551615 4 type 216 19 216 23 59 1 . 216 23 216 24 129 7 IsFloat 216 24 216 31 129 1 ( 216 31 216 32 129 1 ) 216 32 216 33 129 2 || 216 34 216 36 18446744073709551615 4 node 216 37 216 41 122 2 -> 216 41 216 43 18446744073709551615 7 operand 216 43 216 50 123 2 -> 216 50 216 52 18446744073709551615 4 type 216 52 216 56 59 1 . 216 56 216 57 130 8 IsDouble 216 57 216 65 130 1 ( 216 65 216 66 130 1 ) 216 66 216 67 130 1 ) 216 67 216 68 18446744073709551615 1 { 217 3 217 4 18446744073709551615 4 node 218 4 218 8 122 2 -> 218 8 218 10 18446744073709551615 4 type 218 10 218 14 59 1 = 218 15 218 16 109 4 node 218 17 218 21 122 2 -> 218 21 218 23 18446744073709551615 7 operand 218 23 218 30 123 2 -> 218 30 218 32 18446744073709551615 4 type 218 32 218 36 59 1 ; 218 36 218 37 18446744073709551615 1 } 219 3 219 4 18446744073709551615 4 else 220 3 220 7 18446744073709551615 1 { 221 3 221 4 18446744073709551615 5 throw 222 4 222 9 18446744073709551615 13 TypeException 222 10 222 23 62 1 ( 222 23 222 24 62 4 node 223 5 223 9 122 2 -> 223 9 223 11 18446744073709551615 4 line 223 11 223 15 63 1 , 223 15 223 16 62 4 node 223 17 223 21 122 2 -> 223 21 223 23 18446744073709551615 6 column 223 23 223 29 64 1 , 223 29 223 30 62 57 L"The '-' operator cannot be applied to operand of type " 224 5 224 62 18446744073709551615 1 + 224 63 224 64 65 12 TypeToString 225 6 225 18 66 1 ( 225 18 225 19 66 4 node 225 19 225 23 122 2 -> 225 23 225 25 18446744073709551615 7 operand 225 25 225 32 123 2 -> 225 32 225 34 18446744073709551615 4 type 225 34 225 38 59 1 ) 225 38 225 39 66 1 ) 225 39 225 40 62 1 ; 225 40 225 41 18446744073709551615 1 } 226 3 226 4 18446744073709551615 1 } 227 2 227 3 18446744073709551615 4 else 228 2 228 6 18446744073709551615 2 if 228 7 228 9 18446744073709551615 1 ( 228 10 228 11 18446744073709551615 4 node 228 11 228 15 122 2 -> 228 15 228 17 18446744073709551615 4 kind 228 17 228 21 124 2 == 228 22 228 24 18446744073709551615 14 ExpressionKind 228 25 228 39 125 2 :: 228 39 228 41 18446744073709551615 3 Not 228 41 228 44 132 1 ) 228 44 228 45 18446744073709551615 1 { 229 2 229 3 18446744073709551615 2 if 230 3 230 5 18446744073709551615 1 ( 230 6 230 7 18446744073709551615 4 node 230 7 230 11 122 2 -> 230 11 230 13 18446744073709551615 7 operand 230 13 230 20 123 2 -> 230 20 230 22 18446744073709551615 4 type 230 22 230 26 59 1 . 230 26 230 27 133 9 IsBoolean 230 27 230 36 133 1 ( 230 36 230 37 133 1 ) 230 37 230 38 133 1 ) 230 38 230 39 18446744073709551615 1 { 231 3 231 4 18446744073709551615 4 node 232 4 232 8 122 2 -> 232 8 232 10 18446744073709551615 4 type 232 10 232 14 59 1 = 232 15 232 16 109 4 node 232 17 232 21 122 2 -> 232 21 232 23 18446744073709551615 7 operand 232 23 232 30 123 2 -> 232 30 232 32 18446744073709551615 4 type 232 32 232 36 59 1 ; 232 36 232 37 18446744073709551615 1 } 233 3 233 4 18446744073709551615 4 else 234 3 234 7 18446744073709551615 1 { 235 3 235 4 18446744073709551615 5 throw 236 4 236 9 18446744073709551615 13 TypeException 236 10 236 23 62 1 ( 236 23 236 24 62 4 node 236 24 236 28 122 2 -> 236 28 236 30 18446744073709551615 4 line 236 30 236 34 63 1 , 236 34 236 35 62 4 node 236 36 236 40 122 2 -> 236 40 236 42 18446744073709551615 6 column 236 42 236 48 64 1 , 236 48 236 49 62 43 L"The 'not' operator cannot be applied to " 237 9 237 52 18446744073709551615 19 L"operand of type " 238 9 238 28 18446744073709551615 1 + 238 29 238 30 65 12 TypeToString 239 10 239 22 66 1 ( 239 22 239 23 66 4 node 239 23 239 27 122 2 -> 239 27 239 29 18446744073709551615 7 operand 239 29 239 36 123 2 -> 239 36 239 38 18446744073709551615 4 type 239 38 239 42 59 1 ) 239 42 239 43 66 1 ) 239 43 239 44 62 1 ; 239 44 239 45 18446744073709551615 1 } 240 3 240 4 18446744073709551615 1 } 241 2 241 3 18446744073709551615 4 else 242 2 242 6 18446744073709551615 1 { 243 2 243 3 18446744073709551615 5 throw 244 3 244 8 18446744073709551615 7 wstring 244 9 244 16 118 1 ( 244 16 244 17 120 8 L"error" 244 17 244 25 18446744073709551615 1 ) 244 25 244 26 120 1 ; 244 26 244 27 18446744073709551615 1 } 245 2 245 3 18446744073709551615 1 } 246 1 246 2 18446744073709551615 4 void 247 1 247 5 18446744073709551615 11 TypeChecker 247 6 247 17 4 2 :: 247 17 247 19 100 5 Visit 247 19 247 24 100 1 ( 247 24 247 25 100 16 BinaryExpression 247 25 247 41 134 1 * 247 41 247 42 18446744073709551615 4 node 247 43 247 47 135 1 ) 247 47 247 48 100 1 { 248 1 248 2 18446744073709551615 4 node 249 2 249 6 135 2 -> 249 6 249 8 18446744073709551615 4 left 249 8 249 12 136 2 -> 249 12 249 14 58 6 Accept 249 14 249 20 58 1 ( 249 20 249 21 58 4 this 249 21 249 25 18446744073709551615 1 ) 249 25 249 26 58 1 ; 249 26 249 27 18446744073709551615 4 node 250 2 250 6 135 2 -> 250 6 250 8 18446744073709551615 5 right 250 8 250 13 137 2 -> 250 13 250 15 58 6 Accept 250 15 250 21 58 1 ( 250 21 250 22 58 4 this 250 22 250 26 18446744073709551615 1 ) 250 26 250 27 58 1 ; 250 27 250 28 18446744073709551615 4 Type 251 2 251 6 110 1 & 251 6 251 7 18446744073709551615 4 left 251 8 251 12 138 1 = 251 13 251 14 18446744073709551615 4 node 251 15 251 19 135 2 -> 251 19 251 21 18446744073709551615 4 left 251 21 251 25 136 2 -> 251 25 251 27 18446744073709551615 4 type 251 27 251 31 59 1 ; 251 31 251 32 18446744073709551615 4 Type 252 2 252 6 110 1 & 252 6 252 7 18446744073709551615 5 right 252 8 252 13 139 1 = 252 14 252 15 18446744073709551615 4 node 252 16 252 20 135 2 -> 252 20 252 22 18446744073709551615 5 right 252 22 252 27 137 2 -> 252 27 252 29 18446744073709551615 4 type 252 29 252 33 59 1 ; 252 33 252 34 18446744073709551615 14 ExpressionKind 253 2 253 16 125 4 kind 253 17 253 21 140 1 = 253 22 253 23 18446744073709551615 4 node 253 24 253 28 135 2 -> 253 28 253 30 18446744073709551615 4 kind 253 30 253 34 124 1 ; 253 34 253 35 18446744073709551615 2 if 254 2 254 4 18446744073709551615 1 ( 254 5 254 6 18446744073709551615 4 kind 254 6 254 10 140 2 == 254 11 254 13 18446744073709551615 14 ExpressionKind 254 14 254 28 125 2 :: 254 28 254 30 18446744073709551615 3 Add 254 30 254 33 141 2 || 254 34 254 36 18446744073709551615 4 kind 254 37 254 41 140 2 == 254 42 254 44 18446744073709551615 14 ExpressionKind 254 45 254 59 125 2 :: 254 59 254 61 18446744073709551615 8 Subtract 254 61 254 69 142 2 || 254 70 254 72 18446744073709551615 4 kind 255 3 255 7 140 2 == 255 8 255 10 18446744073709551615 14 ExpressionKind 255 11 255 25 125 2 :: 255 25 255 27 18446744073709551615 8 Multiply 255 27 255 35 143 2 || 255 36 255 38 18446744073709551615 4 kind 255 39 255 43 140 2 == 255 44 255 46 18446744073709551615 14 ExpressionKind 255 47 255 61 125 2 :: 255 61 255 63 18446744073709551615 6 Divide 255 63 255 69 144 1 ) 255 69 255 70 18446744073709551615 1 { 256 2 256 3 18446744073709551615 2 if 257 3 257 5 18446744073709551615 1 ( 257 6 257 7 18446744073709551615 4 left 257 7 257 11 138 1 . 257 11 257 12 127 5 IsInt 257 12 257 17 127 1 ( 257 17 257 18 127 1 ) 257 18 257 19 127 2 && 257 20 257 22 18446744073709551615 5 right 257 23 257 28 139 1 . 257 28 257 29 127 5 IsInt 257 29 257 34 127 1 ( 257 34 257 35 127 1 ) 257 35 257 36 127 1 ) 257 36 257 37 18446744073709551615 1 { 258 3 258 4 18446744073709551615 4 node 259 4 259 8 135 2 -> 259 8 259 10 18446744073709551615 4 type 259 10 259 14 59 1 = 259 15 259 16 109 4 Type 259 17 259 21 110 2 :: 259 21 259 23 111 3 Int 259 23 259 26 111 1 ( 259 26 259 27 111 1 ) 259 27 259 28 111 1 ; 259 28 259 29 18446744073709551615 1 } 260 3 260 4 18446744073709551615 4 else 261 3 261 7 18446744073709551615 2 if 261 8 261 10 18446744073709551615 1 ( 261 11 261 12 18446744073709551615 4 left 261 12 261 16 138 1 . 261 16 261 17 130 8 IsDouble 261 17 261 25 130 1 ( 261 25 261 26 130 1 ) 261 26 261 27 130 2 && 261 28 261 30 18446744073709551615 5 right 261 31 261 36 139 1 . 261 36 261 37 130 8 IsDouble 261 37 261 45 130 1 ( 261 45 261 46 130 1 ) 261 46 261 47 130 1 ) 261 47 261 48 18446744073709551615 1 { 262 3 262 4 18446744073709551615 4 node 263 4 263 8 135 2 -> 263 8 263 10 18446744073709551615 4 type 263 10 263 14 59 1 = 263 15 263 16 109 4 Type 263 17 263 21 110 2 :: 263 21 263 23 115 6 Double 263 23 263 29 115 1 ( 263 29 263 30 115 1 ) 263 30 263 31 115 1 ; 263 31 263 32 18446744073709551615 1 } 264 3 264 4 18446744073709551615 4 else 265 3 265 7 18446744073709551615 2 if 265 8 265 10 18446744073709551615 1 ( 265 11 265 12 18446744073709551615 4 left 265 12 265 16 138 1 . 265 16 265 17 129 7 IsFloat 265 17 265 24 129 1 ( 265 24 265 25 129 1 ) 265 25 265 26 129 2 && 265 27 265 29 18446744073709551615 5 right 265 30 265 35 139 1 . 265 35 265 36 129 7 IsFloat 265 36 265 43 129 1 ( 265 43 265 44 129 1 ) 265 44 265 45 129 1 ) 265 45 265 46 18446744073709551615 1 { 266 3 266 4 18446744073709551615 4 node 267 4 267 8 135 2 -> 267 8 267 10 18446744073709551615 4 type 267 10 267 14 59 1 = 267 15 267 16 109 4 Type 267 17 267 21 110 2 :: 267 21 267 23 114 5 Float 267 23 267 28 114 1 ( 267 28 267 29 114 1 ) 267 29 267 30 114 1 ; 267 30 267 31 18446744073709551615 1 } 268 3 268 4 18446744073709551615 4 else 269 3 269 7 18446744073709551615 2 if 269 8 269 10 18446744073709551615 1 ( 269 11 269 12 18446744073709551615 4 left 269 12 269 16 138 1 . 269 16 269 17 128 6 IsLong 269 17 269 23 128 1 ( 269 23 269 24 128 1 ) 269 24 269 25 128 2 && 269 26 269 28 18446744073709551615 5 right 269 29 269 34 139 1 . 269 34 269 35 128 6 IsLong 269 35 269 41 128 1 ( 269 41 269 42 128 1 ) 269 42 269 43 128 1 ) 269 43 269 44 18446744073709551615 1 { 270 3 270 4 18446744073709551615 4 node 271 4 271 8 135 2 -> 271 8 271 10 18446744073709551615 4 type 271 10 271 14 59 1 = 271 15 271 16 109 4 Type 271 17 271 21 110 2 :: 271 21 271 23 113 4 Long 271 23 271 27 113 1 ( 271 27 271 28 113 1 ) 271 28 271 29 113 1 ; 271 29 271 30 18446744073709551615 1 } 272 3 272 4 18446744073709551615 4 else 273 3 273 7 18446744073709551615 1 { 274 3 274 4 18446744073709551615 5 throw 275 4 275 9 18446744073709551615 13 TypeException 275 10 275 23 62 1 ( 275 23 275 24 62 4 node 275 24 275 28 135 2 -> 275 28 275 30 18446744073709551615 4 line 275 30 275 34 63 1 , 275 34 275 35 62 4 node 275 36 275 40 135 2 -> 275 40 275 42 18446744073709551615 6 column 275 42 275 48 64 1 , 275 48 275 49 62 46 L"Operator `-' cannot be applied to operands " 276 9 276 55 18446744073709551615 12 L"of type '" 277 9 277 21 18446744073709551615 1 + 277 22 277 23 65 12 TypeToString 278 10 278 22 66 1 ( 278 22 278 23 66 4 left 278 23 278 27 138 1 ) 278 27 278 28 66 1 + 278 29 278 30 65 10 L"' and '" 278 31 278 41 18446744073709551615 1 + 278 42 278 43 65 12 TypeToString 279 10 279 22 66 1 ( 279 22 279 23 66 5 right 279 23 279 28 139 1 ) 279 28 279 29 66 1 + 279 30 279 31 65 4 L"'" 279 32 279 36 18446744073709551615 1 ) 279 36 279 37 62 1 ; 279 37 279 38 18446744073709551615 1 } 280 3 280 4 18446744073709551615 1 } 281 2 281 3 18446744073709551615 4 else 282 2 282 6 18446744073709551615 2 if 282 7 282 9 18446744073709551615 1 ( 282 10 282 11 18446744073709551615 4 kind 282 11 282 15 140 2 == 282 16 282 18 18446744073709551615 14 ExpressionKind 282 19 282 33 125 2 :: 282 33 282 35 18446744073709551615 6 Modulo 282 35 282 41 145 1 ) 282 41 282 42 18446744073709551615 1 { 283 2 283 3 18446744073709551615 2 if 284 3 284 5 18446744073709551615 1 ( 284 6 284 7 18446744073709551615 4 left 284 7 284 11 138 1 . 284 11 284 12 127 5 IsInt 284 12 284 17 127 1 ( 284 17 284 18 127 1 ) 284 18 284 19 127 2 && 284 20 284 22 18446744073709551615 5 right 284 23 284 28 139 1 . 284 28 284 29 127 5 IsInt 284 29 284 34 127 1 ( 284 34 284 35 127 1 ) 284 35 284 36 127 1 ) 284 36 284 37 18446744073709551615 1 { 285 3 285 4 18446744073709551615 4 node 286 4 286 8 135 2 -> 286 8 286 10 18446744073709551615 4 type 286 10 286 14 59 1 = 286 15 286 16 109 4 Type 286 17 286 21 110 2 :: 286 21 286 23 111 3 Int 286 23 286 26 111 1 ( 286 26 286 27 111 1 ) 286 27 286 28 111 1 ; 286 28 286 29 18446744073709551615 1 } 287 3 287 4 18446744073709551615 4 else 288 3 288 7 18446744073709551615 2 if 288 8 288 10 18446744073709551615 1 ( 288 11 288 12 18446744073709551615 4 left 288 12 288 16 138 1 . 288 16 288 17 128 6 IsLong 288 17 288 23 128 1 ( 288 23 288 24 128 1 ) 288 24 288 25 128 2 && 288 26 288 28 18446744073709551615 5 right 288 29 288 34 139 1 . 288 34 288 35 128 6 IsLong 288 35 288 41 128 1 ( 288 41 288 42 128 1 ) 288 42 288 43 128 1 ) 288 43 288 44 18446744073709551615 1 { 289 3 289 4 18446744073709551615 4 node 290 4 290 8 135 2 -> 290 8 290 10 18446744073709551615 4 type 290 10 290 14 59 1 = 290 15 290 16 109 4 Type 290 17 290 21 110 2 :: 290 21 290 23 113 4 Long 290 23 290 27 113 1 ( 290 27 290 28 113 1 ) 290 28 290 29 113 1 ; 290 29 290 30 18446744073709551615 1 } 291 3 291 4 18446744073709551615 4 else 292 3 292 7 18446744073709551615 1 { 293 3 293 4 18446744073709551615 5 throw 294 4 294 9 18446744073709551615 13 TypeException 294 10 294 23 62 1 ( 294 23 294 24 62 4 node 294 24 294 28 135 2 -> 294 28 294 30 18446744073709551615 4 line 294 30 294 34 63 1 , 294 34 294 35 62 4 node 294 36 294 40 135 2 -> 294 40 294 42 18446744073709551615 6 column 294 42 294 48 64 1 , 294 48 294 49 62 42 L"Operator cannot be applied to operands " 295 9 295 51 18446744073709551615 12 L"of type '" 296 9 296 21 18446744073709551615 1 + 296 22 296 23 65 12 TypeToString 297 10 297 22 66 1 ( 297 22 297 23 66 4 left 297 23 297 27 138 1 ) 297 27 297 28 66 1 + 297 29 297 30 65 10 L"' and '" 297 31 297 41 18446744073709551615 1 + 297 42 297 43 65 12 TypeToString 298 10 298 22 66 1 ( 298 22 298 23 66 5 right 298 23 298 28 139 1 ) 298 28 298 29 66 1 + 298 30 298 31 65 4 L"'" 298 32 298 36 18446744073709551615 1 ) 298 36 298 37 62 1 ; 298 37 298 38 18446744073709551615 1 } 299 3 299 4 18446744073709551615 1 } 300 2 300 3 18446744073709551615 4 else 301 2 301 6 18446744073709551615 2 if 301 7 301 9 18446744073709551615 1 ( 301 10 301 11 18446744073709551615 4 kind 301 11 301 15 140 2 == 301 16 301 18 18446744073709551615 14 ExpressionKind 301 19 301 33 125 2 :: 301 33 301 35 18446744073709551615 11 GreaterThan 301 35 301 46 146 2 || 301 47 301 49 18446744073709551615 4 kind 302 5 302 9 140 2 == 302 10 302 12 18446744073709551615 14 ExpressionKind 302 13 302 27 125 2 :: 302 27 302 29 18446744073709551615 8 LessThan 302 29 302 37 147 2 || 302 38 302 40 18446744073709551615 4 kind 303 5 303 9 140 2 == 303 10 303 12 18446744073709551615 14 ExpressionKind 303 13 303 27 125 2 :: 303 27 303 29 18446744073709551615 18 GreaterThanOrEqual 303 29 303 47 148 2 || 303 48 303 50 18446744073709551615 4 kind 304 5 304 9 140 2 == 304 10 304 12 18446744073709551615 14 ExpressionKind 304 13 304 27 125 2 :: 304 27 304 29 18446744073709551615 15 LessThanOrEqual 304 29 304 44 149 1 ) 304 44 304 45 18446744073709551615 1 { 305 2 305 3 18446744073709551615 2 if 306 3 306 5 18446744073709551615 1 ( 306 6 306 7 18446744073709551615 4 left 306 7 306 11 138 1 . 306 11 306 12 127 5 IsInt 306 12 306 17 127 1 ( 306 17 306 18 127 1 ) 306 18 306 19 127 2 && 306 20 306 22 18446744073709551615 5 right 306 23 306 28 139 1 . 306 28 306 29 127 5 IsInt 306 29 306 34 127 1 ( 306 34 306 35 127 1 ) 306 35 306 36 127 1 ) 306 36 306 37 18446744073709551615 1 { 307 3 307 4 18446744073709551615 4 node 308 4 308 8 135 2 -> 308 8 308 10 18446744073709551615 4 type 308 10 308 14 59 1 = 308 15 308 16 109 4 Type 308 17 308 21 110 2 :: 308 21 308 23 117 7 Boolean 308 23 308 30 117 1 ( 308 30 308 31 117 1 ) 308 31 308 32 117 1 ; 308 32 308 33 18446744073709551615 1 } 309 3 309 4 18446744073709551615 4 else 310 3 310 7 18446744073709551615 2 if 310 8 310 10 18446744073709551615 1 ( 310 11 310 12 18446744073709551615 4 left 310 12 310 16 138 1 . 310 16 310 17 130 8 IsDouble 310 17 310 25 130 1 ( 310 25 310 26 130 1 ) 310 26 310 27 130 2 && 310 28 310 30 18446744073709551615 5 right 310 31 310 36 139 1 . 310 36 310 37 130 8 IsDouble 310 37 310 45 130 1 ( 310 45 310 46 130 1 ) 310 46 310 47 130 1 ) 310 47 310 48 18446744073709551615 1 { 311 3 311 4 18446744073709551615 4 node 312 4 312 8 135 2 -> 312 8 312 10 18446744073709551615 4 type 312 10 312 14 59 1 = 312 15 312 16 109 4 Type 312 17 312 21 110 2 :: 312 21 312 23 117 7 Boolean 312 23 312 30 117 1 ( 312 30 312 31 117 1 ) 312 31 312 32 117 1 ; 312 32 312 33 18446744073709551615 1 } 313 3 313 4 18446744073709551615 4 else 314 3 314 7 18446744073709551615 2 if 314 8 314 10 18446744073709551615 1 ( 314 11 314 12 18446744073709551615 4 left 314 12 314 16 138 1 . 314 16 314 17 128 6 IsLong 314 17 314 23 128 1 ( 314 23 314 24 128 1 ) 314 24 314 25 128 2 && 314 26 314 28 18446744073709551615 5 right 314 29 314 34 139 1 . 314 34 314 35 128 6 IsLong 314 35 314 41 128 1 ( 314 41 314 42 128 1 ) 314 42 314 43 128 1 ) 314 43 314 44 18446744073709551615 1 { 315 3 315 4 18446744073709551615 4 node 316 4 316 8 135 2 -> 316 8 316 10 18446744073709551615 4 type 316 10 316 14 59 1 = 316 15 316 16 109 4 Type 316 17 316 21 110 2 :: 316 21 316 23 117 7 Boolean 316 23 316 30 117 1 ( 316 30 316 31 117 1 ) 316 31 316 32 117 1 ; 316 32 316 33 18446744073709551615 1 } 317 3 317 4 18446744073709551615 4 else 318 3 318 7 18446744073709551615 2 if 318 8 318 10 18446744073709551615 1 ( 318 11 318 12 18446744073709551615 4 left 318 12 318 16 138 1 . 318 16 318 17 129 7 IsFloat 318 17 318 24 129 1 ( 318 24 318 25 129 1 ) 318 25 318 26 129 2 && 318 27 318 29 18446744073709551615 5 right 318 30 318 35 139 1 . 318 35 318 36 129 7 IsFloat 318 36 318 43 129 1 ( 318 43 318 44 129 1 ) 318 44 318 45 129 1 ) 318 45 318 46 18446744073709551615 1 { 319 3 319 4 18446744073709551615 4 node 320 4 320 8 135 2 -> 320 8 320 10 18446744073709551615 4 type 320 10 320 14 59 1 = 320 15 320 16 109 4 Type 320 17 320 21 110 2 :: 320 21 320 23 117 7 Boolean 320 23 320 30 117 1 ( 320 30 320 31 117 1 ) 320 31 320 32 117 1 ; 320 32 320 33 18446744073709551615 1 } 321 3 321 4 18446744073709551615 4 else 322 3 322 7 18446744073709551615 1 { 323 3 323 4 18446744073709551615 5 throw 324 4 324 9 18446744073709551615 13 TypeException 324 10 324 23 62 1 ( 324 23 324 24 62 4 node 324 24 324 28 135 2 -> 324 28 324 30 18446744073709551615 4 line 324 30 324 34 63 1 , 324 34 324 35 62 4 node 324 36 324 40 135 2 -> 324 40 324 42 18446744073709551615 6 column 324 42 324 48 64 1 , 324 48 324 49 62 42 L"Operator cannot be applied to operands " 325 9 325 51 18446744073709551615 12 L"of type '" 326 9 326 21 18446744073709551615 1 + 326 22 326 23 65 12 TypeToString 327 10 327 22 66 1 ( 327 22 327 23 66 4 left 327 23 327 27 138 1 ) 327 27 327 28 66 1 + 327 29 327 30 65 10 L"' and '" 327 31 327 41 18446744073709551615 1 + 327 42 327 43 65 12 TypeToString 328 10 328 22 66 1 ( 328 22 328 23 66 5 right 328 23 328 28 139 1 ) 328 28 328 29 66 1 + 328 30 328 31 65 4 L"'" 328 32 328 36 18446744073709551615 1 ) 328 36 328 37 62 1 ; 328 37 328 38 18446744073709551615 1 } 329 3 329 4 18446744073709551615 1 } 330 2 330 3 18446744073709551615 4 else 331 2 331 6 18446744073709551615 2 if 331 7 331 9 18446744073709551615 1 ( 331 10 331 11 18446744073709551615 4 kind 331 11 331 15 140 2 == 331 16 331 18 18446744073709551615 14 ExpressionKind 331 19 331 33 125 2 :: 331 33 331 35 18446744073709551615 3 And 331 35 331 38 150 2 || 331 39 331 41 18446744073709551615 4 kind 331 42 331 46 140 2 == 331 47 331 49 18446744073709551615 14 ExpressionKind 331 50 331 64 125 2 :: 331 64 331 66 18446744073709551615 2 Or 331 66 331 68 151 1 ) 331 68 331 69 18446744073709551615 1 { 332 2 332 3 18446744073709551615 2 if 333 3 333 5 18446744073709551615 1 ( 333 6 333 7 18446744073709551615 4 left 333 7 333 11 138 1 . 333 11 333 12 133 9 IsBoolean 333 12 333 21 133 1 ( 333 21 333 22 133 1 ) 333 22 333 23 133 2 && 333 24 333 26 18446744073709551615 5 right 333 27 333 32 139 1 . 333 32 333 33 133 9 IsBoolean 333 33 333 42 133 1 ( 333 42 333 43 133 1 ) 333 43 333 44 133 1 ) 333 44 333 45 18446744073709551615 1 { 334 3 334 4 18446744073709551615 4 node 335 4 335 8 135 2 -> 335 8 335 10 18446744073709551615 4 type 335 10 335 14 59 1 = 335 15 335 16 109 4 Type 335 17 335 21 110 2 :: 335 21 335 23 117 7 Boolean 335 23 335 30 117 1 ( 335 30 335 31 117 1 ) 335 31 335 32 117 1 ; 335 32 335 33 18446744073709551615 1 } 336 3 336 4 18446744073709551615 4 else 337 3 337 7 18446744073709551615 1 { 338 3 338 4 18446744073709551615 5 throw 339 4 339 9 18446744073709551615 13 TypeException 339 10 339 23 62 1 ( 339 23 339 24 62 4 node 339 24 339 28 135 2 -> 339 28 339 30 18446744073709551615 4 line 339 30 339 34 63 1 , 339 34 339 35 62 4 node 339 36 339 40 135 2 -> 339 40 339 42 18446744073709551615 6 column 339 42 339 48 64 1 , 339 48 339 49 62 42 L"Operator cannot be applied to operands " 340 9 340 51 18446744073709551615 12 L"of type '" 341 9 341 21 18446744073709551615 1 + 341 22 341 23 65 12 TypeToString 342 10 342 22 66 1 ( 342 22 342 23 66 4 left 342 23 342 27 138 1 ) 342 27 342 28 66 1 + 342 29 342 30 65 10 L"' and '" 342 31 342 41 18446744073709551615 1 + 342 42 342 43 65 12 TypeToString 343 10 343 22 66 1 ( 343 22 343 23 66 5 right 343 23 343 28 139 1 ) 343 28 343 29 66 1 + 343 30 343 31 65 4 L"'" 343 32 343 36 18446744073709551615 1 ) 343 36 343 37 62 1 ; 343 37 343 38 18446744073709551615 1 } 344 3 344 4 18446744073709551615 1 } 345 2 345 3 18446744073709551615 4 else 346 2 346 6 18446744073709551615 2 if 346 7 346 9 18446744073709551615 1 ( 346 10 346 11 18446744073709551615 4 kind 346 11 346 15 140 2 == 346 16 346 18 18446744073709551615 14 ExpressionKind 346 19 346 33 125 2 :: 346 33 346 35 18446744073709551615 5 Equal 346 35 346 40 152 2 || 346 41 346 43 18446744073709551615 4 kind 346 44 346 48 140 2 == 346 49 346 51 18446744073709551615 14 ExpressionKind 346 52 346 66 125 2 :: 346 66 346 68 18446744073709551615 8 NotEqual 346 68 346 76 153 1 ) 346 76 346 77 18446744073709551615 1 { 347 2 347 3 18446744073709551615 2 if 348 3 348 5 18446744073709551615 1 ( 348 6 348 7 18446744073709551615 4 left 348 7 348 11 138 1 . 348 11 348 12 127 5 IsInt 348 12 348 17 127 1 ( 348 17 348 18 127 1 ) 348 18 348 19 127 2 && 348 20 348 22 18446744073709551615 5 right 348 23 348 28 139 1 . 348 28 348 29 127 5 IsInt 348 29 348 34 127 1 ( 348 34 348 35 127 1 ) 348 35 348 36 127 1 ) 348 36 348 37 18446744073709551615 1 { 349 3 349 4 18446744073709551615 4 node 350 4 350 8 135 2 -> 350 8 350 10 18446744073709551615 4 type 350 10 350 14 59 1 = 350 15 350 16 109 4 Type 350 17 350 21 110 2 :: 350 21 350 23 117 7 Boolean 350 23 350 30 117 1 ( 350 30 350 31 117 1 ) 350 31 350 32 117 1 ; 350 32 350 33 18446744073709551615 1 } 351 3 351 4 18446744073709551615 4 else 352 3 352 7 18446744073709551615 2 if 352 8 352 10 18446744073709551615 1 ( 352 11 352 12 18446744073709551615 4 left 352 12 352 16 138 1 . 352 16 352 17 128 6 IsLong 352 17 352 23 128 1 ( 352 23 352 24 128 1 ) 352 24 352 25 128 2 && 352 26 352 28 18446744073709551615 5 right 352 29 352 34 139 1 . 352 34 352 35 128 6 IsLong 352 35 352 41 128 1 ( 352 41 352 42 128 1 ) 352 42 352 43 128 1 ) 352 43 352 44 18446744073709551615 1 { 353 3 353 4 18446744073709551615 4 node 354 4 354 8 135 2 -> 354 8 354 10 18446744073709551615 4 type 354 10 354 14 59 1 = 354 15 354 16 109 4 Type 354 17 354 21 110 2 :: 354 21 354 23 117 7 Boolean 354 23 354 30 117 1 ( 354 30 354 31 117 1 ) 354 31 354 32 117 1 ; 354 32 354 33 18446744073709551615 1 } 355 3 355 4 18446744073709551615 4 else 356 3 356 7 18446744073709551615 2 if 356 8 356 10 18446744073709551615 1 ( 356 11 356 12 18446744073709551615 4 left 356 12 356 16 138 1 . 356 16 356 17 129 7 IsFloat 356 17 356 24 129 1 ( 356 24 356 25 129 1 ) 356 25 356 26 129 2 && 356 27 356 29 18446744073709551615 5 right 356 30 356 35 139 1 . 356 35 356 36 129 7 IsFloat 356 36 356 43 129 1 ( 356 43 356 44 129 1 ) 356 44 356 45 129 1 ) 356 45 356 46 18446744073709551615 1 { 357 3 357 4 18446744073709551615 4 node 358 4 358 8 135 2 -> 358 8 358 10 18446744073709551615 4 type 358 10 358 14 59 1 = 358 15 358 16 109 4 Type 358 17 358 21 110 2 :: 358 21 358 23 117 7 Boolean 358 23 358 30 117 1 ( 358 30 358 31 117 1 ) 358 31 358 32 117 1 ; 358 32 358 33 18446744073709551615 1 } 359 3 359 4 18446744073709551615 4 else 360 3 360 7 18446744073709551615 2 if 360 8 360 10 18446744073709551615 1 ( 360 11 360 12 18446744073709551615 4 left 360 12 360 16 138 1 . 360 16 360 17 130 8 IsDouble 360 17 360 25 130 1 ( 360 25 360 26 130 1 ) 360 26 360 27 130 2 && 360 28 360 30 18446744073709551615 5 right 360 31 360 36 139 1 . 360 36 360 37 130 8 IsDouble 360 37 360 45 130 1 ( 360 45 360 46 130 1 ) 360 46 360 47 130 1 ) 360 47 360 48 18446744073709551615 1 { 361 3 361 4 18446744073709551615 4 node 362 4 362 8 135 2 -> 362 8 362 10 18446744073709551615 4 type 362 10 362 14 59 1 = 362 15 362 16 109 4 Type 362 17 362 21 110 2 :: 362 21 362 23 117 7 Boolean 362 23 362 30 117 1 ( 362 30 362 31 117 1 ) 362 31 362 32 117 1 ; 362 32 362 33 18446744073709551615 1 } 363 3 363 4 18446744073709551615 4 else 364 3 364 7 18446744073709551615 2 if 364 8 364 10 18446744073709551615 1 ( 364 11 364 12 18446744073709551615 4 left 364 12 364 16 138 1 . 364 16 364 17 133 9 IsBoolean 364 17 364 26 133 1 ( 364 26 364 27 133 1 ) 364 27 364 28 133 2 && 364 29 364 31 18446744073709551615 5 right 364 32 364 37 139 1 . 364 37 364 38 133 9 IsBoolean 364 38 364 47 133 1 ( 364 47 364 48 133 1 ) 364 48 364 49 133 1 ) 364 49 364 50 18446744073709551615 1 { 365 3 365 4 18446744073709551615 4 node 366 4 366 8 135 2 -> 366 8 366 10 18446744073709551615 4 type 366 10 366 14 59 1 = 366 15 366 16 109 4 Type 366 17 366 21 110 2 :: 366 21 366 23 117 7 Boolean 366 23 366 30 117 1 ( 366 30 366 31 117 1 ) 366 31 366 32 117 1 ; 366 32 366 33 18446744073709551615 1 } 367 3 367 4 18446744073709551615 4 else 368 3 368 7 18446744073709551615 2 if 368 8 368 10 18446744073709551615 1 ( 368 11 368 12 18446744073709551615 4 left 368 12 368 16 138 1 . 368 16 368 17 154 6 IsChar 368 17 368 23 154 1 ( 368 23 368 24 154 1 ) 368 24 368 25 154 2 && 368 26 368 28 18446744073709551615 5 right 368 29 368 34 139 1 . 368 34 368 35 154 6 IsChar 368 35 368 41 154 1 ( 368 41 368 42 154 1 ) 368 42 368 43 154 1 ) 368 43 368 44 18446744073709551615 1 { 369 3 369 4 18446744073709551615 4 node 370 4 370 8 135 2 -> 370 8 370 10 18446744073709551615 4 type 370 10 370 14 59 1 = 370 15 370 16 109 4 Type 370 17 370 21 110 2 :: 370 21 370 23 117 7 Boolean 370 23 370 30 117 1 ( 370 30 370 31 117 1 ) 370 31 370 32 117 1 ; 370 32 370 33 18446744073709551615 1 } 371 3 371 4 18446744073709551615 4 else 372 3 372 7 18446744073709551615 2 if 372 8 372 10 18446744073709551615 1 ( 372 11 372 12 18446744073709551615 4 left 372 12 372 16 138 1 . 372 16 372 17 155 8 IsString 372 17 372 25 155 1 ( 372 25 372 26 155 1 ) 372 26 372 27 155 2 && 372 28 372 30 18446744073709551615 5 right 372 31 372 36 139 1 . 372 36 372 37 155 8 IsString 372 37 372 45 155 1 ( 372 45 372 46 155 1 ) 372 46 372 47 155 1 ) 372 47 372 48 18446744073709551615 1 { 373 3 373 4 18446744073709551615 4 node 374 4 374 8 135 2 -> 374 8 374 10 18446744073709551615 4 type 374 10 374 14 59 1 = 374 15 374 16 109 4 Type 374 17 374 21 110 2 :: 374 21 374 23 117 7 Boolean 374 23 374 30 117 1 ( 374 30 374 31 117 1 ) 374 31 374 32 117 1 ; 374 32 374 33 18446744073709551615 1 } 375 3 375 4 18446744073709551615 4 else 376 3 376 7 18446744073709551615 1 { 377 3 377 4 18446744073709551615 5 throw 378 4 378 9 18446744073709551615 13 TypeException 378 10 378 23 62 1 ( 378 23 378 24 62 4 node 378 24 378 28 135 2 -> 378 28 378 30 18446744073709551615 4 line 378 30 378 34 63 1 , 378 34 378 35 62 4 node 378 36 378 40 135 2 -> 378 40 378 42 18446744073709551615 6 column 378 42 378 48 64 1 , 378 48 378 49 62 42 L"Operator cannot be applied to operands " 379 9 379 51 18446744073709551615 12 L"of type '" 380 9 380 21 18446744073709551615 1 + 380 22 380 23 65 12 TypeToString 381 10 381 22 66 1 ( 381 22 381 23 66 4 left 381 23 381 27 138 1 ) 381 27 381 28 66 1 + 381 29 381 30 65 10 L"' and '" 381 31 381 41 18446744073709551615 1 + 381 42 381 43 65 12 TypeToString 382 10 382 22 66 1 ( 382 22 382 23 66 5 right 382 23 382 28 139 1 ) 382 28 382 29 66 1 + 382 30 382 31 65 4 L"'" 382 32 382 36 18446744073709551615 1 ) 382 36 382 37 62 1 ; 382 37 382 38 18446744073709551615 1 } 383 3 383 4 18446744073709551615 1 } 384 2 384 3 18446744073709551615 4 else 385 2 385 6 18446744073709551615 1 { 386 2 386 3 18446744073709551615 5 throw 387 3 387 8 18446744073709551615 13 TypeException 387 9 387 22 62 1 ( 387 22 387 23 62 4 node 387 23 387 27 135 2 -> 387 27 387 29 18446744073709551615 4 line 387 29 387 33 63 1 , 387 33 387 34 62 4 node 387 35 387 39 135 2 -> 387 39 387 41 18446744073709551615 6 column 387 41 387 47 64 1 , 387 47 387 48 62 42 L"Operator cannot be applied to operands " 388 8 388 50 18446744073709551615 12 L"of type '" 389 8 389 20 18446744073709551615 1 + 389 21 389 22 65 12 TypeToString 390 9 390 21 66 1 ( 390 21 390 22 66 4 left 390 22 390 26 138 1 ) 390 26 390 27 66 1 + 390 28 390 29 65 10 L"' and '" 390 30 390 40 18446744073709551615 1 + 390 41 390 42 65 12 TypeToString 391 9 391 21 66 1 ( 391 21 391 22 66 5 right 391 22 391 27 139 1 ) 391 27 391 28 66 1 + 391 29 391 30 65 4 L"'" 391 31 391 35 18446744073709551615 1 ) 391 35 391 36 62 1 ; 391 36 391 37 18446744073709551615 1 } 392 2 392 3 18446744073709551615 1 } 393 1 393 2 18446744073709551615 4 void 394 1 394 5 18446744073709551615 11 TypeChecker 394 6 394 17 4 2 :: 394 17 394 19 100 5 Visit 394 19 394 24 100 1 ( 394 24 394 25 100 16 AssignExpression 394 25 394 41 156 1 * 394 41 394 42 18446744073709551615 4 node 394 43 394 47 157 1 ) 394 47 394 48 100 1 { 395 1 395 2 18446744073709551615 4 node 396 2 396 6 157 2 -> 396 6 396 8 18446744073709551615 5 value 396 8 396 13 158 2 -> 396 13 396 15 58 6 Accept 396 15 396 21 58 1 ( 396 21 396 22 58 4 this 396 22 396 26 18446744073709551615 1 ) 396 26 396 27 58 1 ; 396 27 396 28 18446744073709551615 2 if 397 2 397 4 18446744073709551615 1 ( 397 5 397 6 18446744073709551615 5 scope 397 6 397 11 10 2 -> 397 11 397 13 159 8 Contains 397 13 397 21 159 1 ( 397 21 397 22 159 4 node 397 22 397 26 157 2 -> 397 26 397 28 18446744073709551615 4 name 397 28 397 32 160 1 ) 397 32 397 33 159 1 ) 397 33 397 34 18446744073709551615 1 { 398 2 398 3 18446744073709551615 3 any 399 3 399 6 103 5 value 399 7 399 12 161 1 = 399 13 399 14 18446744073709551615 5 scope 399 15 399 20 10 2 -> 399 20 399 22 162 3 Get 399 22 399 25 162 1 ( 399 25 399 26 162 4 node 399 26 399 30 157 2 -> 399 30 399 32 18446744073709551615 4 name 399 32 399 36 160 1 ) 399 36 399 37 162 1 ; 399 37 399 38 18446744073709551615 2 if 400 3 400 5 18446744073709551615 1 ( 400 6 400 7 18446744073709551615 5 value 400 7 400 12 161 1 . 400 12 400 13 106 4 type 400 13 400 17 106 1 ( 400 17 400 18 106 1 ) 400 18 400 19 106 2 == 400 20 400 22 107 6 typeid 400 23 400 29 18446744073709551615 1 ( 400 29 400 30 18446744073709551615 13 LocalVariable 400 30 400 43 75 1 ) 400 43 400 44 18446744073709551615 1 ) 400 44 400 45 18446744073709551615 1 { 401 3 401 4 18446744073709551615 4 node 402 4 402 8 157 2 -> 402 8 402 10 18446744073709551615 4 type 402 10 402 14 59 1 = 402 15 402 16 109 8 any_cast 402 17 402 25 163 1 < 402 25 402 26 163 13 LocalVariable 402 26 402 39 75 1 > 402 39 402 40 163 1 ( 402 40 402 41 163 5 value 402 41 402 46 161 1 ) 402 46 402 47 163 1 . 402 47 402 48 18446744073709551615 4 type 402 48 402 52 164 1 ; 402 52 402 53 18446744073709551615 2 if 403 4 403 6 18446744073709551615 1 ( 403 7 403 8 18446744073709551615 4 node 403 8 403 12 157 2 -> 403 12 403 14 18446744073709551615 4 type 403 14 403 18 59 2 == 403 19 403 21 165 4 node 403 22 403 26 157 2 -> 403 26 403 28 18446744073709551615 5 value 403 28 403 33 158 2 -> 403 33 403 35 18446744073709551615 4 type 403 35 403 39 59 1 ) 403 39 403 40 18446744073709551615 1 { 404 4 404 5 18446744073709551615 1 } 405 4 405 5 18446744073709551615 4 else 406 4 406 8 18446744073709551615 1 { 407 4 407 5 18446744073709551615 5 throw 408 5 408 10 18446744073709551615 13 TypeException 408 11 408 24 62 1 ( 408 24 408 25 62 4 node 408 25 408 29 157 2 -> 408 29 408 31 18446744073709551615 4 line 408 31 408 35 63 1 , 408 35 408 36 62 4 node 408 37 408 41 157 2 -> 408 41 408 43 18446744073709551615 6 column 408 43 408 49 64 1 , 408 49 408 50 62 35 L"Cannot implicitly convert type `" 409 10 409 45 18446744073709551615 1 + 409 46 409 47 65 12 TypeToString 410 11 410 23 66 1 ( 410 23 410 24 66 4 node 410 24 410 28 157 2 -> 410 28 410 30 18446744073709551615 5 value 410 30 410 35 158 2 -> 410 35 410 37 18446744073709551615 4 type 410 37 410 41 59 1 ) 410 41 410 42 66 1 + 410 43 410 44 65 8 L" to '" 411 11 411 19 18446744073709551615 1 + 411 20 411 21 65 12 TypeToString 411 22 411 34 66 1 ( 411 34 411 35 66 4 node 411 35 411 39 157 2 -> 411 39 411 41 18446744073709551615 4 type 411 41 411 45 59 1 ) 411 45 411 46 66 1 + 411 47 411 48 65 4 L"'" 412 11 412 15 18446744073709551615 1 ) 412 15 412 16 62 1 ; 412 16 412 17 18446744073709551615 1 } 413 4 413 5 18446744073709551615 1 } 414 3 414 4 18446744073709551615 4 else 415 3 415 7 18446744073709551615 1 { 416 3 416 4 18446744073709551615 5 throw 417 4 417 9 18446744073709551615 13 TypeException 417 10 417 23 62 1 ( 417 23 417 24 62 4 node 417 24 417 28 157 2 -> 417 28 417 30 18446744073709551615 4 line 417 30 417 34 63 1 , 417 34 417 35 62 4 node 417 36 417 40 157 2 -> 417 40 417 42 18446744073709551615 6 column 417 42 417 48 64 1 , 417 48 417 49 62 9 L"name '" 418 9 418 18 18446744073709551615 1 + 418 19 418 20 65 4 node 418 21 418 25 157 2 -> 418 25 418 27 18446744073709551615 4 name 418 27 418 31 160 1 + 418 32 418 33 65 22 L"' is not a variable" 419 10 419 32 18446744073709551615 1 ) 419 32 419 33 62 1 ; 419 33 419 34 18446744073709551615 1 } 420 3 420 4 18446744073709551615 1 } 421 2 421 3 18446744073709551615 4 else 422 2 422 6 18446744073709551615 1 { 423 2 423 3 18446744073709551615 5 throw 424 3 424 8 18446744073709551615 13 TypeException 424 9 424 22 62 1 ( 424 22 424 23 62 4 node 424 23 424 27 157 2 -> 424 27 424 29 18446744073709551615 4 line 424 29 424 33 63 1 , 424 33 424 34 62 4 node 424 35 424 39 157 2 -> 424 39 424 41 18446744073709551615 6 column 424 41 424 47 64 1 , 424 47 424 48 62 9 L"name '" 425 8 425 17 18446744073709551615 1 + 425 18 425 19 65 4 node 425 20 425 24 157 2 -> 425 24 425 26 18446744073709551615 4 name 425 26 425 30 160 1 + 425 31 425 32 65 19 L"' is not defined" 425 33 425 52 18446744073709551615 1 ) 425 52 425 53 62 1 ; 425 53 425 54 18446744073709551615 1 } 426 2 426 3 18446744073709551615 1 } 427 1 427 2 18446744073709551615 4 void 428 1 428 5 18446744073709551615 11 TypeChecker 428 6 428 17 4 2 :: 428 17 428 19 100 5 Visit 428 19 428 24 100 1 ( 428 24 428 25 100 15 BlockExpression 428 25 428 40 166 1 * 428 40 428 41 18446744073709551615 4 node 428 42 428 46 167 1 ) 428 46 428 47 100 1 { 429 1 429 2 18446744073709551615 3 for 430 2 430 5 18446744073709551615 1 ( 430 6 430 7 18446744073709551615 6 ExpPtr 430 7 430 13 81 1 & 430 13 430 14 18446744073709551615 3 exp 430 15 430 18 168 1 : 430 19 430 20 39 4 node 430 21 430 25 167 2 -> 430 25 430 27 18446744073709551615 11 expressions 430 27 430 38 169 1 ) 430 38 430 39 18446744073709551615 1 { 431 2 431 3 18446744073709551615 3 exp 432 3 432 6 168 2 -> 432 6 432 8 58 6 Accept 432 8 432 14 58 1 ( 432 14 432 15 58 4 this 432 15 432 19 18446744073709551615 1 ) 432 19 432 20 58 1 ; 432 20 432 21 18446744073709551615 1 } 433 2 433 3 18446744073709551615 4 node 434 2 434 6 167 2 -> 434 6 434 8 18446744073709551615 4 type 434 8 434 12 59 1 = 434 13 434 14 109 4 Type 434 15 434 19 110 2 :: 434 19 434 21 170 4 Unit 434 21 434 25 170 1 ( 434 25 434 26 170 1 ) 434 26 434 27 170 1 ; 434 27 434 28 18446744073709551615 1 } 435 1 435 2 18446744073709551615 4 void 436 1 436 5 18446744073709551615 11 TypeChecker 436 6 436 17 4 2 :: 436 17 436 19 100 5 Visit 436 19 436 24 100 1 ( 436 24 436 25 100 16 IfThenExpression 436 25 436 41 171 1 * 436 41 436 42 18446744073709551615 4 node 436 43 436 47 172 1 ) 436 47 436 48 100 1 { 437 1 437 2 18446744073709551615 4 node 438 2 438 6 172 2 -> 438 6 438 8 18446744073709551615 9 condition 438 8 438 17 173 2 -> 438 17 438 19 58 6 Accept 438 19 438 25 58 1 ( 438 25 438 26 58 4 this 438 26 438 30 18446744073709551615 1 ) 438 30 438 31 58 1 ; 438 31 438 32 18446744073709551615 2 if 439 2 439 4 18446744073709551615 1 ( 439 5 439 6 18446744073709551615 4 node 439 6 439 10 172 2 -> 439 10 439 12 18446744073709551615 9 condition 439 12 439 21 173 2 -> 439 21 439 23 18446744073709551615 4 type 439 23 439 27 59 1 . 439 27 439 28 133 9 IsBoolean 439 28 439 37 133 1 ( 439 37 439 38 133 1 ) 439 38 439 39 133 1 ) 439 39 439 40 18446744073709551615 1 { 440 2 440 3 18446744073709551615 4 node 441 3 441 7 172 2 -> 441 7 441 9 18446744073709551615 6 ifTrue 441 9 441 15 174 2 -> 441 15 441 17 58 6 Accept 441 17 441 23 58 1 ( 441 23 441 24 58 4 this 441 24 441 28 18446744073709551615 1 ) 441 28 441 29 58 1 ; 441 29 441 30 18446744073709551615 4 node 442 3 442 7 172 2 -> 442 7 442 9 18446744073709551615 4 type 442 9 442 13 59 1 = 442 14 442 15 109 4 Type 442 16 442 20 110 2 :: 442 20 442 22 170 4 Unit 442 22 442 26 170 1 ( 442 26 442 27 170 1 ) 442 27 442 28 170 1 ; 442 28 442 29 18446744073709551615 1 } 443 2 443 3 18446744073709551615 4 else 444 2 444 6 18446744073709551615 1 { 445 2 445 3 18446744073709551615 5 throw 446 3 446 8 18446744073709551615 13 TypeException 446 9 446 22 62 1 ( 446 22 446 23 62 4 node 446 23 446 27 172 2 -> 446 27 446 29 18446744073709551615 4 line 446 29 446 33 63 1 , 446 33 446 34 62 4 node 446 35 446 39 172 2 -> 446 39 446 41 18446744073709551615 6 column 446 41 446 47 64 1 , 446 47 446 48 62 41 L"value cannot be converted to 'Boolean'" 447 8 447 49 18446744073709551615 1 ) 447 49 447 50 62 1 ; 447 50 447 51 18446744073709551615 1 } 448 2 448 3 18446744073709551615 1 } 449 1 449 2 18446744073709551615 4 void 450 1 450 5 18446744073709551615 11 TypeChecker 450 6 450 17 4 2 :: 450 17 450 19 100 5 Visit 450 19 450 24 100 1 ( 450 24 450 25 100 20 IfThenElseExpression 450 25 450 45 175 1 * 450 45 450 46 18446744073709551615 4 node 450 47 450 51 176 1 ) 450 51 450 52 100 1 { 451 1 451 2 18446744073709551615 4 node 452 2 452 6 176 2 -> 452 6 452 8 18446744073709551615 9 condition 452 8 452 17 177 2 -> 452 17 452 19 58 6 Accept 452 19 452 25 58 1 ( 452 25 452 26 58 4 this 452 26 452 30 18446744073709551615 1 ) 452 30 452 31 58 1 ; 452 31 452 32 18446744073709551615 2 if 453 2 453 4 18446744073709551615 1 ( 453 5 453 6 18446744073709551615 4 node 453 6 453 10 176 2 -> 453 10 453 12 18446744073709551615 9 condition 453 12 453 21 177 2 -> 453 21 453 23 18446744073709551615 4 type 453 23 453 27 59 1 . 453 27 453 28 133 9 IsBoolean 453 28 453 37 133 1 ( 453 37 453 38 133 1 ) 453 38 453 39 133 1 ) 453 39 453 40 18446744073709551615 1 { 454 2 454 3 18446744073709551615 4 node 455 3 455 7 176 2 -> 455 7 455 9 18446744073709551615 6 ifTrue 455 9 455 15 178 2 -> 455 15 455 17 58 6 Accept 455 17 455 23 58 1 ( 455 23 455 24 58 4 this 455 24 455 28 18446744073709551615 1 ) 455 28 455 29 58 1 ; 455 29 455 30 18446744073709551615 4 node 456 3 456 7 176 2 -> 456 7 456 9 18446744073709551615 7 ifFalse 456 9 456 16 179 2 -> 456 16 456 18 58 6 Accept 456 18 456 24 58 1 ( 456 24 456 25 58 4 this 456 25 456 29 18446744073709551615 1 ) 456 29 456 30 58 1 ; 456 30 456 31 18446744073709551615 4 node 457 3 457 7 176 2 -> 457 7 457 9 18446744073709551615 4 type 457 9 457 13 59 1 = 457 14 457 15 109 4 Type 457 16 457 20 110 2 :: 457 20 457 22 170 4 Unit 457 22 457 26 170 1 ( 457 26 457 27 170 1 ) 457 27 457 28 170 1 ; 457 28 457 29 18446744073709551615 1 } 458 2 458 3 18446744073709551615 4 else 459 2 459 6 18446744073709551615 1 { 460 2 460 3 18446744073709551615 5 throw 461 3 461 8 18446744073709551615 13 TypeException 461 9 461 22 62 1 ( 461 22 461 23 62 4 node 461 23 461 27 176 2 -> 461 27 461 29 18446744073709551615 4 line 461 29 461 33 63 1 , 461 33 461 34 62 4 node 461 35 461 39 176 2 -> 461 39 461 41 18446744073709551615 6 column 461 41 461 47 64 1 , 461 47 461 48 62 41 L"value cannot be converted to 'Boolean'" 462 8 462 49 18446744073709551615 1 ) 462 49 462 50 62 1 ; 462 50 462 51 18446744073709551615 1 } 463 2 463 3 18446744073709551615 1 } 464 1 464 2 18446744073709551615 4 void 465 1 465 5 18446744073709551615 11 TypeChecker 465 6 465 17 4 2 :: 465 17 465 19 100 5 Visit 465 19 465 24 100 1 ( 465 24 465 25 100 14 CallExpression 465 25 465 39 180 1 * 465 39 465 40 18446744073709551615 4 node 465 41 465 45 181 1 ) 465 45 465 46 100 1 { 466 1 466 2 18446744073709551615 4 node 467 2 467 6 181 2 -> 467 6 467 8 18446744073709551615 8 function 467 8 467 16 182 2 -> 467 16 467 18 58 6 Accept 467 18 467 24 58 1 ( 467 24 467 25 58 4 this 467 25 467 29 18446744073709551615 1 ) 467 29 467 30 58 1 ; 467 30 467 31 18446744073709551615 3 for 468 2 468 5 18446744073709551615 1 ( 468 6 468 7 18446744073709551615 6 ExpPtr 468 7 468 13 81 1 & 468 13 468 14 18446744073709551615 3 arg 468 15 468 18 183 1 : 468 19 468 20 39 4 node 468 21 468 25 181 2 -> 468 25 468 27 18446744073709551615 9 arguments 468 27 468 36 184 1 ) 468 36 468 37 18446744073709551615 1 { 469 2 469 3 18446744073709551615 3 arg 470 3 470 6 183 2 -> 470 6 470 8 58 6 Accept 470 8 470 14 58 1 ( 470 14 470 15 58 4 this 470 15 470 19 18446744073709551615 1 ) 470 19 470 20 58 1 ; 470 20 470 21 18446744073709551615 1 } 471 2 471 3 18446744073709551615 2 if 472 2 472 4 18446744073709551615 1 ( 472 5 472 6 18446744073709551615 4 node 472 6 472 10 181 2 -> 472 10 472 12 18446744073709551615 8 function 472 12 472 20 182 2 -> 472 20 472 22 18446744073709551615 4 type 472 22 472 26 59 1 . 472 26 472 27 185 10 IsFunction 472 27 472 37 185 1 ( 472 37 472 38 185 1 ) 472 38 472 39 185 1 ) 472 39 472 40 18446744073709551615 1 { 473 2 473 3 18446744073709551615 6 vector 474 3 474 9 186 1 < 474 9 474 10 18446744073709551615 4 Type 474 10 474 14 110 1 > 474 14 474 15 18446744073709551615 1 & 474 15 474 16 18446744073709551615 5 types 474 17 474 22 187 1 = 474 23 474 24 18446744073709551615 4 node 474 25 474 29 181 2 -> 474 29 474 31 18446744073709551615 8 function 474 31 474 39 182 2 -> 474 39 474 41 18446744073709551615 4 type 474 41 474 45 59 1 . 474 45 474 46 18446744073709551615 10 parameters 474 46 474 56 188 1 ; 474 56 474 57 18446744073709551615 2 if 475 3 475 5 18446744073709551615 1 ( 475 6 475 7 18446744073709551615 5 types 475 7 475 12 187 1 . 475 12 475 13 189 4 size 475 13 475 17 189 1 ( 475 17 475 18 189 1 ) 475 18 475 19 189 2 == 475 20 475 22 18446744073709551615 4 node 475 23 475 27 181 2 -> 475 27 475 29 18446744073709551615 9 arguments 475 29 475 38 184 1 . 475 38 475 39 189 4 size 475 39 475 43 189 1 ( 475 43 475 44 189 1 ) 475 44 475 45 189 1 + 475 46 475 47 18446744073709551615 1 1 475 48 475 49 18446744073709551615 1 ) 475 49 475 50 18446744073709551615 1 { 476 3 476 4 18446744073709551615 3 int 477 4 477 7 18446744073709551615 1 n 477 8 477 9 190 1 = 477 10 477 11 18446744073709551615 4 node 477 12 477 16 181 2 -> 477 16 477 18 18446744073709551615 9 arguments 477 18 477 27 184 1 . 477 27 477 28 189 4 size 477 28 477 32 189 1 ( 477 32 477 33 189 1 ) 477 33 477 34 189 1 ; 477 34 477 35 18446744073709551615 3 for 478 4 478 7 18446744073709551615 1 ( 478 8 478 9 18446744073709551615 3 int 478 9 478 12 18446744073709551615 1 i 478 13 478 14 191 1 = 478 15 478 16 18446744073709551615 1 0 478 17 478 18 18446744073709551615 1 ; 478 18 478 19 18446744073709551615 1 i 478 20 478 21 191 1 < 478 22 478 23 18446744073709551615 1 n 478 24 478 25 190 1 ; 478 25 478 26 18446744073709551615 1 i 478 27 478 28 191 2 ++ 478 28 478 30 18446744073709551615 1 ) 478 30 478 31 18446744073709551615 1 { 479 4 479 5 18446744073709551615 2 if 480 5 480 7 18446744073709551615 1 ( 480 8 480 9 18446744073709551615 5 types 480 9 480 14 187 1 . 480 14 480 15 192 2 at 480 15 480 17 192 1 ( 480 17 480 18 192 1 i 480 18 480 19 191 1 ) 480 19 480 20 192 2 != 480 21 480 23 60 4 node 480 24 480 28 181 2 -> 480 28 480 30 18446744073709551615 9 arguments 480 30 480 39 184 1 . 480 39 480 40 192 2 at 480 40 480 42 192 1 ( 480 42 480 43 192 1 i 480 43 480 44 191 1 ) 480 44 480 45 192 2 -> 480 45 480 47 18446744073709551615 4 type 480 47 480 51 59 1 ) 480 51 480 52 18446744073709551615 1 { 481 5 481 6 18446744073709551615 5 throw 482 6 482 11 18446744073709551615 13 TypeException 482 12 482 25 62 1 ( 482 25 482 26 62 4 node 482 26 482 30 181 2 -> 482 30 482 32 18446744073709551615 4 line 482 32 482 36 63 1 , 482 36 482 37 62 4 node 482 38 482 42 181 2 -> 482 42 482 44 18446744073709551615 6 column 482 44 482 50 64 1 , 482 50 482 51 62 31 L"argument type does not match" 483 11 483 42 18446744073709551615 1 ) 483 42 483 43 62 1 ; 483 43 483 44 18446744073709551615 1 } 484 5 484 6 18446744073709551615 1 } 485 4 485 5 18446744073709551615 4 node 486 4 486 8 181 2 -> 486 8 486 10 18446744073709551615 4 type 486 10 486 14 59 1 = 486 15 486 16 109 5 types 486 17 486 22 187 1 . 486 22 486 23 193 4 back 486 23 486 27 193 1 ( 486 27 486 28 193 1 ) 486 28 486 29 193 1 ; 486 29 486 30 18446744073709551615 1 } 487 3 487 4 18446744073709551615 4 else 488 3 488 7 18446744073709551615 1 { 489 3 489 4 18446744073709551615 5 throw 490 4 490 9 18446744073709551615 13 TypeException 490 10 490 23 62 1 ( 490 23 490 24 62 4 node 490 24 490 28 181 2 -> 490 28 490 30 18446744073709551615 4 line 490 30 490 34 63 1 , 490 34 490 35 62 4 node 490 36 490 40 181 2 -> 490 40 490 42 18446744073709551615 6 column 490 42 490 48 64 1 , 490 48 490 49 62 32 L"argument count does not match" 491 9 491 41 18446744073709551615 1 ) 491 41 491 42 62 1 ; 491 42 491 43 18446744073709551615 1 } 492 3 492 4 18446744073709551615 1 } 493 2 493 3 18446744073709551615 4 else 494 2 494 6 18446744073709551615 1 { 495 2 495 3 18446744073709551615 5 throw 496 3 496 8 18446744073709551615 13 TypeException 496 9 496 22 62 1 ( 496 22 496 23 62 4 node 496 23 496 27 181 2 -> 496 27 496 29 18446744073709551615 4 line 496 29 496 33 63 1 , 496 33 496 34 62 4 node 496 35 496 39 181 2 -> 496 39 496 41 18446744073709551615 6 column 496 41 496 47 64 1 , 496 47 496 48 62 36 L"object cannot be used as function" 497 8 497 44 18446744073709551615 1 ) 497 44 497 45 62 1 ; 497 45 497 46 18446744073709551615 1 } 498 2 498 3 18446744073709551615 1 } 499 1 499 2 18446744073709551615 4 void 500 1 500 5 18446744073709551615 11 TypeChecker 500 6 500 17 4 2 :: 500 17 500 19 100 5 Visit 500 19 500 24 100 1 ( 500 24 500 25 100 18 VariableExpression 500 25 500 43 194 1 * 500 43 500 44 18446744073709551615 4 node 500 45 500 49 195 1 ) 500 49 500 50 100 1 { 501 1 501 2 18446744073709551615 2 if 502 2 502 4 18446744073709551615 1 ( 502 5 502 6 18446744073709551615 5 scope 502 6 502 11 10 2 -> 502 11 502 13 159 8 Contains 502 13 502 21 159 1 ( 502 21 502 22 159 4 node 502 22 502 26 195 2 -> 502 26 502 28 18446744073709551615 4 name 502 28 502 32 196 1 ) 502 32 502 33 159 1 ) 502 33 502 34 18446744073709551615 1 { 503 2 503 3 18446744073709551615 3 any 504 3 504 6 103 5 value 504 7 504 12 197 1 = 504 13 504 14 18446744073709551615 5 scope 504 15 504 20 10 2 -> 504 20 504 22 162 3 Get 504 22 504 25 162 1 ( 504 25 504 26 162 4 node 504 26 504 30 195 2 -> 504 30 504 32 18446744073709551615 4 name 504 32 504 36 196 1 ) 504 36 504 37 162 1 ; 504 37 504 38 18446744073709551615 2 if 505 3 505 5 18446744073709551615 1 ( 505 6 505 7 18446744073709551615 5 value 505 7 505 12 197 1 . 505 12 505 13 106 4 type 505 13 505 17 106 1 ( 505 17 505 18 106 1 ) 505 18 505 19 106 2 == 505 20 505 22 107 6 typeid 505 23 505 29 18446744073709551615 1 ( 505 29 505 30 18446744073709551615 13 LocalVariable 505 30 505 43 75 1 ) 505 43 505 44 18446744073709551615 1 ) 505 44 505 45 18446744073709551615 1 { 506 3 506 4 18446744073709551615 4 node 507 4 507 8 195 2 -> 507 8 507 10 18446744073709551615 4 type 507 10 507 14 59 1 = 507 15 507 16 109 8 any_cast 507 17 507 25 163 1 < 507 25 507 26 163 13 LocalVariable 507 26 507 39 75 1 > 507 39 507 40 163 1 ( 507 40 507 41 163 5 value 507 41 507 46 197 1 ) 507 46 507 47 163 1 . 507 47 507 48 18446744073709551615 4 type 507 48 507 52 164 1 ; 507 52 507 53 18446744073709551615 1 } 508 3 508 4 18446744073709551615 4 else 509 3 509 7 18446744073709551615 2 if 509 8 509 10 18446744073709551615 1 ( 509 11 509 12 18446744073709551615 5 value 509 12 509 17 197 1 . 509 17 509 18 106 4 type 509 18 509 22 106 1 ( 509 22 509 23 106 1 ) 509 23 509 24 106 2 == 509 25 509 27 107 6 typeid 509 28 509 34 18446744073709551615 1 ( 509 34 509 35 18446744073709551615 9 Parameter 509 35 509 44 70 1 ) 509 44 509 45 18446744073709551615 1 ) 509 45 509 46 18446744073709551615 1 { 510 3 510 4 18446744073709551615 4 node 511 4 511 8 195 2 -> 511 8 511 10 18446744073709551615 4 type 511 10 511 14 59 1 = 511 15 511 16 109 8 any_cast 511 17 511 25 163 1 < 511 25 511 26 163 9 Parameter 511 26 511 35 70 1 > 511 35 511 36 163 1 ( 511 36 511 37 163 5 value 511 37 511 42 197 1 ) 511 42 511 43 163 1 . 511 43 511 44 18446744073709551615 4 type 511 44 511 48 198 1 ; 511 48 511 49 18446744073709551615 1 } 512 3 512 4 18446744073709551615 4 else 513 3 513 7 18446744073709551615 2 if 513 8 513 10 18446744073709551615 1 ( 513 11 513 12 18446744073709551615 5 value 513 12 513 17 197 1 . 513 17 513 18 106 4 type 513 18 513 22 106 1 ( 513 22 513 23 106 1 ) 513 23 513 24 106 2 == 513 25 513 27 107 6 typeid 513 28 513 34 18446744073709551615 1 ( 513 34 513 35 18446744073709551615 5 Field 513 35 513 40 55 1 ) 513 40 513 41 18446744073709551615 1 ) 513 41 513 42 18446744073709551615 1 { 514 3 514 4 18446744073709551615 4 node 515 4 515 8 195 2 -> 515 8 515 10 18446744073709551615 4 type 515 10 515 14 59 1 = 515 15 515 16 109 8 any_cast 515 17 515 25 163 1 < 515 25 515 26 163 5 Field 515 26 515 31 55 1 > 515 31 515 32 163 1 ( 515 32 515 33 163 5 value 515 33 515 38 197 1 ) 515 38 515 39 163 1 . 515 39 515 40 18446744073709551615 4 type 515 40 515 44 61 1 ; 515 44 515 45 18446744073709551615 1 } 516 3 516 4 18446744073709551615 4 else 517 3 517 7 18446744073709551615 2 if 517 8 517 10 18446744073709551615 1 ( 517 11 517 12 18446744073709551615 5 value 517 12 517 17 197 1 . 517 17 517 18 106 4 type 517 18 517 22 106 1 ( 517 22 517 23 106 1 ) 517 23 517 24 106 2 == 517 25 517 27 107 6 typeid 517 28 517 34 18446744073709551615 1 ( 517 34 517 35 18446744073709551615 8 Function 517 35 517 43 44 1 ) 517 43 517 44 18446744073709551615 1 ) 517 44 517 45 18446744073709551615 1 { 518 3 518 4 18446744073709551615 4 node 519 4 519 8 195 2 -> 519 8 519 10 18446744073709551615 4 type 519 10 519 14 59 1 = 519 15 519 16 109 8 any_cast 519 17 519 25 163 1 < 519 25 519 26 163 8 Function 519 26 519 34 44 1 > 519 34 519 35 163 1 ( 519 35 519 36 163 5 value 519 36 519 41 197 1 ) 519 41 519 42 163 1 . 519 42 519 43 18446744073709551615 12 functionType 519 43 519 55 199 1 ; 519 55 519 56 18446744073709551615 1 } 520 3 520 4 18446744073709551615 4 else 521 3 521 7 18446744073709551615 2 if 521 8 521 10 18446744073709551615 1 ( 521 11 521 12 18446744073709551615 5 value 521 12 521 17 197 1 . 521 17 521 18 106 4 type 521 18 521 22 106 1 ( 521 22 521 23 106 1 ) 521 23 521 24 106 2 == 521 25 521 27 107 6 typeid 521 28 521 34 18446744073709551615 1 ( 521 34 521 35 18446744073709551615 6 Module 521 35 521 41 27 1 ) 521 41 521 42 18446744073709551615 1 ) 521 42 521 43 18446744073709551615 1 { 522 3 522 4 18446744073709551615 4 node 523 4 523 8 195 2 -> 523 8 523 10 18446744073709551615 4 type 523 10 523 14 59 1 = 523 15 523 16 109 8 any_cast 523 17 523 25 163 1 < 523 25 523 26 163 6 Module 523 26 523 32 27 1 > 523 32 523 33 163 1 ( 523 33 523 34 163 5 value 523 34 523 39 197 1 ) 523 39 523 40 163 1 . 523 40 523 41 18446744073709551615 4 type 523 41 523 45 87 1 ; 523 45 523 46 18446744073709551615 1 } 524 3 524 4 18446744073709551615 4 else 525 3 525 7 18446744073709551615 2 if 525 8 525 10 18446744073709551615 1 ( 525 11 525 12 18446744073709551615 5 value 525 12 525 17 197 1 . 525 17 525 18 106 4 type 525 18 525 22 106 1 ( 525 22 525 23 106 1 ) 525 23 525 24 106 2 == 525 25 525 27 107 6 typeid 525 28 525 34 18446744073709551615 1 ( 525 34 525 35 18446744073709551615 5 Class 525 35 525 40 32 1 ) 525 40 525 41 18446744073709551615 1 ) 525 41 525 42 18446744073709551615 1 { 526 3 526 4 18446744073709551615 4 node 527 4 527 8 195 2 -> 527 8 527 10 18446744073709551615 4 type 527 10 527 14 59 1 = 527 15 527 16 109 8 any_cast 527 17 527 25 163 1 < 527 25 527 26 163 5 Class 527 26 527 31 32 1 > 527 31 527 32 163 1 ( 527 32 527 33 163 5 value 527 33 527 38 197 1 ) 527 38 527 39 163 1 . 527 39 527 40 18446744073709551615 4 type 527 40 527 44 96 1 ; 527 44 527 45 18446744073709551615 1 } 528 3 528 4 18446744073709551615 4 else 529 3 529 7 18446744073709551615 1 { 530 3 530 4 18446744073709551615 5 throw 531 4 531 9 18446744073709551615 7 wstring 531 10 531 17 118 1 ( 531 17 531 18 120 21 L"not supported type" 531 18 531 39 18446744073709551615 1 ) 531 39 531 40 120 1 ; 531 40 531 41 18446744073709551615 1 } 532 3 532 4 18446744073709551615 1 } 533 2 533 3 18446744073709551615 4 else 534 2 534 6 18446744073709551615 1 { 535 2 535 3 18446744073709551615 5 throw 536 3 536 8 18446744073709551615 13 TypeException 536 9 536 22 62 1 ( 536 22 536 23 62 4 node 536 23 536 27 195 2 -> 536 27 536 29 18446744073709551615 4 line 536 29 536 33 63 1 , 536 33 536 34 62 4 node 536 35 536 39 195 2 -> 536 39 536 41 18446744073709551615 6 column 536 41 536 47 64 1 , 536 47 536 48 62 9 L"name '" 537 8 537 17 18446744073709551615 1 + 537 18 537 19 65 4 node 537 20 537 24 195 2 -> 537 24 537 26 18446744073709551615 4 name 537 26 537 30 196 1 + 537 31 537 32 65 19 L"' is not defined" 537 33 537 52 18446744073709551615 1 ) 537 52 537 53 62 1 ; 537 53 537 54 18446744073709551615 1 } 538 2 538 3 18446744073709551615 1 } 539 1 539 2 18446744073709551615 4 void 540 1 540 5 18446744073709551615 11 TypeChecker 540 6 540 17 4 2 :: 540 17 540 19 100 5 Visit 540 19 540 24 100 1 ( 540 24 540 25 100 16 ReturnExpression 540 25 540 41 200 1 * 540 41 540 42 18446744073709551615 4 node 540 43 540 47 201 1 ) 540 47 540 48 100 1 { 541 1 541 2 18446744073709551615 4 node 542 2 542 6 201 2 -> 542 6 542 8 18446744073709551615 5 value 542 8 542 13 202 2 -> 542 13 542 15 58 6 Accept 542 15 542 21 58 1 ( 542 21 542 22 58 4 this 542 22 542 26 18446744073709551615 1 ) 542 26 542 27 58 1 ; 542 27 542 28 18446744073709551615 4 node 543 2 543 6 201 2 -> 543 6 543 8 18446744073709551615 4 type 543 8 543 12 59 1 = 543 13 543 14 109 4 node 543 15 543 19 201 2 -> 543 19 543 21 18446744073709551615 5 value 543 21 543 26 202 2 -> 543 26 543 28 18446744073709551615 4 type 543 28 543 32 59 1 ; 543 32 543 33 18446744073709551615 1 } 544 1 544 2 18446744073709551615 4 void 545 1 545 5 18446744073709551615 11 TypeChecker 545 6 545 17 4 2 :: 545 17 545 19 100 5 Visit 545 19 545 24 100 1 ( 545 24 545 25 100 15 WhileExpression 545 25 545 40 203 1 * 545 40 545 41 18446744073709551615 4 node 545 42 545 46 204 1 ) 545 46 545 47 100 1 { 546 1 546 2 18446744073709551615 4 node 547 2 547 6 204 2 -> 547 6 547 8 18446744073709551615 9 condition 547 8 547 17 205 2 -> 547 17 547 19 58 6 Accept 547 19 547 25 58 1 ( 547 25 547 26 58 4 this 547 26 547 30 18446744073709551615 1 ) 547 30 547 31 58 1 ; 547 31 547 32 18446744073709551615 2 if 548 2 548 4 18446744073709551615 1 ( 548 5 548 6 18446744073709551615 4 node 548 6 548 10 204 2 -> 548 10 548 12 18446744073709551615 9 condition 548 12 548 21 205 2 -> 548 21 548 23 18446744073709551615 4 type 548 23 548 27 59 1 . 548 27 548 28 133 9 IsBoolean 548 28 548 37 133 1 ( 548 37 548 38 133 1 ) 548 38 548 39 133 1 ) 548 39 548 40 18446744073709551615 1 { 549 2 549 3 18446744073709551615 4 node 550 3 550 7 204 2 -> 550 7 550 9 18446744073709551615 4 body 550 9 550 13 206 2 -> 550 13 550 15 58 6 Accept 550 15 550 21 58 1 ( 550 21 550 22 58 4 this 550 22 550 26 18446744073709551615 1 ) 550 26 550 27 58 1 ; 550 27 550 28 18446744073709551615 4 node 551 3 551 7 204 2 -> 551 7 551 9 18446744073709551615 4 type 551 9 551 13 59 1 = 551 14 551 15 109 4 Type 551 16 551 20 110 2 :: 551 20 551 22 170 4 Unit 551 22 551 26 170 1 ( 551 26 551 27 170 1 ) 551 27 551 28 170 1 ; 551 28 551 29 18446744073709551615 1 } 552 2 552 3 18446744073709551615 4 else 553 2 553 6 18446744073709551615 1 { 554 2 554 3 18446744073709551615 5 throw 555 3 555 8 18446744073709551615 13 TypeException 555 9 555 22 62 1 ( 555 22 555 23 62 4 node 555 23 555 27 204 2 -> 555 27 555 29 18446744073709551615 4 line 555 29 555 33 63 1 , 555 33 555 34 62 4 node 555 35 555 39 204 2 -> 555 39 555 41 18446744073709551615 6 column 555 41 555 47 64 1 , 555 47 555 48 62 41 L"value cannot be converted to 'Boolean'" 556 8 556 49 18446744073709551615 1 ) 556 49 556 50 62 1 ; 556 50 556 51 18446744073709551615 1 } 557 2 557 3 18446744073709551615 1 } 558 1 558 2 18446744073709551615 4 void 559 1 559 5 18446744073709551615 11 TypeChecker 559 6 559 17 4 2 :: 559 17 559 19 100 5 Visit 559 19 559 24 100 1 ( 559 24 559 25 100 13 DotExpression 559 25 559 38 207 1 * 559 38 559 39 18446744073709551615 4 node 559 40 559 44 208 1 ) 559 44 559 45 100 1 { 560 1 560 2 18446744073709551615 4 node 561 2 561 6 208 2 -> 561 6 561 8 18446744073709551615 6 object 561 8 561 14 209 2 -> 561 14 561 16 58 6 Accept 561 16 561 22 58 1 ( 561 22 561 23 58 4 this 561 23 561 27 18446744073709551615 1 ) 561 27 561 28 58 1 ; 561 28 561 29 18446744073709551615 4 Type 562 2 562 6 110 1 & 562 6 562 7 18446744073709551615 7 objType 562 8 562 15 210 1 = 562 16 562 17 18446744073709551615 4 node 562 18 562 22 208 2 -> 562 22 562 24 18446744073709551615 6 object 562 24 562 30 209 2 -> 562 30 562 32 18446744073709551615 4 type 562 32 562 36 59 1 ; 562 36 562 37 18446744073709551615 2 if 563 2 563 4 18446744073709551615 1 ( 563 5 563 6 18446744073709551615 7 objType 563 6 563 13 210 1 . 563 13 563 14 211 8 IsModule 563 14 563 22 211 1 ( 563 22 563 23 211 1 ) 563 23 563 24 211 1 ) 563 24 563 25 18446744073709551615 1 { 564 2 564 3 18446744073709551615 6 Module 565 3 565 9 27 10 moduleInfo 565 10 565 20 212 1 = 565 21 565 22 18446744073709551615 8 any_cast 565 23 565 31 163 1 < 565 31 565 32 163 6 Module 565 32 565 38 27 1 > 565 38 565 39 163 1 ( 565 39 565 40 163 5 scope 565 40 565 45 10 2 -> 565 45 565 47 162 3 Get 565 47 565 50 162 1 ( 565 50 565 51 162 7 objType 565 51 565 58 210 1 . 565 58 565 59 18446744073709551615 4 name 565 59 565 63 88 1 ) 565 63 565 64 162 1 ) 565 64 565 65 163 1 ; 565 65 565 66 18446744073709551615 2 if 566 3 566 5 18446744073709551615 1 ( 566 6 566 7 18446744073709551615 10 moduleInfo 566 7 566 17 212 1 . 566 17 566 18 18446744073709551615 8 fieldMap 566 18 566 26 213 1 . 566 26 566 27 214 4 find 566 27 566 31 214 1 ( 566 31 566 32 214 4 node 566 32 566 36 208 2 -> 566 36 566 38 18446744073709551615 4 name 566 38 566 42 215 1 ) 566 42 566 43 214 2 != 566 44 566 46 216 10 moduleInfo 566 47 566 57 212 1 . 566 57 566 58 18446744073709551615 8 fieldMap 566 58 566 66 213 1 . 566 66 566 67 217 3 end 566 67 566 70 217 1 ( 566 70 566 71 217 1 ) 566 71 566 72 217 1 ) 566 72 566 73 18446744073709551615 1 { 567 3 567 4 18446744073709551615 4 node 568 4 568 8 208 2 -> 568 8 568 10 18446744073709551615 4 type 568 10 568 14 59 1 = 568 15 568 16 109 10 moduleInfo 568 17 568 27 212 1 . 568 27 568 28 18446744073709551615 8 fieldMap 568 28 568 36 213 1 [ 568 36 568 37 218 4 node 568 37 568 41 208 2 -> 568 41 568 43 18446744073709551615 4 name 568 43 568 47 215 1 ] 568 47 568 48 218 1 . 568 48 568 49 18446744073709551615 4 type 568 49 568 53 61 1 ; 568 53 568 54 18446744073709551615 1 } 569 3 569 4 18446744073709551615 4 else 570 3 570 7 18446744073709551615 2 if 570 8 570 10 18446744073709551615 1 ( 570 11 570 12 18446744073709551615 10 moduleInfo 570 12 570 22 212 1 . 570 22 570 23 18446744073709551615 9 functions 570 23 570 32 43 1 . 570 32 570 33 214 4 find 570 33 570 37 214 1 ( 570 37 570 38 214 4 node 570 38 570 42 208 2 -> 570 42 570 44 18446744073709551615 4 name 570 44 570 48 215 1 ) 570 48 570 49 214 2 != 570 50 570 52 216 10 moduleInfo 571 6 571 16 212 1 . 571 16 571 17 18446744073709551615 9 functions 571 17 571 26 43 1 . 571 26 571 27 217 3 end 571 27 571 30 217 1 ( 571 30 571 31 217 1 ) 571 31 571 32 217 1 ) 571 32 571 33 18446744073709551615 1 { 572 3 572 4 18446744073709551615 4 node 573 4 573 8 208 2 -> 573 8 573 10 18446744073709551615 4 type 573 10 573 14 59 1 = 573 15 573 16 109 10 moduleInfo 573 17 573 27 212 1 . 573 27 573 28 18446744073709551615 9 functions 573 28 573 37 43 1 [ 573 37 573 38 218 4 node 573 38 573 42 208 2 -> 573 42 573 44 18446744073709551615 4 name 573 44 573 48 215 1 ] 573 48 573 49 218 1 . 573 49 573 50 18446744073709551615 12 functionType 573 50 573 62 199 1 ; 573 62 573 63 18446744073709551615 1 } 574 3 574 4 18446744073709551615 4 else 575 3 575 7 18446744073709551615 1 { 576 3 576 4 18446744073709551615 5 throw 577 4 577 9 18446744073709551615 13 TypeException 577 10 577 23 62 1 ( 577 23 577 24 62 4 node 577 24 577 28 208 2 -> 577 28 577 30 18446744073709551615 4 line 577 30 577 34 63 1 , 577 34 577 35 62 4 node 577 36 577 40 208 2 -> 577 40 577 42 18446744073709551615 6 column 577 42 577 48 64 1 , 577 48 577 49 62 20 L"field not defined" 577 50 577 70 18446744073709551615 1 ) 577 70 577 71 62 1 ; 577 71 577 72 18446744073709551615 1 } 578 3 578 4 18446744073709551615 1 } 579 2 579 3 18446744073709551615 4 else 580 2 580 6 18446744073709551615 2 if 580 7 580 9 18446744073709551615 1 ( 580 10 580 11 18446744073709551615 7 objType 580 11 580 18 210 1 . 580 18 580 19 219 7 IsClass 580 19 580 26 219 1 ( 580 26 580 27 219 1 ) 580 27 580 28 219 1 ) 580 28 580 29 18446744073709551615 1 { 581 2 581 3 18446744073709551615 5 Class 582 3 582 8 32 9 classInfo 582 9 582 18 220 1 = 582 19 582 20 18446744073709551615 8 any_cast 582 21 582 29 163 1 < 582 29 582 30 163 5 Class 582 30 582 35 32 1 > 582 35 582 36 163 1 ( 582 36 582 37 163 5 scope 582 37 582 42 10 2 -> 582 42 582 44 162 3 Get 582 44 582 47 162 1 ( 582 47 582 48 162 7 objType 582 48 582 55 210 1 . 582 55 582 56 18446744073709551615 4 name 582 56 582 60 88 1 ) 582 60 582 61 162 1 ) 582 61 582 62 163 1 ; 582 62 582 63 18446744073709551615 2 if 583 3 583 5 18446744073709551615 1 ( 583 6 583 7 18446744073709551615 9 classInfo 583 7 583 16 220 1 . 583 16 583 17 18446744073709551615 8 fieldMap 583 17 583 25 221 1 . 583 25 583 26 214 4 find 583 26 583 30 214 1 ( 583 30 583 31 214 4 node 583 31 583 35 208 2 -> 583 35 583 37 18446744073709551615 4 name 583 37 583 41 215 1 ) 583 41 583 42 214 2 != 583 43 583 45 216 9 classInfo 583 46 583 55 220 1 . 583 55 583 56 18446744073709551615 8 fieldMap 583 56 583 64 221 1 . 583 64 583 65 217 3 end 583 65 583 68 217 1 ( 583 68 583 69 217 1 ) 583 69 583 70 217 1 ) 583 70 583 71 18446744073709551615 1 { 584 3 584 4 18446744073709551615 4 node 585 4 585 8 208 2 -> 585 8 585 10 18446744073709551615 4 type 585 10 585 14 59 1 = 585 15 585 16 109 9 classInfo 585 17 585 26 220 1 . 585 26 585 27 18446744073709551615 8 fieldMap 585 27 585 35 221 1 [ 585 35 585 36 218 4 node 585 36 585 40 208 2 -> 585 40 585 42 18446744073709551615 4 name 585 42 585 46 215 1 ] 585 46 585 47 218 1 . 585 47 585 48 18446744073709551615 4 type 585 48 585 52 61 1 ; 585 52 585 53 18446744073709551615 1 } 586 3 586 4 18446744073709551615 4 else 587 3 587 7 18446744073709551615 2 if 587 8 587 10 18446744073709551615 1 ( 587 11 587 12 18446744073709551615 9 classInfo 587 12 587 21 220 1 . 587 21 587 22 18446744073709551615 9 functions 587 22 587 31 53 1 . 587 31 587 32 214 4 find 587 32 587 36 214 1 ( 587 36 587 37 214 4 node 587 37 587 41 208 2 -> 587 41 587 43 18446744073709551615 4 name 587 43 587 47 215 1 ) 587 47 587 48 214 2 != 587 49 587 51 216 9 classInfo 588 6 588 15 220 1 . 588 15 588 16 18446744073709551615 9 functions 588 16 588 25 53 1 . 588 25 588 26 217 3 end 588 26 588 29 217 1 ( 588 29 588 30 217 1 ) 588 30 588 31 217 1 ) 588 31 588 32 18446744073709551615 1 { 589 3 589 4 18446744073709551615 4 node 590 4 590 8 208 2 -> 590 8 590 10 18446744073709551615 4 type 590 10 590 14 59 1 = 590 15 590 16 109 9 classInfo 590 17 590 26 220 1 . 590 26 590 27 18446744073709551615 9 functions 590 27 590 36 53 1 [ 590 36 590 37 218 4 node 590 37 590 41 208 2 -> 590 41 590 43 18446744073709551615 4 name 590 43 590 47 215 1 ] 590 47 590 48 218 1 . 590 48 590 49 18446744073709551615 12 functionType 590 49 590 61 199 1 ; 590 61 590 62 18446744073709551615 1 } 591 3 591 4 18446744073709551615 4 else 592 3 592 7 18446744073709551615 1 { 593 3 593 4 18446744073709551615 5 throw 594 4 594 9 18446744073709551615 13 TypeException 594 10 594 23 62 1 ( 594 23 594 24 62 4 node 594 24 594 28 208 2 -> 594 28 594 30 18446744073709551615 4 line 594 30 594 34 63 1 , 594 34 594 35 62 4 node 594 36 594 40 208 2 -> 594 40 594 42 18446744073709551615 6 column 594 42 594 48 64 1 , 594 48 594 49 62 20 L"field not defined" 594 50 594 70 18446744073709551615 1 ) 594 70 594 71 62 1 ; 594 71 594 72 18446744073709551615 1 } 595 3 595 4 18446744073709551615 1 } 596 2 596 3 18446744073709551615 4 else 597 2 597 6 18446744073709551615 1 { 598 2 598 3 18446744073709551615 5 throw 599 3 599 8 18446744073709551615 13 TypeException 599 9 599 22 62 1 ( 599 22 599 23 62 4 node 599 23 599 27 208 2 -> 599 27 599 29 18446744073709551615 4 line 599 29 599 33 63 1 , 599 33 599 34 62 4 node 599 35 599 39 208 2 -> 599 39 599 41 18446744073709551615 6 column 599 41 599 47 64 1 , 599 47 599 48 62 13 L"error type" 599 49 599 62 18446744073709551615 1 ) 599 62 599 63 62 1 ; 599 63 599 64 18446744073709551615 1 } 600 2 600 3 18446744073709551615 1 } 601 1 601 2 18446744073709551615 0 0 222 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 11 TypeChecker 4 1 3 0 15 NamespaceRecord 10 1 3 0 77 28:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 nsRecord:TypeChecker 4 1 3 0 5 Scope 9 1 3 0 76 31:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 scope:TypeChecker 9 1 3 0 77 33:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 76 35:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 19 Collect:TypeChecker 9 1 3 0 77 38:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 40:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 17 Check:TypeChecker 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 77 44:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 46:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 47:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 50:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 77 52:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 23 CheckModule:TypeChecker 9 1 3 0 77 55:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 77 57:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 22 CheckClass:TypeChecker 10 1 3 0 77 62:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 64:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 65:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 67:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 21 1 3 0 22 CheckField:TypeChecker 9 1 3 0 77 71:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 16 functions:Module 4 1 3 0 8 Function 9 1 3 0 77 73:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 25 CheckFunction:TypeChecker 10 1 3 0 77 78:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 80:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 81:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 83:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 12 fields:Class 9 1 3 0 77 87:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 functions:Class 9 1 3 0 77 89:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 5 Field 10 1 3 0 77 94:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 6 1 3 0 15 type:Expression 8 1 3 0 10 operator!= 6 1 3 0 10 type:Field 4 1 3 0 13 TypeException 6 1 3 0 15 line:Expression 6 1 3 0 17 column:Expression 8 1 3 0 13 operator+:std 8 1 3 0 12 TypeToString 10 1 3 0 78 105:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 107:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 108:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 9 Parameter 9 1 3 0 78 110:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 parameters:Function 21 1 3 0 9 Put:Scope 6 1 3 0 14 name:Parameter 4 1 3 0 13 LocalVariable 9 1 3 0 78 114:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 18 variables:Function 6 1 3 0 18 name:LocalVariable 9 1 3 0 78 118:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 value:LocalVariable 36 1 3 0 6 ExpPtr 9 1 3 0 78 122:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 expressions:Function 10 1 3 0 78 128:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 130:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 132:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 type:Module 6 1 3 0 9 name:Type 9 1 3 0 78 134:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 10 name:Field 9 1 3 0 78 138:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 140:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 13 name:Function 9 1 3 0 78 144:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 146:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 10 type:Class 9 1 3 0 78 148:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 152:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 154:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 2 3 0 24 Visit:Visitor:Expression 17 Visit:TypeChecker 4 1 3 0 18 ConstantExpression 10 1 3 0 78 159:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 7 any:std 9 1 3 0 77 161:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 21 1 3 0 14 operator=:Type 4 1 3 0 4 Type 21 1 3 0 8 Int:Type 20 1 3 0 7 int64_t 21 1 3 0 9 Long:Type 21 1 3 0 10 Float:Type 21 1 3 0 11 Double:Type 21 1 3 0 9 Char:Type 21 1 3 0 12 Boolean:Type 20 1 3 0 19 wstring:__cxx11:std 21 1 3 0 11 String:Type 24 1 3 0 24 basic_string:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 78 195:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 21 1 3 0 10 IsInt:Type 21 1 3 0 11 IsLong:Type 21 1 3 0 12 IsFloat:Type 21 1 3 0 13 IsDouble:Type 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 18 Not:ExpressionKind 21 1 3 0 14 IsBoolean:Type 4 1 3 0 16 BinaryExpression 10 1 3 0 78 247:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 9 1 3 0 77 251:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 252:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 253:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 18 And:ExpressionKind 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 23 NotEqual:ExpressionKind 21 1 3 0 11 IsChar:Type 21 1 3 0 13 IsString:Type 4 1 3 0 16 AssignExpression 10 1 3 0 78 394:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:AssignExpression 21 1 3 0 14 Contains:Scope 6 1 3 0 21 name:AssignExpression 9 1 3 0 77 399:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 9 Get:Scope 8 1 3 0 12 any_cast:std 6 1 3 0 18 type:LocalVariable 8 1 3 0 10 operator== 4 1 3 0 15 BlockExpression 10 1 3 0 78 428:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 430:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 expressions:BlockExpression 21 1 3 0 9 Unit:Type 4 1 3 0 16 IfThenExpression 10 1 3 0 78 436:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 78 450:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 14 CallExpression 10 1 3 0 78 465:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 78 468:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 arguments:CallExpression 21 1 3 0 15 IsFunction:Type 31 1 3 0 10 vector:std 9 1 3 0 78 474:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 parameters:Type 21 1 3 0 15 size:vector:std 9 1 3 0 77 477:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 478:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 at:vector:std 21 1 3 0 15 back:vector:std 4 1 3 0 18 VariableExpression 10 1 3 0 78 500:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 name:VariableExpression 9 1 3 0 77 504:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 type:Parameter 6 1 3 0 21 functionType:Function 4 1 3 0 16 ReturnExpression 10 1 3 0 78 540:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 78 545:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 4 1 3 0 13 DotExpression 10 1 3 0 78 559:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 object:DotExpression 9 1 3 0 77 562:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 IsModule:Type 9 1 3 0 78 565:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 fieldMap:Module 21 1 3 0 22 find:unordered_map:std 6 1 3 0 18 name:DotExpression 8 1 3 0 23 operator!=:__detail:std 21 1 3 0 21 end:unordered_map:std 21 1 3 0 28 operator[]:unordered_map:std 21 1 3 0 12 IsClass:Type 9 1 3 0 77 582:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 fieldMap:Class 0 0 8 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1529755055 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530592503 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530611193 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1530610473 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SymbolTable.hpp 1529836059 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 1530720697 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1530610574
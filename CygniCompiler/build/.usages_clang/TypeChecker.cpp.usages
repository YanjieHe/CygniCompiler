22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3646 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 17 "TypeChecker.hpp" 1 10 1 27 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 8 any_cast 4 12 4 20 1 1 ; 4 20 4 21 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 4 endl 5 12 5 16 2 1 ; 5 16 5 17 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 5 wcout 6 12 6 17 3 1 ; 6 17 6 18 18446744073709551615 11 TypeChecker 8 1 8 12 4 2 :: 8 12 8 14 4 11 TypeChecker 8 14 8 25 4 1 ( 8 25 8 26 4 15 NamespaceRecord 8 26 8 41 5 1 & 8 41 8 42 18446744073709551615 8 nsRecord 8 43 8 51 6 1 ) 8 51 8 52 4 1 : 9 2 9 3 4 8 nsRecord 9 4 9 12 7 1 { 9 12 9 13 18446744073709551615 8 nsRecord 9 13 9 21 6 1 } 9 21 9 22 18446744073709551615 1 { 10 1 10 2 18446744073709551615 10 scopeStack 11 2 11 12 8 1 . 11 12 11 13 9 4 Push 11 13 11 17 9 1 ( 11 17 11 18 9 5 Scope 11 18 11 23 10 1 ( 11 23 11 24 10 1 ) 11 24 11 25 10 1 ) 11 25 11 26 9 1 ; 11 26 11 27 18446744073709551615 7 int32_t 12 2 12 9 11 11 moduleCount 12 10 12 21 12 1 = 12 22 12 23 18446744073709551615 1 0 12 24 12 25 18446744073709551615 1 ; 12 25 12 26 18446744073709551615 7 int32_t 13 2 13 9 11 10 classCount 13 10 13 20 13 1 = 13 21 13 22 18446744073709551615 1 0 13 23 13 24 18446744073709551615 1 ; 13 24 13 25 18446744073709551615 3 for 14 2 14 5 18446744073709551615 1 ( 14 6 14 7 18446744073709551615 4 auto 14 7 14 11 18446744073709551615 1 & 14 11 14 12 18446744073709551615 4 pair 14 13 14 17 14 1 : 14 18 14 19 15 8 nsRecord 14 20 14 28 6 1 . 14 28 14 29 18446744073709551615 6 record 14 29 14 35 16 1 ) 14 35 14 36 18446744073709551615 1 { 15 2 15 3 18446744073709551615 4 auto 16 3 16 7 18446744073709551615 1 & 16 7 16 8 18446744073709551615 5 nsPtr 16 9 16 14 17 1 = 16 15 16 16 18446744073709551615 4 pair 16 17 16 21 14 1 . 16 21 16 22 18446744073709551615 6 second 16 22 16 28 18 1 ; 16 28 16 29 18446744073709551615 7 Collect 17 3 17 10 19 1 ( 17 10 17 11 19 5 nsPtr 17 11 17 16 17 1 , 17 16 17 17 19 11 moduleCount 17 18 17 29 12 1 , 17 29 17 30 19 10 classCount 17 31 17 41 13 1 ) 17 41 17 42 19 1 ; 17 42 17 43 18446744073709551615 1 } 18 2 18 3 18446744073709551615 3 for 19 2 19 5 18446744073709551615 1 ( 19 6 19 7 18446744073709551615 4 auto 19 7 19 11 18446744073709551615 1 & 19 11 19 12 18446744073709551615 4 pair 19 13 19 17 20 1 : 19 18 19 19 15 8 nsRecord 19 20 19 28 6 1 . 19 28 19 29 18446744073709551615 6 record 19 29 19 35 16 1 ) 19 35 19 36 18446744073709551615 1 { 20 2 20 3 18446744073709551615 4 auto 21 3 21 7 18446744073709551615 1 & 21 7 21 8 18446744073709551615 5 nsPtr 21 9 21 14 21 1 = 21 15 21 16 18446744073709551615 4 pair 21 17 21 21 20 1 . 21 21 21 22 18446744073709551615 6 second 21 22 21 28 18 1 ; 21 28 21 29 18446744073709551615 5 Check 22 3 22 8 22 1 ( 22 8 22 9 22 5 nsPtr 22 9 22 14 21 1 ) 22 14 22 15 22 1 ; 22 15 22 16 18446744073709551615 1 } 23 2 23 3 18446744073709551615 1 } 24 1 24 2 18446744073709551615 4 void 25 1 25 5 18446744073709551615 11 TypeChecker 25 6 25 17 4 2 :: 25 17 25 19 22 5 Check 25 19 25 24 22 1 ( 25 24 25 25 22 10 shared_ptr 25 25 25 35 23 1 < 25 35 25 36 18446744073709551615 9 Namespace 25 36 25 45 24 1 > 25 45 25 46 18446744073709551615 5 nsPtr 25 47 25 52 25 1 ) 25 52 25 53 22 1 { 26 1 26 2 18446744073709551615 10 scopeStack 27 2 27 12 8 1 . 27 12 27 13 9 4 Push 27 13 27 17 9 1 ( 27 17 27 18 9 5 Scope 27 18 27 23 10 1 ( 27 23 27 24 10 1 ) 27 24 27 25 10 1 ) 27 25 27 26 9 1 ; 27 26 27 27 18446744073709551615 3 for 28 2 28 5 18446744073709551615 1 ( 28 6 28 7 18446744073709551615 4 auto 28 7 28 11 18446744073709551615 1 & 28 11 28 12 18446744073709551615 4 pair 28 13 28 17 26 1 : 28 18 28 19 15 5 nsPtr 28 20 28 25 25 2 -> 28 25 28 27 18446744073709551615 7 modules 28 27 28 34 27 1 ) 28 34 28 35 18446744073709551615 1 { 29 2 29 3 18446744073709551615 6 Module 30 3 30 9 28 1 & 30 9 30 10 18446744073709551615 10 moduleInfo 30 11 30 21 29 1 = 30 22 30 23 18446744073709551615 4 pair 30 24 30 28 26 1 . 30 28 30 29 18446744073709551615 6 second 30 29 30 35 18 1 ; 30 35 30 36 18446744073709551615 11 CheckModule 31 3 31 14 30 1 ( 31 14 31 15 30 10 moduleInfo 31 15 31 25 29 1 ) 31 25 31 26 30 1 ; 31 26 31 27 18446744073709551615 1 } 32 2 32 3 18446744073709551615 3 for 33 2 33 5 18446744073709551615 1 ( 33 6 33 7 18446744073709551615 4 auto 33 7 33 11 18446744073709551615 1 & 33 11 33 12 18446744073709551615 4 pair 33 13 33 17 31 1 : 33 18 33 19 15 5 nsPtr 33 20 33 25 25 2 -> 33 25 33 27 18446744073709551615 7 classes 33 27 33 34 32 1 ) 33 34 33 35 18446744073709551615 1 { 34 2 34 3 18446744073709551615 5 Class 35 3 35 8 33 1 & 35 8 35 9 18446744073709551615 9 classInfo 35 10 35 19 34 1 = 35 20 35 21 18446744073709551615 4 pair 35 22 35 26 31 1 . 35 26 35 27 18446744073709551615 6 second 35 27 35 33 18 1 ; 35 33 35 34 18446744073709551615 10 CheckClass 36 3 36 13 35 1 ( 36 13 36 14 35 9 classInfo 36 14 36 23 34 1 ) 36 23 36 24 35 1 ; 36 24 36 25 18446744073709551615 1 } 37 2 37 3 18446744073709551615 10 scopeStack 38 2 38 12 8 1 . 38 12 38 13 36 3 Pop 38 13 38 16 36 1 ( 38 16 38 17 36 1 ) 38 17 38 18 36 1 ; 38 18 38 19 18446744073709551615 1 } 39 1 39 2 18446744073709551615 4 void 40 1 40 5 18446744073709551615 11 TypeChecker 40 6 40 17 4 2 :: 40 17 40 19 30 11 CheckModule 40 19 40 30 30 1 ( 40 30 40 31 30 6 Module 40 31 40 37 28 1 & 40 37 40 38 18446744073709551615 10 moduleInfo 40 39 40 49 37 1 ) 40 49 40 50 30 1 { 41 1 41 2 18446744073709551615 10 scopeStack 42 2 42 12 8 1 . 42 12 42 13 9 4 Push 42 13 42 17 9 1 ( 42 17 42 18 9 5 Scope 42 18 42 23 10 1 ( 42 23 42 24 10 1 ) 42 24 42 25 10 1 ) 42 25 42 26 9 1 ; 42 26 42 27 18446744073709551615 3 for 43 2 43 5 18446744073709551615 1 ( 43 6 43 7 18446744073709551615 4 auto 43 7 43 11 18446744073709551615 1 & 43 11 43 12 18446744073709551615 5 field 43 13 43 18 38 1 : 43 19 43 20 39 10 moduleInfo 43 21 43 31 37 1 . 43 31 43 32 18446744073709551615 6 fields 43 32 43 38 40 1 ) 43 38 43 39 18446744073709551615 1 { 44 2 44 3 18446744073709551615 10 CheckField 45 3 45 13 41 1 ( 45 13 45 14 41 5 field 45 14 45 19 38 1 ) 45 19 45 20 41 1 ; 45 20 45 21 18446744073709551615 1 } 46 2 46 3 18446744073709551615 3 for 47 2 47 5 18446744073709551615 1 ( 47 6 47 7 18446744073709551615 4 auto 47 7 47 11 18446744073709551615 1 & 47 11 47 12 18446744073709551615 8 function 47 13 47 21 42 1 : 47 22 47 23 39 10 moduleInfo 47 24 47 34 37 1 . 47 34 47 35 18446744073709551615 9 functions 47 35 47 44 43 1 ) 47 44 47 45 18446744073709551615 1 { 48 2 48 3 18446744073709551615 13 CheckFunction 49 3 49 16 44 1 ( 49 16 49 17 44 8 function 49 17 49 25 42 1 ) 49 25 49 26 44 1 ; 49 26 49 27 18446744073709551615 1 } 50 2 50 3 18446744073709551615 10 scopeStack 51 2 51 12 8 1 . 51 12 51 13 36 3 Pop 51 13 51 16 36 1 ( 51 16 51 17 36 1 ) 51 17 51 18 36 1 ; 51 18 51 19 18446744073709551615 1 } 52 1 52 2 18446744073709551615 4 void 53 1 53 5 18446744073709551615 11 TypeChecker 53 6 53 17 4 2 :: 53 17 53 19 35 10 CheckClass 53 19 53 29 35 1 ( 53 29 53 30 35 5 Class 53 30 53 35 33 1 & 53 35 53 36 18446744073709551615 9 classInfo 53 37 53 46 45 1 ) 53 46 53 47 35 1 { 54 1 54 2 18446744073709551615 10 scopeStack 55 2 55 12 8 1 . 55 12 55 13 9 4 Push 55 13 55 17 9 1 ( 55 17 55 18 9 5 Scope 55 18 55 23 10 1 ( 55 23 55 24 10 1 ) 55 24 55 25 10 1 ) 55 25 55 26 9 1 ; 55 26 55 27 18446744073709551615 3 for 56 2 56 5 18446744073709551615 1 ( 56 6 56 7 18446744073709551615 4 auto 56 7 56 11 18446744073709551615 1 & 56 11 56 12 18446744073709551615 5 field 56 13 56 18 46 1 : 56 19 56 20 39 9 classInfo 56 21 56 30 45 1 . 56 30 56 31 18446744073709551615 6 fields 56 31 56 37 47 1 ) 56 37 56 38 18446744073709551615 1 { 57 2 57 3 18446744073709551615 10 CheckField 58 3 58 13 41 1 ( 58 13 58 14 41 5 field 58 14 58 19 46 1 ) 58 19 58 20 41 1 ; 58 20 58 21 18446744073709551615 1 } 59 2 59 3 18446744073709551615 3 for 60 2 60 5 18446744073709551615 1 ( 60 6 60 7 18446744073709551615 4 auto 60 7 60 11 18446744073709551615 1 & 60 11 60 12 18446744073709551615 8 function 60 13 60 21 48 1 : 60 22 60 23 39 9 classInfo 60 24 60 33 45 1 . 60 33 60 34 18446744073709551615 9 functions 60 34 60 43 49 1 ) 60 43 60 44 18446744073709551615 1 { 61 2 61 3 18446744073709551615 13 CheckFunction 62 3 62 16 44 1 ( 62 16 62 17 44 8 function 62 17 62 25 48 1 ) 62 25 62 26 44 1 ; 62 26 62 27 18446744073709551615 1 } 63 2 63 3 18446744073709551615 10 scopeStack 64 2 64 12 8 1 . 64 12 64 13 36 3 Pop 64 13 64 16 36 1 ( 64 16 64 17 36 1 ) 64 17 64 18 36 1 ; 64 18 64 19 18446744073709551615 1 } 65 1 65 2 18446744073709551615 4 void 66 1 66 5 18446744073709551615 11 TypeChecker 66 6 66 17 4 2 :: 66 17 66 19 41 10 CheckField 66 19 66 29 41 1 ( 66 29 66 30 41 5 Field 66 30 66 35 50 1 & 66 35 66 36 18446744073709551615 5 field 66 37 66 42 51 1 ) 66 42 66 43 41 1 { 67 1 67 2 18446744073709551615 5 field 68 2 68 7 51 1 . 68 7 68 8 18446744073709551615 5 value 68 8 68 13 52 2 -> 68 13 68 15 53 6 Accept 68 15 68 21 53 1 ( 68 21 68 22 53 4 this 68 22 68 26 18446744073709551615 1 ) 68 26 68 27 53 1 ; 68 27 68 28 18446744073709551615 2 if 69 2 69 4 18446744073709551615 1 ( 69 5 69 6 18446744073709551615 5 field 69 6 69 11 51 1 . 69 11 69 12 18446744073709551615 5 value 69 12 69 17 52 2 -> 69 17 69 19 18446744073709551615 4 type 69 19 69 23 54 2 != 69 24 69 26 55 5 field 69 27 69 32 51 1 . 69 32 69 33 18446744073709551615 4 type 69 33 69 37 56 1 ) 69 37 69 38 18446744073709551615 1 { 70 2 70 3 18446744073709551615 5 throw 71 3 71 8 18446744073709551615 13 TypeException 71 9 71 22 57 1 ( 71 22 71 23 57 5 field 71 23 71 28 51 1 . 71 28 71 29 18446744073709551615 5 value 71 29 71 34 52 2 -> 71 34 71 36 18446744073709551615 4 line 71 36 71 40 58 1 , 71 40 71 41 57 5 field 71 42 71 47 51 1 . 71 47 71 48 18446744073709551615 5 value 71 48 71 53 52 2 -> 71 53 71 55 18446744073709551615 6 column 71 55 71 61 59 1 , 71 61 71 62 57 35 L"Cannot implicitly convert type `" 72 8 72 43 18446744073709551615 1 + 72 44 72 45 60 12 TypeToString 73 9 73 21 61 1 ( 73 21 73 22 61 5 field 73 22 73 27 51 1 . 73 27 73 28 18446744073709551615 5 value 73 28 73 33 52 2 -> 73 33 73 35 18446744073709551615 4 type 73 35 73 39 54 1 ) 73 39 73 40 61 1 + 73 41 73 42 60 8 L" to '" 73 43 73 51 18446744073709551615 1 + 73 52 73 53 60 12 TypeToString 74 9 74 21 61 1 ( 74 21 74 22 61 5 field 74 22 74 27 51 1 . 74 27 74 28 18446744073709551615 4 type 74 28 74 32 56 1 ) 74 32 74 33 61 1 + 74 34 74 35 60 4 L"'" 74 36 74 40 18446744073709551615 1 ) 74 40 74 41 57 1 ; 74 41 74 42 18446744073709551615 1 } 75 2 75 3 18446744073709551615 1 } 76 1 76 2 18446744073709551615 4 void 77 1 77 5 18446744073709551615 11 TypeChecker 77 6 77 17 4 2 :: 77 17 77 19 44 13 CheckFunction 77 19 77 32 44 1 ( 77 32 77 33 44 8 Function 77 33 77 41 62 1 & 77 41 77 42 18446744073709551615 8 function 77 43 77 51 63 1 ) 77 51 77 52 44 1 { 78 1 78 2 18446744073709551615 10 scopeStack 79 2 79 12 8 1 . 79 12 79 13 9 4 Push 79 13 79 17 9 1 ( 79 17 79 18 9 5 Scope 79 18 79 23 10 1 ( 79 23 79 24 10 1 ) 79 24 79 25 10 1 ) 79 25 79 26 9 1 ; 79 26 79 27 18446744073709551615 3 for 80 2 80 5 18446744073709551615 1 ( 80 6 80 7 18446744073709551615 9 Parameter 80 7 80 16 64 1 & 80 16 80 17 18446744073709551615 1 p 80 18 80 19 65 1 : 80 20 80 21 39 8 function 80 22 80 30 63 1 . 80 30 80 31 18446744073709551615 10 parameters 80 31 80 41 66 1 ) 80 41 80 42 18446744073709551615 1 { 81 2 81 3 18446744073709551615 10 scopeStack 82 3 82 13 8 1 . 82 13 82 14 67 4 Peek 82 14 82 18 67 1 ( 82 18 82 19 67 1 ) 82 19 82 20 67 1 . 82 20 82 21 68 3 Put 82 21 82 24 68 1 ( 82 24 82 25 68 1 p 82 25 82 26 65 1 . 82 26 82 27 18446744073709551615 4 name 82 27 82 31 69 1 , 82 31 82 32 68 1 p 82 33 82 34 65 1 ) 82 34 82 35 68 1 ; 82 35 82 36 18446744073709551615 1 } 83 2 83 3 18446744073709551615 3 for 84 2 84 5 18446744073709551615 1 ( 84 6 84 7 18446744073709551615 13 LocalVariable 84 7 84 20 70 1 & 84 20 84 21 18446744073709551615 1 v 84 22 84 23 71 1 : 84 24 84 25 39 8 function 84 26 84 34 63 1 . 84 34 84 35 18446744073709551615 9 variables 84 35 84 44 72 1 ) 84 44 84 45 18446744073709551615 1 { 85 2 85 3 18446744073709551615 10 scopeStack 86 3 86 13 8 1 . 86 13 86 14 67 4 Peek 86 14 86 18 67 1 ( 86 18 86 19 67 1 ) 86 19 86 20 67 1 . 86 20 86 21 68 3 Put 86 21 86 24 68 1 ( 86 24 86 25 68 1 v 86 25 86 26 71 1 . 86 26 86 27 18446744073709551615 4 name 86 27 86 31 73 1 , 86 31 86 32 68 1 v 86 33 86 34 71 1 ) 86 34 86 35 68 1 ; 86 35 86 36 18446744073709551615 1 } 87 2 87 3 18446744073709551615 3 for 88 2 88 5 18446744073709551615 1 ( 88 6 88 7 18446744073709551615 13 LocalVariable 88 7 88 20 70 1 & 88 20 88 21 18446744073709551615 1 v 88 22 88 23 74 1 : 88 24 88 25 39 8 function 88 26 88 34 63 1 . 88 34 88 35 18446744073709551615 9 variables 88 35 88 44 72 1 ) 88 44 88 45 18446744073709551615 1 { 89 2 89 3 18446744073709551615 1 v 90 3 90 4 74 1 . 90 4 90 5 18446744073709551615 5 value 90 5 90 10 75 2 -> 90 10 90 12 53 6 Accept 90 12 90 18 53 1 ( 90 18 90 19 53 4 this 90 19 90 23 18446744073709551615 1 ) 90 23 90 24 53 1 ; 90 24 90 25 18446744073709551615 1 } 91 2 91 3 18446744073709551615 3 for 92 2 92 5 18446744073709551615 1 ( 92 6 92 7 18446744073709551615 6 ExpPtr 92 7 92 13 76 1 & 92 13 92 14 18446744073709551615 1 e 92 15 92 16 77 1 : 92 17 92 18 39 8 function 92 19 92 27 63 1 . 92 27 92 28 18446744073709551615 11 expressions 92 28 92 39 78 1 ) 92 39 92 40 18446744073709551615 1 { 93 2 93 3 18446744073709551615 1 e 94 3 94 4 77 2 -> 94 4 94 6 53 6 Accept 94 6 94 12 53 1 ( 94 12 94 13 53 4 this 94 13 94 17 18446744073709551615 1 ) 94 17 94 18 53 1 ; 94 18 94 19 18446744073709551615 1 } 95 2 95 3 18446744073709551615 10 scopeStack 96 2 96 12 8 1 . 96 12 96 13 36 3 Pop 96 13 96 16 36 1 ( 96 16 96 17 36 1 ) 96 17 96 18 36 1 ; 96 18 96 19 18446744073709551615 1 } 97 1 97 2 18446744073709551615 4 void 98 1 98 5 18446744073709551615 11 TypeChecker 98 6 98 17 4 2 :: 98 17 98 19 19 7 Collect 98 19 98 26 19 1 ( 98 26 98 27 19 10 shared_ptr 98 27 98 37 23 1 < 98 37 98 38 18446744073709551615 9 Namespace 98 38 98 47 24 1 > 98 47 98 48 18446744073709551615 5 nsPtr 98 49 98 54 79 1 , 98 54 98 55 19 7 int32_t 98 56 98 63 11 1 & 98 63 98 64 18446744073709551615 11 moduleCount 98 65 98 76 80 1 , 98 76 98 77 19 7 int32_t 99 9 99 16 11 1 & 99 16 99 17 18446744073709551615 10 classCount 99 18 99 28 81 1 ) 99 28 99 29 19 1 { 100 1 100 2 18446744073709551615 3 for 101 2 101 5 18446744073709551615 1 ( 101 6 101 7 18446744073709551615 4 auto 101 7 101 11 18446744073709551615 1 & 101 11 101 12 18446744073709551615 4 pair 101 13 101 17 82 1 : 101 18 101 19 15 5 nsPtr 101 20 101 25 79 2 -> 101 25 101 27 18446744073709551615 7 modules 101 27 101 34 27 1 ) 101 34 101 35 18446744073709551615 1 { 102 2 102 3 18446744073709551615 6 Module 103 3 103 9 28 1 & 103 9 103 10 18446744073709551615 10 moduleInfo 103 11 103 21 83 1 = 103 22 103 23 18446744073709551615 4 pair 103 24 103 28 82 1 . 103 28 103 29 18446744073709551615 6 second 103 29 103 35 18 1 ; 103 35 103 36 18446744073709551615 10 moduleInfo 104 3 104 13 83 1 . 104 13 104 14 18446744073709551615 5 index 104 14 104 19 84 1 = 104 20 104 21 18446744073709551615 11 moduleCount 104 22 104 33 80 1 ; 104 33 104 34 18446744073709551615 11 moduleCount 105 3 105 14 80 2 ++ 105 14 105 16 18446744073709551615 1 ; 105 16 105 17 18446744073709551615 7 int32_t 106 3 106 10 11 11 fieldOffset 106 11 106 22 85 1 = 106 23 106 24 18446744073709551615 1 0 106 25 106 26 18446744073709551615 1 ; 106 26 106 27 18446744073709551615 7 int32_t 107 3 107 10 11 14 functionOffset 107 11 107 25 86 1 = 107 26 107 27 18446744073709551615 1 0 107 28 107 29 18446744073709551615 1 ; 107 29 107 30 18446744073709551615 3 for 108 3 108 6 18446744073709551615 1 ( 108 7 108 8 18446744073709551615 5 Field 108 8 108 13 50 1 & 108 13 108 14 18446744073709551615 5 field 108 15 108 20 87 1 : 108 21 108 22 39 10 moduleInfo 108 23 108 33 83 1 . 108 33 108 34 18446744073709551615 6 fields 108 34 108 40 40 1 ) 108 40 108 41 18446744073709551615 1 { 109 3 109 4 18446744073709551615 5 field 110 4 110 9 87 1 . 110 9 110 10 18446744073709551615 8 location 110 10 110 18 88 1 = 110 19 110 20 89 8 Location 110 21 110 29 90 1 ( 110 29 110 30 90 10 moduleInfo 110 30 110 40 83 1 . 110 40 110 41 18446744073709551615 5 index 110 41 110 46 84 1 , 110 46 110 47 90 11 fieldOffset 110 48 110 59 85 1 ) 110 59 110 60 90 1 ; 110 60 110 61 18446744073709551615 11 fieldOffset 111 4 111 15 85 2 ++ 111 15 111 17 18446744073709551615 1 ; 111 17 111 18 18446744073709551615 10 scopeStack 112 4 112 14 8 1 . 112 14 112 15 67 4 Peek 112 15 112 19 67 1 ( 112 19 112 20 67 1 ) 112 20 112 21 67 1 . 112 21 112 22 68 3 Put 112 22 112 25 68 1 ( 112 25 112 26 68 5 field 112 26 112 31 87 1 . 112 31 112 32 18446744073709551615 4 name 112 32 112 36 91 1 , 112 36 112 37 68 5 field 112 38 112 43 87 1 ) 112 43 112 44 68 1 ; 112 44 112 45 18446744073709551615 1 } 113 3 113 4 18446744073709551615 3 for 114 3 114 6 18446744073709551615 1 ( 114 7 114 8 18446744073709551615 8 Function 114 8 114 16 62 1 & 114 16 114 17 18446744073709551615 8 function 114 18 114 26 92 1 : 114 27 114 28 39 10 moduleInfo 114 29 114 39 83 1 . 114 39 114 40 18446744073709551615 9 functions 114 40 114 49 43 1 ) 114 49 114 50 18446744073709551615 1 { 115 3 115 4 18446744073709551615 8 function 116 4 116 12 92 1 . 116 12 116 13 18446744073709551615 8 location 116 13 116 21 93 1 = 116 22 116 23 89 8 Location 116 24 116 32 90 1 ( 116 32 116 33 90 10 moduleInfo 116 33 116 43 83 1 . 116 43 116 44 18446744073709551615 5 index 116 44 116 49 84 1 , 116 49 116 50 90 14 functionOffset 116 51 116 65 86 1 ) 116 65 116 66 90 1 ; 116 66 116 67 18446744073709551615 14 functionOffset 117 4 117 18 86 2 ++ 117 18 117 20 18446744073709551615 1 ; 117 20 117 21 18446744073709551615 10 scopeStack 118 4 118 14 8 1 . 118 14 118 15 67 4 Peek 118 15 118 19 67 1 ( 118 19 118 20 67 1 ) 118 20 118 21 67 1 . 118 21 118 22 68 3 Put 118 22 118 25 68 1 ( 118 25 118 26 68 8 function 118 26 118 34 92 1 . 118 34 118 35 18446744073709551615 4 name 118 35 118 39 94 1 , 118 39 118 40 68 8 function 118 41 118 49 92 1 ) 118 49 118 50 68 1 ; 118 50 118 51 18446744073709551615 7 int32_t 119 4 119 11 11 6 offset 119 12 119 18 95 1 = 119 19 119 20 18446744073709551615 1 0 119 21 119 22 18446744073709551615 1 ; 119 22 119 23 18446744073709551615 3 for 120 4 120 7 18446744073709551615 1 ( 120 8 120 9 18446744073709551615 9 Parameter 120 9 120 18 64 1 & 120 18 120 19 18446744073709551615 1 p 120 20 120 21 96 1 : 120 22 120 23 39 8 function 120 24 120 32 92 1 . 120 32 120 33 18446744073709551615 10 parameters 120 33 120 43 66 1 ) 120 43 120 44 18446744073709551615 1 { 121 4 121 5 18446744073709551615 1 p 122 5 122 6 96 1 . 122 6 122 7 18446744073709551615 8 location 122 7 122 15 97 1 = 122 16 122 17 89 8 Location 122 18 122 26 90 2 :: 122 26 122 28 98 5 Local 122 28 122 33 98 1 ( 122 33 122 34 98 6 offset 122 34 122 40 95 1 ) 122 40 122 41 98 1 ; 122 41 122 42 18446744073709551615 6 offset 123 5 123 11 95 2 ++ 123 11 123 13 18446744073709551615 1 ; 123 13 123 14 18446744073709551615 1 } 124 4 124 5 18446744073709551615 3 for 125 4 125 7 18446744073709551615 1 ( 125 8 125 9 18446744073709551615 13 LocalVariable 125 9 125 22 70 1 & 125 22 125 23 18446744073709551615 1 v 125 24 125 25 99 1 : 125 26 125 27 39 8 function 125 28 125 36 92 1 . 125 36 125 37 18446744073709551615 9 variables 125 37 125 46 72 1 ) 125 46 125 47 18446744073709551615 1 { 126 4 126 5 18446744073709551615 1 v 127 5 127 6 99 1 . 127 6 127 7 18446744073709551615 8 location 127 7 127 15 100 1 = 127 16 127 17 89 8 Location 127 18 127 26 90 2 :: 127 26 127 28 98 5 Local 127 28 127 33 98 1 ( 127 33 127 34 98 6 offset 127 34 127 40 95 1 ) 127 40 127 41 98 1 ; 127 41 127 42 18446744073709551615 6 offset 128 5 128 11 95 2 ++ 128 11 128 13 18446744073709551615 1 ; 128 13 128 14 18446744073709551615 1 } 129 4 129 5 18446744073709551615 1 } 130 3 130 4 18446744073709551615 10 scopeStack 131 3 131 13 8 1 . 131 13 131 14 67 4 Peek 131 14 131 18 67 1 ( 131 18 131 19 67 1 ) 131 19 131 20 67 1 . 131 20 131 21 68 3 Put 131 21 131 24 68 1 ( 131 24 131 25 68 10 moduleInfo 131 25 131 35 83 1 . 131 35 131 36 18446744073709551615 4 type 131 36 131 40 101 1 . 131 40 131 41 18446744073709551615 4 name 131 41 131 45 102 1 , 131 45 131 46 68 10 moduleInfo 131 47 131 57 83 1 ) 131 57 131 58 68 1 ; 131 58 131 59 18446744073709551615 1 } 132 2 132 3 18446744073709551615 3 for 133 2 133 5 18446744073709551615 1 ( 133 6 133 7 18446744073709551615 4 auto 133 7 133 11 18446744073709551615 1 & 133 11 133 12 18446744073709551615 4 pair 133 13 133 17 103 1 : 133 18 133 19 15 5 nsPtr 133 20 133 25 79 2 -> 133 25 133 27 18446744073709551615 7 classes 133 27 133 34 32 1 ) 133 34 133 35 18446744073709551615 1 { 134 2 134 3 18446744073709551615 5 Class 135 3 135 8 33 1 & 135 8 135 9 18446744073709551615 9 classInfo 135 10 135 19 104 1 = 135 20 135 21 18446744073709551615 4 pair 135 22 135 26 103 1 . 135 26 135 27 18446744073709551615 6 second 135 27 135 33 18 1 ; 135 33 135 34 18446744073709551615 9 classInfo 136 3 136 12 104 1 . 136 12 136 13 18446744073709551615 5 index 136 13 136 18 105 1 = 136 19 136 20 18446744073709551615 10 classCount 136 21 136 31 81 1 ; 136 31 136 32 18446744073709551615 10 classCount 137 3 137 13 81 2 ++ 137 13 137 15 18446744073709551615 1 ; 137 15 137 16 18446744073709551615 7 int32_t 138 3 138 10 11 11 fieldOffset 138 11 138 22 106 1 = 138 23 138 24 18446744073709551615 1 0 138 25 138 26 18446744073709551615 1 ; 138 26 138 27 18446744073709551615 7 int32_t 139 3 139 10 11 14 functionOffset 139 11 139 25 107 1 = 139 26 139 27 18446744073709551615 1 0 139 28 139 29 18446744073709551615 1 ; 139 29 139 30 18446744073709551615 3 for 140 3 140 6 18446744073709551615 1 ( 140 7 140 8 18446744073709551615 5 Field 140 8 140 13 50 1 & 140 13 140 14 18446744073709551615 5 field 140 15 140 20 108 1 : 140 21 140 22 39 9 classInfo 140 23 140 32 104 1 . 140 32 140 33 18446744073709551615 6 fields 140 33 140 39 47 1 ) 140 39 140 40 18446744073709551615 1 { 141 3 141 4 18446744073709551615 5 field 142 4 142 9 108 1 . 142 9 142 10 18446744073709551615 8 location 142 10 142 18 88 1 = 142 19 142 20 89 8 Location 142 21 142 29 90 1 ( 142 29 142 30 90 9 classInfo 142 30 142 39 104 1 . 142 39 142 40 18446744073709551615 5 index 142 40 142 45 105 1 , 142 45 142 46 90 11 fieldOffset 142 47 142 58 106 1 ) 142 58 142 59 90 1 ; 142 59 142 60 18446744073709551615 11 fieldOffset 143 4 143 15 106 2 ++ 143 15 143 17 18446744073709551615 1 ; 143 17 143 18 18446744073709551615 10 scopeStack 144 4 144 14 8 1 . 144 14 144 15 67 4 Peek 144 15 144 19 67 1 ( 144 19 144 20 67 1 ) 144 20 144 21 67 1 . 144 21 144 22 68 3 Put 144 22 144 25 68 1 ( 144 25 144 26 68 5 field 144 26 144 31 108 1 . 144 31 144 32 18446744073709551615 4 name 144 32 144 36 91 1 , 144 36 144 37 68 5 field 144 38 144 43 108 1 ) 144 43 144 44 68 1 ; 144 44 144 45 18446744073709551615 1 } 145 3 145 4 18446744073709551615 3 for 146 3 146 6 18446744073709551615 1 ( 146 7 146 8 18446744073709551615 8 Function 146 8 146 16 62 1 & 146 16 146 17 18446744073709551615 8 function 146 18 146 26 109 1 : 146 27 146 28 39 9 classInfo 146 29 146 38 104 1 . 146 38 146 39 18446744073709551615 9 functions 146 39 146 48 49 1 ) 146 48 146 49 18446744073709551615 1 { 147 3 147 4 18446744073709551615 8 function 148 4 148 12 109 1 . 148 12 148 13 18446744073709551615 8 location 148 13 148 21 93 1 = 148 22 148 23 89 8 Location 148 24 148 32 90 1 ( 148 32 148 33 90 9 classInfo 148 33 148 42 104 1 . 148 42 148 43 18446744073709551615 5 index 148 43 148 48 105 1 , 148 48 148 49 90 14 functionOffset 148 50 148 64 107 1 ) 148 64 148 65 90 1 ; 148 65 148 66 18446744073709551615 14 functionOffset 149 4 149 18 107 2 ++ 149 18 149 20 18446744073709551615 1 ; 149 20 149 21 18446744073709551615 10 scopeStack 150 4 150 14 8 1 . 150 14 150 15 67 4 Peek 150 15 150 19 67 1 ( 150 19 150 20 67 1 ) 150 20 150 21 67 1 . 150 21 150 22 68 3 Put 150 22 150 25 68 1 ( 150 25 150 26 68 8 function 150 26 150 34 109 1 . 150 34 150 35 18446744073709551615 4 name 150 35 150 39 94 1 , 150 39 150 40 68 8 function 150 41 150 49 109 1 ) 150 49 150 50 68 1 ; 150 50 150 51 18446744073709551615 7 int32_t 151 4 151 11 11 6 offset 151 12 151 18 110 1 = 151 19 151 20 18446744073709551615 1 0 151 21 151 22 18446744073709551615 1 ; 151 22 151 23 18446744073709551615 3 for 152 4 152 7 18446744073709551615 1 ( 152 8 152 9 18446744073709551615 9 Parameter 152 9 152 18 64 1 & 152 18 152 19 18446744073709551615 1 p 152 20 152 21 111 1 : 152 22 152 23 39 8 function 152 24 152 32 109 1 . 152 32 152 33 18446744073709551615 10 parameters 152 33 152 43 66 1 ) 152 43 152 44 18446744073709551615 1 { 153 4 153 5 18446744073709551615 1 p 154 5 154 6 111 1 . 154 6 154 7 18446744073709551615 8 location 154 7 154 15 97 1 = 154 16 154 17 89 8 Location 154 18 154 26 90 2 :: 154 26 154 28 98 5 Local 154 28 154 33 98 1 ( 154 33 154 34 98 6 offset 154 34 154 40 110 1 ) 154 40 154 41 98 1 ; 154 41 154 42 18446744073709551615 6 offset 155 5 155 11 110 2 ++ 155 11 155 13 18446744073709551615 1 ; 155 13 155 14 18446744073709551615 1 } 156 4 156 5 18446744073709551615 3 for 157 4 157 7 18446744073709551615 1 ( 157 8 157 9 18446744073709551615 13 LocalVariable 157 9 157 22 70 1 & 157 22 157 23 18446744073709551615 1 v 157 24 157 25 112 1 : 157 26 157 27 39 8 function 157 28 157 36 109 1 . 157 36 157 37 18446744073709551615 9 variables 157 37 157 46 72 1 ) 157 46 157 47 18446744073709551615 1 { 158 4 158 5 18446744073709551615 1 v 159 5 159 6 112 1 . 159 6 159 7 18446744073709551615 8 location 159 7 159 15 100 1 = 159 16 159 17 89 8 Location 159 18 159 26 90 2 :: 159 26 159 28 98 5 Local 159 28 159 33 98 1 ( 159 33 159 34 98 6 offset 159 34 159 40 110 1 ) 159 40 159 41 98 1 ; 159 41 159 42 18446744073709551615 6 offset 160 5 160 11 110 2 ++ 160 11 160 13 18446744073709551615 1 ; 160 13 160 14 18446744073709551615 1 } 161 4 161 5 18446744073709551615 1 } 162 3 162 4 18446744073709551615 10 scopeStack 163 3 163 13 8 1 . 163 13 163 14 67 4 Peek 163 14 163 18 67 1 ( 163 18 163 19 67 1 ) 163 19 163 20 67 1 . 163 20 163 21 68 3 Put 163 21 163 24 68 1 ( 163 24 163 25 68 9 classInfo 163 25 163 34 104 1 . 163 34 163 35 18446744073709551615 4 type 163 35 163 39 113 1 . 163 39 163 40 18446744073709551615 4 name 163 40 163 44 102 1 , 163 44 163 45 68 9 classInfo 163 46 163 55 104 1 ) 163 55 163 56 68 1 ; 163 56 163 57 18446744073709551615 1 } 164 2 164 3 18446744073709551615 1 } 165 1 165 2 18446744073709551615 4 void 166 1 166 5 18446744073709551615 11 TypeChecker 166 6 166 17 4 2 :: 166 17 166 19 114 5 Visit 166 19 166 24 114 1 ( 166 24 166 25 114 18 ConstantExpression 166 25 166 43 115 1 * 166 43 166 44 18446744073709551615 4 node 166 45 166 49 116 1 ) 166 49 166 50 114 1 { 167 1 167 2 18446744073709551615 3 any 168 2 168 5 117 1 & 168 5 168 6 18446744073709551615 5 value 168 7 168 12 118 1 = 168 13 168 14 18446744073709551615 4 node 168 15 168 19 116 2 -> 168 19 168 21 18446744073709551615 5 value 168 21 168 26 119 1 ; 168 26 168 27 18446744073709551615 2 if 169 2 169 4 18446744073709551615 1 ( 169 5 169 6 18446744073709551615 5 value 169 6 169 11 118 1 . 169 11 169 12 120 4 type 169 12 169 16 120 1 ( 169 16 169 17 120 1 ) 169 17 169 18 120 2 == 169 19 169 21 121 6 typeid 169 22 169 28 18446744073709551615 1 ( 169 28 169 29 18446744073709551615 7 int32_t 169 29 169 36 11 1 ) 169 36 169 37 18446744073709551615 1 ) 169 37 169 38 18446744073709551615 1 { 170 2 170 3 18446744073709551615 4 node 171 3 171 7 116 2 -> 171 7 171 9 18446744073709551615 4 type 171 9 171 13 54 1 = 171 14 171 15 122 4 Type 171 16 171 20 123 2 :: 171 20 171 22 124 3 Int 171 22 171 25 124 1 ( 171 25 171 26 124 1 ) 171 26 171 27 124 1 ; 171 27 171 28 18446744073709551615 1 } 172 2 172 3 18446744073709551615 4 else 173 2 173 6 18446744073709551615 2 if 173 7 173 9 18446744073709551615 1 ( 173 10 173 11 18446744073709551615 5 value 173 11 173 16 118 1 . 173 16 173 17 120 4 type 173 17 173 21 120 1 ( 173 21 173 22 120 1 ) 173 22 173 23 120 2 == 173 24 173 26 121 6 typeid 173 27 173 33 18446744073709551615 1 ( 173 33 173 34 18446744073709551615 7 int64_t 173 34 173 41 125 1 ) 173 41 173 42 18446744073709551615 1 ) 173 42 173 43 18446744073709551615 1 { 174 2 174 3 18446744073709551615 4 node 175 3 175 7 116 2 -> 175 7 175 9 18446744073709551615 4 type 175 9 175 13 54 1 = 175 14 175 15 122 4 Type 175 16 175 20 123 2 :: 175 20 175 22 126 4 Long 175 22 175 26 126 1 ( 175 26 175 27 126 1 ) 175 27 175 28 126 1 ; 175 28 175 29 18446744073709551615 1 } 176 2 176 3 18446744073709551615 4 else 177 2 177 6 18446744073709551615 2 if 177 7 177 9 18446744073709551615 1 ( 177 10 177 11 18446744073709551615 5 value 177 11 177 16 118 1 . 177 16 177 17 120 4 type 177 17 177 21 120 1 ( 177 21 177 22 120 1 ) 177 22 177 23 120 2 == 177 24 177 26 121 6 typeid 177 27 177 33 18446744073709551615 1 ( 177 33 177 34 18446744073709551615 5 float 177 34 177 39 18446744073709551615 1 ) 177 39 177 40 18446744073709551615 1 ) 177 40 177 41 18446744073709551615 1 { 178 2 178 3 18446744073709551615 4 node 179 3 179 7 116 2 -> 179 7 179 9 18446744073709551615 4 type 179 9 179 13 54 1 = 179 14 179 15 122 4 Type 179 16 179 20 123 2 :: 179 20 179 22 127 5 Float 179 22 179 27 127 1 ( 179 27 179 28 127 1 ) 179 28 179 29 127 1 ; 179 29 179 30 18446744073709551615 1 } 180 2 180 3 18446744073709551615 4 else 181 2 181 6 18446744073709551615 2 if 181 7 181 9 18446744073709551615 1 ( 181 10 181 11 18446744073709551615 5 value 181 11 181 16 118 1 . 181 16 181 17 120 4 type 181 17 181 21 120 1 ( 181 21 181 22 120 1 ) 181 22 181 23 120 2 == 181 24 181 26 121 6 typeid 181 27 181 33 18446744073709551615 1 ( 181 33 181 34 18446744073709551615 6 double 181 34 181 40 18446744073709551615 1 ) 181 40 181 41 18446744073709551615 1 ) 181 41 181 42 18446744073709551615 1 { 182 2 182 3 18446744073709551615 4 node 183 3 183 7 116 2 -> 183 7 183 9 18446744073709551615 4 type 183 9 183 13 54 1 = 183 14 183 15 122 4 Type 183 16 183 20 123 2 :: 183 20 183 22 128 6 Double 183 22 183 28 128 1 ( 183 28 183 29 128 1 ) 183 29 183 30 128 1 ; 183 30 183 31 18446744073709551615 1 } 184 2 184 3 18446744073709551615 4 else 185 2 185 6 18446744073709551615 2 if 185 7 185 9 18446744073709551615 1 ( 185 10 185 11 18446744073709551615 5 value 185 11 185 16 118 1 . 185 16 185 17 120 4 type 185 17 185 21 120 1 ( 185 21 185 22 120 1 ) 185 22 185 23 120 2 == 185 24 185 26 121 6 typeid 185 27 185 33 18446744073709551615 1 ( 185 33 185 34 18446744073709551615 7 wchar_t 185 34 185 41 18446744073709551615 1 ) 185 41 185 42 18446744073709551615 1 ) 185 42 185 43 18446744073709551615 1 { 186 2 186 3 18446744073709551615 4 node 187 3 187 7 116 2 -> 187 7 187 9 18446744073709551615 4 type 187 9 187 13 54 1 = 187 14 187 15 122 4 Type 187 16 187 20 123 2 :: 187 20 187 22 129 4 Char 187 22 187 26 129 1 ( 187 26 187 27 129 1 ) 187 27 187 28 129 1 ; 187 28 187 29 18446744073709551615 1 } 188 2 188 3 18446744073709551615 4 else 189 2 189 6 18446744073709551615 2 if 189 7 189 9 18446744073709551615 1 ( 189 10 189 11 18446744073709551615 5 value 189 11 189 16 118 1 . 189 16 189 17 120 4 type 189 17 189 21 120 1 ( 189 21 189 22 120 1 ) 189 22 189 23 120 2 == 189 24 189 26 121 6 typeid 189 27 189 33 18446744073709551615 1 ( 189 33 189 34 18446744073709551615 4 bool 189 34 189 38 18446744073709551615 1 ) 189 38 189 39 18446744073709551615 1 ) 189 39 189 40 18446744073709551615 1 { 190 2 190 3 18446744073709551615 4 node 191 3 191 7 116 2 -> 191 7 191 9 18446744073709551615 4 type 191 9 191 13 54 1 = 191 14 191 15 122 4 Type 191 16 191 20 123 2 :: 191 20 191 22 130 7 Boolean 191 22 191 29 130 1 ( 191 29 191 30 130 1 ) 191 30 191 31 130 1 ; 191 31 191 32 18446744073709551615 1 } 192 2 192 3 18446744073709551615 4 else 193 2 193 6 18446744073709551615 2 if 193 7 193 9 18446744073709551615 1 ( 193 10 193 11 18446744073709551615 5 value 193 11 193 16 118 1 . 193 16 193 17 120 4 type 193 17 193 21 120 1 ( 193 21 193 22 120 1 ) 193 22 193 23 120 2 == 193 24 193 26 121 6 typeid 193 27 193 33 18446744073709551615 1 ( 193 33 193 34 18446744073709551615 7 wstring 193 34 193 41 131 1 ) 193 41 193 42 18446744073709551615 1 ) 193 42 193 43 18446744073709551615 1 { 194 2 194 3 18446744073709551615 4 node 195 3 195 7 116 2 -> 195 7 195 9 18446744073709551615 4 type 195 9 195 13 54 1 = 195 14 195 15 122 4 Type 195 16 195 20 123 2 :: 195 20 195 22 132 6 String 195 22 195 28 132 1 ( 195 28 195 29 132 1 ) 195 29 195 30 132 1 ; 195 30 195 31 18446744073709551615 1 } 196 2 196 3 18446744073709551615 4 else 197 2 197 6 18446744073709551615 1 { 198 2 198 3 18446744073709551615 5 throw 199 3 199 8 18446744073709551615 7 wstring 199 9 199 16 131 1 ( 199 16 199 17 133 8 L"error" 199 17 199 25 18446744073709551615 1 ) 199 25 199 26 133 1 ; 199 26 199 27 18446744073709551615 1 } 200 2 200 3 18446744073709551615 1 } 201 1 201 2 18446744073709551615 4 void 202 1 202 5 18446744073709551615 11 TypeChecker 202 6 202 17 4 2 :: 202 17 202 19 114 5 Visit 202 19 202 24 114 1 ( 202 24 202 25 114 15 UnaryExpression 202 25 202 40 134 1 * 202 40 202 41 18446744073709551615 4 node 202 42 202 46 135 1 ) 202 46 202 47 114 1 { 203 1 203 2 18446744073709551615 4 node 204 2 204 6 135 2 -> 204 6 204 8 18446744073709551615 7 operand 204 8 204 15 136 2 -> 204 15 204 17 53 6 Accept 204 17 204 23 53 1 ( 204 23 204 24 53 4 this 204 24 204 28 18446744073709551615 1 ) 204 28 204 29 53 1 ; 204 29 204 30 18446744073709551615 2 if 205 2 205 4 18446744073709551615 1 ( 205 5 205 6 18446744073709551615 4 node 205 6 205 10 135 2 -> 205 10 205 12 18446744073709551615 4 kind 205 12 205 16 137 2 == 205 17 205 19 18446744073709551615 14 ExpressionKind 205 20 205 34 138 2 :: 205 34 205 36 18446744073709551615 9 UnaryPlus 205 36 205 45 139 1 ) 205 45 205 46 18446744073709551615 1 { 206 2 206 3 18446744073709551615 2 if 207 3 207 5 18446744073709551615 1 ( 207 6 207 7 18446744073709551615 4 node 207 7 207 11 135 2 -> 207 11 207 13 18446744073709551615 7 operand 207 13 207 20 136 2 -> 207 20 207 22 18446744073709551615 4 type 207 22 207 26 54 1 . 207 26 207 27 140 5 IsInt 207 27 207 32 140 1 ( 207 32 207 33 140 1 ) 207 33 207 34 140 2 || 207 35 207 37 18446744073709551615 4 node 207 38 207 42 135 2 -> 207 42 207 44 18446744073709551615 7 operand 207 44 207 51 136 2 -> 207 51 207 53 18446744073709551615 4 type 207 53 207 57 54 1 . 207 57 207 58 141 6 IsLong 207 58 207 64 141 1 ( 207 64 207 65 141 1 ) 207 65 207 66 141 2 || 207 67 207 69 18446744073709551615 4 node 208 4 208 8 135 2 -> 208 8 208 10 18446744073709551615 7 operand 208 10 208 17 136 2 -> 208 17 208 19 18446744073709551615 4 type 208 19 208 23 54 1 . 208 23 208 24 142 7 IsFloat 208 24 208 31 142 1 ( 208 31 208 32 142 1 ) 208 32 208 33 142 2 || 208 34 208 36 18446744073709551615 4 node 208 37 208 41 135 2 -> 208 41 208 43 18446744073709551615 7 operand 208 43 208 50 136 2 -> 208 50 208 52 18446744073709551615 4 type 208 52 208 56 54 1 . 208 56 208 57 143 8 IsDouble 208 57 208 65 143 1 ( 208 65 208 66 143 1 ) 208 66 208 67 143 1 ) 208 67 208 68 18446744073709551615 1 { 209 3 209 4 18446744073709551615 4 node 210 4 210 8 135 2 -> 210 8 210 10 18446744073709551615 4 type 210 10 210 14 54 1 = 210 15 210 16 122 4 node 210 17 210 21 135 2 -> 210 21 210 23 18446744073709551615 7 operand 210 23 210 30 136 2 -> 210 30 210 32 18446744073709551615 4 type 210 32 210 36 54 1 ; 210 36 210 37 18446744073709551615 1 } 211 3 211 4 18446744073709551615 4 else 212 3 212 7 18446744073709551615 1 { 213 3 213 4 18446744073709551615 5 throw 214 4 214 9 18446744073709551615 13 TypeException 214 10 214 23 57 1 ( 214 23 214 24 57 4 node 215 5 215 9 135 2 -> 215 9 215 11 18446744073709551615 4 line 215 11 215 15 58 1 , 215 15 215 16 57 4 node 215 17 215 21 135 2 -> 215 21 215 23 18446744073709551615 6 column 215 23 215 29 59 1 , 215 29 215 30 57 57 L"The '+' operator cannot be applied to operand of type " 216 5 216 62 18446744073709551615 1 + 216 63 216 64 60 12 TypeToString 217 6 217 18 61 1 ( 217 18 217 19 61 4 node 217 19 217 23 135 2 -> 217 23 217 25 18446744073709551615 7 operand 217 25 217 32 136 2 -> 217 32 217 34 18446744073709551615 4 type 217 34 217 38 54 1 ) 217 38 217 39 61 1 ) 217 39 217 40 57 1 ; 217 40 217 41 18446744073709551615 1 } 218 3 218 4 18446744073709551615 1 } 219 2 219 3 18446744073709551615 4 else 220 2 220 6 18446744073709551615 2 if 220 7 220 9 18446744073709551615 1 ( 220 10 220 11 18446744073709551615 4 node 220 11 220 15 135 2 -> 220 15 220 17 18446744073709551615 4 kind 220 17 220 21 137 2 == 220 22 220 24 18446744073709551615 14 ExpressionKind 220 25 220 39 138 2 :: 220 39 220 41 18446744073709551615 10 UnaryMinus 220 41 220 51 144 1 ) 220 51 220 52 18446744073709551615 1 { 221 2 221 3 18446744073709551615 2 if 222 3 222 5 18446744073709551615 1 ( 222 6 222 7 18446744073709551615 4 node 222 7 222 11 135 2 -> 222 11 222 13 18446744073709551615 7 operand 222 13 222 20 136 2 -> 222 20 222 22 18446744073709551615 4 type 222 22 222 26 54 1 . 222 26 222 27 140 5 IsInt 222 27 222 32 140 1 ( 222 32 222 33 140 1 ) 222 33 222 34 140 2 || 222 35 222 37 18446744073709551615 4 node 222 38 222 42 135 2 -> 222 42 222 44 18446744073709551615 7 operand 222 44 222 51 136 2 -> 222 51 222 53 18446744073709551615 4 type 222 53 222 57 54 1 . 222 57 222 58 141 6 IsLong 222 58 222 64 141 1 ( 222 64 222 65 141 1 ) 222 65 222 66 141 2 || 222 67 222 69 18446744073709551615 4 node 223 4 223 8 135 2 -> 223 8 223 10 18446744073709551615 7 operand 223 10 223 17 136 2 -> 223 17 223 19 18446744073709551615 4 type 223 19 223 23 54 1 . 223 23 223 24 142 7 IsFloat 223 24 223 31 142 1 ( 223 31 223 32 142 1 ) 223 32 223 33 142 2 || 223 34 223 36 18446744073709551615 4 node 223 37 223 41 135 2 -> 223 41 223 43 18446744073709551615 7 operand 223 43 223 50 136 2 -> 223 50 223 52 18446744073709551615 4 type 223 52 223 56 54 1 . 223 56 223 57 143 8 IsDouble 223 57 223 65 143 1 ( 223 65 223 66 143 1 ) 223 66 223 67 143 1 ) 223 67 223 68 18446744073709551615 1 { 224 3 224 4 18446744073709551615 4 node 225 4 225 8 135 2 -> 225 8 225 10 18446744073709551615 4 type 225 10 225 14 54 1 = 225 15 225 16 122 4 node 225 17 225 21 135 2 -> 225 21 225 23 18446744073709551615 7 operand 225 23 225 30 136 2 -> 225 30 225 32 18446744073709551615 4 type 225 32 225 36 54 1 ; 225 36 225 37 18446744073709551615 1 } 226 3 226 4 18446744073709551615 4 else 227 3 227 7 18446744073709551615 1 { 228 3 228 4 18446744073709551615 5 throw 229 4 229 9 18446744073709551615 13 TypeException 229 10 229 23 57 1 ( 229 23 229 24 57 4 node 230 5 230 9 135 2 -> 230 9 230 11 18446744073709551615 4 line 230 11 230 15 58 1 , 230 15 230 16 57 4 node 230 17 230 21 135 2 -> 230 21 230 23 18446744073709551615 6 column 230 23 230 29 59 1 , 230 29 230 30 57 57 L"The '-' operator cannot be applied to operand of type " 231 5 231 62 18446744073709551615 1 + 231 63 231 64 60 12 TypeToString 232 6 232 18 61 1 ( 232 18 232 19 61 4 node 232 19 232 23 135 2 -> 232 23 232 25 18446744073709551615 7 operand 232 25 232 32 136 2 -> 232 32 232 34 18446744073709551615 4 type 232 34 232 38 54 1 ) 232 38 232 39 61 1 ) 232 39 232 40 57 1 ; 232 40 232 41 18446744073709551615 1 } 233 3 233 4 18446744073709551615 1 } 234 2 234 3 18446744073709551615 4 else 235 2 235 6 18446744073709551615 2 if 235 7 235 9 18446744073709551615 1 ( 235 10 235 11 18446744073709551615 4 node 235 11 235 15 135 2 -> 235 15 235 17 18446744073709551615 4 kind 235 17 235 21 137 2 == 235 22 235 24 18446744073709551615 14 ExpressionKind 235 25 235 39 138 2 :: 235 39 235 41 18446744073709551615 3 Not 235 41 235 44 145 1 ) 235 44 235 45 18446744073709551615 1 { 236 2 236 3 18446744073709551615 2 if 237 3 237 5 18446744073709551615 1 ( 237 6 237 7 18446744073709551615 4 node 237 7 237 11 135 2 -> 237 11 237 13 18446744073709551615 7 operand 237 13 237 20 136 2 -> 237 20 237 22 18446744073709551615 4 type 237 22 237 26 54 1 . 237 26 237 27 146 9 IsBoolean 237 27 237 36 146 1 ( 237 36 237 37 146 1 ) 237 37 237 38 146 1 ) 237 38 237 39 18446744073709551615 1 { 238 3 238 4 18446744073709551615 4 node 239 4 239 8 135 2 -> 239 8 239 10 18446744073709551615 4 type 239 10 239 14 54 1 = 239 15 239 16 122 4 node 239 17 239 21 135 2 -> 239 21 239 23 18446744073709551615 7 operand 239 23 239 30 136 2 -> 239 30 239 32 18446744073709551615 4 type 239 32 239 36 54 1 ; 239 36 239 37 18446744073709551615 1 } 240 3 240 4 18446744073709551615 4 else 241 3 241 7 18446744073709551615 1 { 242 3 242 4 18446744073709551615 5 throw 243 4 243 9 18446744073709551615 13 TypeException 243 10 243 23 57 1 ( 243 23 243 24 57 4 node 243 24 243 28 135 2 -> 243 28 243 30 18446744073709551615 4 line 243 30 243 34 58 1 , 243 34 243 35 57 4 node 243 36 243 40 135 2 -> 243 40 243 42 18446744073709551615 6 column 243 42 243 48 59 1 , 243 48 243 49 57 43 L"The 'not' operator cannot be applied to " 244 9 244 52 18446744073709551615 19 L"operand of type " 245 9 245 28 18446744073709551615 1 + 245 29 245 30 60 12 TypeToString 246 10 246 22 61 1 ( 246 22 246 23 61 4 node 246 23 246 27 135 2 -> 246 27 246 29 18446744073709551615 7 operand 246 29 246 36 136 2 -> 246 36 246 38 18446744073709551615 4 type 246 38 246 42 54 1 ) 246 42 246 43 61 1 ) 246 43 246 44 57 1 ; 246 44 246 45 18446744073709551615 1 } 247 3 247 4 18446744073709551615 1 } 248 2 248 3 18446744073709551615 4 else 249 2 249 6 18446744073709551615 1 { 250 2 250 3 18446744073709551615 5 throw 251 3 251 8 18446744073709551615 7 wstring 251 9 251 16 131 1 ( 251 16 251 17 133 8 L"error" 251 17 251 25 18446744073709551615 1 ) 251 25 251 26 133 1 ; 251 26 251 27 18446744073709551615 1 } 252 2 252 3 18446744073709551615 1 } 253 1 253 2 18446744073709551615 4 void 254 1 254 5 18446744073709551615 11 TypeChecker 254 6 254 17 4 2 :: 254 17 254 19 114 5 Visit 254 19 254 24 114 1 ( 254 24 254 25 114 16 BinaryExpression 254 25 254 41 147 1 * 254 41 254 42 18446744073709551615 4 node 254 43 254 47 148 1 ) 254 47 254 48 114 1 { 255 1 255 2 18446744073709551615 4 node 256 2 256 6 148 2 -> 256 6 256 8 18446744073709551615 4 left 256 8 256 12 149 2 -> 256 12 256 14 53 6 Accept 256 14 256 20 53 1 ( 256 20 256 21 53 4 this 256 21 256 25 18446744073709551615 1 ) 256 25 256 26 53 1 ; 256 26 256 27 18446744073709551615 4 node 257 2 257 6 148 2 -> 257 6 257 8 18446744073709551615 5 right 257 8 257 13 150 2 -> 257 13 257 15 53 6 Accept 257 15 257 21 53 1 ( 257 21 257 22 53 4 this 257 22 257 26 18446744073709551615 1 ) 257 26 257 27 53 1 ; 257 27 257 28 18446744073709551615 4 Type 258 2 258 6 123 1 & 258 6 258 7 18446744073709551615 4 left 258 8 258 12 151 1 = 258 13 258 14 18446744073709551615 4 node 258 15 258 19 148 2 -> 258 19 258 21 18446744073709551615 4 left 258 21 258 25 149 2 -> 258 25 258 27 18446744073709551615 4 type 258 27 258 31 54 1 ; 258 31 258 32 18446744073709551615 4 Type 259 2 259 6 123 1 & 259 6 259 7 18446744073709551615 5 right 259 8 259 13 152 1 = 259 14 259 15 18446744073709551615 4 node 259 16 259 20 148 2 -> 259 20 259 22 18446744073709551615 5 right 259 22 259 27 150 2 -> 259 27 259 29 18446744073709551615 4 type 259 29 259 33 54 1 ; 259 33 259 34 18446744073709551615 14 ExpressionKind 260 2 260 16 138 4 kind 260 17 260 21 153 1 = 260 22 260 23 18446744073709551615 4 node 260 24 260 28 148 2 -> 260 28 260 30 18446744073709551615 4 kind 260 30 260 34 137 1 ; 260 34 260 35 18446744073709551615 2 if 261 2 261 4 18446744073709551615 1 ( 261 5 261 6 18446744073709551615 4 kind 261 6 261 10 153 2 == 261 11 261 13 18446744073709551615 14 ExpressionKind 261 14 261 28 138 2 :: 261 28 261 30 18446744073709551615 3 Add 261 30 261 33 154 2 || 261 34 261 36 18446744073709551615 4 kind 261 37 261 41 153 2 == 261 42 261 44 18446744073709551615 14 ExpressionKind 261 45 261 59 138 2 :: 261 59 261 61 18446744073709551615 8 Subtract 261 61 261 69 155 2 || 261 70 261 72 18446744073709551615 4 kind 262 3 262 7 153 2 == 262 8 262 10 18446744073709551615 14 ExpressionKind 262 11 262 25 138 2 :: 262 25 262 27 18446744073709551615 8 Multiply 262 27 262 35 156 2 || 262 36 262 38 18446744073709551615 4 kind 262 39 262 43 153 2 == 262 44 262 46 18446744073709551615 14 ExpressionKind 262 47 262 61 138 2 :: 262 61 262 63 18446744073709551615 6 Divide 262 63 262 69 157 1 ) 262 69 262 70 18446744073709551615 1 { 263 2 263 3 18446744073709551615 2 if 264 3 264 5 18446744073709551615 1 ( 264 6 264 7 18446744073709551615 4 left 264 7 264 11 151 1 . 264 11 264 12 140 5 IsInt 264 12 264 17 140 1 ( 264 17 264 18 140 1 ) 264 18 264 19 140 2 && 264 20 264 22 18446744073709551615 5 right 264 23 264 28 152 1 . 264 28 264 29 140 5 IsInt 264 29 264 34 140 1 ( 264 34 264 35 140 1 ) 264 35 264 36 140 1 ) 264 36 264 37 18446744073709551615 1 { 265 3 265 4 18446744073709551615 4 node 266 4 266 8 148 2 -> 266 8 266 10 18446744073709551615 4 type 266 10 266 14 54 1 = 266 15 266 16 122 4 Type 266 17 266 21 123 2 :: 266 21 266 23 124 3 Int 266 23 266 26 124 1 ( 266 26 266 27 124 1 ) 266 27 266 28 124 1 ; 266 28 266 29 18446744073709551615 1 } 267 3 267 4 18446744073709551615 4 else 268 3 268 7 18446744073709551615 2 if 268 8 268 10 18446744073709551615 1 ( 268 11 268 12 18446744073709551615 4 left 268 12 268 16 151 1 . 268 16 268 17 143 8 IsDouble 268 17 268 25 143 1 ( 268 25 268 26 143 1 ) 268 26 268 27 143 2 && 268 28 268 30 18446744073709551615 5 right 268 31 268 36 152 1 . 268 36 268 37 143 8 IsDouble 268 37 268 45 143 1 ( 268 45 268 46 143 1 ) 268 46 268 47 143 1 ) 268 47 268 48 18446744073709551615 1 { 269 3 269 4 18446744073709551615 4 node 270 4 270 8 148 2 -> 270 8 270 10 18446744073709551615 4 type 270 10 270 14 54 1 = 270 15 270 16 122 4 Type 270 17 270 21 123 2 :: 270 21 270 23 128 6 Double 270 23 270 29 128 1 ( 270 29 270 30 128 1 ) 270 30 270 31 128 1 ; 270 31 270 32 18446744073709551615 1 } 271 3 271 4 18446744073709551615 4 else 272 3 272 7 18446744073709551615 2 if 272 8 272 10 18446744073709551615 1 ( 272 11 272 12 18446744073709551615 4 left 272 12 272 16 151 1 . 272 16 272 17 142 7 IsFloat 272 17 272 24 142 1 ( 272 24 272 25 142 1 ) 272 25 272 26 142 2 && 272 27 272 29 18446744073709551615 5 right 272 30 272 35 152 1 . 272 35 272 36 142 7 IsFloat 272 36 272 43 142 1 ( 272 43 272 44 142 1 ) 272 44 272 45 142 1 ) 272 45 272 46 18446744073709551615 1 { 273 3 273 4 18446744073709551615 4 node 274 4 274 8 148 2 -> 274 8 274 10 18446744073709551615 4 type 274 10 274 14 54 1 = 274 15 274 16 122 4 Type 274 17 274 21 123 2 :: 274 21 274 23 127 5 Float 274 23 274 28 127 1 ( 274 28 274 29 127 1 ) 274 29 274 30 127 1 ; 274 30 274 31 18446744073709551615 1 } 275 3 275 4 18446744073709551615 4 else 276 3 276 7 18446744073709551615 2 if 276 8 276 10 18446744073709551615 1 ( 276 11 276 12 18446744073709551615 4 left 276 12 276 16 151 1 . 276 16 276 17 141 6 IsLong 276 17 276 23 141 1 ( 276 23 276 24 141 1 ) 276 24 276 25 141 2 && 276 26 276 28 18446744073709551615 5 right 276 29 276 34 152 1 . 276 34 276 35 141 6 IsLong 276 35 276 41 141 1 ( 276 41 276 42 141 1 ) 276 42 276 43 141 1 ) 276 43 276 44 18446744073709551615 1 { 277 3 277 4 18446744073709551615 4 node 278 4 278 8 148 2 -> 278 8 278 10 18446744073709551615 4 type 278 10 278 14 54 1 = 278 15 278 16 122 4 Type 278 17 278 21 123 2 :: 278 21 278 23 126 4 Long 278 23 278 27 126 1 ( 278 27 278 28 126 1 ) 278 28 278 29 126 1 ; 278 29 278 30 18446744073709551615 1 } 279 3 279 4 18446744073709551615 4 else 280 3 280 7 18446744073709551615 1 { 281 3 281 4 18446744073709551615 5 throw 282 4 282 9 18446744073709551615 13 TypeException 282 10 282 23 57 1 ( 282 23 282 24 57 4 node 282 24 282 28 148 2 -> 282 28 282 30 18446744073709551615 4 line 282 30 282 34 58 1 , 282 34 282 35 57 4 node 282 36 282 40 148 2 -> 282 40 282 42 18446744073709551615 6 column 282 42 282 48 59 1 , 282 48 282 49 57 46 L"Operator `-' cannot be applied to operands " 283 9 283 55 18446744073709551615 12 L"of type '" 284 9 284 21 18446744073709551615 1 + 284 22 284 23 60 12 TypeToString 285 10 285 22 61 1 ( 285 22 285 23 61 4 left 285 23 285 27 151 1 ) 285 27 285 28 61 1 + 285 29 285 30 60 10 L"' and '" 285 31 285 41 18446744073709551615 1 + 285 42 285 43 60 12 TypeToString 286 10 286 22 61 1 ( 286 22 286 23 61 5 right 286 23 286 28 152 1 ) 286 28 286 29 61 1 + 286 30 286 31 60 4 L"'" 286 32 286 36 18446744073709551615 1 ) 286 36 286 37 57 1 ; 286 37 286 38 18446744073709551615 1 } 287 3 287 4 18446744073709551615 1 } 288 2 288 3 18446744073709551615 4 else 289 2 289 6 18446744073709551615 2 if 289 7 289 9 18446744073709551615 1 ( 289 10 289 11 18446744073709551615 4 kind 289 11 289 15 153 2 == 289 16 289 18 18446744073709551615 14 ExpressionKind 289 19 289 33 138 2 :: 289 33 289 35 18446744073709551615 6 Modulo 289 35 289 41 158 1 ) 289 41 289 42 18446744073709551615 1 { 290 2 290 3 18446744073709551615 2 if 291 3 291 5 18446744073709551615 1 ( 291 6 291 7 18446744073709551615 4 left 291 7 291 11 151 1 . 291 11 291 12 140 5 IsInt 291 12 291 17 140 1 ( 291 17 291 18 140 1 ) 291 18 291 19 140 2 && 291 20 291 22 18446744073709551615 5 right 291 23 291 28 152 1 . 291 28 291 29 140 5 IsInt 291 29 291 34 140 1 ( 291 34 291 35 140 1 ) 291 35 291 36 140 1 ) 291 36 291 37 18446744073709551615 1 { 292 3 292 4 18446744073709551615 4 node 293 4 293 8 148 2 -> 293 8 293 10 18446744073709551615 4 type 293 10 293 14 54 1 = 293 15 293 16 122 4 Type 293 17 293 21 123 2 :: 293 21 293 23 124 3 Int 293 23 293 26 124 1 ( 293 26 293 27 124 1 ) 293 27 293 28 124 1 ; 293 28 293 29 18446744073709551615 1 } 294 3 294 4 18446744073709551615 4 else 295 3 295 7 18446744073709551615 2 if 295 8 295 10 18446744073709551615 1 ( 295 11 295 12 18446744073709551615 4 left 295 12 295 16 151 1 . 295 16 295 17 141 6 IsLong 295 17 295 23 141 1 ( 295 23 295 24 141 1 ) 295 24 295 25 141 2 && 295 26 295 28 18446744073709551615 5 right 295 29 295 34 152 1 . 295 34 295 35 141 6 IsLong 295 35 295 41 141 1 ( 295 41 295 42 141 1 ) 295 42 295 43 141 1 ) 295 43 295 44 18446744073709551615 1 { 296 3 296 4 18446744073709551615 4 node 297 4 297 8 148 2 -> 297 8 297 10 18446744073709551615 4 type 297 10 297 14 54 1 = 297 15 297 16 122 4 Type 297 17 297 21 123 2 :: 297 21 297 23 126 4 Long 297 23 297 27 126 1 ( 297 27 297 28 126 1 ) 297 28 297 29 126 1 ; 297 29 297 30 18446744073709551615 1 } 298 3 298 4 18446744073709551615 4 else 299 3 299 7 18446744073709551615 1 { 300 3 300 4 18446744073709551615 5 throw 301 4 301 9 18446744073709551615 13 TypeException 301 10 301 23 57 1 ( 301 23 301 24 57 4 node 301 24 301 28 148 2 -> 301 28 301 30 18446744073709551615 4 line 301 30 301 34 58 1 , 301 34 301 35 57 4 node 301 36 301 40 148 2 -> 301 40 301 42 18446744073709551615 6 column 301 42 301 48 59 1 , 301 48 301 49 57 42 L"Operator cannot be applied to operands " 302 9 302 51 18446744073709551615 12 L"of type '" 303 9 303 21 18446744073709551615 1 + 303 22 303 23 60 12 TypeToString 304 10 304 22 61 1 ( 304 22 304 23 61 4 left 304 23 304 27 151 1 ) 304 27 304 28 61 1 + 304 29 304 30 60 10 L"' and '" 304 31 304 41 18446744073709551615 1 + 304 42 304 43 60 12 TypeToString 305 10 305 22 61 1 ( 305 22 305 23 61 5 right 305 23 305 28 152 1 ) 305 28 305 29 61 1 + 305 30 305 31 60 4 L"'" 305 32 305 36 18446744073709551615 1 ) 305 36 305 37 57 1 ; 305 37 305 38 18446744073709551615 1 } 306 3 306 4 18446744073709551615 1 } 307 2 307 3 18446744073709551615 4 else 308 2 308 6 18446744073709551615 2 if 308 7 308 9 18446744073709551615 1 ( 308 10 308 11 18446744073709551615 4 kind 308 11 308 15 153 2 == 308 16 308 18 18446744073709551615 14 ExpressionKind 308 19 308 33 138 2 :: 308 33 308 35 18446744073709551615 11 GreaterThan 308 35 308 46 159 2 || 308 47 308 49 18446744073709551615 4 kind 309 5 309 9 153 2 == 309 10 309 12 18446744073709551615 14 ExpressionKind 309 13 309 27 138 2 :: 309 27 309 29 18446744073709551615 8 LessThan 309 29 309 37 160 2 || 309 38 309 40 18446744073709551615 4 kind 310 5 310 9 153 2 == 310 10 310 12 18446744073709551615 14 ExpressionKind 310 13 310 27 138 2 :: 310 27 310 29 18446744073709551615 18 GreaterThanOrEqual 310 29 310 47 161 2 || 310 48 310 50 18446744073709551615 4 kind 311 5 311 9 153 2 == 311 10 311 12 18446744073709551615 14 ExpressionKind 311 13 311 27 138 2 :: 311 27 311 29 18446744073709551615 15 LessThanOrEqual 311 29 311 44 162 1 ) 311 44 311 45 18446744073709551615 1 { 312 2 312 3 18446744073709551615 2 if 313 3 313 5 18446744073709551615 1 ( 313 6 313 7 18446744073709551615 4 left 313 7 313 11 151 1 . 313 11 313 12 140 5 IsInt 313 12 313 17 140 1 ( 313 17 313 18 140 1 ) 313 18 313 19 140 2 && 313 20 313 22 18446744073709551615 5 right 313 23 313 28 152 1 . 313 28 313 29 140 5 IsInt 313 29 313 34 140 1 ( 313 34 313 35 140 1 ) 313 35 313 36 140 1 ) 313 36 313 37 18446744073709551615 1 { 314 3 314 4 18446744073709551615 4 node 315 4 315 8 148 2 -> 315 8 315 10 18446744073709551615 4 type 315 10 315 14 54 1 = 315 15 315 16 122 4 Type 315 17 315 21 123 2 :: 315 21 315 23 130 7 Boolean 315 23 315 30 130 1 ( 315 30 315 31 130 1 ) 315 31 315 32 130 1 ; 315 32 315 33 18446744073709551615 1 } 316 3 316 4 18446744073709551615 4 else 317 3 317 7 18446744073709551615 2 if 317 8 317 10 18446744073709551615 1 ( 317 11 317 12 18446744073709551615 4 left 317 12 317 16 151 1 . 317 16 317 17 143 8 IsDouble 317 17 317 25 143 1 ( 317 25 317 26 143 1 ) 317 26 317 27 143 2 && 317 28 317 30 18446744073709551615 5 right 317 31 317 36 152 1 . 317 36 317 37 143 8 IsDouble 317 37 317 45 143 1 ( 317 45 317 46 143 1 ) 317 46 317 47 143 1 ) 317 47 317 48 18446744073709551615 1 { 318 3 318 4 18446744073709551615 4 node 319 4 319 8 148 2 -> 319 8 319 10 18446744073709551615 4 type 319 10 319 14 54 1 = 319 15 319 16 122 4 Type 319 17 319 21 123 2 :: 319 21 319 23 130 7 Boolean 319 23 319 30 130 1 ( 319 30 319 31 130 1 ) 319 31 319 32 130 1 ; 319 32 319 33 18446744073709551615 1 } 320 3 320 4 18446744073709551615 4 else 321 3 321 7 18446744073709551615 2 if 321 8 321 10 18446744073709551615 1 ( 321 11 321 12 18446744073709551615 4 left 321 12 321 16 151 1 . 321 16 321 17 141 6 IsLong 321 17 321 23 141 1 ( 321 23 321 24 141 1 ) 321 24 321 25 141 2 && 321 26 321 28 18446744073709551615 5 right 321 29 321 34 152 1 . 321 34 321 35 141 6 IsLong 321 35 321 41 141 1 ( 321 41 321 42 141 1 ) 321 42 321 43 141 1 ) 321 43 321 44 18446744073709551615 1 { 322 3 322 4 18446744073709551615 4 node 323 4 323 8 148 2 -> 323 8 323 10 18446744073709551615 4 type 323 10 323 14 54 1 = 323 15 323 16 122 4 Type 323 17 323 21 123 2 :: 323 21 323 23 130 7 Boolean 323 23 323 30 130 1 ( 323 30 323 31 130 1 ) 323 31 323 32 130 1 ; 323 32 323 33 18446744073709551615 1 } 324 3 324 4 18446744073709551615 4 else 325 3 325 7 18446744073709551615 2 if 325 8 325 10 18446744073709551615 1 ( 325 11 325 12 18446744073709551615 4 left 325 12 325 16 151 1 . 325 16 325 17 142 7 IsFloat 325 17 325 24 142 1 ( 325 24 325 25 142 1 ) 325 25 325 26 142 2 && 325 27 325 29 18446744073709551615 5 right 325 30 325 35 152 1 . 325 35 325 36 142 7 IsFloat 325 36 325 43 142 1 ( 325 43 325 44 142 1 ) 325 44 325 45 142 1 ) 325 45 325 46 18446744073709551615 1 { 326 3 326 4 18446744073709551615 4 node 327 4 327 8 148 2 -> 327 8 327 10 18446744073709551615 4 type 327 10 327 14 54 1 = 327 15 327 16 122 4 Type 327 17 327 21 123 2 :: 327 21 327 23 130 7 Boolean 327 23 327 30 130 1 ( 327 30 327 31 130 1 ) 327 31 327 32 130 1 ; 327 32 327 33 18446744073709551615 1 } 328 3 328 4 18446744073709551615 4 else 329 3 329 7 18446744073709551615 1 { 330 3 330 4 18446744073709551615 5 throw 331 4 331 9 18446744073709551615 13 TypeException 331 10 331 23 57 1 ( 331 23 331 24 57 4 node 331 24 331 28 148 2 -> 331 28 331 30 18446744073709551615 4 line 331 30 331 34 58 1 , 331 34 331 35 57 4 node 331 36 331 40 148 2 -> 331 40 331 42 18446744073709551615 6 column 331 42 331 48 59 1 , 331 48 331 49 57 42 L"Operator cannot be applied to operands " 332 9 332 51 18446744073709551615 12 L"of type '" 333 9 333 21 18446744073709551615 1 + 333 22 333 23 60 12 TypeToString 334 10 334 22 61 1 ( 334 22 334 23 61 4 left 334 23 334 27 151 1 ) 334 27 334 28 61 1 + 334 29 334 30 60 10 L"' and '" 334 31 334 41 18446744073709551615 1 + 334 42 334 43 60 12 TypeToString 335 10 335 22 61 1 ( 335 22 335 23 61 5 right 335 23 335 28 152 1 ) 335 28 335 29 61 1 + 335 30 335 31 60 4 L"'" 335 32 335 36 18446744073709551615 1 ) 335 36 335 37 57 1 ; 335 37 335 38 18446744073709551615 1 } 336 3 336 4 18446744073709551615 1 } 337 2 337 3 18446744073709551615 4 else 338 2 338 6 18446744073709551615 2 if 338 7 338 9 18446744073709551615 1 ( 338 10 338 11 18446744073709551615 4 kind 338 11 338 15 153 2 == 338 16 338 18 18446744073709551615 14 ExpressionKind 338 19 338 33 138 2 :: 338 33 338 35 18446744073709551615 3 And 338 35 338 38 163 2 || 338 39 338 41 18446744073709551615 4 kind 338 42 338 46 153 2 == 338 47 338 49 18446744073709551615 14 ExpressionKind 338 50 338 64 138 2 :: 338 64 338 66 18446744073709551615 2 Or 338 66 338 68 164 1 ) 338 68 338 69 18446744073709551615 1 { 339 2 339 3 18446744073709551615 2 if 340 3 340 5 18446744073709551615 1 ( 340 6 340 7 18446744073709551615 4 left 340 7 340 11 151 1 . 340 11 340 12 146 9 IsBoolean 340 12 340 21 146 1 ( 340 21 340 22 146 1 ) 340 22 340 23 146 2 && 340 24 340 26 18446744073709551615 5 right 340 27 340 32 152 1 . 340 32 340 33 146 9 IsBoolean 340 33 340 42 146 1 ( 340 42 340 43 146 1 ) 340 43 340 44 146 1 ) 340 44 340 45 18446744073709551615 1 { 341 3 341 4 18446744073709551615 4 node 342 4 342 8 148 2 -> 342 8 342 10 18446744073709551615 4 type 342 10 342 14 54 1 = 342 15 342 16 122 4 Type 342 17 342 21 123 2 :: 342 21 342 23 130 7 Boolean 342 23 342 30 130 1 ( 342 30 342 31 130 1 ) 342 31 342 32 130 1 ; 342 32 342 33 18446744073709551615 1 } 343 3 343 4 18446744073709551615 4 else 344 3 344 7 18446744073709551615 1 { 345 3 345 4 18446744073709551615 5 throw 346 4 346 9 18446744073709551615 13 TypeException 346 10 346 23 57 1 ( 346 23 346 24 57 4 node 346 24 346 28 148 2 -> 346 28 346 30 18446744073709551615 4 line 346 30 346 34 58 1 , 346 34 346 35 57 4 node 346 36 346 40 148 2 -> 346 40 346 42 18446744073709551615 6 column 346 42 346 48 59 1 , 346 48 346 49 57 42 L"Operator cannot be applied to operands " 347 9 347 51 18446744073709551615 12 L"of type '" 348 9 348 21 18446744073709551615 1 + 348 22 348 23 60 12 TypeToString 349 10 349 22 61 1 ( 349 22 349 23 61 4 left 349 23 349 27 151 1 ) 349 27 349 28 61 1 + 349 29 349 30 60 10 L"' and '" 349 31 349 41 18446744073709551615 1 + 349 42 349 43 60 12 TypeToString 350 10 350 22 61 1 ( 350 22 350 23 61 5 right 350 23 350 28 152 1 ) 350 28 350 29 61 1 + 350 30 350 31 60 4 L"'" 350 32 350 36 18446744073709551615 1 ) 350 36 350 37 57 1 ; 350 37 350 38 18446744073709551615 1 } 351 3 351 4 18446744073709551615 1 } 352 2 352 3 18446744073709551615 4 else 353 2 353 6 18446744073709551615 2 if 353 7 353 9 18446744073709551615 1 ( 353 10 353 11 18446744073709551615 4 kind 353 11 353 15 153 2 == 353 16 353 18 18446744073709551615 14 ExpressionKind 353 19 353 33 138 2 :: 353 33 353 35 18446744073709551615 5 Equal 353 35 353 40 165 2 || 353 41 353 43 18446744073709551615 4 kind 353 44 353 48 153 2 == 353 49 353 51 18446744073709551615 14 ExpressionKind 353 52 353 66 138 2 :: 353 66 353 68 18446744073709551615 8 NotEqual 353 68 353 76 166 1 ) 353 76 353 77 18446744073709551615 1 { 354 2 354 3 18446744073709551615 2 if 355 3 355 5 18446744073709551615 1 ( 355 6 355 7 18446744073709551615 4 left 355 7 355 11 151 1 . 355 11 355 12 140 5 IsInt 355 12 355 17 140 1 ( 355 17 355 18 140 1 ) 355 18 355 19 140 2 && 355 20 355 22 18446744073709551615 5 right 355 23 355 28 152 1 . 355 28 355 29 140 5 IsInt 355 29 355 34 140 1 ( 355 34 355 35 140 1 ) 355 35 355 36 140 1 ) 355 36 355 37 18446744073709551615 1 { 356 3 356 4 18446744073709551615 4 node 357 4 357 8 148 2 -> 357 8 357 10 18446744073709551615 4 type 357 10 357 14 54 1 = 357 15 357 16 122 4 Type 357 17 357 21 123 2 :: 357 21 357 23 130 7 Boolean 357 23 357 30 130 1 ( 357 30 357 31 130 1 ) 357 31 357 32 130 1 ; 357 32 357 33 18446744073709551615 1 } 358 3 358 4 18446744073709551615 4 else 359 3 359 7 18446744073709551615 2 if 359 8 359 10 18446744073709551615 1 ( 359 11 359 12 18446744073709551615 4 left 359 12 359 16 151 1 . 359 16 359 17 141 6 IsLong 359 17 359 23 141 1 ( 359 23 359 24 141 1 ) 359 24 359 25 141 2 && 359 26 359 28 18446744073709551615 5 right 359 29 359 34 152 1 . 359 34 359 35 141 6 IsLong 359 35 359 41 141 1 ( 359 41 359 42 141 1 ) 359 42 359 43 141 1 ) 359 43 359 44 18446744073709551615 1 { 360 3 360 4 18446744073709551615 4 node 361 4 361 8 148 2 -> 361 8 361 10 18446744073709551615 4 type 361 10 361 14 54 1 = 361 15 361 16 122 4 Type 361 17 361 21 123 2 :: 361 21 361 23 130 7 Boolean 361 23 361 30 130 1 ( 361 30 361 31 130 1 ) 361 31 361 32 130 1 ; 361 32 361 33 18446744073709551615 1 } 362 3 362 4 18446744073709551615 4 else 363 3 363 7 18446744073709551615 2 if 363 8 363 10 18446744073709551615 1 ( 363 11 363 12 18446744073709551615 4 left 363 12 363 16 151 1 . 363 16 363 17 142 7 IsFloat 363 17 363 24 142 1 ( 363 24 363 25 142 1 ) 363 25 363 26 142 2 && 363 27 363 29 18446744073709551615 5 right 363 30 363 35 152 1 . 363 35 363 36 142 7 IsFloat 363 36 363 43 142 1 ( 363 43 363 44 142 1 ) 363 44 363 45 142 1 ) 363 45 363 46 18446744073709551615 1 { 364 3 364 4 18446744073709551615 4 node 365 4 365 8 148 2 -> 365 8 365 10 18446744073709551615 4 type 365 10 365 14 54 1 = 365 15 365 16 122 4 Type 365 17 365 21 123 2 :: 365 21 365 23 130 7 Boolean 365 23 365 30 130 1 ( 365 30 365 31 130 1 ) 365 31 365 32 130 1 ; 365 32 365 33 18446744073709551615 1 } 366 3 366 4 18446744073709551615 4 else 367 3 367 7 18446744073709551615 2 if 367 8 367 10 18446744073709551615 1 ( 367 11 367 12 18446744073709551615 4 left 367 12 367 16 151 1 . 367 16 367 17 143 8 IsDouble 367 17 367 25 143 1 ( 367 25 367 26 143 1 ) 367 26 367 27 143 2 && 367 28 367 30 18446744073709551615 5 right 367 31 367 36 152 1 . 367 36 367 37 143 8 IsDouble 367 37 367 45 143 1 ( 367 45 367 46 143 1 ) 367 46 367 47 143 1 ) 367 47 367 48 18446744073709551615 1 { 368 3 368 4 18446744073709551615 4 node 369 4 369 8 148 2 -> 369 8 369 10 18446744073709551615 4 type 369 10 369 14 54 1 = 369 15 369 16 122 4 Type 369 17 369 21 123 2 :: 369 21 369 23 130 7 Boolean 369 23 369 30 130 1 ( 369 30 369 31 130 1 ) 369 31 369 32 130 1 ; 369 32 369 33 18446744073709551615 1 } 370 3 370 4 18446744073709551615 4 else 371 3 371 7 18446744073709551615 2 if 371 8 371 10 18446744073709551615 1 ( 371 11 371 12 18446744073709551615 4 left 371 12 371 16 151 1 . 371 16 371 17 146 9 IsBoolean 371 17 371 26 146 1 ( 371 26 371 27 146 1 ) 371 27 371 28 146 2 && 371 29 371 31 18446744073709551615 5 right 371 32 371 37 152 1 . 371 37 371 38 146 9 IsBoolean 371 38 371 47 146 1 ( 371 47 371 48 146 1 ) 371 48 371 49 146 1 ) 371 49 371 50 18446744073709551615 1 { 372 3 372 4 18446744073709551615 4 node 373 4 373 8 148 2 -> 373 8 373 10 18446744073709551615 4 type 373 10 373 14 54 1 = 373 15 373 16 122 4 Type 373 17 373 21 123 2 :: 373 21 373 23 130 7 Boolean 373 23 373 30 130 1 ( 373 30 373 31 130 1 ) 373 31 373 32 130 1 ; 373 32 373 33 18446744073709551615 1 } 374 3 374 4 18446744073709551615 4 else 375 3 375 7 18446744073709551615 2 if 375 8 375 10 18446744073709551615 1 ( 375 11 375 12 18446744073709551615 4 left 375 12 375 16 151 1 . 375 16 375 17 167 6 IsChar 375 17 375 23 167 1 ( 375 23 375 24 167 1 ) 375 24 375 25 167 2 && 375 26 375 28 18446744073709551615 5 right 375 29 375 34 152 1 . 375 34 375 35 167 6 IsChar 375 35 375 41 167 1 ( 375 41 375 42 167 1 ) 375 42 375 43 167 1 ) 375 43 375 44 18446744073709551615 1 { 376 3 376 4 18446744073709551615 4 node 377 4 377 8 148 2 -> 377 8 377 10 18446744073709551615 4 type 377 10 377 14 54 1 = 377 15 377 16 122 4 Type 377 17 377 21 123 2 :: 377 21 377 23 130 7 Boolean 377 23 377 30 130 1 ( 377 30 377 31 130 1 ) 377 31 377 32 130 1 ; 377 32 377 33 18446744073709551615 1 } 378 3 378 4 18446744073709551615 4 else 379 3 379 7 18446744073709551615 2 if 379 8 379 10 18446744073709551615 1 ( 379 11 379 12 18446744073709551615 4 left 379 12 379 16 151 1 . 379 16 379 17 168 8 IsString 379 17 379 25 168 1 ( 379 25 379 26 168 1 ) 379 26 379 27 168 2 && 379 28 379 30 18446744073709551615 5 right 379 31 379 36 152 1 . 379 36 379 37 168 8 IsString 379 37 379 45 168 1 ( 379 45 379 46 168 1 ) 379 46 379 47 168 1 ) 379 47 379 48 18446744073709551615 1 { 380 3 380 4 18446744073709551615 4 node 381 4 381 8 148 2 -> 381 8 381 10 18446744073709551615 4 type 381 10 381 14 54 1 = 381 15 381 16 122 4 Type 381 17 381 21 123 2 :: 381 21 381 23 130 7 Boolean 381 23 381 30 130 1 ( 381 30 381 31 130 1 ) 381 31 381 32 130 1 ; 381 32 381 33 18446744073709551615 1 } 382 3 382 4 18446744073709551615 4 else 383 3 383 7 18446744073709551615 1 { 384 3 384 4 18446744073709551615 5 throw 385 4 385 9 18446744073709551615 13 TypeException 385 10 385 23 57 1 ( 385 23 385 24 57 4 node 385 24 385 28 148 2 -> 385 28 385 30 18446744073709551615 4 line 385 30 385 34 58 1 , 385 34 385 35 57 4 node 385 36 385 40 148 2 -> 385 40 385 42 18446744073709551615 6 column 385 42 385 48 59 1 , 385 48 385 49 57 42 L"Operator cannot be applied to operands " 386 9 386 51 18446744073709551615 12 L"of type '" 387 9 387 21 18446744073709551615 1 + 387 22 387 23 60 12 TypeToString 388 10 388 22 61 1 ( 388 22 388 23 61 4 left 388 23 388 27 151 1 ) 388 27 388 28 61 1 + 388 29 388 30 60 10 L"' and '" 388 31 388 41 18446744073709551615 1 + 388 42 388 43 60 12 TypeToString 389 10 389 22 61 1 ( 389 22 389 23 61 5 right 389 23 389 28 152 1 ) 389 28 389 29 61 1 + 389 30 389 31 60 4 L"'" 389 32 389 36 18446744073709551615 1 ) 389 36 389 37 57 1 ; 389 37 389 38 18446744073709551615 1 } 390 3 390 4 18446744073709551615 1 } 391 2 391 3 18446744073709551615 4 else 392 2 392 6 18446744073709551615 1 { 393 2 393 3 18446744073709551615 5 throw 394 3 394 8 18446744073709551615 13 TypeException 394 9 394 22 57 1 ( 394 22 394 23 57 4 node 394 23 394 27 148 2 -> 394 27 394 29 18446744073709551615 4 line 394 29 394 33 58 1 , 394 33 394 34 57 4 node 394 35 394 39 148 2 -> 394 39 394 41 18446744073709551615 6 column 394 41 394 47 59 1 , 394 47 394 48 57 42 L"Operator cannot be applied to operands " 395 8 395 50 18446744073709551615 12 L"of type '" 396 8 396 20 18446744073709551615 1 + 396 21 396 22 60 12 TypeToString 397 9 397 21 61 1 ( 397 21 397 22 61 4 left 397 22 397 26 151 1 ) 397 26 397 27 61 1 + 397 28 397 29 60 10 L"' and '" 397 30 397 40 18446744073709551615 1 + 397 41 397 42 60 12 TypeToString 398 9 398 21 61 1 ( 398 21 398 22 61 5 right 398 22 398 27 152 1 ) 398 27 398 28 61 1 + 398 29 398 30 60 4 L"'" 398 31 398 35 18446744073709551615 1 ) 398 35 398 36 57 1 ; 398 36 398 37 18446744073709551615 1 } 399 2 399 3 18446744073709551615 1 } 400 1 400 2 18446744073709551615 4 void 401 1 401 5 18446744073709551615 11 TypeChecker 401 6 401 17 4 2 :: 401 17 401 19 114 5 Visit 401 19 401 24 114 1 ( 401 24 401 25 114 16 AssignExpression 401 25 401 41 169 1 * 401 41 401 42 18446744073709551615 4 node 401 43 401 47 170 1 ) 401 47 401 48 114 1 { 402 1 402 2 18446744073709551615 4 node 403 2 403 6 170 2 -> 403 6 403 8 18446744073709551615 5 value 403 8 403 13 171 2 -> 403 13 403 15 53 6 Accept 403 15 403 21 53 1 ( 403 21 403 22 53 4 this 403 22 403 26 18446744073709551615 1 ) 403 26 403 27 53 1 ; 403 27 403 28 18446744073709551615 2 if 404 2 404 4 18446744073709551615 1 ( 404 5 404 6 18446744073709551615 10 scopeStack 404 6 404 16 8 1 . 404 16 404 17 172 8 Contains 404 17 404 25 172 1 ( 404 25 404 26 172 4 node 404 26 404 30 170 2 -> 404 30 404 32 18446744073709551615 4 name 404 32 404 36 173 1 ) 404 36 404 37 172 1 ) 404 37 404 38 18446744073709551615 1 { 405 2 405 3 18446744073709551615 3 any 406 3 406 6 117 5 value 406 7 406 12 174 1 = 406 13 406 14 18446744073709551615 10 scopeStack 406 15 406 25 8 1 . 406 25 406 26 175 4 Find 406 26 406 30 175 1 ( 406 30 406 31 175 4 node 406 31 406 35 170 2 -> 406 35 406 37 18446744073709551615 4 name 406 37 406 41 173 1 ) 406 41 406 42 175 1 ; 406 42 406 43 18446744073709551615 2 if 407 3 407 5 18446744073709551615 1 ( 407 6 407 7 18446744073709551615 5 value 407 7 407 12 174 1 . 407 12 407 13 120 4 type 407 13 407 17 120 1 ( 407 17 407 18 120 1 ) 407 18 407 19 120 2 == 407 20 407 22 121 6 typeid 407 23 407 29 18446744073709551615 1 ( 407 29 407 30 18446744073709551615 13 LocalVariable 407 30 407 43 70 1 ) 407 43 407 44 18446744073709551615 1 ) 407 44 407 45 18446744073709551615 1 { 408 3 408 4 18446744073709551615 13 LocalVariable 409 4 409 17 70 8 variable 409 18 409 26 176 1 = 409 27 409 28 18446744073709551615 8 any_cast 409 29 409 37 177 1 < 409 37 409 38 177 13 LocalVariable 409 38 409 51 70 1 > 409 51 409 52 177 1 ( 409 52 409 53 177 5 value 409 53 409 58 174 1 ) 409 58 409 59 177 1 ; 409 59 409 60 18446744073709551615 4 node 410 4 410 8 170 2 -> 410 8 410 10 18446744073709551615 4 type 410 10 410 14 54 1 = 410 15 410 16 122 8 variable 410 17 410 25 176 1 . 410 25 410 26 18446744073709551615 4 type 410 26 410 30 178 1 ; 410 30 410 31 18446744073709551615 2 if 411 4 411 6 18446744073709551615 1 ( 411 7 411 8 18446744073709551615 4 node 411 8 411 12 170 2 -> 411 12 411 14 18446744073709551615 4 type 411 14 411 18 54 2 == 411 19 411 21 179 4 node 411 22 411 26 170 2 -> 411 26 411 28 18446744073709551615 5 value 411 28 411 33 171 2 -> 411 33 411 35 18446744073709551615 4 type 411 35 411 39 54 1 ) 411 39 411 40 18446744073709551615 1 { 412 4 412 5 18446744073709551615 1 } 413 4 413 5 18446744073709551615 4 else 414 4 414 8 18446744073709551615 1 { 415 4 415 5 18446744073709551615 5 throw 416 5 416 10 18446744073709551615 13 TypeException 416 11 416 24 57 1 ( 416 24 416 25 57 4 node 416 25 416 29 170 2 -> 416 29 416 31 18446744073709551615 4 line 416 31 416 35 58 1 , 416 35 416 36 57 4 node 416 37 416 41 170 2 -> 416 41 416 43 18446744073709551615 6 column 416 43 416 49 59 1 , 416 49 416 50 57 35 L"Cannot implicitly convert type `" 417 10 417 45 18446744073709551615 1 + 417 46 417 47 60 12 TypeToString 418 11 418 23 61 1 ( 418 23 418 24 61 4 node 418 24 418 28 170 2 -> 418 28 418 30 18446744073709551615 5 value 418 30 418 35 171 2 -> 418 35 418 37 18446744073709551615 4 type 418 37 418 41 54 1 ) 418 41 418 42 61 1 + 418 43 418 44 60 8 L" to '" 419 11 419 19 18446744073709551615 1 + 419 20 419 21 60 12 TypeToString 419 22 419 34 61 1 ( 419 34 419 35 61 4 node 419 35 419 39 170 2 -> 419 39 419 41 18446744073709551615 4 type 419 41 419 45 54 1 ) 419 45 419 46 61 1 + 419 47 419 48 60 4 L"'" 420 11 420 15 18446744073709551615 1 ) 420 15 420 16 57 1 ; 420 16 420 17 18446744073709551615 1 } 421 4 421 5 18446744073709551615 4 node 422 4 422 8 170 2 -> 422 8 422 10 18446744073709551615 8 location 422 10 422 18 180 1 = 422 19 422 20 89 8 variable 422 21 422 29 176 1 . 422 29 422 30 18446744073709551615 8 location 422 30 422 38 100 1 ; 422 38 422 39 18446744073709551615 1 } 423 3 423 4 18446744073709551615 4 else 424 3 424 7 18446744073709551615 2 if 424 8 424 10 18446744073709551615 1 ( 424 11 424 12 18446744073709551615 5 value 424 12 424 17 174 1 . 424 17 424 18 120 4 type 424 18 424 22 120 1 ( 424 22 424 23 120 1 ) 424 23 424 24 120 2 == 424 25 424 27 121 6 typeid 424 28 424 34 18446744073709551615 1 ( 424 34 424 35 18446744073709551615 5 Field 424 35 424 40 50 1 ) 424 40 424 41 18446744073709551615 1 ) 424 41 424 42 18446744073709551615 1 { 425 3 425 4 18446744073709551615 5 Field 426 4 426 9 50 5 field 426 10 426 15 181 1 = 426 16 426 17 18446744073709551615 8 any_cast 426 18 426 26 177 1 < 426 26 426 27 177 5 Field 426 27 426 32 50 1 > 426 32 426 33 177 1 ( 426 33 426 34 177 5 value 426 34 426 39 174 1 ) 426 39 426 40 177 1 ; 426 40 426 41 18446744073709551615 4 node 427 4 427 8 170 2 -> 427 8 427 10 18446744073709551615 4 type 427 10 427 14 54 1 = 427 15 427 16 122 5 field 427 17 427 22 181 1 . 427 22 427 23 18446744073709551615 4 type 427 23 427 27 56 1 ; 427 27 427 28 18446744073709551615 2 if 428 4 428 6 18446744073709551615 1 ( 428 7 428 8 18446744073709551615 4 node 428 8 428 12 170 2 -> 428 12 428 14 18446744073709551615 4 type 428 14 428 18 54 2 == 428 19 428 21 179 4 node 428 22 428 26 170 2 -> 428 26 428 28 18446744073709551615 5 value 428 28 428 33 171 2 -> 428 33 428 35 18446744073709551615 4 type 428 35 428 39 54 1 ) 428 39 428 40 18446744073709551615 1 { 429 4 429 5 18446744073709551615 1 } 430 4 430 5 18446744073709551615 4 else 431 4 431 8 18446744073709551615 1 { 432 4 432 5 18446744073709551615 5 throw 433 5 433 10 18446744073709551615 13 TypeException 433 11 433 24 57 1 ( 433 24 433 25 57 4 node 433 25 433 29 170 2 -> 433 29 433 31 18446744073709551615 4 line 433 31 433 35 58 1 , 433 35 433 36 57 4 node 433 37 433 41 170 2 -> 433 41 433 43 18446744073709551615 6 column 433 43 433 49 59 1 , 433 49 433 50 57 35 L"Cannot implicitly convert type `" 434 10 434 45 18446744073709551615 1 + 434 46 434 47 60 12 TypeToString 435 11 435 23 61 1 ( 435 23 435 24 61 4 node 435 24 435 28 170 2 -> 435 28 435 30 18446744073709551615 5 value 435 30 435 35 171 2 -> 435 35 435 37 18446744073709551615 4 type 435 37 435 41 54 1 ) 435 41 435 42 61 1 + 435 43 435 44 60 8 L" to '" 436 11 436 19 18446744073709551615 1 + 436 20 436 21 60 12 TypeToString 436 22 436 34 61 1 ( 436 34 436 35 61 4 node 436 35 436 39 170 2 -> 436 39 436 41 18446744073709551615 4 type 436 41 436 45 54 1 ) 436 45 436 46 61 1 + 436 47 436 48 60 4 L"'" 437 11 437 15 18446744073709551615 1 ) 437 15 437 16 57 1 ; 437 16 437 17 18446744073709551615 1 } 438 4 438 5 18446744073709551615 4 node 439 4 439 8 170 2 -> 439 8 439 10 18446744073709551615 8 location 439 10 439 18 180 1 = 439 19 439 20 89 5 field 439 21 439 26 181 1 . 439 26 439 27 18446744073709551615 8 location 439 27 439 35 88 1 ; 439 35 439 36 18446744073709551615 1 } 440 3 440 4 18446744073709551615 4 else 441 3 441 7 18446744073709551615 1 { 442 3 442 4 18446744073709551615 5 throw 443 4 443 9 18446744073709551615 13 TypeException 443 10 443 23 57 1 ( 443 23 443 24 57 4 node 443 24 443 28 170 2 -> 443 28 443 30 18446744073709551615 4 line 443 30 443 34 58 1 , 443 34 443 35 57 4 node 443 36 443 40 170 2 -> 443 40 443 42 18446744073709551615 6 column 443 42 443 48 59 1 , 443 48 443 49 57 9 L"name '" 444 9 444 18 18446744073709551615 1 + 444 19 444 20 60 4 node 444 21 444 25 170 2 -> 444 25 444 27 18446744073709551615 4 name 444 27 444 31 173 1 + 444 32 444 33 60 22 L"' is not a variable" 445 10 445 32 18446744073709551615 1 ) 445 32 445 33 57 1 ; 445 33 445 34 18446744073709551615 1 } 446 3 446 4 18446744073709551615 1 } 447 2 447 3 18446744073709551615 4 else 448 2 448 6 18446744073709551615 1 { 449 2 449 3 18446744073709551615 5 throw 450 3 450 8 18446744073709551615 13 TypeException 450 9 450 22 57 1 ( 450 22 450 23 57 4 node 450 23 450 27 170 2 -> 450 27 450 29 18446744073709551615 4 line 450 29 450 33 58 1 , 450 33 450 34 57 4 node 450 35 450 39 170 2 -> 450 39 450 41 18446744073709551615 6 column 450 41 450 47 59 1 , 450 47 450 48 57 9 L"name '" 451 8 451 17 18446744073709551615 1 + 451 18 451 19 60 4 node 451 20 451 24 170 2 -> 451 24 451 26 18446744073709551615 4 name 451 26 451 30 173 1 + 451 31 451 32 60 19 L"' is not defined" 451 33 451 52 18446744073709551615 1 ) 451 52 451 53 57 1 ; 451 53 451 54 18446744073709551615 1 } 452 2 452 3 18446744073709551615 1 } 453 1 453 2 18446744073709551615 4 void 454 1 454 5 18446744073709551615 11 TypeChecker 454 6 454 17 4 2 :: 454 17 454 19 114 5 Visit 454 19 454 24 114 1 ( 454 24 454 25 114 15 BlockExpression 454 25 454 40 182 1 * 454 40 454 41 18446744073709551615 4 node 454 42 454 46 183 1 ) 454 46 454 47 114 1 { 455 1 455 2 18446744073709551615 3 for 456 2 456 5 18446744073709551615 1 ( 456 6 456 7 18446744073709551615 6 ExpPtr 456 7 456 13 76 1 & 456 13 456 14 18446744073709551615 3 exp 456 15 456 18 184 1 : 456 19 456 20 39 4 node 456 21 456 25 183 2 -> 456 25 456 27 18446744073709551615 11 expressions 456 27 456 38 185 1 ) 456 38 456 39 18446744073709551615 1 { 457 2 457 3 18446744073709551615 3 exp 458 3 458 6 184 2 -> 458 6 458 8 53 6 Accept 458 8 458 14 53 1 ( 458 14 458 15 53 4 this 458 15 458 19 18446744073709551615 1 ) 458 19 458 20 53 1 ; 458 20 458 21 18446744073709551615 1 } 459 2 459 3 18446744073709551615 4 node 460 2 460 6 183 2 -> 460 6 460 8 18446744073709551615 4 type 460 8 460 12 54 1 = 460 13 460 14 122 4 Type 460 15 460 19 123 2 :: 460 19 460 21 186 4 Unit 460 21 460 25 186 1 ( 460 25 460 26 186 1 ) 460 26 460 27 186 1 ; 460 27 460 28 18446744073709551615 1 } 461 1 461 2 18446744073709551615 4 void 462 1 462 5 18446744073709551615 11 TypeChecker 462 6 462 17 4 2 :: 462 17 462 19 114 5 Visit 462 19 462 24 114 1 ( 462 24 462 25 114 16 IfThenExpression 462 25 462 41 187 1 * 462 41 462 42 18446744073709551615 4 node 462 43 462 47 188 1 ) 462 47 462 48 114 1 { 463 1 463 2 18446744073709551615 4 node 464 2 464 6 188 2 -> 464 6 464 8 18446744073709551615 9 condition 464 8 464 17 189 2 -> 464 17 464 19 53 6 Accept 464 19 464 25 53 1 ( 464 25 464 26 53 4 this 464 26 464 30 18446744073709551615 1 ) 464 30 464 31 53 1 ; 464 31 464 32 18446744073709551615 2 if 465 2 465 4 18446744073709551615 1 ( 465 5 465 6 18446744073709551615 4 node 465 6 465 10 188 2 -> 465 10 465 12 18446744073709551615 9 condition 465 12 465 21 189 2 -> 465 21 465 23 18446744073709551615 4 type 465 23 465 27 54 1 . 465 27 465 28 146 9 IsBoolean 465 28 465 37 146 1 ( 465 37 465 38 146 1 ) 465 38 465 39 146 1 ) 465 39 465 40 18446744073709551615 1 { 466 2 466 3 18446744073709551615 4 node 467 3 467 7 188 2 -> 467 7 467 9 18446744073709551615 6 ifTrue 467 9 467 15 190 2 -> 467 15 467 17 53 6 Accept 467 17 467 23 53 1 ( 467 23 467 24 53 4 this 467 24 467 28 18446744073709551615 1 ) 467 28 467 29 53 1 ; 467 29 467 30 18446744073709551615 4 node 468 3 468 7 188 2 -> 468 7 468 9 18446744073709551615 4 type 468 9 468 13 54 1 = 468 14 468 15 122 4 Type 468 16 468 20 123 2 :: 468 20 468 22 186 4 Unit 468 22 468 26 186 1 ( 468 26 468 27 186 1 ) 468 27 468 28 186 1 ; 468 28 468 29 18446744073709551615 1 } 469 2 469 3 18446744073709551615 4 else 470 2 470 6 18446744073709551615 1 { 471 2 471 3 18446744073709551615 5 throw 472 3 472 8 18446744073709551615 13 TypeException 472 9 472 22 57 1 ( 472 22 472 23 57 4 node 472 23 472 27 188 2 -> 472 27 472 29 18446744073709551615 4 line 472 29 472 33 58 1 , 472 33 472 34 57 4 node 472 35 472 39 188 2 -> 472 39 472 41 18446744073709551615 6 column 472 41 472 47 59 1 , 472 47 472 48 57 41 L"value cannot be converted to 'Boolean'" 473 8 473 49 18446744073709551615 1 ) 473 49 473 50 57 1 ; 473 50 473 51 18446744073709551615 1 } 474 2 474 3 18446744073709551615 1 } 475 1 475 2 18446744073709551615 4 void 476 1 476 5 18446744073709551615 11 TypeChecker 476 6 476 17 4 2 :: 476 17 476 19 114 5 Visit 476 19 476 24 114 1 ( 476 24 476 25 114 20 IfThenElseExpression 476 25 476 45 191 1 * 476 45 476 46 18446744073709551615 4 node 476 47 476 51 192 1 ) 476 51 476 52 114 1 { 477 1 477 2 18446744073709551615 4 node 478 2 478 6 192 2 -> 478 6 478 8 18446744073709551615 9 condition 478 8 478 17 193 2 -> 478 17 478 19 53 6 Accept 478 19 478 25 53 1 ( 478 25 478 26 53 4 this 478 26 478 30 18446744073709551615 1 ) 478 30 478 31 53 1 ; 478 31 478 32 18446744073709551615 2 if 479 2 479 4 18446744073709551615 1 ( 479 5 479 6 18446744073709551615 4 node 479 6 479 10 192 2 -> 479 10 479 12 18446744073709551615 9 condition 479 12 479 21 193 2 -> 479 21 479 23 18446744073709551615 4 type 479 23 479 27 54 1 . 479 27 479 28 146 9 IsBoolean 479 28 479 37 146 1 ( 479 37 479 38 146 1 ) 479 38 479 39 146 1 ) 479 39 479 40 18446744073709551615 1 { 480 2 480 3 18446744073709551615 4 node 481 3 481 7 192 2 -> 481 7 481 9 18446744073709551615 6 ifTrue 481 9 481 15 194 2 -> 481 15 481 17 53 6 Accept 481 17 481 23 53 1 ( 481 23 481 24 53 4 this 481 24 481 28 18446744073709551615 1 ) 481 28 481 29 53 1 ; 481 29 481 30 18446744073709551615 4 node 482 3 482 7 192 2 -> 482 7 482 9 18446744073709551615 7 ifFalse 482 9 482 16 195 2 -> 482 16 482 18 53 6 Accept 482 18 482 24 53 1 ( 482 24 482 25 53 4 this 482 25 482 29 18446744073709551615 1 ) 482 29 482 30 53 1 ; 482 30 482 31 18446744073709551615 4 node 483 3 483 7 192 2 -> 483 7 483 9 18446744073709551615 4 type 483 9 483 13 54 1 = 483 14 483 15 122 4 Type 483 16 483 20 123 2 :: 483 20 483 22 186 4 Unit 483 22 483 26 186 1 ( 483 26 483 27 186 1 ) 483 27 483 28 186 1 ; 483 28 483 29 18446744073709551615 1 } 484 2 484 3 18446744073709551615 4 else 485 2 485 6 18446744073709551615 1 { 486 2 486 3 18446744073709551615 5 throw 487 3 487 8 18446744073709551615 13 TypeException 487 9 487 22 57 1 ( 487 22 487 23 57 4 node 487 23 487 27 192 2 -> 487 27 487 29 18446744073709551615 4 line 487 29 487 33 58 1 , 487 33 487 34 57 4 node 487 35 487 39 192 2 -> 487 39 487 41 18446744073709551615 6 column 487 41 487 47 59 1 , 487 47 487 48 57 41 L"value cannot be converted to 'Boolean'" 488 8 488 49 18446744073709551615 1 ) 488 49 488 50 57 1 ; 488 50 488 51 18446744073709551615 1 } 489 2 489 3 18446744073709551615 1 } 490 1 490 2 18446744073709551615 4 void 491 1 491 5 18446744073709551615 11 TypeChecker 491 6 491 17 4 2 :: 491 17 491 19 114 5 Visit 491 19 491 24 114 1 ( 491 24 491 25 114 14 CallExpression 491 25 491 39 196 1 * 491 39 491 40 18446744073709551615 4 node 491 41 491 45 197 1 ) 491 45 491 46 114 1 { 492 1 492 2 18446744073709551615 4 node 493 2 493 6 197 2 -> 493 6 493 8 18446744073709551615 8 function 493 8 493 16 198 2 -> 493 16 493 18 53 6 Accept 493 18 493 24 53 1 ( 493 24 493 25 53 4 this 493 25 493 29 18446744073709551615 1 ) 493 29 493 30 53 1 ; 493 30 493 31 18446744073709551615 3 for 494 2 494 5 18446744073709551615 1 ( 494 6 494 7 18446744073709551615 6 ExpPtr 494 7 494 13 76 1 & 494 13 494 14 18446744073709551615 3 arg 494 15 494 18 199 1 : 494 19 494 20 39 4 node 494 21 494 25 197 2 -> 494 25 494 27 18446744073709551615 9 arguments 494 27 494 36 200 1 ) 494 36 494 37 18446744073709551615 1 { 495 2 495 3 18446744073709551615 3 arg 496 3 496 6 199 2 -> 496 6 496 8 53 6 Accept 496 8 496 14 53 1 ( 496 14 496 15 53 4 this 496 15 496 19 18446744073709551615 1 ) 496 19 496 20 53 1 ; 496 20 496 21 18446744073709551615 1 } 497 2 497 3 18446744073709551615 2 if 498 2 498 4 18446744073709551615 1 ( 498 5 498 6 18446744073709551615 4 node 498 6 498 10 197 2 -> 498 10 498 12 18446744073709551615 8 function 498 12 498 20 198 2 -> 498 20 498 22 18446744073709551615 4 type 498 22 498 26 54 1 . 498 26 498 27 201 10 IsFunction 498 27 498 37 201 1 ( 498 37 498 38 201 1 ) 498 38 498 39 201 1 ) 498 39 498 40 18446744073709551615 1 { 499 2 499 3 18446744073709551615 6 vector 500 3 500 9 202 1 < 500 9 500 10 18446744073709551615 4 Type 500 10 500 14 123 1 > 500 14 500 15 18446744073709551615 1 & 500 15 500 16 18446744073709551615 5 types 500 17 500 22 203 1 = 500 23 500 24 18446744073709551615 4 node 500 25 500 29 197 2 -> 500 29 500 31 18446744073709551615 8 function 500 31 500 39 198 2 -> 500 39 500 41 18446744073709551615 4 type 500 41 500 45 54 1 . 500 45 500 46 18446744073709551615 10 parameters 500 46 500 56 204 1 ; 500 56 500 57 18446744073709551615 2 if 501 3 501 5 18446744073709551615 1 ( 501 6 501 7 18446744073709551615 5 types 501 7 501 12 203 1 . 501 12 501 13 205 4 size 501 13 501 17 205 1 ( 501 17 501 18 205 1 ) 501 18 501 19 205 2 == 501 20 501 22 18446744073709551615 4 node 501 23 501 27 197 2 -> 501 27 501 29 18446744073709551615 9 arguments 501 29 501 38 200 1 . 501 38 501 39 205 4 size 501 39 501 43 205 1 ( 501 43 501 44 205 1 ) 501 44 501 45 205 1 + 501 46 501 47 18446744073709551615 1 1 501 48 501 49 18446744073709551615 1 ) 501 49 501 50 18446744073709551615 1 { 502 3 502 4 18446744073709551615 7 int32_t 503 4 503 11 11 1 n 503 12 503 13 206 1 = 503 14 503 15 18446744073709551615 4 node 503 16 503 20 197 2 -> 503 20 503 22 18446744073709551615 9 arguments 503 22 503 31 200 1 . 503 31 503 32 205 4 size 503 32 503 36 205 1 ( 503 36 503 37 205 1 ) 503 37 503 38 205 1 ; 503 38 503 39 18446744073709551615 3 for 504 4 504 7 18446744073709551615 1 ( 504 8 504 9 18446744073709551615 7 int32_t 504 9 504 16 11 1 i 504 17 504 18 207 1 = 504 19 504 20 18446744073709551615 1 0 504 21 504 22 18446744073709551615 1 ; 504 22 504 23 18446744073709551615 1 i 504 24 504 25 207 1 < 504 26 504 27 18446744073709551615 1 n 504 28 504 29 206 1 ; 504 29 504 30 18446744073709551615 1 i 504 31 504 32 207 2 ++ 504 32 504 34 18446744073709551615 1 ) 504 34 504 35 18446744073709551615 1 { 505 4 505 5 18446744073709551615 2 if 506 5 506 7 18446744073709551615 1 ( 506 8 506 9 18446744073709551615 5 types 506 9 506 14 203 1 . 506 14 506 15 208 2 at 506 15 506 17 208 1 ( 506 17 506 18 208 1 i 506 18 506 19 207 1 ) 506 19 506 20 208 2 != 506 21 506 23 55 4 node 506 24 506 28 197 2 -> 506 28 506 30 18446744073709551615 9 arguments 506 30 506 39 200 1 . 506 39 506 40 208 2 at 506 40 506 42 208 1 ( 506 42 506 43 208 1 i 506 43 506 44 207 1 ) 506 44 506 45 208 2 -> 506 45 506 47 18446744073709551615 4 type 506 47 506 51 54 1 ) 506 51 506 52 18446744073709551615 1 { 507 5 507 6 18446744073709551615 5 throw 508 6 508 11 18446744073709551615 13 TypeException 508 12 508 25 57 1 ( 508 25 508 26 57 4 node 508 26 508 30 197 2 -> 508 30 508 32 18446744073709551615 4 line 508 32 508 36 58 1 , 508 36 508 37 57 4 node 508 38 508 42 197 2 -> 508 42 508 44 18446744073709551615 6 column 508 44 508 50 59 1 , 508 50 508 51 57 31 L"argument type does not match" 509 11 509 42 18446744073709551615 1 ) 509 42 509 43 57 1 ; 509 43 509 44 18446744073709551615 1 } 510 5 510 6 18446744073709551615 1 } 511 4 511 5 18446744073709551615 4 node 512 4 512 8 197 2 -> 512 8 512 10 18446744073709551615 4 type 512 10 512 14 54 1 = 512 15 512 16 122 5 types 512 17 512 22 203 1 . 512 22 512 23 209 4 back 512 23 512 27 209 1 ( 512 27 512 28 209 1 ) 512 28 512 29 209 1 ; 512 29 512 30 18446744073709551615 1 } 513 3 513 4 18446744073709551615 4 else 514 3 514 7 18446744073709551615 1 { 515 3 515 4 18446744073709551615 5 throw 516 4 516 9 18446744073709551615 13 TypeException 516 10 516 23 57 1 ( 516 23 516 24 57 4 node 516 24 516 28 197 2 -> 516 28 516 30 18446744073709551615 4 line 516 30 516 34 58 1 , 516 34 516 35 57 4 node 516 36 516 40 197 2 -> 516 40 516 42 18446744073709551615 6 column 516 42 516 48 59 1 , 516 48 516 49 57 32 L"argument count does not match" 517 9 517 41 18446744073709551615 1 ) 517 41 517 42 57 1 ; 517 42 517 43 18446744073709551615 1 } 518 3 518 4 18446744073709551615 1 } 519 2 519 3 18446744073709551615 4 else 520 2 520 6 18446744073709551615 1 { 521 2 521 3 18446744073709551615 5 throw 522 3 522 8 18446744073709551615 13 TypeException 522 9 522 22 57 1 ( 522 22 522 23 57 4 node 522 23 522 27 197 2 -> 522 27 522 29 18446744073709551615 4 line 522 29 522 33 58 1 , 522 33 522 34 57 4 node 522 35 522 39 197 2 -> 522 39 522 41 18446744073709551615 6 column 522 41 522 47 59 1 , 522 47 522 48 57 36 L"object cannot be used as function" 523 8 523 44 18446744073709551615 1 ) 523 44 523 45 57 1 ; 523 45 523 46 18446744073709551615 1 } 524 2 524 3 18446744073709551615 1 } 525 1 525 2 18446744073709551615 4 void 526 1 526 5 18446744073709551615 11 TypeChecker 526 6 526 17 4 2 :: 526 17 526 19 114 5 Visit 526 19 526 24 114 1 ( 526 24 526 25 114 18 VariableExpression 526 25 526 43 210 1 * 526 43 526 44 18446744073709551615 4 node 526 45 526 49 211 1 ) 526 49 526 50 114 1 { 527 1 527 2 18446744073709551615 2 if 528 2 528 4 18446744073709551615 1 ( 528 5 528 6 18446744073709551615 10 scopeStack 528 6 528 16 8 1 . 528 16 528 17 172 8 Contains 528 17 528 25 172 1 ( 528 25 528 26 172 4 node 528 26 528 30 211 2 -> 528 30 528 32 18446744073709551615 4 name 528 32 528 36 212 1 ) 528 36 528 37 172 1 ) 528 37 528 38 18446744073709551615 1 { 529 2 529 3 18446744073709551615 3 any 530 3 530 6 117 5 value 530 7 530 12 213 1 = 530 13 530 14 18446744073709551615 10 scopeStack 530 15 530 25 8 1 . 530 25 530 26 175 4 Find 530 26 530 30 175 1 ( 530 30 530 31 175 4 node 530 31 530 35 211 2 -> 530 35 530 37 18446744073709551615 4 name 530 37 530 41 212 1 ) 530 41 530 42 175 1 ; 530 42 530 43 18446744073709551615 2 if 531 3 531 5 18446744073709551615 1 ( 531 6 531 7 18446744073709551615 5 value 531 7 531 12 213 1 . 531 12 531 13 120 4 type 531 13 531 17 120 1 ( 531 17 531 18 120 1 ) 531 18 531 19 120 2 == 531 20 531 22 121 6 typeid 531 23 531 29 18446744073709551615 1 ( 531 29 531 30 18446744073709551615 13 LocalVariable 531 30 531 43 70 1 ) 531 43 531 44 18446744073709551615 1 ) 531 44 531 45 18446744073709551615 1 { 532 3 532 4 18446744073709551615 13 LocalVariable 533 4 533 17 70 8 variable 533 18 533 26 214 1 = 533 27 533 28 18446744073709551615 8 any_cast 533 29 533 37 177 1 < 533 37 533 38 177 13 LocalVariable 533 38 533 51 70 1 > 533 51 533 52 177 1 ( 533 52 533 53 177 5 value 533 53 533 58 213 1 ) 533 58 533 59 177 1 ; 533 59 533 60 18446744073709551615 4 node 534 4 534 8 211 2 -> 534 8 534 10 18446744073709551615 4 type 534 10 534 14 54 1 = 534 15 534 16 122 8 variable 534 17 534 25 214 1 . 534 25 534 26 18446744073709551615 4 type 534 26 534 30 178 1 ; 534 30 534 31 18446744073709551615 4 node 535 4 535 8 211 2 -> 535 8 535 10 18446744073709551615 8 location 535 10 535 18 215 1 = 535 19 535 20 89 8 variable 535 21 535 29 214 1 . 535 29 535 30 18446744073709551615 8 location 535 30 535 38 100 1 ; 535 38 535 39 18446744073709551615 1 } 536 3 536 4 18446744073709551615 4 else 537 3 537 7 18446744073709551615 2 if 537 8 537 10 18446744073709551615 1 ( 537 11 537 12 18446744073709551615 5 value 537 12 537 17 213 1 . 537 17 537 18 120 4 type 537 18 537 22 120 1 ( 537 22 537 23 120 1 ) 537 23 537 24 120 2 == 537 25 537 27 121 6 typeid 537 28 537 34 18446744073709551615 1 ( 537 34 537 35 18446744073709551615 9 Parameter 537 35 537 44 64 1 ) 537 44 537 45 18446744073709551615 1 ) 537 45 537 46 18446744073709551615 1 { 538 3 538 4 18446744073709551615 9 Parameter 539 4 539 13 64 9 parameter 539 14 539 23 216 1 = 539 24 539 25 18446744073709551615 8 any_cast 539 26 539 34 177 1 < 539 34 539 35 177 9 Parameter 539 35 539 44 64 1 > 539 44 539 45 177 1 ( 539 45 539 46 177 5 value 539 46 539 51 213 1 ) 539 51 539 52 177 1 ; 539 52 539 53 18446744073709551615 4 node 540 4 540 8 211 2 -> 540 8 540 10 18446744073709551615 4 type 540 10 540 14 54 1 = 540 15 540 16 122 9 parameter 540 17 540 26 216 1 . 540 26 540 27 18446744073709551615 4 type 540 27 540 31 217 1 ; 540 31 540 32 18446744073709551615 4 node 541 4 541 8 211 2 -> 541 8 541 10 18446744073709551615 8 location 541 10 541 18 215 1 = 541 19 541 20 89 9 parameter 541 21 541 30 216 1 . 541 30 541 31 18446744073709551615 8 location 541 31 541 39 97 1 ; 541 39 541 40 18446744073709551615 1 } 542 3 542 4 18446744073709551615 4 else 543 3 543 7 18446744073709551615 2 if 543 8 543 10 18446744073709551615 1 ( 543 11 543 12 18446744073709551615 5 value 543 12 543 17 213 1 . 543 17 543 18 120 4 type 543 18 543 22 120 1 ( 543 22 543 23 120 1 ) 543 23 543 24 120 2 == 543 25 543 27 121 6 typeid 543 28 543 34 18446744073709551615 1 ( 543 34 543 35 18446744073709551615 5 Field 543 35 543 40 50 1 ) 543 40 543 41 18446744073709551615 1 ) 543 41 543 42 18446744073709551615 1 { 544 3 544 4 18446744073709551615 5 Field 545 4 545 9 50 5 field 545 10 545 15 218 1 = 545 16 545 17 18446744073709551615 8 any_cast 545 18 545 26 177 1 < 545 26 545 27 177 5 Field 545 27 545 32 50 1 > 545 32 545 33 177 1 ( 545 33 545 34 177 5 value 545 34 545 39 213 1 ) 545 39 545 40 177 1 ; 545 40 545 41 18446744073709551615 4 node 546 4 546 8 211 2 -> 546 8 546 10 18446744073709551615 4 type 546 10 546 14 54 1 = 546 15 546 16 122 5 field 546 17 546 22 218 1 . 546 22 546 23 18446744073709551615 4 type 546 23 546 27 56 1 ; 546 27 546 28 18446744073709551615 4 node 547 4 547 8 211 2 -> 547 8 547 10 18446744073709551615 8 location 547 10 547 18 215 1 = 547 19 547 20 89 5 field 547 21 547 26 218 1 . 547 26 547 27 18446744073709551615 8 location 547 27 547 35 88 1 ; 547 35 547 36 18446744073709551615 1 } 548 3 548 4 18446744073709551615 4 else 549 3 549 7 18446744073709551615 2 if 549 8 549 10 18446744073709551615 1 ( 549 11 549 12 18446744073709551615 5 value 549 12 549 17 213 1 . 549 17 549 18 120 4 type 549 18 549 22 120 1 ( 549 22 549 23 120 1 ) 549 23 549 24 120 2 == 549 25 549 27 121 6 typeid 549 28 549 34 18446744073709551615 1 ( 549 34 549 35 18446744073709551615 8 Function 549 35 549 43 62 1 ) 549 43 549 44 18446744073709551615 1 ) 549 44 549 45 18446744073709551615 1 { 550 3 550 4 18446744073709551615 8 Function 551 4 551 12 62 8 function 551 13 551 21 219 1 = 551 22 551 23 18446744073709551615 8 any_cast 551 24 551 32 177 1 < 551 32 551 33 177 8 Function 551 33 551 41 62 1 > 551 41 551 42 177 1 ( 551 42 551 43 177 5 value 551 43 551 48 213 1 ) 551 48 551 49 177 1 ; 551 49 551 50 18446744073709551615 4 node 552 4 552 8 211 2 -> 552 8 552 10 18446744073709551615 4 type 552 10 552 14 54 1 = 552 15 552 16 122 8 function 552 17 552 25 219 1 . 552 25 552 26 18446744073709551615 12 functionType 552 26 552 38 220 1 ; 552 38 552 39 18446744073709551615 4 node 553 4 553 8 211 2 -> 553 8 553 10 18446744073709551615 8 location 553 10 553 18 215 1 = 553 19 553 20 89 8 function 553 21 553 29 219 1 . 553 29 553 30 18446744073709551615 8 location 553 30 553 38 93 1 ; 553 38 553 39 18446744073709551615 1 } 554 3 554 4 18446744073709551615 4 else 555 3 555 7 18446744073709551615 2 if 555 8 555 10 18446744073709551615 1 ( 555 11 555 12 18446744073709551615 5 value 555 12 555 17 213 1 . 555 17 555 18 120 4 type 555 18 555 22 120 1 ( 555 22 555 23 120 1 ) 555 23 555 24 120 2 == 555 25 555 27 121 6 typeid 555 28 555 34 18446744073709551615 1 ( 555 34 555 35 18446744073709551615 6 Module 555 35 555 41 28 1 ) 555 41 555 42 18446744073709551615 1 ) 555 42 555 43 18446744073709551615 1 { 556 3 556 4 18446744073709551615 4 node 557 4 557 8 211 2 -> 557 8 557 10 18446744073709551615 4 type 557 10 557 14 54 1 = 557 15 557 16 122 8 any_cast 557 17 557 25 177 1 < 557 25 557 26 177 6 Module 557 26 557 32 28 1 > 557 32 557 33 177 1 ( 557 33 557 34 177 5 value 557 34 557 39 213 1 ) 557 39 557 40 177 1 . 557 40 557 41 18446744073709551615 4 type 557 41 557 45 101 1 ; 557 45 557 46 18446744073709551615 1 } 558 3 558 4 18446744073709551615 4 else 559 3 559 7 18446744073709551615 2 if 559 8 559 10 18446744073709551615 1 ( 559 11 559 12 18446744073709551615 5 value 559 12 559 17 213 1 . 559 17 559 18 120 4 type 559 18 559 22 120 1 ( 559 22 559 23 120 1 ) 559 23 559 24 120 2 == 559 25 559 27 121 6 typeid 559 28 559 34 18446744073709551615 1 ( 559 34 559 35 18446744073709551615 5 Class 559 35 559 40 33 1 ) 559 40 559 41 18446744073709551615 1 ) 559 41 559 42 18446744073709551615 1 { 560 3 560 4 18446744073709551615 4 node 561 4 561 8 211 2 -> 561 8 561 10 18446744073709551615 4 type 561 10 561 14 54 1 = 561 15 561 16 122 8 any_cast 561 17 561 25 177 1 < 561 25 561 26 177 5 Class 561 26 561 31 33 1 > 561 31 561 32 177 1 ( 561 32 561 33 177 5 value 561 33 561 38 213 1 ) 561 38 561 39 177 1 . 561 39 561 40 18446744073709551615 4 type 561 40 561 44 113 1 ; 561 44 561 45 18446744073709551615 1 } 562 3 562 4 18446744073709551615 4 else 563 3 563 7 18446744073709551615 1 { 564 3 564 4 18446744073709551615 5 throw 565 4 565 9 18446744073709551615 7 wstring 565 10 565 17 131 1 ( 565 17 565 18 133 21 L"not supported type" 565 18 565 39 18446744073709551615 1 ) 565 39 565 40 133 1 ; 565 40 565 41 18446744073709551615 1 } 566 3 566 4 18446744073709551615 1 } 567 2 567 3 18446744073709551615 4 else 568 2 568 6 18446744073709551615 1 { 569 2 569 3 18446744073709551615 5 throw 570 3 570 8 18446744073709551615 13 TypeException 570 9 570 22 57 1 ( 570 22 570 23 57 4 node 570 23 570 27 211 2 -> 570 27 570 29 18446744073709551615 4 line 570 29 570 33 58 1 , 570 33 570 34 57 4 node 570 35 570 39 211 2 -> 570 39 570 41 18446744073709551615 6 column 570 41 570 47 59 1 , 570 47 570 48 57 9 L"name '" 571 8 571 17 18446744073709551615 1 + 571 18 571 19 60 4 node 571 20 571 24 211 2 -> 571 24 571 26 18446744073709551615 4 name 571 26 571 30 212 1 + 571 31 571 32 60 19 L"' is not defined" 571 33 571 52 18446744073709551615 1 ) 571 52 571 53 57 1 ; 571 53 571 54 18446744073709551615 1 } 572 2 572 3 18446744073709551615 1 } 573 1 573 2 18446744073709551615 4 void 574 1 574 5 18446744073709551615 11 TypeChecker 574 6 574 17 4 2 :: 574 17 574 19 114 5 Visit 574 19 574 24 114 1 ( 574 24 574 25 114 16 ReturnExpression 574 25 574 41 221 1 * 574 41 574 42 18446744073709551615 4 node 574 43 574 47 222 1 ) 574 47 574 48 114 1 { 575 1 575 2 18446744073709551615 4 node 576 2 576 6 222 2 -> 576 6 576 8 18446744073709551615 5 value 576 8 576 13 223 2 -> 576 13 576 15 53 6 Accept 576 15 576 21 53 1 ( 576 21 576 22 53 4 this 576 22 576 26 18446744073709551615 1 ) 576 26 576 27 53 1 ; 576 27 576 28 18446744073709551615 4 node 577 2 577 6 222 2 -> 577 6 577 8 18446744073709551615 4 type 577 8 577 12 54 1 = 577 13 577 14 122 4 node 577 15 577 19 222 2 -> 577 19 577 21 18446744073709551615 5 value 577 21 577 26 223 2 -> 577 26 577 28 18446744073709551615 4 type 577 28 577 32 54 1 ; 577 32 577 33 18446744073709551615 1 } 578 1 578 2 18446744073709551615 4 void 579 1 579 5 18446744073709551615 11 TypeChecker 579 6 579 17 4 2 :: 579 17 579 19 114 5 Visit 579 19 579 24 114 1 ( 579 24 579 25 114 15 WhileExpression 579 25 579 40 224 1 * 579 40 579 41 18446744073709551615 4 node 579 42 579 46 225 1 ) 579 46 579 47 114 1 { 580 1 580 2 18446744073709551615 4 node 581 2 581 6 225 2 -> 581 6 581 8 18446744073709551615 9 condition 581 8 581 17 226 2 -> 581 17 581 19 53 6 Accept 581 19 581 25 53 1 ( 581 25 581 26 53 4 this 581 26 581 30 18446744073709551615 1 ) 581 30 581 31 53 1 ; 581 31 581 32 18446744073709551615 2 if 582 2 582 4 18446744073709551615 1 ( 582 5 582 6 18446744073709551615 4 node 582 6 582 10 225 2 -> 582 10 582 12 18446744073709551615 9 condition 582 12 582 21 226 2 -> 582 21 582 23 18446744073709551615 4 type 582 23 582 27 54 1 . 582 27 582 28 146 9 IsBoolean 582 28 582 37 146 1 ( 582 37 582 38 146 1 ) 582 38 582 39 146 1 ) 582 39 582 40 18446744073709551615 1 { 583 2 583 3 18446744073709551615 4 node 584 3 584 7 225 2 -> 584 7 584 9 18446744073709551615 4 body 584 9 584 13 227 2 -> 584 13 584 15 53 6 Accept 584 15 584 21 53 1 ( 584 21 584 22 53 4 this 584 22 584 26 18446744073709551615 1 ) 584 26 584 27 53 1 ; 584 27 584 28 18446744073709551615 4 node 585 3 585 7 225 2 -> 585 7 585 9 18446744073709551615 4 type 585 9 585 13 54 1 = 585 14 585 15 122 4 Type 585 16 585 20 123 2 :: 585 20 585 22 186 4 Unit 585 22 585 26 186 1 ( 585 26 585 27 186 1 ) 585 27 585 28 186 1 ; 585 28 585 29 18446744073709551615 1 } 586 2 586 3 18446744073709551615 4 else 587 2 587 6 18446744073709551615 1 { 588 2 588 3 18446744073709551615 5 throw 589 3 589 8 18446744073709551615 13 TypeException 589 9 589 22 57 1 ( 589 22 589 23 57 4 node 589 23 589 27 225 2 -> 589 27 589 29 18446744073709551615 4 line 589 29 589 33 58 1 , 589 33 589 34 57 4 node 589 35 589 39 225 2 -> 589 39 589 41 18446744073709551615 6 column 589 41 589 47 59 1 , 589 47 589 48 57 41 L"value cannot be converted to 'Boolean'" 590 8 590 49 18446744073709551615 1 ) 590 49 590 50 57 1 ; 590 50 590 51 18446744073709551615 1 } 591 2 591 3 18446744073709551615 1 } 592 1 592 2 18446744073709551615 4 void 593 1 593 5 18446744073709551615 11 TypeChecker 593 6 593 17 4 2 :: 593 17 593 19 114 5 Visit 593 19 593 24 114 1 ( 593 24 593 25 114 13 DotExpression 593 25 593 38 228 1 * 593 38 593 39 18446744073709551615 4 node 593 40 593 44 229 1 ) 593 44 593 45 114 1 { 594 1 594 2 18446744073709551615 4 node 595 2 595 6 229 2 -> 595 6 595 8 18446744073709551615 6 object 595 8 595 14 230 2 -> 595 14 595 16 53 6 Accept 595 16 595 22 53 1 ( 595 22 595 23 53 4 this 595 23 595 27 18446744073709551615 1 ) 595 27 595 28 53 1 ; 595 28 595 29 18446744073709551615 4 Type 596 2 596 6 123 1 & 596 6 596 7 18446744073709551615 7 objType 596 8 596 15 231 1 = 596 16 596 17 18446744073709551615 4 node 596 18 596 22 229 2 -> 596 22 596 24 18446744073709551615 6 object 596 24 596 30 230 2 -> 596 30 596 32 18446744073709551615 4 type 596 32 596 36 54 1 ; 596 36 596 37 18446744073709551615 2 if 597 2 597 4 18446744073709551615 1 ( 597 5 597 6 18446744073709551615 7 objType 597 6 597 13 231 1 . 597 13 597 14 232 8 IsModule 597 14 597 22 232 1 ( 597 22 597 23 232 1 ) 597 23 597 24 232 1 ) 597 24 597 25 18446744073709551615 1 { 598 2 598 3 18446744073709551615 6 Module 599 3 599 9 28 10 moduleInfo 599 10 599 20 233 1 = 599 21 599 22 18446744073709551615 8 any_cast 599 23 599 31 177 1 < 599 31 599 32 177 6 Module 599 32 599 38 28 1 > 599 38 599 39 177 1 ( 599 39 599 40 177 10 scopeStack 599 40 599 50 8 1 . 599 50 599 51 175 4 Find 599 51 599 55 175 1 ( 599 55 599 56 175 7 objType 599 56 599 63 231 1 . 599 63 599 64 18446744073709551615 4 name 599 64 599 68 102 1 ) 599 68 599 69 175 1 ) 599 69 599 70 177 1 ; 599 70 599 71 18446744073709551615 2 if 600 3 600 5 18446744073709551615 1 ( 600 6 600 7 18446744073709551615 10 moduleInfo 600 7 600 17 233 1 . 600 17 600 18 18446744073709551615 8 fieldMap 600 18 600 26 234 1 . 600 26 600 27 235 4 find 600 27 600 31 235 1 ( 600 31 600 32 235 4 node 600 32 600 36 229 2 -> 600 36 600 38 18446744073709551615 4 name 600 38 600 42 236 1 ) 600 42 600 43 235 2 != 600 44 600 46 237 10 moduleInfo 600 47 600 57 233 1 . 600 57 600 58 18446744073709551615 8 fieldMap 600 58 600 66 234 1 . 600 66 600 67 238 3 end 600 67 600 70 238 1 ( 600 70 600 71 238 1 ) 600 71 600 72 238 1 ) 600 72 600 73 18446744073709551615 1 { 601 3 601 4 18446744073709551615 5 Field 602 4 602 9 50 5 field 602 10 602 15 239 1 = 602 16 602 17 18446744073709551615 10 moduleInfo 602 18 602 28 233 1 . 602 28 602 29 18446744073709551615 6 fields 602 29 602 35 40 1 [ 602 35 602 36 240 10 moduleInfo 602 36 602 46 233 1 . 602 46 602 47 18446744073709551615 8 fieldMap 602 47 602 55 234 1 [ 602 55 602 56 241 4 node 602 56 602 60 229 2 -> 602 60 602 62 18446744073709551615 4 name 602 62 602 66 236 1 ] 602 66 602 67 241 1 ] 602 67 602 68 240 1 ; 602 68 602 69 18446744073709551615 4 node 603 4 603 8 229 2 -> 603 8 603 10 18446744073709551615 4 type 603 10 603 14 54 1 = 603 15 603 16 122 5 field 603 17 603 22 239 1 . 603 22 603 23 18446744073709551615 4 type 603 23 603 27 56 1 ; 603 27 603 28 18446744073709551615 4 node 604 4 604 8 229 2 -> 604 8 604 10 18446744073709551615 5 value 604 10 604 15 242 1 = 604 16 604 17 243 5 field 604 18 604 23 239 1 ; 604 23 604 24 18446744073709551615 1 } 605 3 605 4 18446744073709551615 4 else 606 3 606 7 18446744073709551615 2 if 606 8 606 10 18446744073709551615 1 ( 606 11 606 12 18446744073709551615 10 moduleInfo 606 12 606 22 233 1 . 606 22 606 23 18446744073709551615 11 functionMap 606 23 606 34 244 1 . 606 34 606 35 235 4 find 606 35 606 39 235 1 ( 606 39 606 40 235 4 node 606 40 606 44 229 2 -> 606 44 606 46 18446744073709551615 4 name 606 46 606 50 236 1 ) 606 50 606 51 235 2 != 606 52 606 54 237 10 moduleInfo 607 6 607 16 233 1 . 607 16 607 17 18446744073709551615 11 functionMap 607 17 607 28 244 1 . 607 28 607 29 238 3 end 607 29 607 32 238 1 ( 607 32 607 33 238 1 ) 607 33 607 34 238 1 ) 607 34 607 35 18446744073709551615 1 { 608 3 608 4 18446744073709551615 8 Function 609 4 609 12 62 1 f 609 13 609 14 245 1 = 609 15 609 16 18446744073709551615 10 moduleInfo 610 5 610 15 233 1 . 610 15 610 16 18446744073709551615 9 functions 610 16 610 25 43 1 [ 610 25 610 26 240 10 moduleInfo 610 26 610 36 233 1 . 610 36 610 37 18446744073709551615 11 functionMap 610 37 610 48 244 1 [ 610 48 610 49 241 4 node 610 49 610 53 229 2 -> 610 53 610 55 18446744073709551615 4 name 610 55 610 59 236 1 ] 610 59 610 60 241 1 ] 610 60 610 61 240 1 ; 610 61 610 62 18446744073709551615 4 node 611 4 611 8 229 2 -> 611 8 611 10 18446744073709551615 4 type 611 10 611 14 54 1 = 611 15 611 16 122 1 f 611 17 611 18 245 1 . 611 18 611 19 18446744073709551615 12 functionType 611 19 611 31 220 1 ; 611 31 611 32 18446744073709551615 4 node 612 4 612 8 229 2 -> 612 8 612 10 18446744073709551615 5 value 612 10 612 15 242 1 = 612 16 612 17 243 1 f 612 18 612 19 245 1 ; 612 19 612 20 18446744073709551615 1 } 613 3 613 4 18446744073709551615 4 else 614 3 614 7 18446744073709551615 1 { 615 3 615 4 18446744073709551615 5 throw 616 4 616 9 18446744073709551615 13 TypeException 616 10 616 23 57 1 ( 616 23 616 24 57 4 node 616 24 616 28 229 2 -> 616 28 616 30 18446744073709551615 4 line 616 30 616 34 58 1 , 616 34 616 35 57 4 node 616 36 616 40 229 2 -> 616 40 616 42 18446744073709551615 6 column 616 42 616 48 59 1 , 616 48 616 49 57 20 L"field not defined" 616 50 616 70 18446744073709551615 1 ) 616 70 616 71 57 1 ; 616 71 616 72 18446744073709551615 1 } 617 3 617 4 18446744073709551615 1 } 618 2 618 3 18446744073709551615 4 else 619 2 619 6 18446744073709551615 2 if 619 7 619 9 18446744073709551615 1 ( 619 10 619 11 18446744073709551615 7 objType 619 11 619 18 231 1 . 619 18 619 19 246 7 IsClass 619 19 619 26 246 1 ( 619 26 619 27 246 1 ) 619 27 619 28 246 1 ) 619 28 619 29 18446744073709551615 1 { 620 2 620 3 18446744073709551615 5 Class 621 3 621 8 33 9 classInfo 621 9 621 18 247 1 = 621 19 621 20 18446744073709551615 8 any_cast 621 21 621 29 177 1 < 621 29 621 30 177 5 Class 621 30 621 35 33 1 > 621 35 621 36 177 1 ( 621 36 621 37 177 10 scopeStack 621 37 621 47 8 1 . 621 47 621 48 175 4 Find 621 48 621 52 175 1 ( 621 52 621 53 175 7 objType 621 53 621 60 231 1 . 621 60 621 61 18446744073709551615 4 name 621 61 621 65 102 1 ) 621 65 621 66 175 1 ) 621 66 621 67 177 1 ; 621 67 621 68 18446744073709551615 2 if 622 3 622 5 18446744073709551615 1 ( 622 6 622 7 18446744073709551615 9 classInfo 622 7 622 16 247 1 . 622 16 622 17 18446744073709551615 8 fieldMap 622 17 622 25 248 1 . 622 25 622 26 235 4 find 622 26 622 30 235 1 ( 622 30 622 31 235 4 node 622 31 622 35 229 2 -> 622 35 622 37 18446744073709551615 4 name 622 37 622 41 236 1 ) 622 41 622 42 235 2 != 622 43 622 45 237 9 classInfo 622 46 622 55 247 1 . 622 55 622 56 18446744073709551615 8 fieldMap 622 56 622 64 248 1 . 622 64 622 65 238 3 end 622 65 622 68 238 1 ( 622 68 622 69 238 1 ) 622 69 622 70 238 1 ) 622 70 622 71 18446744073709551615 1 { 623 3 623 4 18446744073709551615 5 Field 624 4 624 9 50 5 field 624 10 624 15 249 1 = 624 16 624 17 18446744073709551615 9 classInfo 624 18 624 27 247 1 . 624 27 624 28 18446744073709551615 6 fields 624 28 624 34 47 1 [ 624 34 624 35 240 9 classInfo 624 35 624 44 247 1 . 624 44 624 45 18446744073709551615 8 fieldMap 624 45 624 53 248 1 [ 624 53 624 54 241 4 node 624 54 624 58 229 2 -> 624 58 624 60 18446744073709551615 4 name 624 60 624 64 236 1 ] 624 64 624 65 241 1 ] 624 65 624 66 240 1 ; 624 66 624 67 18446744073709551615 4 node 625 4 625 8 229 2 -> 625 8 625 10 18446744073709551615 4 type 625 10 625 14 54 1 = 625 15 625 16 122 5 field 625 17 625 22 249 1 . 625 22 625 23 18446744073709551615 4 type 625 23 625 27 56 1 ; 625 27 625 28 18446744073709551615 1 } 626 3 626 4 18446744073709551615 4 else 627 3 627 7 18446744073709551615 2 if 627 8 627 10 18446744073709551615 1 ( 627 11 627 12 18446744073709551615 9 classInfo 627 12 627 21 247 1 . 627 21 627 22 18446744073709551615 11 functionMap 627 22 627 33 250 1 . 627 33 627 34 235 4 find 627 34 627 38 235 1 ( 627 38 627 39 235 4 node 627 39 627 43 229 2 -> 627 43 627 45 18446744073709551615 4 name 627 45 627 49 236 1 ) 627 49 627 50 235 2 != 627 51 627 53 237 9 classInfo 628 6 628 15 247 1 . 628 15 628 16 18446744073709551615 11 functionMap 628 16 628 27 250 1 . 628 27 628 28 238 3 end 628 28 628 31 238 1 ( 628 31 628 32 238 1 ) 628 32 628 33 238 1 ) 628 33 628 34 18446744073709551615 1 { 629 3 629 4 18446744073709551615 8 Function 630 4 630 12 62 6 method 630 13 630 19 251 1 = 630 20 630 21 18446744073709551615 9 classInfo 631 5 631 14 247 1 . 631 14 631 15 18446744073709551615 9 functions 631 15 631 24 49 1 [ 631 24 631 25 240 9 classInfo 631 25 631 34 247 1 . 631 34 631 35 18446744073709551615 11 functionMap 631 35 631 46 250 1 [ 631 46 631 47 241 4 node 631 47 631 51 229 2 -> 631 51 631 53 18446744073709551615 4 name 631 53 631 57 236 1 ] 631 57 631 58 241 1 ] 631 58 631 59 240 1 ; 631 59 631 60 18446744073709551615 4 node 632 4 632 8 229 2 -> 632 8 632 10 18446744073709551615 4 type 632 10 632 14 54 1 = 632 15 632 16 122 6 method 632 17 632 23 251 1 . 632 23 632 24 18446744073709551615 12 functionType 632 24 632 36 220 1 ; 632 36 632 37 18446744073709551615 1 } 633 3 633 4 18446744073709551615 4 else 634 3 634 7 18446744073709551615 1 { 635 3 635 4 18446744073709551615 5 throw 636 4 636 9 18446744073709551615 13 TypeException 636 10 636 23 57 1 ( 636 23 636 24 57 4 node 636 24 636 28 229 2 -> 636 28 636 30 18446744073709551615 4 line 636 30 636 34 58 1 , 636 34 636 35 57 4 node 636 36 636 40 229 2 -> 636 40 636 42 18446744073709551615 6 column 636 42 636 48 59 1 , 636 48 636 49 57 20 L"field not defined" 636 50 636 70 18446744073709551615 1 ) 636 70 636 71 57 1 ; 636 71 636 72 18446744073709551615 1 } 637 3 637 4 18446744073709551615 1 } 638 2 638 3 18446744073709551615 4 else 639 2 639 6 18446744073709551615 1 { 640 2 640 3 18446744073709551615 5 throw 641 3 641 8 18446744073709551615 13 TypeException 641 9 641 22 57 1 ( 641 22 641 23 57 4 node 641 23 641 27 229 2 -> 641 27 641 29 18446744073709551615 4 line 641 29 641 33 58 1 , 641 33 641 34 57 4 node 641 35 641 39 229 2 -> 641 39 641 41 18446744073709551615 6 column 641 41 641 47 59 1 , 641 47 641 48 57 13 L"error type" 641 49 641 62 18446744073709551615 1 ) 641 62 641 63 57 1 ; 641 63 641 64 18446744073709551615 1 } 642 2 642 3 18446744073709551615 1 } 643 1 643 2 18446744073709551615 0 0 252 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 11 TypeChecker 4 1 3 0 15 NamespaceRecord 10 1 3 0 76 8:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 nsRecord:TypeChecker 6 1 3 0 22 scopeStack:TypeChecker 21 1 3 0 15 Push:ScopeStack 4 1 3 0 5 Scope 20 1 3 0 7 int32_t 9 1 3 0 77 12:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 13:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 14:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 76 16:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 19 Collect:TypeChecker 9 1 3 0 77 19:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 21:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 17 Check:TypeChecker 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 77 25:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 28:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 77 30:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 23 CheckModule:TypeChecker 9 1 3 0 77 33:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 77 35:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 22 CheckClass:TypeChecker 21 1 3 0 14 Pop:ScopeStack 10 1 3 0 77 40:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 43:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 21 1 3 0 22 CheckField:TypeChecker 9 1 3 0 77 47:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 16 functions:Module 21 1 3 0 25 CheckFunction:TypeChecker 10 1 3 0 77 53:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 56:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 12 fields:Class 9 1 3 0 77 60:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 functions:Class 4 1 3 0 5 Field 10 1 3 0 77 66:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 6 1 3 0 15 type:Expression 8 1 3 0 10 operator!= 6 1 3 0 10 type:Field 4 1 3 0 13 TypeException 6 1 3 0 15 line:Expression 6 1 3 0 17 column:Expression 8 1 3 0 13 operator+:std 8 1 3 0 12 TypeToString 4 1 3 0 8 Function 10 1 3 0 77 77:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 9 Parameter 9 1 3 0 77 80:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 parameters:Function 21 1 3 0 15 Peek:ScopeStack 21 1 3 0 9 Put:Scope 6 1 3 0 14 name:Parameter 4 1 3 0 13 LocalVariable 9 1 3 0 77 84:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 18 variables:Function 6 1 3 0 18 name:LocalVariable 9 1 3 0 77 88:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 value:LocalVariable 36 1 3 0 6 ExpPtr 9 1 3 0 77 92:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 expressions:Function 10 1 3 0 77 98:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 10 1 3 0 77 98:65:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 10 1 3 0 77 99:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 101:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 103:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 12 index:Module 9 1 3 0 78 106:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 107:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 108:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 location:Field 21 1 3 0 18 operator=:Location 4 1 3 0 8 Location 6 1 3 0 10 name:Field 9 1 3 0 78 114:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 location:Function 6 1 3 0 13 name:Function 9 1 3 0 78 119:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 120:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 18 location:Parameter 21 1 3 0 14 Local:Location 9 1 3 0 78 125:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 location:LocalVariable 6 1 3 0 11 type:Module 6 1 3 0 9 name:Type 9 1 3 0 78 133:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 135:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 index:Class 9 1 3 0 78 138:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 139:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 140:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 146:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 151:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 152:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 157:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 10 type:Class 21 2 3 0 24 Visit:Visitor:Expression 17 Visit:TypeChecker 4 1 3 0 18 ConstantExpression 10 1 3 0 78 166:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 7 any:std 9 1 3 0 77 168:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 21 1 3 0 14 operator=:Type 4 1 3 0 4 Type 21 1 3 0 8 Int:Type 20 1 3 0 7 int64_t 21 1 3 0 9 Long:Type 21 1 3 0 10 Float:Type 21 1 3 0 11 Double:Type 21 1 3 0 9 Char:Type 21 1 3 0 12 Boolean:Type 20 1 3 0 19 wstring:__cxx11:std 21 1 3 0 11 String:Type 24 1 3 0 24 basic_string:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 78 202:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 21 1 3 0 10 IsInt:Type 21 1 3 0 11 IsLong:Type 21 1 3 0 12 IsFloat:Type 21 1 3 0 13 IsDouble:Type 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 18 Not:ExpressionKind 21 1 3 0 14 IsBoolean:Type 4 1 3 0 16 BinaryExpression 10 1 3 0 78 254:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 9 1 3 0 77 258:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 259:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 260:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 18 And:ExpressionKind 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 23 NotEqual:ExpressionKind 21 1 3 0 11 IsChar:Type 21 1 3 0 13 IsString:Type 4 1 3 0 16 AssignExpression 10 1 3 0 78 401:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:AssignExpression 21 1 3 0 19 Contains:ScopeStack 6 1 3 0 21 name:AssignExpression 9 1 3 0 77 406:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 15 Find:ScopeStack 9 1 3 0 78 409:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 8 1 3 0 12 any_cast:std 6 1 3 0 18 type:LocalVariable 8 1 3 0 10 operator== 6 1 3 0 25 location:AssignExpression 9 1 3 0 78 426:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 15 BlockExpression 10 1 3 0 78 454:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 456:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 expressions:BlockExpression 21 1 3 0 9 Unit:Type 4 1 3 0 16 IfThenExpression 10 1 3 0 78 462:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 78 476:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 14 CallExpression 10 1 3 0 78 491:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 78 494:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 arguments:CallExpression 21 1 3 0 15 IsFunction:Type 31 1 3 0 10 vector:std 9 1 3 0 78 500:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 parameters:Type 21 1 3 0 15 size:vector:std 9 1 3 0 78 503:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 504:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 at:vector:std 21 1 3 0 15 back:vector:std 4 1 3 0 18 VariableExpression 10 1 3 0 78 526:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 name:VariableExpression 9 1 3 0 77 530:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 533:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 location:VariableExpression 9 1 3 0 78 539:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 type:Parameter 9 1 3 0 78 545:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 551:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 functionType:Function 4 1 3 0 16 ReturnExpression 10 1 3 0 78 574:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 78 579:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 4 1 3 0 13 DotExpression 10 1 3 0 78 593:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 object:DotExpression 9 1 3 0 77 596:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 IsModule:Type 9 1 3 0 78 599:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 fieldMap:Module 21 1 3 0 22 find:unordered_map:std 6 1 3 0 18 name:DotExpression 8 1 3 0 23 operator!=:__detail:std 21 1 3 0 21 end:unordered_map:std 9 1 3 0 78 602:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 21 operator[]:vector:std 21 1 3 0 28 operator[]:unordered_map:std 6 1 3 0 19 value:DotExpression 21 1 3 0 17 operator=:any:std 6 1 3 0 18 functionMap:Module 9 1 3 0 78 609:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 12 IsClass:Type 9 1 3 0 77 621:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 fieldMap:Class 9 1 3 0 78 624:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 functionMap:Class 9 1 3 0 78 630:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 0 0 8 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1531709425 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1531290788 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1531671918 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1531484829 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1531709676 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 1531709668 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1531709704
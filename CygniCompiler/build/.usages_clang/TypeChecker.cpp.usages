22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3590 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 17 "TypeChecker.hpp" 1 10 1 27 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 8 any_cast 4 12 4 20 1 1 ; 4 20 4 21 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 4 endl 5 12 5 16 2 1 ; 5 16 5 17 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 5 wcout 6 12 6 17 3 1 ; 6 17 6 18 18446744073709551615 11 TypeChecker 8 1 8 12 4 2 :: 8 12 8 14 4 11 TypeChecker 8 14 8 25 4 1 ( 8 25 8 26 4 15 NamespaceRecord 8 26 8 41 5 1 & 8 41 8 42 18446744073709551615 8 nsRecord 8 43 8 51 6 1 ) 8 51 8 52 4 1 : 9 2 9 3 4 8 nsRecord 9 4 9 12 7 1 { 9 12 9 13 18446744073709551615 8 nsRecord 9 13 9 21 6 1 } 9 21 9 22 18446744073709551615 1 { 10 1 10 2 18446744073709551615 5 Scope 11 2 11 7 8 11 globalScope 11 8 11 19 9 1 ( 11 19 11 20 8 7 nullptr 11 20 11 27 18446744073709551615 1 ) 11 27 11 28 8 1 ; 11 28 11 29 18446744073709551615 5 scope 12 2 12 7 10 1 = 12 8 12 9 18446744073709551615 1 & 12 10 12 11 18446744073709551615 11 globalScope 12 11 12 22 9 1 ; 12 22 12 23 18446744073709551615 7 int32_t 13 2 13 9 11 11 moduleCount 13 10 13 21 12 1 = 13 22 13 23 18446744073709551615 1 0 13 24 13 25 18446744073709551615 1 ; 13 25 13 26 18446744073709551615 7 int32_t 14 2 14 9 11 10 classCount 14 10 14 20 13 1 = 14 21 14 22 18446744073709551615 1 0 14 23 14 24 18446744073709551615 1 ; 14 24 14 25 18446744073709551615 3 for 15 2 15 5 18446744073709551615 1 ( 15 6 15 7 18446744073709551615 4 auto 15 7 15 11 18446744073709551615 1 & 15 11 15 12 18446744073709551615 4 pair 15 13 15 17 14 1 : 15 18 15 19 15 8 nsRecord 15 20 15 28 6 1 . 15 28 15 29 18446744073709551615 6 record 15 29 15 35 16 1 ) 15 35 15 36 18446744073709551615 1 { 16 2 16 3 18446744073709551615 4 auto 17 3 17 7 18446744073709551615 1 & 17 7 17 8 18446744073709551615 5 nsPtr 17 9 17 14 17 1 = 17 15 17 16 18446744073709551615 4 pair 17 17 17 21 14 1 . 17 21 17 22 18446744073709551615 6 second 17 22 17 28 18 1 ; 17 28 17 29 18446744073709551615 7 Collect 18 3 18 10 19 1 ( 18 10 18 11 19 5 nsPtr 18 11 18 16 17 1 , 18 16 18 17 19 11 moduleCount 18 18 18 29 12 1 , 18 29 18 30 19 10 classCount 18 31 18 41 13 1 ) 18 41 18 42 19 1 ; 18 42 18 43 18446744073709551615 1 } 19 2 19 3 18446744073709551615 3 for 20 2 20 5 18446744073709551615 1 ( 20 6 20 7 18446744073709551615 4 auto 20 7 20 11 18446744073709551615 1 & 20 11 20 12 18446744073709551615 4 pair 20 13 20 17 20 1 : 20 18 20 19 15 8 nsRecord 20 20 20 28 6 1 . 20 28 20 29 18446744073709551615 6 record 20 29 20 35 16 1 ) 20 35 20 36 18446744073709551615 1 { 21 2 21 3 18446744073709551615 4 auto 22 3 22 7 18446744073709551615 1 & 22 7 22 8 18446744073709551615 5 nsPtr 22 9 22 14 21 1 = 22 15 22 16 18446744073709551615 4 pair 22 17 22 21 20 1 . 22 21 22 22 18446744073709551615 6 second 22 22 22 28 18 1 ; 22 28 22 29 18446744073709551615 5 Check 23 3 23 8 22 1 ( 23 8 23 9 22 5 nsPtr 23 9 23 14 21 1 ) 23 14 23 15 22 1 ; 23 15 23 16 18446744073709551615 1 } 24 2 24 3 18446744073709551615 1 } 25 1 25 2 18446744073709551615 4 void 26 1 26 5 18446744073709551615 11 TypeChecker 26 6 26 17 4 2 :: 26 17 26 19 22 5 Check 26 19 26 24 22 1 ( 26 24 26 25 22 10 shared_ptr 26 25 26 35 23 1 < 26 35 26 36 18446744073709551615 9 Namespace 26 36 26 45 24 1 > 26 45 26 46 18446744073709551615 5 nsPtr 26 47 26 52 25 1 ) 26 52 26 53 22 1 { 27 1 27 2 18446744073709551615 5 Scope 28 2 28 7 8 9 nextScope 28 8 28 17 26 1 ( 28 17 28 18 8 5 scope 28 18 28 23 10 1 ) 28 23 28 24 8 1 ; 28 24 28 25 18446744073709551615 5 Scope 29 2 29 7 8 1 * 29 7 29 8 18446744073709551615 6 parent 29 9 29 15 27 1 = 29 16 29 17 18446744073709551615 5 scope 29 18 29 23 10 1 ; 29 23 29 24 18446744073709551615 5 scope 30 2 30 7 10 1 = 30 8 30 9 18446744073709551615 1 & 30 10 30 11 18446744073709551615 9 nextScope 30 11 30 20 26 1 ; 30 20 30 21 18446744073709551615 3 for 31 2 31 5 18446744073709551615 1 ( 31 6 31 7 18446744073709551615 4 auto 31 7 31 11 18446744073709551615 1 & 31 11 31 12 18446744073709551615 4 pair 31 13 31 17 28 1 : 31 18 31 19 15 5 nsPtr 31 20 31 25 25 2 -> 31 25 31 27 18446744073709551615 7 modules 31 27 31 34 29 1 ) 31 34 31 35 18446744073709551615 1 { 32 2 32 3 18446744073709551615 6 Module 33 3 33 9 30 1 & 33 9 33 10 18446744073709551615 10 moduleInfo 33 11 33 21 31 1 = 33 22 33 23 18446744073709551615 4 pair 33 24 33 28 28 1 . 33 28 33 29 18446744073709551615 6 second 33 29 33 35 18 1 ; 33 35 33 36 18446744073709551615 11 CheckModule 34 3 34 14 32 1 ( 34 14 34 15 32 10 moduleInfo 34 15 34 25 31 1 ) 34 25 34 26 32 1 ; 34 26 34 27 18446744073709551615 1 } 35 2 35 3 18446744073709551615 3 for 36 2 36 5 18446744073709551615 1 ( 36 6 36 7 18446744073709551615 4 auto 36 7 36 11 18446744073709551615 1 & 36 11 36 12 18446744073709551615 4 pair 36 13 36 17 33 1 : 36 18 36 19 15 5 nsPtr 36 20 36 25 25 2 -> 36 25 36 27 18446744073709551615 7 classes 36 27 36 34 34 1 ) 36 34 36 35 18446744073709551615 1 { 37 2 37 3 18446744073709551615 5 Class 38 3 38 8 35 1 & 38 8 38 9 18446744073709551615 9 classInfo 38 10 38 19 36 1 = 38 20 38 21 18446744073709551615 4 pair 38 22 38 26 33 1 . 38 26 38 27 18446744073709551615 6 second 38 27 38 33 18 1 ; 38 33 38 34 18446744073709551615 10 CheckClass 39 3 39 13 37 1 ( 39 13 39 14 37 9 classInfo 39 14 39 23 36 1 ) 39 23 39 24 37 1 ; 39 24 39 25 18446744073709551615 1 } 40 2 40 3 18446744073709551615 5 scope 41 2 41 7 10 1 = 41 8 41 9 18446744073709551615 6 parent 41 10 41 16 27 1 ; 41 16 41 17 18446744073709551615 1 } 42 1 42 2 18446744073709551615 4 void 43 1 43 5 18446744073709551615 11 TypeChecker 43 6 43 17 4 2 :: 43 17 43 19 32 11 CheckModule 43 19 43 30 32 1 ( 43 30 43 31 32 6 Module 43 31 43 37 30 1 & 43 37 43 38 18446744073709551615 10 moduleInfo 43 39 43 49 38 1 ) 43 49 43 50 32 1 { 44 1 44 2 18446744073709551615 5 Scope 45 2 45 7 8 9 nextScope 45 8 45 17 39 1 ( 45 17 45 18 8 5 scope 45 18 45 23 10 1 ) 45 23 45 24 8 1 ; 45 24 45 25 18446744073709551615 5 Scope 46 2 46 7 8 1 * 46 7 46 8 18446744073709551615 6 parent 46 9 46 15 40 1 = 46 16 46 17 18446744073709551615 5 scope 46 18 46 23 10 1 ; 46 23 46 24 18446744073709551615 5 scope 47 2 47 7 10 1 = 47 8 47 9 18446744073709551615 1 & 47 10 47 11 18446744073709551615 9 nextScope 47 11 47 20 39 1 ; 47 20 47 21 18446744073709551615 3 for 48 2 48 5 18446744073709551615 1 ( 48 6 48 7 18446744073709551615 4 auto 48 7 48 11 18446744073709551615 1 & 48 11 48 12 18446744073709551615 5 field 48 13 48 18 41 1 : 48 19 48 20 42 10 moduleInfo 48 21 48 31 38 1 . 48 31 48 32 18446744073709551615 6 fields 48 32 48 38 43 1 ) 48 38 48 39 18446744073709551615 1 { 49 2 49 3 18446744073709551615 10 CheckField 50 3 50 13 44 1 ( 50 13 50 14 44 5 field 50 14 50 19 41 1 ) 50 19 50 20 44 1 ; 50 20 50 21 18446744073709551615 1 } 51 2 51 3 18446744073709551615 3 for 52 2 52 5 18446744073709551615 1 ( 52 6 52 7 18446744073709551615 4 auto 52 7 52 11 18446744073709551615 1 & 52 11 52 12 18446744073709551615 8 function 52 13 52 21 45 1 : 52 22 52 23 42 10 moduleInfo 52 24 52 34 38 1 . 52 34 52 35 18446744073709551615 9 functions 52 35 52 44 46 1 ) 52 44 52 45 18446744073709551615 1 { 53 2 53 3 18446744073709551615 13 CheckFunction 54 3 54 16 47 1 ( 54 16 54 17 47 8 function 54 17 54 25 45 1 ) 54 25 54 26 47 1 ; 54 26 54 27 18446744073709551615 1 } 55 2 55 3 18446744073709551615 5 scope 56 2 56 7 10 1 = 56 8 56 9 18446744073709551615 6 parent 56 10 56 16 40 1 ; 56 16 56 17 18446744073709551615 1 } 57 1 57 2 18446744073709551615 4 void 58 1 58 5 18446744073709551615 11 TypeChecker 58 6 58 17 4 2 :: 58 17 58 19 37 10 CheckClass 58 19 58 29 37 1 ( 58 29 58 30 37 5 Class 58 30 58 35 35 1 & 58 35 58 36 18446744073709551615 9 classInfo 58 37 58 46 48 1 ) 58 46 58 47 37 1 { 59 1 59 2 18446744073709551615 5 Scope 60 2 60 7 8 9 nextScope 60 8 60 17 49 1 ( 60 17 60 18 8 5 scope 60 18 60 23 10 1 ) 60 23 60 24 8 1 ; 60 24 60 25 18446744073709551615 5 Scope 61 2 61 7 8 1 * 61 7 61 8 18446744073709551615 6 parent 61 9 61 15 50 1 = 61 16 61 17 18446744073709551615 5 scope 61 18 61 23 10 1 ; 61 23 61 24 18446744073709551615 5 scope 62 2 62 7 10 1 = 62 8 62 9 18446744073709551615 1 & 62 10 62 11 18446744073709551615 9 nextScope 62 11 62 20 49 1 ; 62 20 62 21 18446744073709551615 3 for 63 2 63 5 18446744073709551615 1 ( 63 6 63 7 18446744073709551615 4 auto 63 7 63 11 18446744073709551615 1 & 63 11 63 12 18446744073709551615 5 field 63 13 63 18 51 1 : 63 19 63 20 42 9 classInfo 63 21 63 30 48 1 . 63 30 63 31 18446744073709551615 6 fields 63 31 63 37 52 1 ) 63 37 63 38 18446744073709551615 1 { 64 2 64 3 18446744073709551615 10 CheckField 65 3 65 13 44 1 ( 65 13 65 14 44 5 field 65 14 65 19 51 1 ) 65 19 65 20 44 1 ; 65 20 65 21 18446744073709551615 1 } 66 2 66 3 18446744073709551615 3 for 67 2 67 5 18446744073709551615 1 ( 67 6 67 7 18446744073709551615 4 auto 67 7 67 11 18446744073709551615 1 & 67 11 67 12 18446744073709551615 8 function 67 13 67 21 53 1 : 67 22 67 23 42 9 classInfo 67 24 67 33 48 1 . 67 33 67 34 18446744073709551615 9 functions 67 34 67 43 54 1 ) 67 43 67 44 18446744073709551615 1 { 68 2 68 3 18446744073709551615 13 CheckFunction 69 3 69 16 47 1 ( 69 16 69 17 47 8 function 69 17 69 25 53 1 ) 69 25 69 26 47 1 ; 69 26 69 27 18446744073709551615 1 } 70 2 70 3 18446744073709551615 5 scope 71 2 71 7 10 1 = 71 8 71 9 18446744073709551615 6 parent 71 10 71 16 50 1 ; 71 16 71 17 18446744073709551615 1 } 72 1 72 2 18446744073709551615 4 void 73 1 73 5 18446744073709551615 11 TypeChecker 73 6 73 17 4 2 :: 73 17 73 19 44 10 CheckField 73 19 73 29 44 1 ( 73 29 73 30 44 5 Field 73 30 73 35 55 1 & 73 35 73 36 18446744073709551615 5 field 73 37 73 42 56 1 ) 73 42 73 43 44 1 { 74 1 74 2 18446744073709551615 5 field 75 2 75 7 56 1 . 75 7 75 8 18446744073709551615 5 value 75 8 75 13 57 2 -> 75 13 75 15 58 6 Accept 75 15 75 21 58 1 ( 75 21 75 22 58 4 this 75 22 75 26 18446744073709551615 1 ) 75 26 75 27 58 1 ; 75 27 75 28 18446744073709551615 2 if 76 2 76 4 18446744073709551615 1 ( 76 5 76 6 18446744073709551615 5 field 76 6 76 11 56 1 . 76 11 76 12 18446744073709551615 5 value 76 12 76 17 57 2 -> 76 17 76 19 18446744073709551615 4 type 76 19 76 23 59 2 != 76 24 76 26 60 5 field 76 27 76 32 56 1 . 76 32 76 33 18446744073709551615 4 type 76 33 76 37 61 1 ) 76 37 76 38 18446744073709551615 1 { 77 2 77 3 18446744073709551615 5 throw 78 3 78 8 18446744073709551615 13 TypeException 78 9 78 22 62 1 ( 78 22 78 23 62 5 field 78 23 78 28 56 1 . 78 28 78 29 18446744073709551615 5 value 78 29 78 34 57 2 -> 78 34 78 36 18446744073709551615 4 line 78 36 78 40 63 1 , 78 40 78 41 62 5 field 78 42 78 47 56 1 . 78 47 78 48 18446744073709551615 5 value 78 48 78 53 57 2 -> 78 53 78 55 18446744073709551615 6 column 78 55 78 61 64 1 , 78 61 78 62 62 35 L"Cannot implicitly convert type `" 79 8 79 43 18446744073709551615 1 + 79 44 79 45 65 12 TypeToString 80 9 80 21 66 1 ( 80 21 80 22 66 5 field 80 22 80 27 56 1 . 80 27 80 28 18446744073709551615 5 value 80 28 80 33 57 2 -> 80 33 80 35 18446744073709551615 4 type 80 35 80 39 59 1 ) 80 39 80 40 66 1 + 80 41 80 42 65 8 L" to '" 80 43 80 51 18446744073709551615 1 + 80 52 80 53 65 12 TypeToString 81 9 81 21 66 1 ( 81 21 81 22 66 5 field 81 22 81 27 56 1 . 81 27 81 28 18446744073709551615 4 type 81 28 81 32 61 1 ) 81 32 81 33 66 1 + 81 34 81 35 65 4 L"'" 81 36 81 40 18446744073709551615 1 ) 81 40 81 41 62 1 ; 81 41 81 42 18446744073709551615 1 } 82 2 82 3 18446744073709551615 1 } 83 1 83 2 18446744073709551615 4 void 84 1 84 5 18446744073709551615 11 TypeChecker 84 6 84 17 4 2 :: 84 17 84 19 47 13 CheckFunction 84 19 84 32 47 1 ( 84 32 84 33 47 8 Function 84 33 84 41 67 1 & 84 41 84 42 18446744073709551615 8 function 84 43 84 51 68 1 ) 84 51 84 52 47 1 { 85 1 85 2 18446744073709551615 5 Scope 86 2 86 7 8 9 nextScope 86 8 86 17 69 1 ( 86 17 86 18 8 5 scope 86 18 86 23 10 1 ) 86 23 86 24 8 1 ; 86 24 86 25 18446744073709551615 5 Scope 87 2 87 7 8 1 * 87 7 87 8 18446744073709551615 6 parent 87 9 87 15 70 1 = 87 16 87 17 18446744073709551615 5 scope 87 18 87 23 10 1 ; 87 23 87 24 18446744073709551615 5 scope 88 2 88 7 10 1 = 88 8 88 9 18446744073709551615 1 & 88 10 88 11 18446744073709551615 9 nextScope 88 11 88 20 69 1 ; 88 20 88 21 18446744073709551615 3 for 89 2 89 5 18446744073709551615 1 ( 89 6 89 7 18446744073709551615 9 Parameter 89 7 89 16 71 1 & 89 16 89 17 18446744073709551615 1 p 89 18 89 19 72 1 : 89 20 89 21 42 8 function 89 22 89 30 68 1 . 89 30 89 31 18446744073709551615 10 parameters 89 31 89 41 73 1 ) 89 41 89 42 18446744073709551615 1 { 90 2 90 3 18446744073709551615 5 scope 91 3 91 8 10 2 -> 91 8 91 10 74 3 Put 91 10 91 13 74 1 ( 91 13 91 14 74 1 p 91 14 91 15 72 1 . 91 15 91 16 18446744073709551615 4 name 91 16 91 20 75 1 , 91 20 91 21 74 1 p 91 22 91 23 72 1 ) 91 23 91 24 74 1 ; 91 24 91 25 18446744073709551615 1 } 92 2 92 3 18446744073709551615 3 for 93 2 93 5 18446744073709551615 1 ( 93 6 93 7 18446744073709551615 13 LocalVariable 93 7 93 20 76 1 & 93 20 93 21 18446744073709551615 1 v 93 22 93 23 77 1 : 93 24 93 25 42 8 function 93 26 93 34 68 1 . 93 34 93 35 18446744073709551615 9 variables 93 35 93 44 78 1 ) 93 44 93 45 18446744073709551615 1 { 94 2 94 3 18446744073709551615 5 scope 95 3 95 8 10 2 -> 95 8 95 10 74 3 Put 95 10 95 13 74 1 ( 95 13 95 14 74 1 v 95 14 95 15 77 1 . 95 15 95 16 18446744073709551615 4 name 95 16 95 20 79 1 , 95 20 95 21 74 1 v 95 22 95 23 77 1 ) 95 23 95 24 74 1 ; 95 24 95 25 18446744073709551615 1 } 96 2 96 3 18446744073709551615 3 for 97 2 97 5 18446744073709551615 1 ( 97 6 97 7 18446744073709551615 13 LocalVariable 97 7 97 20 76 1 & 97 20 97 21 18446744073709551615 1 v 97 22 97 23 80 1 : 97 24 97 25 42 8 function 97 26 97 34 68 1 . 97 34 97 35 18446744073709551615 9 variables 97 35 97 44 78 1 ) 97 44 97 45 18446744073709551615 1 { 98 2 98 3 18446744073709551615 1 v 99 3 99 4 80 1 . 99 4 99 5 18446744073709551615 5 value 99 5 99 10 81 2 -> 99 10 99 12 58 6 Accept 99 12 99 18 58 1 ( 99 18 99 19 58 4 this 99 19 99 23 18446744073709551615 1 ) 99 23 99 24 58 1 ; 99 24 99 25 18446744073709551615 1 } 100 2 100 3 18446744073709551615 3 for 101 2 101 5 18446744073709551615 1 ( 101 6 101 7 18446744073709551615 6 ExpPtr 101 7 101 13 82 1 & 101 13 101 14 18446744073709551615 1 e 101 15 101 16 83 1 : 101 17 101 18 42 8 function 101 19 101 27 68 1 . 101 27 101 28 18446744073709551615 11 expressions 101 28 101 39 84 1 ) 101 39 101 40 18446744073709551615 1 { 102 2 102 3 18446744073709551615 1 e 103 3 103 4 83 2 -> 103 4 103 6 58 6 Accept 103 6 103 12 58 1 ( 103 12 103 13 58 4 this 103 13 103 17 18446744073709551615 1 ) 103 17 103 18 58 1 ; 103 18 103 19 18446744073709551615 1 } 104 2 104 3 18446744073709551615 5 scope 105 2 105 7 10 1 = 105 8 105 9 18446744073709551615 6 parent 105 10 105 16 70 1 ; 105 16 105 17 18446744073709551615 1 } 106 1 106 2 18446744073709551615 4 void 107 1 107 5 18446744073709551615 11 TypeChecker 107 6 107 17 4 2 :: 107 17 107 19 19 7 Collect 107 19 107 26 19 1 ( 107 26 107 27 19 10 shared_ptr 107 27 107 37 23 1 < 107 37 107 38 18446744073709551615 9 Namespace 107 38 107 47 24 1 > 107 47 107 48 18446744073709551615 5 nsPtr 107 49 107 54 85 1 , 107 54 107 55 19 7 int32_t 107 56 107 63 11 11 moduleCount 107 64 107 75 86 1 , 107 75 107 76 19 7 int32_t 108 9 108 16 11 10 classCount 108 17 108 27 87 1 ) 108 27 108 28 19 1 { 109 1 109 2 18446744073709551615 3 for 110 2 110 5 18446744073709551615 1 ( 110 6 110 7 18446744073709551615 4 auto 110 7 110 11 18446744073709551615 1 & 110 11 110 12 18446744073709551615 4 pair 110 13 110 17 88 1 : 110 18 110 19 15 5 nsPtr 110 20 110 25 85 2 -> 110 25 110 27 18446744073709551615 7 modules 110 27 110 34 29 1 ) 110 34 110 35 18446744073709551615 1 { 111 2 111 3 18446744073709551615 6 Module 112 3 112 9 30 1 & 112 9 112 10 18446744073709551615 10 moduleInfo 112 11 112 21 89 1 = 112 22 112 23 18446744073709551615 4 pair 112 24 112 28 88 1 . 112 28 112 29 18446744073709551615 6 second 112 29 112 35 18 1 ; 112 35 112 36 18446744073709551615 10 moduleInfo 113 3 113 13 89 1 . 113 13 113 14 18446744073709551615 5 index 113 14 113 19 90 1 = 113 20 113 21 18446744073709551615 11 moduleCount 113 22 113 33 86 1 ; 113 33 113 34 18446744073709551615 11 moduleCount 114 3 114 14 86 2 ++ 114 14 114 16 18446744073709551615 1 ; 114 16 114 17 18446744073709551615 5 scope 115 3 115 8 10 2 -> 115 8 115 10 74 3 Put 115 10 115 13 74 1 ( 115 13 115 14 74 10 moduleInfo 115 14 115 24 89 1 . 115 24 115 25 18446744073709551615 4 type 115 25 115 29 91 1 . 115 29 115 30 18446744073709551615 4 name 115 30 115 34 92 1 , 115 34 115 35 74 10 moduleInfo 115 36 115 46 89 1 ) 115 46 115 47 74 1 ; 115 47 115 48 18446744073709551615 7 int32_t 116 3 116 10 11 11 fieldOffset 116 11 116 22 93 1 = 116 23 116 24 18446744073709551615 1 0 116 25 116 26 18446744073709551615 1 ; 116 26 116 27 18446744073709551615 7 int32_t 117 3 117 10 11 14 functionOffset 117 11 117 25 94 1 = 117 26 117 27 18446744073709551615 1 0 117 28 117 29 18446744073709551615 1 ; 117 29 117 30 18446744073709551615 3 for 118 3 118 6 18446744073709551615 1 ( 118 7 118 8 18446744073709551615 5 Field 118 8 118 13 55 1 & 118 13 118 14 18446744073709551615 5 field 118 15 118 20 95 1 : 118 21 118 22 42 10 moduleInfo 118 23 118 33 89 1 . 118 33 118 34 18446744073709551615 6 fields 118 34 118 40 43 1 ) 118 40 118 41 18446744073709551615 1 { 119 3 119 4 18446744073709551615 5 field 120 4 120 9 95 1 . 120 9 120 10 18446744073709551615 8 location 120 10 120 18 96 1 = 120 19 120 20 97 8 Location 120 21 120 29 98 1 ( 120 29 120 30 98 10 moduleInfo 120 30 120 40 89 1 . 120 40 120 41 18446744073709551615 5 index 120 41 120 46 90 1 , 120 46 120 47 98 11 fieldOffset 120 48 120 59 93 1 ) 120 59 120 60 98 1 ; 120 60 120 61 18446744073709551615 11 fieldOffset 121 4 121 15 93 2 ++ 121 15 121 17 18446744073709551615 1 ; 121 17 121 18 18446744073709551615 5 scope 122 4 122 9 10 2 -> 122 9 122 11 74 3 Put 122 11 122 14 74 1 ( 122 14 122 15 74 5 field 122 15 122 20 95 1 . 122 20 122 21 18446744073709551615 4 name 122 21 122 25 99 1 , 122 25 122 26 74 5 field 122 27 122 32 95 1 ) 122 32 122 33 74 1 ; 122 33 122 34 18446744073709551615 1 } 123 3 123 4 18446744073709551615 3 for 124 3 124 6 18446744073709551615 1 ( 124 7 124 8 18446744073709551615 8 Function 124 8 124 16 67 1 & 124 16 124 17 18446744073709551615 8 function 124 18 124 26 100 1 : 124 27 124 28 42 10 moduleInfo 124 29 124 39 89 1 . 124 39 124 40 18446744073709551615 9 functions 124 40 124 49 46 1 ) 124 49 124 50 18446744073709551615 1 { 125 3 125 4 18446744073709551615 8 function 126 4 126 12 100 1 . 126 12 126 13 18446744073709551615 8 location 126 13 126 21 101 1 = 126 22 126 23 97 8 Location 126 24 126 32 98 1 ( 126 32 126 33 98 10 moduleInfo 126 33 126 43 89 1 . 126 43 126 44 18446744073709551615 5 index 126 44 126 49 90 1 , 126 49 126 50 98 14 functionOffset 126 51 126 65 94 1 ) 126 65 126 66 98 1 ; 126 66 126 67 18446744073709551615 14 functionOffset 127 4 127 18 94 2 ++ 127 18 127 20 18446744073709551615 1 ; 127 20 127 21 18446744073709551615 5 scope 128 4 128 9 10 2 -> 128 9 128 11 74 3 Put 128 11 128 14 74 1 ( 128 14 128 15 74 8 function 128 15 128 23 100 1 . 128 23 128 24 18446744073709551615 4 name 128 24 128 28 102 1 , 128 28 128 29 74 8 function 128 30 128 38 100 1 ) 128 38 128 39 74 1 ; 128 39 128 40 18446744073709551615 7 int32_t 129 4 129 11 11 6 offset 129 12 129 18 103 1 = 129 19 129 20 18446744073709551615 1 0 129 21 129 22 18446744073709551615 1 ; 129 22 129 23 18446744073709551615 3 for 130 4 130 7 18446744073709551615 1 ( 130 8 130 9 18446744073709551615 9 Parameter 130 9 130 18 71 1 & 130 18 130 19 18446744073709551615 1 p 130 20 130 21 104 1 : 130 22 130 23 42 8 function 130 24 130 32 100 1 . 130 32 130 33 18446744073709551615 10 parameters 130 33 130 43 73 1 ) 130 43 130 44 18446744073709551615 1 { 131 4 131 5 18446744073709551615 1 p 132 5 132 6 104 1 . 132 6 132 7 18446744073709551615 8 location 132 7 132 15 105 1 = 132 16 132 17 97 8 Location 132 18 132 26 98 1 ( 132 26 132 27 98 1 - 132 27 132 28 18446744073709551615 1 1 132 28 132 29 18446744073709551615 1 , 132 29 132 30 98 6 offset 132 31 132 37 103 1 ) 132 37 132 38 98 1 ; 132 38 132 39 18446744073709551615 6 offset 133 5 133 11 103 2 ++ 133 11 133 13 18446744073709551615 1 ; 133 13 133 14 18446744073709551615 1 } 134 4 134 5 18446744073709551615 3 for 135 4 135 7 18446744073709551615 1 ( 135 8 135 9 18446744073709551615 13 LocalVariable 135 9 135 22 76 1 & 135 22 135 23 18446744073709551615 1 v 135 24 135 25 106 1 : 135 26 135 27 42 8 function 135 28 135 36 100 1 . 135 36 135 37 18446744073709551615 9 variables 135 37 135 46 78 1 ) 135 46 135 47 18446744073709551615 1 { 136 4 136 5 18446744073709551615 1 v 137 5 137 6 106 1 . 137 6 137 7 18446744073709551615 8 location 137 7 137 15 107 1 = 137 16 137 17 97 8 Location 137 18 137 26 98 1 ( 137 26 137 27 98 1 - 137 27 137 28 18446744073709551615 1 1 137 28 137 29 18446744073709551615 1 , 137 29 137 30 98 6 offset 137 31 137 37 103 1 ) 137 37 137 38 98 1 ; 137 38 137 39 18446744073709551615 6 offset 138 5 138 11 103 2 ++ 138 11 138 13 18446744073709551615 1 ; 138 13 138 14 18446744073709551615 1 } 139 4 139 5 18446744073709551615 1 } 140 3 140 4 18446744073709551615 1 } 141 2 141 3 18446744073709551615 3 for 142 2 142 5 18446744073709551615 1 ( 142 6 142 7 18446744073709551615 4 auto 142 7 142 11 18446744073709551615 1 & 142 11 142 12 18446744073709551615 4 pair 142 13 142 17 108 1 : 142 18 142 19 15 5 nsPtr 142 20 142 25 85 2 -> 142 25 142 27 18446744073709551615 7 classes 142 27 142 34 34 1 ) 142 34 142 35 18446744073709551615 1 { 143 2 143 3 18446744073709551615 5 Class 144 3 144 8 35 1 & 144 8 144 9 18446744073709551615 9 classInfo 144 10 144 19 109 1 = 144 20 144 21 18446744073709551615 4 pair 144 22 144 26 108 1 . 144 26 144 27 18446744073709551615 6 second 144 27 144 33 18 1 ; 144 33 144 34 18446744073709551615 9 classInfo 145 3 145 12 109 1 . 145 12 145 13 18446744073709551615 5 index 145 13 145 18 110 1 = 145 19 145 20 18446744073709551615 10 classCount 145 21 145 31 87 1 ; 145 31 145 32 18446744073709551615 10 classCount 146 3 146 13 87 2 ++ 146 13 146 15 18446744073709551615 1 ; 146 15 146 16 18446744073709551615 5 scope 147 3 147 8 10 2 -> 147 8 147 10 74 3 Put 147 10 147 13 74 1 ( 147 13 147 14 74 9 classInfo 147 14 147 23 109 1 . 147 23 147 24 18446744073709551615 4 type 147 24 147 28 111 1 . 147 28 147 29 18446744073709551615 4 name 147 29 147 33 92 1 , 147 33 147 34 74 9 classInfo 147 35 147 44 109 1 ) 147 44 147 45 74 1 ; 147 45 147 46 18446744073709551615 7 int32_t 148 3 148 10 11 11 fieldOffset 148 11 148 22 112 1 = 148 23 148 24 18446744073709551615 1 0 148 25 148 26 18446744073709551615 1 ; 148 26 148 27 18446744073709551615 7 int32_t 149 3 149 10 11 14 functionOffset 149 11 149 25 113 1 = 149 26 149 27 18446744073709551615 1 0 149 28 149 29 18446744073709551615 1 ; 149 29 149 30 18446744073709551615 3 for 150 3 150 6 18446744073709551615 1 ( 150 7 150 8 18446744073709551615 5 Field 150 8 150 13 55 1 & 150 13 150 14 18446744073709551615 5 field 150 15 150 20 114 1 : 150 21 150 22 42 9 classInfo 150 23 150 32 109 1 . 150 32 150 33 18446744073709551615 6 fields 150 33 150 39 52 1 ) 150 39 150 40 18446744073709551615 1 { 151 3 151 4 18446744073709551615 5 field 152 4 152 9 114 1 . 152 9 152 10 18446744073709551615 8 location 152 10 152 18 96 1 = 152 19 152 20 97 8 Location 152 21 152 29 98 1 ( 152 29 152 30 98 9 classInfo 152 30 152 39 109 1 . 152 39 152 40 18446744073709551615 5 index 152 40 152 45 110 1 , 152 45 152 46 98 11 fieldOffset 152 47 152 58 112 1 ) 152 58 152 59 98 1 ; 152 59 152 60 18446744073709551615 11 fieldOffset 153 4 153 15 112 2 ++ 153 15 153 17 18446744073709551615 1 ; 153 17 153 18 18446744073709551615 5 scope 154 4 154 9 10 2 -> 154 9 154 11 74 3 Put 154 11 154 14 74 1 ( 154 14 154 15 74 5 field 154 15 154 20 114 1 . 154 20 154 21 18446744073709551615 4 name 154 21 154 25 99 1 , 154 25 154 26 74 5 field 154 27 154 32 114 1 ) 154 32 154 33 74 1 ; 154 33 154 34 18446744073709551615 1 } 155 3 155 4 18446744073709551615 3 for 156 3 156 6 18446744073709551615 1 ( 156 7 156 8 18446744073709551615 8 Function 156 8 156 16 67 1 & 156 16 156 17 18446744073709551615 8 function 156 18 156 26 115 1 : 156 27 156 28 42 9 classInfo 156 29 156 38 109 1 . 156 38 156 39 18446744073709551615 9 functions 156 39 156 48 54 1 ) 156 48 156 49 18446744073709551615 1 { 157 3 157 4 18446744073709551615 8 function 158 4 158 12 115 1 . 158 12 158 13 18446744073709551615 8 location 158 13 158 21 101 1 = 158 22 158 23 97 8 Location 158 24 158 32 98 1 ( 158 32 158 33 98 9 classInfo 158 33 158 42 109 1 . 158 42 158 43 18446744073709551615 5 index 158 43 158 48 110 1 , 158 48 158 49 98 14 functionOffset 158 50 158 64 113 1 ) 158 64 158 65 98 1 ; 158 65 158 66 18446744073709551615 14 functionOffset 159 4 159 18 113 2 ++ 159 18 159 20 18446744073709551615 1 ; 159 20 159 21 18446744073709551615 5 scope 160 4 160 9 10 2 -> 160 9 160 11 74 3 Put 160 11 160 14 74 1 ( 160 14 160 15 74 8 function 160 15 160 23 115 1 . 160 23 160 24 18446744073709551615 4 name 160 24 160 28 102 1 , 160 28 160 29 74 8 function 160 30 160 38 115 1 ) 160 38 160 39 74 1 ; 160 39 160 40 18446744073709551615 7 int32_t 161 4 161 11 11 6 offset 161 12 161 18 116 1 = 161 19 161 20 18446744073709551615 1 0 161 21 161 22 18446744073709551615 1 ; 161 22 161 23 18446744073709551615 3 for 162 4 162 7 18446744073709551615 1 ( 162 8 162 9 18446744073709551615 9 Parameter 162 9 162 18 71 1 & 162 18 162 19 18446744073709551615 1 p 162 20 162 21 117 1 : 162 22 162 23 42 8 function 162 24 162 32 115 1 . 162 32 162 33 18446744073709551615 10 parameters 162 33 162 43 73 1 ) 162 43 162 44 18446744073709551615 1 { 163 4 163 5 18446744073709551615 1 p 164 5 164 6 117 1 . 164 6 164 7 18446744073709551615 8 location 164 7 164 15 105 1 = 164 16 164 17 97 8 Location 164 18 164 26 98 1 ( 164 26 164 27 98 1 - 164 27 164 28 18446744073709551615 1 1 164 28 164 29 18446744073709551615 1 , 164 29 164 30 98 6 offset 164 31 164 37 116 1 ) 164 37 164 38 98 1 ; 164 38 164 39 18446744073709551615 6 offset 165 5 165 11 116 2 ++ 165 11 165 13 18446744073709551615 1 ; 165 13 165 14 18446744073709551615 1 } 166 4 166 5 18446744073709551615 3 for 167 4 167 7 18446744073709551615 1 ( 167 8 167 9 18446744073709551615 13 LocalVariable 167 9 167 22 76 1 & 167 22 167 23 18446744073709551615 1 v 167 24 167 25 118 1 : 167 26 167 27 42 8 function 167 28 167 36 115 1 . 167 36 167 37 18446744073709551615 9 variables 167 37 167 46 78 1 ) 167 46 167 47 18446744073709551615 1 { 168 4 168 5 18446744073709551615 1 v 169 5 169 6 118 1 . 169 6 169 7 18446744073709551615 8 location 169 7 169 15 107 1 = 169 16 169 17 97 8 Location 169 18 169 26 98 1 ( 169 26 169 27 98 1 - 169 27 169 28 18446744073709551615 1 1 169 28 169 29 18446744073709551615 1 , 169 29 169 30 98 6 offset 169 31 169 37 116 1 ) 169 37 169 38 98 1 ; 169 38 169 39 18446744073709551615 6 offset 170 5 170 11 116 2 ++ 170 11 170 13 18446744073709551615 1 ; 170 13 170 14 18446744073709551615 1 } 171 4 171 5 18446744073709551615 1 } 172 3 172 4 18446744073709551615 1 } 173 2 173 3 18446744073709551615 1 } 174 1 174 2 18446744073709551615 4 void 175 1 175 5 18446744073709551615 11 TypeChecker 175 6 175 17 4 2 :: 175 17 175 19 119 5 Visit 175 19 175 24 119 1 ( 175 24 175 25 119 18 ConstantExpression 175 25 175 43 120 1 * 175 43 175 44 18446744073709551615 4 node 175 45 175 49 121 1 ) 175 49 175 50 119 1 { 176 1 176 2 18446744073709551615 3 any 177 2 177 5 122 1 & 177 5 177 6 18446744073709551615 5 value 177 7 177 12 123 1 = 177 13 177 14 18446744073709551615 4 node 177 15 177 19 121 2 -> 177 19 177 21 18446744073709551615 5 value 177 21 177 26 124 1 ; 177 26 177 27 18446744073709551615 2 if 178 2 178 4 18446744073709551615 1 ( 178 5 178 6 18446744073709551615 5 value 178 6 178 11 123 1 . 178 11 178 12 125 4 type 178 12 178 16 125 1 ( 178 16 178 17 125 1 ) 178 17 178 18 125 2 == 178 19 178 21 126 6 typeid 178 22 178 28 18446744073709551615 1 ( 178 28 178 29 18446744073709551615 7 int32_t 178 29 178 36 11 1 ) 178 36 178 37 18446744073709551615 1 ) 178 37 178 38 18446744073709551615 1 { 179 2 179 3 18446744073709551615 4 node 180 3 180 7 121 2 -> 180 7 180 9 18446744073709551615 4 type 180 9 180 13 59 1 = 180 14 180 15 127 4 Type 180 16 180 20 128 2 :: 180 20 180 22 129 3 Int 180 22 180 25 129 1 ( 180 25 180 26 129 1 ) 180 26 180 27 129 1 ; 180 27 180 28 18446744073709551615 1 } 181 2 181 3 18446744073709551615 4 else 182 2 182 6 18446744073709551615 2 if 182 7 182 9 18446744073709551615 1 ( 182 10 182 11 18446744073709551615 5 value 182 11 182 16 123 1 . 182 16 182 17 125 4 type 182 17 182 21 125 1 ( 182 21 182 22 125 1 ) 182 22 182 23 125 2 == 182 24 182 26 126 6 typeid 182 27 182 33 18446744073709551615 1 ( 182 33 182 34 18446744073709551615 7 int64_t 182 34 182 41 130 1 ) 182 41 182 42 18446744073709551615 1 ) 182 42 182 43 18446744073709551615 1 { 183 2 183 3 18446744073709551615 4 node 184 3 184 7 121 2 -> 184 7 184 9 18446744073709551615 4 type 184 9 184 13 59 1 = 184 14 184 15 127 4 Type 184 16 184 20 128 2 :: 184 20 184 22 131 4 Long 184 22 184 26 131 1 ( 184 26 184 27 131 1 ) 184 27 184 28 131 1 ; 184 28 184 29 18446744073709551615 1 } 185 2 185 3 18446744073709551615 4 else 186 2 186 6 18446744073709551615 2 if 186 7 186 9 18446744073709551615 1 ( 186 10 186 11 18446744073709551615 5 value 186 11 186 16 123 1 . 186 16 186 17 125 4 type 186 17 186 21 125 1 ( 186 21 186 22 125 1 ) 186 22 186 23 125 2 == 186 24 186 26 126 6 typeid 186 27 186 33 18446744073709551615 1 ( 186 33 186 34 18446744073709551615 5 float 186 34 186 39 18446744073709551615 1 ) 186 39 186 40 18446744073709551615 1 ) 186 40 186 41 18446744073709551615 1 { 187 2 187 3 18446744073709551615 4 node 188 3 188 7 121 2 -> 188 7 188 9 18446744073709551615 4 type 188 9 188 13 59 1 = 188 14 188 15 127 4 Type 188 16 188 20 128 2 :: 188 20 188 22 132 5 Float 188 22 188 27 132 1 ( 188 27 188 28 132 1 ) 188 28 188 29 132 1 ; 188 29 188 30 18446744073709551615 1 } 189 2 189 3 18446744073709551615 4 else 190 2 190 6 18446744073709551615 2 if 190 7 190 9 18446744073709551615 1 ( 190 10 190 11 18446744073709551615 5 value 190 11 190 16 123 1 . 190 16 190 17 125 4 type 190 17 190 21 125 1 ( 190 21 190 22 125 1 ) 190 22 190 23 125 2 == 190 24 190 26 126 6 typeid 190 27 190 33 18446744073709551615 1 ( 190 33 190 34 18446744073709551615 6 double 190 34 190 40 18446744073709551615 1 ) 190 40 190 41 18446744073709551615 1 ) 190 41 190 42 18446744073709551615 1 { 191 2 191 3 18446744073709551615 4 node 192 3 192 7 121 2 -> 192 7 192 9 18446744073709551615 4 type 192 9 192 13 59 1 = 192 14 192 15 127 4 Type 192 16 192 20 128 2 :: 192 20 192 22 133 6 Double 192 22 192 28 133 1 ( 192 28 192 29 133 1 ) 192 29 192 30 133 1 ; 192 30 192 31 18446744073709551615 1 } 193 2 193 3 18446744073709551615 4 else 194 2 194 6 18446744073709551615 2 if 194 7 194 9 18446744073709551615 1 ( 194 10 194 11 18446744073709551615 5 value 194 11 194 16 123 1 . 194 16 194 17 125 4 type 194 17 194 21 125 1 ( 194 21 194 22 125 1 ) 194 22 194 23 125 2 == 194 24 194 26 126 6 typeid 194 27 194 33 18446744073709551615 1 ( 194 33 194 34 18446744073709551615 7 wchar_t 194 34 194 41 18446744073709551615 1 ) 194 41 194 42 18446744073709551615 1 ) 194 42 194 43 18446744073709551615 1 { 195 2 195 3 18446744073709551615 4 node 196 3 196 7 121 2 -> 196 7 196 9 18446744073709551615 4 type 196 9 196 13 59 1 = 196 14 196 15 127 4 Type 196 16 196 20 128 2 :: 196 20 196 22 134 4 Char 196 22 196 26 134 1 ( 196 26 196 27 134 1 ) 196 27 196 28 134 1 ; 196 28 196 29 18446744073709551615 1 } 197 2 197 3 18446744073709551615 4 else 198 2 198 6 18446744073709551615 2 if 198 7 198 9 18446744073709551615 1 ( 198 10 198 11 18446744073709551615 5 value 198 11 198 16 123 1 . 198 16 198 17 125 4 type 198 17 198 21 125 1 ( 198 21 198 22 125 1 ) 198 22 198 23 125 2 == 198 24 198 26 126 6 typeid 198 27 198 33 18446744073709551615 1 ( 198 33 198 34 18446744073709551615 4 bool 198 34 198 38 18446744073709551615 1 ) 198 38 198 39 18446744073709551615 1 ) 198 39 198 40 18446744073709551615 1 { 199 2 199 3 18446744073709551615 4 node 200 3 200 7 121 2 -> 200 7 200 9 18446744073709551615 4 type 200 9 200 13 59 1 = 200 14 200 15 127 4 Type 200 16 200 20 128 2 :: 200 20 200 22 135 7 Boolean 200 22 200 29 135 1 ( 200 29 200 30 135 1 ) 200 30 200 31 135 1 ; 200 31 200 32 18446744073709551615 1 } 201 2 201 3 18446744073709551615 4 else 202 2 202 6 18446744073709551615 2 if 202 7 202 9 18446744073709551615 1 ( 202 10 202 11 18446744073709551615 5 value 202 11 202 16 123 1 . 202 16 202 17 125 4 type 202 17 202 21 125 1 ( 202 21 202 22 125 1 ) 202 22 202 23 125 2 == 202 24 202 26 126 6 typeid 202 27 202 33 18446744073709551615 1 ( 202 33 202 34 18446744073709551615 7 wstring 202 34 202 41 136 1 ) 202 41 202 42 18446744073709551615 1 ) 202 42 202 43 18446744073709551615 1 { 203 2 203 3 18446744073709551615 4 node 204 3 204 7 121 2 -> 204 7 204 9 18446744073709551615 4 type 204 9 204 13 59 1 = 204 14 204 15 127 4 Type 204 16 204 20 128 2 :: 204 20 204 22 137 6 String 204 22 204 28 137 1 ( 204 28 204 29 137 1 ) 204 29 204 30 137 1 ; 204 30 204 31 18446744073709551615 1 } 205 2 205 3 18446744073709551615 4 else 206 2 206 6 18446744073709551615 1 { 207 2 207 3 18446744073709551615 5 throw 208 3 208 8 18446744073709551615 7 wstring 208 9 208 16 136 1 ( 208 16 208 17 138 8 L"error" 208 17 208 25 18446744073709551615 1 ) 208 25 208 26 138 1 ; 208 26 208 27 18446744073709551615 1 } 209 2 209 3 18446744073709551615 1 } 210 1 210 2 18446744073709551615 4 void 211 1 211 5 18446744073709551615 11 TypeChecker 211 6 211 17 4 2 :: 211 17 211 19 119 5 Visit 211 19 211 24 119 1 ( 211 24 211 25 119 15 UnaryExpression 211 25 211 40 139 1 * 211 40 211 41 18446744073709551615 4 node 211 42 211 46 140 1 ) 211 46 211 47 119 1 { 212 1 212 2 18446744073709551615 4 node 213 2 213 6 140 2 -> 213 6 213 8 18446744073709551615 7 operand 213 8 213 15 141 2 -> 213 15 213 17 58 6 Accept 213 17 213 23 58 1 ( 213 23 213 24 58 4 this 213 24 213 28 18446744073709551615 1 ) 213 28 213 29 58 1 ; 213 29 213 30 18446744073709551615 2 if 214 2 214 4 18446744073709551615 1 ( 214 5 214 6 18446744073709551615 4 node 214 6 214 10 140 2 -> 214 10 214 12 18446744073709551615 4 kind 214 12 214 16 142 2 == 214 17 214 19 18446744073709551615 14 ExpressionKind 214 20 214 34 143 2 :: 214 34 214 36 18446744073709551615 9 UnaryPlus 214 36 214 45 144 1 ) 214 45 214 46 18446744073709551615 1 { 215 2 215 3 18446744073709551615 2 if 216 3 216 5 18446744073709551615 1 ( 216 6 216 7 18446744073709551615 4 node 216 7 216 11 140 2 -> 216 11 216 13 18446744073709551615 7 operand 216 13 216 20 141 2 -> 216 20 216 22 18446744073709551615 4 type 216 22 216 26 59 1 . 216 26 216 27 145 5 IsInt 216 27 216 32 145 1 ( 216 32 216 33 145 1 ) 216 33 216 34 145 2 || 216 35 216 37 18446744073709551615 4 node 216 38 216 42 140 2 -> 216 42 216 44 18446744073709551615 7 operand 216 44 216 51 141 2 -> 216 51 216 53 18446744073709551615 4 type 216 53 216 57 59 1 . 216 57 216 58 146 6 IsLong 216 58 216 64 146 1 ( 216 64 216 65 146 1 ) 216 65 216 66 146 2 || 216 67 216 69 18446744073709551615 4 node 217 4 217 8 140 2 -> 217 8 217 10 18446744073709551615 7 operand 217 10 217 17 141 2 -> 217 17 217 19 18446744073709551615 4 type 217 19 217 23 59 1 . 217 23 217 24 147 7 IsFloat 217 24 217 31 147 1 ( 217 31 217 32 147 1 ) 217 32 217 33 147 2 || 217 34 217 36 18446744073709551615 4 node 217 37 217 41 140 2 -> 217 41 217 43 18446744073709551615 7 operand 217 43 217 50 141 2 -> 217 50 217 52 18446744073709551615 4 type 217 52 217 56 59 1 . 217 56 217 57 148 8 IsDouble 217 57 217 65 148 1 ( 217 65 217 66 148 1 ) 217 66 217 67 148 1 ) 217 67 217 68 18446744073709551615 1 { 218 3 218 4 18446744073709551615 4 node 219 4 219 8 140 2 -> 219 8 219 10 18446744073709551615 4 type 219 10 219 14 59 1 = 219 15 219 16 127 4 node 219 17 219 21 140 2 -> 219 21 219 23 18446744073709551615 7 operand 219 23 219 30 141 2 -> 219 30 219 32 18446744073709551615 4 type 219 32 219 36 59 1 ; 219 36 219 37 18446744073709551615 1 } 220 3 220 4 18446744073709551615 4 else 221 3 221 7 18446744073709551615 1 { 222 3 222 4 18446744073709551615 5 throw 223 4 223 9 18446744073709551615 13 TypeException 223 10 223 23 62 1 ( 223 23 223 24 62 4 node 224 5 224 9 140 2 -> 224 9 224 11 18446744073709551615 4 line 224 11 224 15 63 1 , 224 15 224 16 62 4 node 224 17 224 21 140 2 -> 224 21 224 23 18446744073709551615 6 column 224 23 224 29 64 1 , 224 29 224 30 62 57 L"The '+' operator cannot be applied to operand of type " 225 5 225 62 18446744073709551615 1 + 225 63 225 64 65 12 TypeToString 226 6 226 18 66 1 ( 226 18 226 19 66 4 node 226 19 226 23 140 2 -> 226 23 226 25 18446744073709551615 7 operand 226 25 226 32 141 2 -> 226 32 226 34 18446744073709551615 4 type 226 34 226 38 59 1 ) 226 38 226 39 66 1 ) 226 39 226 40 62 1 ; 226 40 226 41 18446744073709551615 1 } 227 3 227 4 18446744073709551615 1 } 228 2 228 3 18446744073709551615 4 else 229 2 229 6 18446744073709551615 2 if 229 7 229 9 18446744073709551615 1 ( 229 10 229 11 18446744073709551615 4 node 229 11 229 15 140 2 -> 229 15 229 17 18446744073709551615 4 kind 229 17 229 21 142 2 == 229 22 229 24 18446744073709551615 14 ExpressionKind 229 25 229 39 143 2 :: 229 39 229 41 18446744073709551615 10 UnaryMinus 229 41 229 51 149 1 ) 229 51 229 52 18446744073709551615 1 { 230 2 230 3 18446744073709551615 2 if 231 3 231 5 18446744073709551615 1 ( 231 6 231 7 18446744073709551615 4 node 231 7 231 11 140 2 -> 231 11 231 13 18446744073709551615 7 operand 231 13 231 20 141 2 -> 231 20 231 22 18446744073709551615 4 type 231 22 231 26 59 1 . 231 26 231 27 145 5 IsInt 231 27 231 32 145 1 ( 231 32 231 33 145 1 ) 231 33 231 34 145 2 || 231 35 231 37 18446744073709551615 4 node 231 38 231 42 140 2 -> 231 42 231 44 18446744073709551615 7 operand 231 44 231 51 141 2 -> 231 51 231 53 18446744073709551615 4 type 231 53 231 57 59 1 . 231 57 231 58 146 6 IsLong 231 58 231 64 146 1 ( 231 64 231 65 146 1 ) 231 65 231 66 146 2 || 231 67 231 69 18446744073709551615 4 node 232 4 232 8 140 2 -> 232 8 232 10 18446744073709551615 7 operand 232 10 232 17 141 2 -> 232 17 232 19 18446744073709551615 4 type 232 19 232 23 59 1 . 232 23 232 24 147 7 IsFloat 232 24 232 31 147 1 ( 232 31 232 32 147 1 ) 232 32 232 33 147 2 || 232 34 232 36 18446744073709551615 4 node 232 37 232 41 140 2 -> 232 41 232 43 18446744073709551615 7 operand 232 43 232 50 141 2 -> 232 50 232 52 18446744073709551615 4 type 232 52 232 56 59 1 . 232 56 232 57 148 8 IsDouble 232 57 232 65 148 1 ( 232 65 232 66 148 1 ) 232 66 232 67 148 1 ) 232 67 232 68 18446744073709551615 1 { 233 3 233 4 18446744073709551615 4 node 234 4 234 8 140 2 -> 234 8 234 10 18446744073709551615 4 type 234 10 234 14 59 1 = 234 15 234 16 127 4 node 234 17 234 21 140 2 -> 234 21 234 23 18446744073709551615 7 operand 234 23 234 30 141 2 -> 234 30 234 32 18446744073709551615 4 type 234 32 234 36 59 1 ; 234 36 234 37 18446744073709551615 1 } 235 3 235 4 18446744073709551615 4 else 236 3 236 7 18446744073709551615 1 { 237 3 237 4 18446744073709551615 5 throw 238 4 238 9 18446744073709551615 13 TypeException 238 10 238 23 62 1 ( 238 23 238 24 62 4 node 239 5 239 9 140 2 -> 239 9 239 11 18446744073709551615 4 line 239 11 239 15 63 1 , 239 15 239 16 62 4 node 239 17 239 21 140 2 -> 239 21 239 23 18446744073709551615 6 column 239 23 239 29 64 1 , 239 29 239 30 62 57 L"The '-' operator cannot be applied to operand of type " 240 5 240 62 18446744073709551615 1 + 240 63 240 64 65 12 TypeToString 241 6 241 18 66 1 ( 241 18 241 19 66 4 node 241 19 241 23 140 2 -> 241 23 241 25 18446744073709551615 7 operand 241 25 241 32 141 2 -> 241 32 241 34 18446744073709551615 4 type 241 34 241 38 59 1 ) 241 38 241 39 66 1 ) 241 39 241 40 62 1 ; 241 40 241 41 18446744073709551615 1 } 242 3 242 4 18446744073709551615 1 } 243 2 243 3 18446744073709551615 4 else 244 2 244 6 18446744073709551615 2 if 244 7 244 9 18446744073709551615 1 ( 244 10 244 11 18446744073709551615 4 node 244 11 244 15 140 2 -> 244 15 244 17 18446744073709551615 4 kind 244 17 244 21 142 2 == 244 22 244 24 18446744073709551615 14 ExpressionKind 244 25 244 39 143 2 :: 244 39 244 41 18446744073709551615 3 Not 244 41 244 44 150 1 ) 244 44 244 45 18446744073709551615 1 { 245 2 245 3 18446744073709551615 2 if 246 3 246 5 18446744073709551615 1 ( 246 6 246 7 18446744073709551615 4 node 246 7 246 11 140 2 -> 246 11 246 13 18446744073709551615 7 operand 246 13 246 20 141 2 -> 246 20 246 22 18446744073709551615 4 type 246 22 246 26 59 1 . 246 26 246 27 151 9 IsBoolean 246 27 246 36 151 1 ( 246 36 246 37 151 1 ) 246 37 246 38 151 1 ) 246 38 246 39 18446744073709551615 1 { 247 3 247 4 18446744073709551615 4 node 248 4 248 8 140 2 -> 248 8 248 10 18446744073709551615 4 type 248 10 248 14 59 1 = 248 15 248 16 127 4 node 248 17 248 21 140 2 -> 248 21 248 23 18446744073709551615 7 operand 248 23 248 30 141 2 -> 248 30 248 32 18446744073709551615 4 type 248 32 248 36 59 1 ; 248 36 248 37 18446744073709551615 1 } 249 3 249 4 18446744073709551615 4 else 250 3 250 7 18446744073709551615 1 { 251 3 251 4 18446744073709551615 5 throw 252 4 252 9 18446744073709551615 13 TypeException 252 10 252 23 62 1 ( 252 23 252 24 62 4 node 252 24 252 28 140 2 -> 252 28 252 30 18446744073709551615 4 line 252 30 252 34 63 1 , 252 34 252 35 62 4 node 252 36 252 40 140 2 -> 252 40 252 42 18446744073709551615 6 column 252 42 252 48 64 1 , 252 48 252 49 62 43 L"The 'not' operator cannot be applied to " 253 9 253 52 18446744073709551615 19 L"operand of type " 254 9 254 28 18446744073709551615 1 + 254 29 254 30 65 12 TypeToString 255 10 255 22 66 1 ( 255 22 255 23 66 4 node 255 23 255 27 140 2 -> 255 27 255 29 18446744073709551615 7 operand 255 29 255 36 141 2 -> 255 36 255 38 18446744073709551615 4 type 255 38 255 42 59 1 ) 255 42 255 43 66 1 ) 255 43 255 44 62 1 ; 255 44 255 45 18446744073709551615 1 } 256 3 256 4 18446744073709551615 1 } 257 2 257 3 18446744073709551615 4 else 258 2 258 6 18446744073709551615 1 { 259 2 259 3 18446744073709551615 5 throw 260 3 260 8 18446744073709551615 7 wstring 260 9 260 16 136 1 ( 260 16 260 17 138 8 L"error" 260 17 260 25 18446744073709551615 1 ) 260 25 260 26 138 1 ; 260 26 260 27 18446744073709551615 1 } 261 2 261 3 18446744073709551615 1 } 262 1 262 2 18446744073709551615 4 void 263 1 263 5 18446744073709551615 11 TypeChecker 263 6 263 17 4 2 :: 263 17 263 19 119 5 Visit 263 19 263 24 119 1 ( 263 24 263 25 119 16 BinaryExpression 263 25 263 41 152 1 * 263 41 263 42 18446744073709551615 4 node 263 43 263 47 153 1 ) 263 47 263 48 119 1 { 264 1 264 2 18446744073709551615 4 node 265 2 265 6 153 2 -> 265 6 265 8 18446744073709551615 4 left 265 8 265 12 154 2 -> 265 12 265 14 58 6 Accept 265 14 265 20 58 1 ( 265 20 265 21 58 4 this 265 21 265 25 18446744073709551615 1 ) 265 25 265 26 58 1 ; 265 26 265 27 18446744073709551615 4 node 266 2 266 6 153 2 -> 266 6 266 8 18446744073709551615 5 right 266 8 266 13 155 2 -> 266 13 266 15 58 6 Accept 266 15 266 21 58 1 ( 266 21 266 22 58 4 this 266 22 266 26 18446744073709551615 1 ) 266 26 266 27 58 1 ; 266 27 266 28 18446744073709551615 4 Type 267 2 267 6 128 1 & 267 6 267 7 18446744073709551615 4 left 267 8 267 12 156 1 = 267 13 267 14 18446744073709551615 4 node 267 15 267 19 153 2 -> 267 19 267 21 18446744073709551615 4 left 267 21 267 25 154 2 -> 267 25 267 27 18446744073709551615 4 type 267 27 267 31 59 1 ; 267 31 267 32 18446744073709551615 4 Type 268 2 268 6 128 1 & 268 6 268 7 18446744073709551615 5 right 268 8 268 13 157 1 = 268 14 268 15 18446744073709551615 4 node 268 16 268 20 153 2 -> 268 20 268 22 18446744073709551615 5 right 268 22 268 27 155 2 -> 268 27 268 29 18446744073709551615 4 type 268 29 268 33 59 1 ; 268 33 268 34 18446744073709551615 14 ExpressionKind 269 2 269 16 143 4 kind 269 17 269 21 158 1 = 269 22 269 23 18446744073709551615 4 node 269 24 269 28 153 2 -> 269 28 269 30 18446744073709551615 4 kind 269 30 269 34 142 1 ; 269 34 269 35 18446744073709551615 2 if 270 2 270 4 18446744073709551615 1 ( 270 5 270 6 18446744073709551615 4 kind 270 6 270 10 158 2 == 270 11 270 13 18446744073709551615 14 ExpressionKind 270 14 270 28 143 2 :: 270 28 270 30 18446744073709551615 3 Add 270 30 270 33 159 2 || 270 34 270 36 18446744073709551615 4 kind 270 37 270 41 158 2 == 270 42 270 44 18446744073709551615 14 ExpressionKind 270 45 270 59 143 2 :: 270 59 270 61 18446744073709551615 8 Subtract 270 61 270 69 160 2 || 270 70 270 72 18446744073709551615 4 kind 271 3 271 7 158 2 == 271 8 271 10 18446744073709551615 14 ExpressionKind 271 11 271 25 143 2 :: 271 25 271 27 18446744073709551615 8 Multiply 271 27 271 35 161 2 || 271 36 271 38 18446744073709551615 4 kind 271 39 271 43 158 2 == 271 44 271 46 18446744073709551615 14 ExpressionKind 271 47 271 61 143 2 :: 271 61 271 63 18446744073709551615 6 Divide 271 63 271 69 162 1 ) 271 69 271 70 18446744073709551615 1 { 272 2 272 3 18446744073709551615 2 if 273 3 273 5 18446744073709551615 1 ( 273 6 273 7 18446744073709551615 4 left 273 7 273 11 156 1 . 273 11 273 12 145 5 IsInt 273 12 273 17 145 1 ( 273 17 273 18 145 1 ) 273 18 273 19 145 2 && 273 20 273 22 18446744073709551615 5 right 273 23 273 28 157 1 . 273 28 273 29 145 5 IsInt 273 29 273 34 145 1 ( 273 34 273 35 145 1 ) 273 35 273 36 145 1 ) 273 36 273 37 18446744073709551615 1 { 274 3 274 4 18446744073709551615 4 node 275 4 275 8 153 2 -> 275 8 275 10 18446744073709551615 4 type 275 10 275 14 59 1 = 275 15 275 16 127 4 Type 275 17 275 21 128 2 :: 275 21 275 23 129 3 Int 275 23 275 26 129 1 ( 275 26 275 27 129 1 ) 275 27 275 28 129 1 ; 275 28 275 29 18446744073709551615 1 } 276 3 276 4 18446744073709551615 4 else 277 3 277 7 18446744073709551615 2 if 277 8 277 10 18446744073709551615 1 ( 277 11 277 12 18446744073709551615 4 left 277 12 277 16 156 1 . 277 16 277 17 148 8 IsDouble 277 17 277 25 148 1 ( 277 25 277 26 148 1 ) 277 26 277 27 148 2 && 277 28 277 30 18446744073709551615 5 right 277 31 277 36 157 1 . 277 36 277 37 148 8 IsDouble 277 37 277 45 148 1 ( 277 45 277 46 148 1 ) 277 46 277 47 148 1 ) 277 47 277 48 18446744073709551615 1 { 278 3 278 4 18446744073709551615 4 node 279 4 279 8 153 2 -> 279 8 279 10 18446744073709551615 4 type 279 10 279 14 59 1 = 279 15 279 16 127 4 Type 279 17 279 21 128 2 :: 279 21 279 23 133 6 Double 279 23 279 29 133 1 ( 279 29 279 30 133 1 ) 279 30 279 31 133 1 ; 279 31 279 32 18446744073709551615 1 } 280 3 280 4 18446744073709551615 4 else 281 3 281 7 18446744073709551615 2 if 281 8 281 10 18446744073709551615 1 ( 281 11 281 12 18446744073709551615 4 left 281 12 281 16 156 1 . 281 16 281 17 147 7 IsFloat 281 17 281 24 147 1 ( 281 24 281 25 147 1 ) 281 25 281 26 147 2 && 281 27 281 29 18446744073709551615 5 right 281 30 281 35 157 1 . 281 35 281 36 147 7 IsFloat 281 36 281 43 147 1 ( 281 43 281 44 147 1 ) 281 44 281 45 147 1 ) 281 45 281 46 18446744073709551615 1 { 282 3 282 4 18446744073709551615 4 node 283 4 283 8 153 2 -> 283 8 283 10 18446744073709551615 4 type 283 10 283 14 59 1 = 283 15 283 16 127 4 Type 283 17 283 21 128 2 :: 283 21 283 23 132 5 Float 283 23 283 28 132 1 ( 283 28 283 29 132 1 ) 283 29 283 30 132 1 ; 283 30 283 31 18446744073709551615 1 } 284 3 284 4 18446744073709551615 4 else 285 3 285 7 18446744073709551615 2 if 285 8 285 10 18446744073709551615 1 ( 285 11 285 12 18446744073709551615 4 left 285 12 285 16 156 1 . 285 16 285 17 146 6 IsLong 285 17 285 23 146 1 ( 285 23 285 24 146 1 ) 285 24 285 25 146 2 && 285 26 285 28 18446744073709551615 5 right 285 29 285 34 157 1 . 285 34 285 35 146 6 IsLong 285 35 285 41 146 1 ( 285 41 285 42 146 1 ) 285 42 285 43 146 1 ) 285 43 285 44 18446744073709551615 1 { 286 3 286 4 18446744073709551615 4 node 287 4 287 8 153 2 -> 287 8 287 10 18446744073709551615 4 type 287 10 287 14 59 1 = 287 15 287 16 127 4 Type 287 17 287 21 128 2 :: 287 21 287 23 131 4 Long 287 23 287 27 131 1 ( 287 27 287 28 131 1 ) 287 28 287 29 131 1 ; 287 29 287 30 18446744073709551615 1 } 288 3 288 4 18446744073709551615 4 else 289 3 289 7 18446744073709551615 1 { 290 3 290 4 18446744073709551615 5 throw 291 4 291 9 18446744073709551615 13 TypeException 291 10 291 23 62 1 ( 291 23 291 24 62 4 node 291 24 291 28 153 2 -> 291 28 291 30 18446744073709551615 4 line 291 30 291 34 63 1 , 291 34 291 35 62 4 node 291 36 291 40 153 2 -> 291 40 291 42 18446744073709551615 6 column 291 42 291 48 64 1 , 291 48 291 49 62 46 L"Operator `-' cannot be applied to operands " 292 9 292 55 18446744073709551615 12 L"of type '" 293 9 293 21 18446744073709551615 1 + 293 22 293 23 65 12 TypeToString 294 10 294 22 66 1 ( 294 22 294 23 66 4 left 294 23 294 27 156 1 ) 294 27 294 28 66 1 + 294 29 294 30 65 10 L"' and '" 294 31 294 41 18446744073709551615 1 + 294 42 294 43 65 12 TypeToString 295 10 295 22 66 1 ( 295 22 295 23 66 5 right 295 23 295 28 157 1 ) 295 28 295 29 66 1 + 295 30 295 31 65 4 L"'" 295 32 295 36 18446744073709551615 1 ) 295 36 295 37 62 1 ; 295 37 295 38 18446744073709551615 1 } 296 3 296 4 18446744073709551615 1 } 297 2 297 3 18446744073709551615 4 else 298 2 298 6 18446744073709551615 2 if 298 7 298 9 18446744073709551615 1 ( 298 10 298 11 18446744073709551615 4 kind 298 11 298 15 158 2 == 298 16 298 18 18446744073709551615 14 ExpressionKind 298 19 298 33 143 2 :: 298 33 298 35 18446744073709551615 6 Modulo 298 35 298 41 163 1 ) 298 41 298 42 18446744073709551615 1 { 299 2 299 3 18446744073709551615 2 if 300 3 300 5 18446744073709551615 1 ( 300 6 300 7 18446744073709551615 4 left 300 7 300 11 156 1 . 300 11 300 12 145 5 IsInt 300 12 300 17 145 1 ( 300 17 300 18 145 1 ) 300 18 300 19 145 2 && 300 20 300 22 18446744073709551615 5 right 300 23 300 28 157 1 . 300 28 300 29 145 5 IsInt 300 29 300 34 145 1 ( 300 34 300 35 145 1 ) 300 35 300 36 145 1 ) 300 36 300 37 18446744073709551615 1 { 301 3 301 4 18446744073709551615 4 node 302 4 302 8 153 2 -> 302 8 302 10 18446744073709551615 4 type 302 10 302 14 59 1 = 302 15 302 16 127 4 Type 302 17 302 21 128 2 :: 302 21 302 23 129 3 Int 302 23 302 26 129 1 ( 302 26 302 27 129 1 ) 302 27 302 28 129 1 ; 302 28 302 29 18446744073709551615 1 } 303 3 303 4 18446744073709551615 4 else 304 3 304 7 18446744073709551615 2 if 304 8 304 10 18446744073709551615 1 ( 304 11 304 12 18446744073709551615 4 left 304 12 304 16 156 1 . 304 16 304 17 146 6 IsLong 304 17 304 23 146 1 ( 304 23 304 24 146 1 ) 304 24 304 25 146 2 && 304 26 304 28 18446744073709551615 5 right 304 29 304 34 157 1 . 304 34 304 35 146 6 IsLong 304 35 304 41 146 1 ( 304 41 304 42 146 1 ) 304 42 304 43 146 1 ) 304 43 304 44 18446744073709551615 1 { 305 3 305 4 18446744073709551615 4 node 306 4 306 8 153 2 -> 306 8 306 10 18446744073709551615 4 type 306 10 306 14 59 1 = 306 15 306 16 127 4 Type 306 17 306 21 128 2 :: 306 21 306 23 131 4 Long 306 23 306 27 131 1 ( 306 27 306 28 131 1 ) 306 28 306 29 131 1 ; 306 29 306 30 18446744073709551615 1 } 307 3 307 4 18446744073709551615 4 else 308 3 308 7 18446744073709551615 1 { 309 3 309 4 18446744073709551615 5 throw 310 4 310 9 18446744073709551615 13 TypeException 310 10 310 23 62 1 ( 310 23 310 24 62 4 node 310 24 310 28 153 2 -> 310 28 310 30 18446744073709551615 4 line 310 30 310 34 63 1 , 310 34 310 35 62 4 node 310 36 310 40 153 2 -> 310 40 310 42 18446744073709551615 6 column 310 42 310 48 64 1 , 310 48 310 49 62 42 L"Operator cannot be applied to operands " 311 9 311 51 18446744073709551615 12 L"of type '" 312 9 312 21 18446744073709551615 1 + 312 22 312 23 65 12 TypeToString 313 10 313 22 66 1 ( 313 22 313 23 66 4 left 313 23 313 27 156 1 ) 313 27 313 28 66 1 + 313 29 313 30 65 10 L"' and '" 313 31 313 41 18446744073709551615 1 + 313 42 313 43 65 12 TypeToString 314 10 314 22 66 1 ( 314 22 314 23 66 5 right 314 23 314 28 157 1 ) 314 28 314 29 66 1 + 314 30 314 31 65 4 L"'" 314 32 314 36 18446744073709551615 1 ) 314 36 314 37 62 1 ; 314 37 314 38 18446744073709551615 1 } 315 3 315 4 18446744073709551615 1 } 316 2 316 3 18446744073709551615 4 else 317 2 317 6 18446744073709551615 2 if 317 7 317 9 18446744073709551615 1 ( 317 10 317 11 18446744073709551615 4 kind 317 11 317 15 158 2 == 317 16 317 18 18446744073709551615 14 ExpressionKind 317 19 317 33 143 2 :: 317 33 317 35 18446744073709551615 11 GreaterThan 317 35 317 46 164 2 || 317 47 317 49 18446744073709551615 4 kind 318 5 318 9 158 2 == 318 10 318 12 18446744073709551615 14 ExpressionKind 318 13 318 27 143 2 :: 318 27 318 29 18446744073709551615 8 LessThan 318 29 318 37 165 2 || 318 38 318 40 18446744073709551615 4 kind 319 5 319 9 158 2 == 319 10 319 12 18446744073709551615 14 ExpressionKind 319 13 319 27 143 2 :: 319 27 319 29 18446744073709551615 18 GreaterThanOrEqual 319 29 319 47 166 2 || 319 48 319 50 18446744073709551615 4 kind 320 5 320 9 158 2 == 320 10 320 12 18446744073709551615 14 ExpressionKind 320 13 320 27 143 2 :: 320 27 320 29 18446744073709551615 15 LessThanOrEqual 320 29 320 44 167 1 ) 320 44 320 45 18446744073709551615 1 { 321 2 321 3 18446744073709551615 2 if 322 3 322 5 18446744073709551615 1 ( 322 6 322 7 18446744073709551615 4 left 322 7 322 11 156 1 . 322 11 322 12 145 5 IsInt 322 12 322 17 145 1 ( 322 17 322 18 145 1 ) 322 18 322 19 145 2 && 322 20 322 22 18446744073709551615 5 right 322 23 322 28 157 1 . 322 28 322 29 145 5 IsInt 322 29 322 34 145 1 ( 322 34 322 35 145 1 ) 322 35 322 36 145 1 ) 322 36 322 37 18446744073709551615 1 { 323 3 323 4 18446744073709551615 4 node 324 4 324 8 153 2 -> 324 8 324 10 18446744073709551615 4 type 324 10 324 14 59 1 = 324 15 324 16 127 4 Type 324 17 324 21 128 2 :: 324 21 324 23 135 7 Boolean 324 23 324 30 135 1 ( 324 30 324 31 135 1 ) 324 31 324 32 135 1 ; 324 32 324 33 18446744073709551615 1 } 325 3 325 4 18446744073709551615 4 else 326 3 326 7 18446744073709551615 2 if 326 8 326 10 18446744073709551615 1 ( 326 11 326 12 18446744073709551615 4 left 326 12 326 16 156 1 . 326 16 326 17 148 8 IsDouble 326 17 326 25 148 1 ( 326 25 326 26 148 1 ) 326 26 326 27 148 2 && 326 28 326 30 18446744073709551615 5 right 326 31 326 36 157 1 . 326 36 326 37 148 8 IsDouble 326 37 326 45 148 1 ( 326 45 326 46 148 1 ) 326 46 326 47 148 1 ) 326 47 326 48 18446744073709551615 1 { 327 3 327 4 18446744073709551615 4 node 328 4 328 8 153 2 -> 328 8 328 10 18446744073709551615 4 type 328 10 328 14 59 1 = 328 15 328 16 127 4 Type 328 17 328 21 128 2 :: 328 21 328 23 135 7 Boolean 328 23 328 30 135 1 ( 328 30 328 31 135 1 ) 328 31 328 32 135 1 ; 328 32 328 33 18446744073709551615 1 } 329 3 329 4 18446744073709551615 4 else 330 3 330 7 18446744073709551615 2 if 330 8 330 10 18446744073709551615 1 ( 330 11 330 12 18446744073709551615 4 left 330 12 330 16 156 1 . 330 16 330 17 146 6 IsLong 330 17 330 23 146 1 ( 330 23 330 24 146 1 ) 330 24 330 25 146 2 && 330 26 330 28 18446744073709551615 5 right 330 29 330 34 157 1 . 330 34 330 35 146 6 IsLong 330 35 330 41 146 1 ( 330 41 330 42 146 1 ) 330 42 330 43 146 1 ) 330 43 330 44 18446744073709551615 1 { 331 3 331 4 18446744073709551615 4 node 332 4 332 8 153 2 -> 332 8 332 10 18446744073709551615 4 type 332 10 332 14 59 1 = 332 15 332 16 127 4 Type 332 17 332 21 128 2 :: 332 21 332 23 135 7 Boolean 332 23 332 30 135 1 ( 332 30 332 31 135 1 ) 332 31 332 32 135 1 ; 332 32 332 33 18446744073709551615 1 } 333 3 333 4 18446744073709551615 4 else 334 3 334 7 18446744073709551615 2 if 334 8 334 10 18446744073709551615 1 ( 334 11 334 12 18446744073709551615 4 left 334 12 334 16 156 1 . 334 16 334 17 147 7 IsFloat 334 17 334 24 147 1 ( 334 24 334 25 147 1 ) 334 25 334 26 147 2 && 334 27 334 29 18446744073709551615 5 right 334 30 334 35 157 1 . 334 35 334 36 147 7 IsFloat 334 36 334 43 147 1 ( 334 43 334 44 147 1 ) 334 44 334 45 147 1 ) 334 45 334 46 18446744073709551615 1 { 335 3 335 4 18446744073709551615 4 node 336 4 336 8 153 2 -> 336 8 336 10 18446744073709551615 4 type 336 10 336 14 59 1 = 336 15 336 16 127 4 Type 336 17 336 21 128 2 :: 336 21 336 23 135 7 Boolean 336 23 336 30 135 1 ( 336 30 336 31 135 1 ) 336 31 336 32 135 1 ; 336 32 336 33 18446744073709551615 1 } 337 3 337 4 18446744073709551615 4 else 338 3 338 7 18446744073709551615 1 { 339 3 339 4 18446744073709551615 5 throw 340 4 340 9 18446744073709551615 13 TypeException 340 10 340 23 62 1 ( 340 23 340 24 62 4 node 340 24 340 28 153 2 -> 340 28 340 30 18446744073709551615 4 line 340 30 340 34 63 1 , 340 34 340 35 62 4 node 340 36 340 40 153 2 -> 340 40 340 42 18446744073709551615 6 column 340 42 340 48 64 1 , 340 48 340 49 62 42 L"Operator cannot be applied to operands " 341 9 341 51 18446744073709551615 12 L"of type '" 342 9 342 21 18446744073709551615 1 + 342 22 342 23 65 12 TypeToString 343 10 343 22 66 1 ( 343 22 343 23 66 4 left 343 23 343 27 156 1 ) 343 27 343 28 66 1 + 343 29 343 30 65 10 L"' and '" 343 31 343 41 18446744073709551615 1 + 343 42 343 43 65 12 TypeToString 344 10 344 22 66 1 ( 344 22 344 23 66 5 right 344 23 344 28 157 1 ) 344 28 344 29 66 1 + 344 30 344 31 65 4 L"'" 344 32 344 36 18446744073709551615 1 ) 344 36 344 37 62 1 ; 344 37 344 38 18446744073709551615 1 } 345 3 345 4 18446744073709551615 1 } 346 2 346 3 18446744073709551615 4 else 347 2 347 6 18446744073709551615 2 if 347 7 347 9 18446744073709551615 1 ( 347 10 347 11 18446744073709551615 4 kind 347 11 347 15 158 2 == 347 16 347 18 18446744073709551615 14 ExpressionKind 347 19 347 33 143 2 :: 347 33 347 35 18446744073709551615 3 And 347 35 347 38 168 2 || 347 39 347 41 18446744073709551615 4 kind 347 42 347 46 158 2 == 347 47 347 49 18446744073709551615 14 ExpressionKind 347 50 347 64 143 2 :: 347 64 347 66 18446744073709551615 2 Or 347 66 347 68 169 1 ) 347 68 347 69 18446744073709551615 1 { 348 2 348 3 18446744073709551615 2 if 349 3 349 5 18446744073709551615 1 ( 349 6 349 7 18446744073709551615 4 left 349 7 349 11 156 1 . 349 11 349 12 151 9 IsBoolean 349 12 349 21 151 1 ( 349 21 349 22 151 1 ) 349 22 349 23 151 2 && 349 24 349 26 18446744073709551615 5 right 349 27 349 32 157 1 . 349 32 349 33 151 9 IsBoolean 349 33 349 42 151 1 ( 349 42 349 43 151 1 ) 349 43 349 44 151 1 ) 349 44 349 45 18446744073709551615 1 { 350 3 350 4 18446744073709551615 4 node 351 4 351 8 153 2 -> 351 8 351 10 18446744073709551615 4 type 351 10 351 14 59 1 = 351 15 351 16 127 4 Type 351 17 351 21 128 2 :: 351 21 351 23 135 7 Boolean 351 23 351 30 135 1 ( 351 30 351 31 135 1 ) 351 31 351 32 135 1 ; 351 32 351 33 18446744073709551615 1 } 352 3 352 4 18446744073709551615 4 else 353 3 353 7 18446744073709551615 1 { 354 3 354 4 18446744073709551615 5 throw 355 4 355 9 18446744073709551615 13 TypeException 355 10 355 23 62 1 ( 355 23 355 24 62 4 node 355 24 355 28 153 2 -> 355 28 355 30 18446744073709551615 4 line 355 30 355 34 63 1 , 355 34 355 35 62 4 node 355 36 355 40 153 2 -> 355 40 355 42 18446744073709551615 6 column 355 42 355 48 64 1 , 355 48 355 49 62 42 L"Operator cannot be applied to operands " 356 9 356 51 18446744073709551615 12 L"of type '" 357 9 357 21 18446744073709551615 1 + 357 22 357 23 65 12 TypeToString 358 10 358 22 66 1 ( 358 22 358 23 66 4 left 358 23 358 27 156 1 ) 358 27 358 28 66 1 + 358 29 358 30 65 10 L"' and '" 358 31 358 41 18446744073709551615 1 + 358 42 358 43 65 12 TypeToString 359 10 359 22 66 1 ( 359 22 359 23 66 5 right 359 23 359 28 157 1 ) 359 28 359 29 66 1 + 359 30 359 31 65 4 L"'" 359 32 359 36 18446744073709551615 1 ) 359 36 359 37 62 1 ; 359 37 359 38 18446744073709551615 1 } 360 3 360 4 18446744073709551615 1 } 361 2 361 3 18446744073709551615 4 else 362 2 362 6 18446744073709551615 2 if 362 7 362 9 18446744073709551615 1 ( 362 10 362 11 18446744073709551615 4 kind 362 11 362 15 158 2 == 362 16 362 18 18446744073709551615 14 ExpressionKind 362 19 362 33 143 2 :: 362 33 362 35 18446744073709551615 5 Equal 362 35 362 40 170 2 || 362 41 362 43 18446744073709551615 4 kind 362 44 362 48 158 2 == 362 49 362 51 18446744073709551615 14 ExpressionKind 362 52 362 66 143 2 :: 362 66 362 68 18446744073709551615 8 NotEqual 362 68 362 76 171 1 ) 362 76 362 77 18446744073709551615 1 { 363 2 363 3 18446744073709551615 2 if 364 3 364 5 18446744073709551615 1 ( 364 6 364 7 18446744073709551615 4 left 364 7 364 11 156 1 . 364 11 364 12 145 5 IsInt 364 12 364 17 145 1 ( 364 17 364 18 145 1 ) 364 18 364 19 145 2 && 364 20 364 22 18446744073709551615 5 right 364 23 364 28 157 1 . 364 28 364 29 145 5 IsInt 364 29 364 34 145 1 ( 364 34 364 35 145 1 ) 364 35 364 36 145 1 ) 364 36 364 37 18446744073709551615 1 { 365 3 365 4 18446744073709551615 4 node 366 4 366 8 153 2 -> 366 8 366 10 18446744073709551615 4 type 366 10 366 14 59 1 = 366 15 366 16 127 4 Type 366 17 366 21 128 2 :: 366 21 366 23 135 7 Boolean 366 23 366 30 135 1 ( 366 30 366 31 135 1 ) 366 31 366 32 135 1 ; 366 32 366 33 18446744073709551615 1 } 367 3 367 4 18446744073709551615 4 else 368 3 368 7 18446744073709551615 2 if 368 8 368 10 18446744073709551615 1 ( 368 11 368 12 18446744073709551615 4 left 368 12 368 16 156 1 . 368 16 368 17 146 6 IsLong 368 17 368 23 146 1 ( 368 23 368 24 146 1 ) 368 24 368 25 146 2 && 368 26 368 28 18446744073709551615 5 right 368 29 368 34 157 1 . 368 34 368 35 146 6 IsLong 368 35 368 41 146 1 ( 368 41 368 42 146 1 ) 368 42 368 43 146 1 ) 368 43 368 44 18446744073709551615 1 { 369 3 369 4 18446744073709551615 4 node 370 4 370 8 153 2 -> 370 8 370 10 18446744073709551615 4 type 370 10 370 14 59 1 = 370 15 370 16 127 4 Type 370 17 370 21 128 2 :: 370 21 370 23 135 7 Boolean 370 23 370 30 135 1 ( 370 30 370 31 135 1 ) 370 31 370 32 135 1 ; 370 32 370 33 18446744073709551615 1 } 371 3 371 4 18446744073709551615 4 else 372 3 372 7 18446744073709551615 2 if 372 8 372 10 18446744073709551615 1 ( 372 11 372 12 18446744073709551615 4 left 372 12 372 16 156 1 . 372 16 372 17 147 7 IsFloat 372 17 372 24 147 1 ( 372 24 372 25 147 1 ) 372 25 372 26 147 2 && 372 27 372 29 18446744073709551615 5 right 372 30 372 35 157 1 . 372 35 372 36 147 7 IsFloat 372 36 372 43 147 1 ( 372 43 372 44 147 1 ) 372 44 372 45 147 1 ) 372 45 372 46 18446744073709551615 1 { 373 3 373 4 18446744073709551615 4 node 374 4 374 8 153 2 -> 374 8 374 10 18446744073709551615 4 type 374 10 374 14 59 1 = 374 15 374 16 127 4 Type 374 17 374 21 128 2 :: 374 21 374 23 135 7 Boolean 374 23 374 30 135 1 ( 374 30 374 31 135 1 ) 374 31 374 32 135 1 ; 374 32 374 33 18446744073709551615 1 } 375 3 375 4 18446744073709551615 4 else 376 3 376 7 18446744073709551615 2 if 376 8 376 10 18446744073709551615 1 ( 376 11 376 12 18446744073709551615 4 left 376 12 376 16 156 1 . 376 16 376 17 148 8 IsDouble 376 17 376 25 148 1 ( 376 25 376 26 148 1 ) 376 26 376 27 148 2 && 376 28 376 30 18446744073709551615 5 right 376 31 376 36 157 1 . 376 36 376 37 148 8 IsDouble 376 37 376 45 148 1 ( 376 45 376 46 148 1 ) 376 46 376 47 148 1 ) 376 47 376 48 18446744073709551615 1 { 377 3 377 4 18446744073709551615 4 node 378 4 378 8 153 2 -> 378 8 378 10 18446744073709551615 4 type 378 10 378 14 59 1 = 378 15 378 16 127 4 Type 378 17 378 21 128 2 :: 378 21 378 23 135 7 Boolean 378 23 378 30 135 1 ( 378 30 378 31 135 1 ) 378 31 378 32 135 1 ; 378 32 378 33 18446744073709551615 1 } 379 3 379 4 18446744073709551615 4 else 380 3 380 7 18446744073709551615 2 if 380 8 380 10 18446744073709551615 1 ( 380 11 380 12 18446744073709551615 4 left 380 12 380 16 156 1 . 380 16 380 17 151 9 IsBoolean 380 17 380 26 151 1 ( 380 26 380 27 151 1 ) 380 27 380 28 151 2 && 380 29 380 31 18446744073709551615 5 right 380 32 380 37 157 1 . 380 37 380 38 151 9 IsBoolean 380 38 380 47 151 1 ( 380 47 380 48 151 1 ) 380 48 380 49 151 1 ) 380 49 380 50 18446744073709551615 1 { 381 3 381 4 18446744073709551615 4 node 382 4 382 8 153 2 -> 382 8 382 10 18446744073709551615 4 type 382 10 382 14 59 1 = 382 15 382 16 127 4 Type 382 17 382 21 128 2 :: 382 21 382 23 135 7 Boolean 382 23 382 30 135 1 ( 382 30 382 31 135 1 ) 382 31 382 32 135 1 ; 382 32 382 33 18446744073709551615 1 } 383 3 383 4 18446744073709551615 4 else 384 3 384 7 18446744073709551615 2 if 384 8 384 10 18446744073709551615 1 ( 384 11 384 12 18446744073709551615 4 left 384 12 384 16 156 1 . 384 16 384 17 172 6 IsChar 384 17 384 23 172 1 ( 384 23 384 24 172 1 ) 384 24 384 25 172 2 && 384 26 384 28 18446744073709551615 5 right 384 29 384 34 157 1 . 384 34 384 35 172 6 IsChar 384 35 384 41 172 1 ( 384 41 384 42 172 1 ) 384 42 384 43 172 1 ) 384 43 384 44 18446744073709551615 1 { 385 3 385 4 18446744073709551615 4 node 386 4 386 8 153 2 -> 386 8 386 10 18446744073709551615 4 type 386 10 386 14 59 1 = 386 15 386 16 127 4 Type 386 17 386 21 128 2 :: 386 21 386 23 135 7 Boolean 386 23 386 30 135 1 ( 386 30 386 31 135 1 ) 386 31 386 32 135 1 ; 386 32 386 33 18446744073709551615 1 } 387 3 387 4 18446744073709551615 4 else 388 3 388 7 18446744073709551615 2 if 388 8 388 10 18446744073709551615 1 ( 388 11 388 12 18446744073709551615 4 left 388 12 388 16 156 1 . 388 16 388 17 173 8 IsString 388 17 388 25 173 1 ( 388 25 388 26 173 1 ) 388 26 388 27 173 2 && 388 28 388 30 18446744073709551615 5 right 388 31 388 36 157 1 . 388 36 388 37 173 8 IsString 388 37 388 45 173 1 ( 388 45 388 46 173 1 ) 388 46 388 47 173 1 ) 388 47 388 48 18446744073709551615 1 { 389 3 389 4 18446744073709551615 4 node 390 4 390 8 153 2 -> 390 8 390 10 18446744073709551615 4 type 390 10 390 14 59 1 = 390 15 390 16 127 4 Type 390 17 390 21 128 2 :: 390 21 390 23 135 7 Boolean 390 23 390 30 135 1 ( 390 30 390 31 135 1 ) 390 31 390 32 135 1 ; 390 32 390 33 18446744073709551615 1 } 391 3 391 4 18446744073709551615 4 else 392 3 392 7 18446744073709551615 1 { 393 3 393 4 18446744073709551615 5 throw 394 4 394 9 18446744073709551615 13 TypeException 394 10 394 23 62 1 ( 394 23 394 24 62 4 node 394 24 394 28 153 2 -> 394 28 394 30 18446744073709551615 4 line 394 30 394 34 63 1 , 394 34 394 35 62 4 node 394 36 394 40 153 2 -> 394 40 394 42 18446744073709551615 6 column 394 42 394 48 64 1 , 394 48 394 49 62 42 L"Operator cannot be applied to operands " 395 9 395 51 18446744073709551615 12 L"of type '" 396 9 396 21 18446744073709551615 1 + 396 22 396 23 65 12 TypeToString 397 10 397 22 66 1 ( 397 22 397 23 66 4 left 397 23 397 27 156 1 ) 397 27 397 28 66 1 + 397 29 397 30 65 10 L"' and '" 397 31 397 41 18446744073709551615 1 + 397 42 397 43 65 12 TypeToString 398 10 398 22 66 1 ( 398 22 398 23 66 5 right 398 23 398 28 157 1 ) 398 28 398 29 66 1 + 398 30 398 31 65 4 L"'" 398 32 398 36 18446744073709551615 1 ) 398 36 398 37 62 1 ; 398 37 398 38 18446744073709551615 1 } 399 3 399 4 18446744073709551615 1 } 400 2 400 3 18446744073709551615 4 else 401 2 401 6 18446744073709551615 1 { 402 2 402 3 18446744073709551615 5 throw 403 3 403 8 18446744073709551615 13 TypeException 403 9 403 22 62 1 ( 403 22 403 23 62 4 node 403 23 403 27 153 2 -> 403 27 403 29 18446744073709551615 4 line 403 29 403 33 63 1 , 403 33 403 34 62 4 node 403 35 403 39 153 2 -> 403 39 403 41 18446744073709551615 6 column 403 41 403 47 64 1 , 403 47 403 48 62 42 L"Operator cannot be applied to operands " 404 8 404 50 18446744073709551615 12 L"of type '" 405 8 405 20 18446744073709551615 1 + 405 21 405 22 65 12 TypeToString 406 9 406 21 66 1 ( 406 21 406 22 66 4 left 406 22 406 26 156 1 ) 406 26 406 27 66 1 + 406 28 406 29 65 10 L"' and '" 406 30 406 40 18446744073709551615 1 + 406 41 406 42 65 12 TypeToString 407 9 407 21 66 1 ( 407 21 407 22 66 5 right 407 22 407 27 157 1 ) 407 27 407 28 66 1 + 407 29 407 30 65 4 L"'" 407 31 407 35 18446744073709551615 1 ) 407 35 407 36 62 1 ; 407 36 407 37 18446744073709551615 1 } 408 2 408 3 18446744073709551615 1 } 409 1 409 2 18446744073709551615 4 void 410 1 410 5 18446744073709551615 11 TypeChecker 410 6 410 17 4 2 :: 410 17 410 19 119 5 Visit 410 19 410 24 119 1 ( 410 24 410 25 119 16 AssignExpression 410 25 410 41 174 1 * 410 41 410 42 18446744073709551615 4 node 410 43 410 47 175 1 ) 410 47 410 48 119 1 { 411 1 411 2 18446744073709551615 4 node 412 2 412 6 175 2 -> 412 6 412 8 18446744073709551615 5 value 412 8 412 13 176 2 -> 412 13 412 15 58 6 Accept 412 15 412 21 58 1 ( 412 21 412 22 58 4 this 412 22 412 26 18446744073709551615 1 ) 412 26 412 27 58 1 ; 412 27 412 28 18446744073709551615 2 if 413 2 413 4 18446744073709551615 1 ( 413 5 413 6 18446744073709551615 5 scope 413 6 413 11 10 2 -> 413 11 413 13 177 8 Contains 413 13 413 21 177 1 ( 413 21 413 22 177 4 node 413 22 413 26 175 2 -> 413 26 413 28 18446744073709551615 4 name 413 28 413 32 178 1 ) 413 32 413 33 177 1 ) 413 33 413 34 18446744073709551615 1 { 414 2 414 3 18446744073709551615 3 any 415 3 415 6 122 5 value 415 7 415 12 179 1 = 415 13 415 14 18446744073709551615 5 scope 415 15 415 20 10 2 -> 415 20 415 22 180 3 Get 415 22 415 25 180 1 ( 415 25 415 26 180 4 node 415 26 415 30 175 2 -> 415 30 415 32 18446744073709551615 4 name 415 32 415 36 178 1 ) 415 36 415 37 180 1 ; 415 37 415 38 18446744073709551615 2 if 416 3 416 5 18446744073709551615 1 ( 416 6 416 7 18446744073709551615 5 value 416 7 416 12 179 1 . 416 12 416 13 125 4 type 416 13 416 17 125 1 ( 416 17 416 18 125 1 ) 416 18 416 19 125 2 == 416 20 416 22 126 6 typeid 416 23 416 29 18446744073709551615 1 ( 416 29 416 30 18446744073709551615 13 LocalVariable 416 30 416 43 76 1 ) 416 43 416 44 18446744073709551615 1 ) 416 44 416 45 18446744073709551615 1 { 417 3 417 4 18446744073709551615 13 LocalVariable 418 4 418 17 76 8 variable 418 18 418 26 181 1 = 418 27 418 28 18446744073709551615 8 any_cast 418 29 418 37 182 1 < 418 37 418 38 182 13 LocalVariable 418 38 418 51 76 1 > 418 51 418 52 182 1 ( 418 52 418 53 182 5 value 418 53 418 58 179 1 ) 418 58 418 59 182 1 ; 418 59 418 60 18446744073709551615 4 node 419 4 419 8 175 2 -> 419 8 419 10 18446744073709551615 4 type 419 10 419 14 59 1 = 419 15 419 16 127 8 variable 419 17 419 25 181 1 . 419 25 419 26 18446744073709551615 4 type 419 26 419 30 183 1 ; 419 30 419 31 18446744073709551615 2 if 420 4 420 6 18446744073709551615 1 ( 420 7 420 8 18446744073709551615 4 node 420 8 420 12 175 2 -> 420 12 420 14 18446744073709551615 4 type 420 14 420 18 59 2 == 420 19 420 21 184 4 node 420 22 420 26 175 2 -> 420 26 420 28 18446744073709551615 5 value 420 28 420 33 176 2 -> 420 33 420 35 18446744073709551615 4 type 420 35 420 39 59 1 ) 420 39 420 40 18446744073709551615 1 { 421 4 421 5 18446744073709551615 1 } 422 4 422 5 18446744073709551615 4 else 423 4 423 8 18446744073709551615 1 { 424 4 424 5 18446744073709551615 5 throw 425 5 425 10 18446744073709551615 13 TypeException 425 11 425 24 62 1 ( 425 24 425 25 62 4 node 425 25 425 29 175 2 -> 425 29 425 31 18446744073709551615 4 line 425 31 425 35 63 1 , 425 35 425 36 62 4 node 425 37 425 41 175 2 -> 425 41 425 43 18446744073709551615 6 column 425 43 425 49 64 1 , 425 49 425 50 62 35 L"Cannot implicitly convert type `" 426 10 426 45 18446744073709551615 1 + 426 46 426 47 65 12 TypeToString 427 11 427 23 66 1 ( 427 23 427 24 66 4 node 427 24 427 28 175 2 -> 427 28 427 30 18446744073709551615 5 value 427 30 427 35 176 2 -> 427 35 427 37 18446744073709551615 4 type 427 37 427 41 59 1 ) 427 41 427 42 66 1 + 427 43 427 44 65 8 L" to '" 428 11 428 19 18446744073709551615 1 + 428 20 428 21 65 12 TypeToString 428 22 428 34 66 1 ( 428 34 428 35 66 4 node 428 35 428 39 175 2 -> 428 39 428 41 18446744073709551615 4 type 428 41 428 45 59 1 ) 428 45 428 46 66 1 + 428 47 428 48 65 4 L"'" 429 11 429 15 18446744073709551615 1 ) 429 15 429 16 62 1 ; 429 16 429 17 18446744073709551615 1 } 430 4 430 5 18446744073709551615 4 node 431 4 431 8 175 2 -> 431 8 431 10 18446744073709551615 8 location 431 10 431 18 185 1 = 431 19 431 20 97 8 variable 431 21 431 29 181 1 . 431 29 431 30 18446744073709551615 8 location 431 30 431 38 107 1 ; 431 38 431 39 18446744073709551615 1 } 432 3 432 4 18446744073709551615 4 else 433 3 433 7 18446744073709551615 2 if 433 8 433 10 18446744073709551615 1 ( 433 11 433 12 18446744073709551615 5 value 433 12 433 17 179 1 . 433 17 433 18 125 4 type 433 18 433 22 125 1 ( 433 22 433 23 125 1 ) 433 23 433 24 125 2 == 433 25 433 27 126 6 typeid 433 28 433 34 18446744073709551615 1 ( 433 34 433 35 18446744073709551615 5 Field 433 35 433 40 55 1 ) 433 40 433 41 18446744073709551615 1 ) 433 41 433 42 18446744073709551615 1 { 434 3 434 4 18446744073709551615 5 Field 435 4 435 9 55 5 field 435 10 435 15 186 1 = 435 16 435 17 18446744073709551615 8 any_cast 435 18 435 26 182 1 < 435 26 435 27 182 5 Field 435 27 435 32 55 1 > 435 32 435 33 182 1 ( 435 33 435 34 182 5 value 435 34 435 39 179 1 ) 435 39 435 40 182 1 ; 435 40 435 41 18446744073709551615 4 node 436 4 436 8 175 2 -> 436 8 436 10 18446744073709551615 4 type 436 10 436 14 59 1 = 436 15 436 16 127 5 field 436 17 436 22 186 1 . 436 22 436 23 18446744073709551615 4 type 436 23 436 27 61 1 ; 436 27 436 28 18446744073709551615 2 if 437 4 437 6 18446744073709551615 1 ( 437 7 437 8 18446744073709551615 4 node 437 8 437 12 175 2 -> 437 12 437 14 18446744073709551615 4 type 437 14 437 18 59 2 == 437 19 437 21 184 4 node 437 22 437 26 175 2 -> 437 26 437 28 18446744073709551615 5 value 437 28 437 33 176 2 -> 437 33 437 35 18446744073709551615 4 type 437 35 437 39 59 1 ) 437 39 437 40 18446744073709551615 1 { 438 4 438 5 18446744073709551615 1 } 439 4 439 5 18446744073709551615 4 else 440 4 440 8 18446744073709551615 1 { 441 4 441 5 18446744073709551615 5 throw 442 5 442 10 18446744073709551615 13 TypeException 442 11 442 24 62 1 ( 442 24 442 25 62 4 node 442 25 442 29 175 2 -> 442 29 442 31 18446744073709551615 4 line 442 31 442 35 63 1 , 442 35 442 36 62 4 node 442 37 442 41 175 2 -> 442 41 442 43 18446744073709551615 6 column 442 43 442 49 64 1 , 442 49 442 50 62 35 L"Cannot implicitly convert type `" 443 10 443 45 18446744073709551615 1 + 443 46 443 47 65 12 TypeToString 444 11 444 23 66 1 ( 444 23 444 24 66 4 node 444 24 444 28 175 2 -> 444 28 444 30 18446744073709551615 5 value 444 30 444 35 176 2 -> 444 35 444 37 18446744073709551615 4 type 444 37 444 41 59 1 ) 444 41 444 42 66 1 + 444 43 444 44 65 8 L" to '" 445 11 445 19 18446744073709551615 1 + 445 20 445 21 65 12 TypeToString 445 22 445 34 66 1 ( 445 34 445 35 66 4 node 445 35 445 39 175 2 -> 445 39 445 41 18446744073709551615 4 type 445 41 445 45 59 1 ) 445 45 445 46 66 1 + 445 47 445 48 65 4 L"'" 446 11 446 15 18446744073709551615 1 ) 446 15 446 16 62 1 ; 446 16 446 17 18446744073709551615 1 } 447 4 447 5 18446744073709551615 4 node 448 4 448 8 175 2 -> 448 8 448 10 18446744073709551615 8 location 448 10 448 18 185 1 = 448 19 448 20 97 5 field 448 21 448 26 186 1 . 448 26 448 27 18446744073709551615 8 location 448 27 448 35 96 1 ; 448 35 448 36 18446744073709551615 1 } 449 3 449 4 18446744073709551615 4 else 450 3 450 7 18446744073709551615 1 { 451 3 451 4 18446744073709551615 5 throw 452 4 452 9 18446744073709551615 13 TypeException 452 10 452 23 62 1 ( 452 23 452 24 62 4 node 452 24 452 28 175 2 -> 452 28 452 30 18446744073709551615 4 line 452 30 452 34 63 1 , 452 34 452 35 62 4 node 452 36 452 40 175 2 -> 452 40 452 42 18446744073709551615 6 column 452 42 452 48 64 1 , 452 48 452 49 62 9 L"name '" 453 9 453 18 18446744073709551615 1 + 453 19 453 20 65 4 node 453 21 453 25 175 2 -> 453 25 453 27 18446744073709551615 4 name 453 27 453 31 178 1 + 453 32 453 33 65 22 L"' is not a variable" 454 10 454 32 18446744073709551615 1 ) 454 32 454 33 62 1 ; 454 33 454 34 18446744073709551615 1 } 455 3 455 4 18446744073709551615 1 } 456 2 456 3 18446744073709551615 4 else 457 2 457 6 18446744073709551615 1 { 458 2 458 3 18446744073709551615 5 throw 459 3 459 8 18446744073709551615 13 TypeException 459 9 459 22 62 1 ( 459 22 459 23 62 4 node 459 23 459 27 175 2 -> 459 27 459 29 18446744073709551615 4 line 459 29 459 33 63 1 , 459 33 459 34 62 4 node 459 35 459 39 175 2 -> 459 39 459 41 18446744073709551615 6 column 459 41 459 47 64 1 , 459 47 459 48 62 9 L"name '" 460 8 460 17 18446744073709551615 1 + 460 18 460 19 65 4 node 460 20 460 24 175 2 -> 460 24 460 26 18446744073709551615 4 name 460 26 460 30 178 1 + 460 31 460 32 65 19 L"' is not defined" 460 33 460 52 18446744073709551615 1 ) 460 52 460 53 62 1 ; 460 53 460 54 18446744073709551615 1 } 461 2 461 3 18446744073709551615 1 } 462 1 462 2 18446744073709551615 4 void 463 1 463 5 18446744073709551615 11 TypeChecker 463 6 463 17 4 2 :: 463 17 463 19 119 5 Visit 463 19 463 24 119 1 ( 463 24 463 25 119 15 BlockExpression 463 25 463 40 187 1 * 463 40 463 41 18446744073709551615 4 node 463 42 463 46 188 1 ) 463 46 463 47 119 1 { 464 1 464 2 18446744073709551615 3 for 465 2 465 5 18446744073709551615 1 ( 465 6 465 7 18446744073709551615 6 ExpPtr 465 7 465 13 82 1 & 465 13 465 14 18446744073709551615 3 exp 465 15 465 18 189 1 : 465 19 465 20 42 4 node 465 21 465 25 188 2 -> 465 25 465 27 18446744073709551615 11 expressions 465 27 465 38 190 1 ) 465 38 465 39 18446744073709551615 1 { 466 2 466 3 18446744073709551615 3 exp 467 3 467 6 189 2 -> 467 6 467 8 58 6 Accept 467 8 467 14 58 1 ( 467 14 467 15 58 4 this 467 15 467 19 18446744073709551615 1 ) 467 19 467 20 58 1 ; 467 20 467 21 18446744073709551615 1 } 468 2 468 3 18446744073709551615 4 node 469 2 469 6 188 2 -> 469 6 469 8 18446744073709551615 4 type 469 8 469 12 59 1 = 469 13 469 14 127 4 Type 469 15 469 19 128 2 :: 469 19 469 21 191 4 Unit 469 21 469 25 191 1 ( 469 25 469 26 191 1 ) 469 26 469 27 191 1 ; 469 27 469 28 18446744073709551615 1 } 470 1 470 2 18446744073709551615 4 void 471 1 471 5 18446744073709551615 11 TypeChecker 471 6 471 17 4 2 :: 471 17 471 19 119 5 Visit 471 19 471 24 119 1 ( 471 24 471 25 119 16 IfThenExpression 471 25 471 41 192 1 * 471 41 471 42 18446744073709551615 4 node 471 43 471 47 193 1 ) 471 47 471 48 119 1 { 472 1 472 2 18446744073709551615 4 node 473 2 473 6 193 2 -> 473 6 473 8 18446744073709551615 9 condition 473 8 473 17 194 2 -> 473 17 473 19 58 6 Accept 473 19 473 25 58 1 ( 473 25 473 26 58 4 this 473 26 473 30 18446744073709551615 1 ) 473 30 473 31 58 1 ; 473 31 473 32 18446744073709551615 2 if 474 2 474 4 18446744073709551615 1 ( 474 5 474 6 18446744073709551615 4 node 474 6 474 10 193 2 -> 474 10 474 12 18446744073709551615 9 condition 474 12 474 21 194 2 -> 474 21 474 23 18446744073709551615 4 type 474 23 474 27 59 1 . 474 27 474 28 151 9 IsBoolean 474 28 474 37 151 1 ( 474 37 474 38 151 1 ) 474 38 474 39 151 1 ) 474 39 474 40 18446744073709551615 1 { 475 2 475 3 18446744073709551615 4 node 476 3 476 7 193 2 -> 476 7 476 9 18446744073709551615 6 ifTrue 476 9 476 15 195 2 -> 476 15 476 17 58 6 Accept 476 17 476 23 58 1 ( 476 23 476 24 58 4 this 476 24 476 28 18446744073709551615 1 ) 476 28 476 29 58 1 ; 476 29 476 30 18446744073709551615 4 node 477 3 477 7 193 2 -> 477 7 477 9 18446744073709551615 4 type 477 9 477 13 59 1 = 477 14 477 15 127 4 Type 477 16 477 20 128 2 :: 477 20 477 22 191 4 Unit 477 22 477 26 191 1 ( 477 26 477 27 191 1 ) 477 27 477 28 191 1 ; 477 28 477 29 18446744073709551615 1 } 478 2 478 3 18446744073709551615 4 else 479 2 479 6 18446744073709551615 1 { 480 2 480 3 18446744073709551615 5 throw 481 3 481 8 18446744073709551615 13 TypeException 481 9 481 22 62 1 ( 481 22 481 23 62 4 node 481 23 481 27 193 2 -> 481 27 481 29 18446744073709551615 4 line 481 29 481 33 63 1 , 481 33 481 34 62 4 node 481 35 481 39 193 2 -> 481 39 481 41 18446744073709551615 6 column 481 41 481 47 64 1 , 481 47 481 48 62 41 L"value cannot be converted to 'Boolean'" 482 8 482 49 18446744073709551615 1 ) 482 49 482 50 62 1 ; 482 50 482 51 18446744073709551615 1 } 483 2 483 3 18446744073709551615 1 } 484 1 484 2 18446744073709551615 4 void 485 1 485 5 18446744073709551615 11 TypeChecker 485 6 485 17 4 2 :: 485 17 485 19 119 5 Visit 485 19 485 24 119 1 ( 485 24 485 25 119 20 IfThenElseExpression 485 25 485 45 196 1 * 485 45 485 46 18446744073709551615 4 node 485 47 485 51 197 1 ) 485 51 485 52 119 1 { 486 1 486 2 18446744073709551615 4 node 487 2 487 6 197 2 -> 487 6 487 8 18446744073709551615 9 condition 487 8 487 17 198 2 -> 487 17 487 19 58 6 Accept 487 19 487 25 58 1 ( 487 25 487 26 58 4 this 487 26 487 30 18446744073709551615 1 ) 487 30 487 31 58 1 ; 487 31 487 32 18446744073709551615 2 if 488 2 488 4 18446744073709551615 1 ( 488 5 488 6 18446744073709551615 4 node 488 6 488 10 197 2 -> 488 10 488 12 18446744073709551615 9 condition 488 12 488 21 198 2 -> 488 21 488 23 18446744073709551615 4 type 488 23 488 27 59 1 . 488 27 488 28 151 9 IsBoolean 488 28 488 37 151 1 ( 488 37 488 38 151 1 ) 488 38 488 39 151 1 ) 488 39 488 40 18446744073709551615 1 { 489 2 489 3 18446744073709551615 4 node 490 3 490 7 197 2 -> 490 7 490 9 18446744073709551615 6 ifTrue 490 9 490 15 199 2 -> 490 15 490 17 58 6 Accept 490 17 490 23 58 1 ( 490 23 490 24 58 4 this 490 24 490 28 18446744073709551615 1 ) 490 28 490 29 58 1 ; 490 29 490 30 18446744073709551615 4 node 491 3 491 7 197 2 -> 491 7 491 9 18446744073709551615 7 ifFalse 491 9 491 16 200 2 -> 491 16 491 18 58 6 Accept 491 18 491 24 58 1 ( 491 24 491 25 58 4 this 491 25 491 29 18446744073709551615 1 ) 491 29 491 30 58 1 ; 491 30 491 31 18446744073709551615 4 node 492 3 492 7 197 2 -> 492 7 492 9 18446744073709551615 4 type 492 9 492 13 59 1 = 492 14 492 15 127 4 Type 492 16 492 20 128 2 :: 492 20 492 22 191 4 Unit 492 22 492 26 191 1 ( 492 26 492 27 191 1 ) 492 27 492 28 191 1 ; 492 28 492 29 18446744073709551615 1 } 493 2 493 3 18446744073709551615 4 else 494 2 494 6 18446744073709551615 1 { 495 2 495 3 18446744073709551615 5 throw 496 3 496 8 18446744073709551615 13 TypeException 496 9 496 22 62 1 ( 496 22 496 23 62 4 node 496 23 496 27 197 2 -> 496 27 496 29 18446744073709551615 4 line 496 29 496 33 63 1 , 496 33 496 34 62 4 node 496 35 496 39 197 2 -> 496 39 496 41 18446744073709551615 6 column 496 41 496 47 64 1 , 496 47 496 48 62 41 L"value cannot be converted to 'Boolean'" 497 8 497 49 18446744073709551615 1 ) 497 49 497 50 62 1 ; 497 50 497 51 18446744073709551615 1 } 498 2 498 3 18446744073709551615 1 } 499 1 499 2 18446744073709551615 4 void 500 1 500 5 18446744073709551615 11 TypeChecker 500 6 500 17 4 2 :: 500 17 500 19 119 5 Visit 500 19 500 24 119 1 ( 500 24 500 25 119 14 CallExpression 500 25 500 39 201 1 * 500 39 500 40 18446744073709551615 4 node 500 41 500 45 202 1 ) 500 45 500 46 119 1 { 501 1 501 2 18446744073709551615 4 node 502 2 502 6 202 2 -> 502 6 502 8 18446744073709551615 8 function 502 8 502 16 203 2 -> 502 16 502 18 58 6 Accept 502 18 502 24 58 1 ( 502 24 502 25 58 4 this 502 25 502 29 18446744073709551615 1 ) 502 29 502 30 58 1 ; 502 30 502 31 18446744073709551615 3 for 503 2 503 5 18446744073709551615 1 ( 503 6 503 7 18446744073709551615 6 ExpPtr 503 7 503 13 82 1 & 503 13 503 14 18446744073709551615 3 arg 503 15 503 18 204 1 : 503 19 503 20 42 4 node 503 21 503 25 202 2 -> 503 25 503 27 18446744073709551615 9 arguments 503 27 503 36 205 1 ) 503 36 503 37 18446744073709551615 1 { 504 2 504 3 18446744073709551615 3 arg 505 3 505 6 204 2 -> 505 6 505 8 58 6 Accept 505 8 505 14 58 1 ( 505 14 505 15 58 4 this 505 15 505 19 18446744073709551615 1 ) 505 19 505 20 58 1 ; 505 20 505 21 18446744073709551615 1 } 506 2 506 3 18446744073709551615 2 if 507 2 507 4 18446744073709551615 1 ( 507 5 507 6 18446744073709551615 4 node 507 6 507 10 202 2 -> 507 10 507 12 18446744073709551615 8 function 507 12 507 20 203 2 -> 507 20 507 22 18446744073709551615 4 type 507 22 507 26 59 1 . 507 26 507 27 206 10 IsFunction 507 27 507 37 206 1 ( 507 37 507 38 206 1 ) 507 38 507 39 206 1 ) 507 39 507 40 18446744073709551615 1 { 508 2 508 3 18446744073709551615 6 vector 509 3 509 9 207 1 < 509 9 509 10 18446744073709551615 4 Type 509 10 509 14 128 1 > 509 14 509 15 18446744073709551615 1 & 509 15 509 16 18446744073709551615 5 types 509 17 509 22 208 1 = 509 23 509 24 18446744073709551615 4 node 509 25 509 29 202 2 -> 509 29 509 31 18446744073709551615 8 function 509 31 509 39 203 2 -> 509 39 509 41 18446744073709551615 4 type 509 41 509 45 59 1 . 509 45 509 46 18446744073709551615 10 parameters 509 46 509 56 209 1 ; 509 56 509 57 18446744073709551615 2 if 510 3 510 5 18446744073709551615 1 ( 510 6 510 7 18446744073709551615 5 types 510 7 510 12 208 1 . 510 12 510 13 210 4 size 510 13 510 17 210 1 ( 510 17 510 18 210 1 ) 510 18 510 19 210 2 == 510 20 510 22 18446744073709551615 4 node 510 23 510 27 202 2 -> 510 27 510 29 18446744073709551615 9 arguments 510 29 510 38 205 1 . 510 38 510 39 210 4 size 510 39 510 43 210 1 ( 510 43 510 44 210 1 ) 510 44 510 45 210 1 + 510 46 510 47 18446744073709551615 1 1 510 48 510 49 18446744073709551615 1 ) 510 49 510 50 18446744073709551615 1 { 511 3 511 4 18446744073709551615 7 int32_t 512 4 512 11 11 1 n 512 12 512 13 211 1 = 512 14 512 15 18446744073709551615 4 node 512 16 512 20 202 2 -> 512 20 512 22 18446744073709551615 9 arguments 512 22 512 31 205 1 . 512 31 512 32 210 4 size 512 32 512 36 210 1 ( 512 36 512 37 210 1 ) 512 37 512 38 210 1 ; 512 38 512 39 18446744073709551615 3 for 513 4 513 7 18446744073709551615 1 ( 513 8 513 9 18446744073709551615 7 int32_t 513 9 513 16 11 1 i 513 17 513 18 212 1 = 513 19 513 20 18446744073709551615 1 0 513 21 513 22 18446744073709551615 1 ; 513 22 513 23 18446744073709551615 1 i 513 24 513 25 212 1 < 513 26 513 27 18446744073709551615 1 n 513 28 513 29 211 1 ; 513 29 513 30 18446744073709551615 1 i 513 31 513 32 212 2 ++ 513 32 513 34 18446744073709551615 1 ) 513 34 513 35 18446744073709551615 1 { 514 4 514 5 18446744073709551615 2 if 515 5 515 7 18446744073709551615 1 ( 515 8 515 9 18446744073709551615 5 types 515 9 515 14 208 1 . 515 14 515 15 213 2 at 515 15 515 17 213 1 ( 515 17 515 18 213 1 i 515 18 515 19 212 1 ) 515 19 515 20 213 2 != 515 21 515 23 60 4 node 515 24 515 28 202 2 -> 515 28 515 30 18446744073709551615 9 arguments 515 30 515 39 205 1 . 515 39 515 40 213 2 at 515 40 515 42 213 1 ( 515 42 515 43 213 1 i 515 43 515 44 212 1 ) 515 44 515 45 213 2 -> 515 45 515 47 18446744073709551615 4 type 515 47 515 51 59 1 ) 515 51 515 52 18446744073709551615 1 { 516 5 516 6 18446744073709551615 5 throw 517 6 517 11 18446744073709551615 13 TypeException 517 12 517 25 62 1 ( 517 25 517 26 62 4 node 517 26 517 30 202 2 -> 517 30 517 32 18446744073709551615 4 line 517 32 517 36 63 1 , 517 36 517 37 62 4 node 517 38 517 42 202 2 -> 517 42 517 44 18446744073709551615 6 column 517 44 517 50 64 1 , 517 50 517 51 62 31 L"argument type does not match" 518 11 518 42 18446744073709551615 1 ) 518 42 518 43 62 1 ; 518 43 518 44 18446744073709551615 1 } 519 5 519 6 18446744073709551615 1 } 520 4 520 5 18446744073709551615 4 node 521 4 521 8 202 2 -> 521 8 521 10 18446744073709551615 4 type 521 10 521 14 59 1 = 521 15 521 16 127 5 types 521 17 521 22 208 1 . 521 22 521 23 214 4 back 521 23 521 27 214 1 ( 521 27 521 28 214 1 ) 521 28 521 29 214 1 ; 521 29 521 30 18446744073709551615 1 } 522 3 522 4 18446744073709551615 4 else 523 3 523 7 18446744073709551615 1 { 524 3 524 4 18446744073709551615 5 throw 525 4 525 9 18446744073709551615 13 TypeException 525 10 525 23 62 1 ( 525 23 525 24 62 4 node 525 24 525 28 202 2 -> 525 28 525 30 18446744073709551615 4 line 525 30 525 34 63 1 , 525 34 525 35 62 4 node 525 36 525 40 202 2 -> 525 40 525 42 18446744073709551615 6 column 525 42 525 48 64 1 , 525 48 525 49 62 32 L"argument count does not match" 526 9 526 41 18446744073709551615 1 ) 526 41 526 42 62 1 ; 526 42 526 43 18446744073709551615 1 } 527 3 527 4 18446744073709551615 1 } 528 2 528 3 18446744073709551615 4 else 529 2 529 6 18446744073709551615 1 { 530 2 530 3 18446744073709551615 5 throw 531 3 531 8 18446744073709551615 13 TypeException 531 9 531 22 62 1 ( 531 22 531 23 62 4 node 531 23 531 27 202 2 -> 531 27 531 29 18446744073709551615 4 line 531 29 531 33 63 1 , 531 33 531 34 62 4 node 531 35 531 39 202 2 -> 531 39 531 41 18446744073709551615 6 column 531 41 531 47 64 1 , 531 47 531 48 62 36 L"object cannot be used as function" 532 8 532 44 18446744073709551615 1 ) 532 44 532 45 62 1 ; 532 45 532 46 18446744073709551615 1 } 533 2 533 3 18446744073709551615 1 } 534 1 534 2 18446744073709551615 4 void 535 1 535 5 18446744073709551615 11 TypeChecker 535 6 535 17 4 2 :: 535 17 535 19 119 5 Visit 535 19 535 24 119 1 ( 535 24 535 25 119 18 VariableExpression 535 25 535 43 215 1 * 535 43 535 44 18446744073709551615 4 node 535 45 535 49 216 1 ) 535 49 535 50 119 1 { 536 1 536 2 18446744073709551615 2 if 537 2 537 4 18446744073709551615 1 ( 537 5 537 6 18446744073709551615 5 scope 537 6 537 11 10 2 -> 537 11 537 13 177 8 Contains 537 13 537 21 177 1 ( 537 21 537 22 177 4 node 537 22 537 26 216 2 -> 537 26 537 28 18446744073709551615 4 name 537 28 537 32 217 1 ) 537 32 537 33 177 1 ) 537 33 537 34 18446744073709551615 1 { 538 2 538 3 18446744073709551615 3 any 539 3 539 6 122 5 value 539 7 539 12 218 1 = 539 13 539 14 18446744073709551615 5 scope 539 15 539 20 10 2 -> 539 20 539 22 180 3 Get 539 22 539 25 180 1 ( 539 25 539 26 180 4 node 539 26 539 30 216 2 -> 539 30 539 32 18446744073709551615 4 name 539 32 539 36 217 1 ) 539 36 539 37 180 1 ; 539 37 539 38 18446744073709551615 2 if 540 3 540 5 18446744073709551615 1 ( 540 6 540 7 18446744073709551615 5 value 540 7 540 12 218 1 . 540 12 540 13 125 4 type 540 13 540 17 125 1 ( 540 17 540 18 125 1 ) 540 18 540 19 125 2 == 540 20 540 22 126 6 typeid 540 23 540 29 18446744073709551615 1 ( 540 29 540 30 18446744073709551615 13 LocalVariable 540 30 540 43 76 1 ) 540 43 540 44 18446744073709551615 1 ) 540 44 540 45 18446744073709551615 1 { 541 3 541 4 18446744073709551615 13 LocalVariable 542 4 542 17 76 8 variable 542 18 542 26 219 1 = 542 27 542 28 18446744073709551615 8 any_cast 542 29 542 37 182 1 < 542 37 542 38 182 13 LocalVariable 542 38 542 51 76 1 > 542 51 542 52 182 1 ( 542 52 542 53 182 5 value 542 53 542 58 218 1 ) 542 58 542 59 182 1 ; 542 59 542 60 18446744073709551615 4 node 543 4 543 8 216 2 -> 543 8 543 10 18446744073709551615 4 type 543 10 543 14 59 1 = 543 15 543 16 127 8 variable 543 17 543 25 219 1 . 543 25 543 26 18446744073709551615 4 type 543 26 543 30 183 1 ; 543 30 543 31 18446744073709551615 4 node 544 4 544 8 216 2 -> 544 8 544 10 18446744073709551615 8 location 544 10 544 18 220 1 = 544 19 544 20 97 8 variable 544 21 544 29 219 1 . 544 29 544 30 18446744073709551615 8 location 544 30 544 38 107 1 ; 544 38 544 39 18446744073709551615 1 } 545 3 545 4 18446744073709551615 4 else 546 3 546 7 18446744073709551615 2 if 546 8 546 10 18446744073709551615 1 ( 546 11 546 12 18446744073709551615 5 value 546 12 546 17 218 1 . 546 17 546 18 125 4 type 546 18 546 22 125 1 ( 546 22 546 23 125 1 ) 546 23 546 24 125 2 == 546 25 546 27 126 6 typeid 546 28 546 34 18446744073709551615 1 ( 546 34 546 35 18446744073709551615 9 Parameter 546 35 546 44 71 1 ) 546 44 546 45 18446744073709551615 1 ) 546 45 546 46 18446744073709551615 1 { 547 3 547 4 18446744073709551615 9 Parameter 548 4 548 13 71 9 parameter 548 14 548 23 221 1 = 548 24 548 25 18446744073709551615 8 any_cast 548 26 548 34 182 1 < 548 34 548 35 182 9 Parameter 548 35 548 44 71 1 > 548 44 548 45 182 1 ( 548 45 548 46 182 5 value 548 46 548 51 218 1 ) 548 51 548 52 182 1 ; 548 52 548 53 18446744073709551615 4 node 549 4 549 8 216 2 -> 549 8 549 10 18446744073709551615 4 type 549 10 549 14 59 1 = 549 15 549 16 127 9 parameter 549 17 549 26 221 1 . 549 26 549 27 18446744073709551615 4 type 549 27 549 31 222 1 ; 549 31 549 32 18446744073709551615 4 node 550 4 550 8 216 2 -> 550 8 550 10 18446744073709551615 8 location 550 10 550 18 220 1 = 550 19 550 20 97 9 parameter 550 21 550 30 221 1 . 550 30 550 31 18446744073709551615 8 location 550 31 550 39 105 1 ; 550 39 550 40 18446744073709551615 1 } 551 3 551 4 18446744073709551615 4 else 552 3 552 7 18446744073709551615 2 if 552 8 552 10 18446744073709551615 1 ( 552 11 552 12 18446744073709551615 5 value 552 12 552 17 218 1 . 552 17 552 18 125 4 type 552 18 552 22 125 1 ( 552 22 552 23 125 1 ) 552 23 552 24 125 2 == 552 25 552 27 126 6 typeid 552 28 552 34 18446744073709551615 1 ( 552 34 552 35 18446744073709551615 5 Field 552 35 552 40 55 1 ) 552 40 552 41 18446744073709551615 1 ) 552 41 552 42 18446744073709551615 1 { 553 3 553 4 18446744073709551615 5 Field 554 4 554 9 55 5 field 554 10 554 15 223 1 = 554 16 554 17 18446744073709551615 8 any_cast 554 18 554 26 182 1 < 554 26 554 27 182 5 Field 554 27 554 32 55 1 > 554 32 554 33 182 1 ( 554 33 554 34 182 5 value 554 34 554 39 218 1 ) 554 39 554 40 182 1 ; 554 40 554 41 18446744073709551615 4 node 555 4 555 8 216 2 -> 555 8 555 10 18446744073709551615 4 type 555 10 555 14 59 1 = 555 15 555 16 127 5 field 555 17 555 22 223 1 . 555 22 555 23 18446744073709551615 4 type 555 23 555 27 61 1 ; 555 27 555 28 18446744073709551615 4 node 556 4 556 8 216 2 -> 556 8 556 10 18446744073709551615 8 location 556 10 556 18 220 1 = 556 19 556 20 97 5 field 556 21 556 26 223 1 . 556 26 556 27 18446744073709551615 8 location 556 27 556 35 96 1 ; 556 35 556 36 18446744073709551615 1 } 557 3 557 4 18446744073709551615 4 else 558 3 558 7 18446744073709551615 2 if 558 8 558 10 18446744073709551615 1 ( 558 11 558 12 18446744073709551615 5 value 558 12 558 17 218 1 . 558 17 558 18 125 4 type 558 18 558 22 125 1 ( 558 22 558 23 125 1 ) 558 23 558 24 125 2 == 558 25 558 27 126 6 typeid 558 28 558 34 18446744073709551615 1 ( 558 34 558 35 18446744073709551615 8 Function 558 35 558 43 67 1 ) 558 43 558 44 18446744073709551615 1 ) 558 44 558 45 18446744073709551615 1 { 559 3 559 4 18446744073709551615 8 Function 560 4 560 12 67 8 function 560 13 560 21 224 1 = 560 22 560 23 18446744073709551615 8 any_cast 560 24 560 32 182 1 < 560 32 560 33 182 8 Function 560 33 560 41 67 1 > 560 41 560 42 182 1 ( 560 42 560 43 182 5 value 560 43 560 48 218 1 ) 560 48 560 49 182 1 ; 560 49 560 50 18446744073709551615 4 node 561 4 561 8 216 2 -> 561 8 561 10 18446744073709551615 4 type 561 10 561 14 59 1 = 561 15 561 16 127 8 function 561 17 561 25 224 1 . 561 25 561 26 18446744073709551615 12 functionType 561 26 561 38 225 1 ; 561 38 561 39 18446744073709551615 4 node 562 4 562 8 216 2 -> 562 8 562 10 18446744073709551615 8 location 562 10 562 18 220 1 = 562 19 562 20 97 8 function 562 21 562 29 224 1 . 562 29 562 30 18446744073709551615 8 location 562 30 562 38 101 1 ; 562 38 562 39 18446744073709551615 1 } 563 3 563 4 18446744073709551615 4 else 564 3 564 7 18446744073709551615 2 if 564 8 564 10 18446744073709551615 1 ( 564 11 564 12 18446744073709551615 5 value 564 12 564 17 218 1 . 564 17 564 18 125 4 type 564 18 564 22 125 1 ( 564 22 564 23 125 1 ) 564 23 564 24 125 2 == 564 25 564 27 126 6 typeid 564 28 564 34 18446744073709551615 1 ( 564 34 564 35 18446744073709551615 6 Module 564 35 564 41 30 1 ) 564 41 564 42 18446744073709551615 1 ) 564 42 564 43 18446744073709551615 1 { 565 3 565 4 18446744073709551615 4 node 566 4 566 8 216 2 -> 566 8 566 10 18446744073709551615 4 type 566 10 566 14 59 1 = 566 15 566 16 127 8 any_cast 566 17 566 25 182 1 < 566 25 566 26 182 6 Module 566 26 566 32 30 1 > 566 32 566 33 182 1 ( 566 33 566 34 182 5 value 566 34 566 39 218 1 ) 566 39 566 40 182 1 . 566 40 566 41 18446744073709551615 4 type 566 41 566 45 91 1 ; 566 45 566 46 18446744073709551615 1 } 567 3 567 4 18446744073709551615 4 else 568 3 568 7 18446744073709551615 2 if 568 8 568 10 18446744073709551615 1 ( 568 11 568 12 18446744073709551615 5 value 568 12 568 17 218 1 . 568 17 568 18 125 4 type 568 18 568 22 125 1 ( 568 22 568 23 125 1 ) 568 23 568 24 125 2 == 568 25 568 27 126 6 typeid 568 28 568 34 18446744073709551615 1 ( 568 34 568 35 18446744073709551615 5 Class 568 35 568 40 35 1 ) 568 40 568 41 18446744073709551615 1 ) 568 41 568 42 18446744073709551615 1 { 569 3 569 4 18446744073709551615 4 node 570 4 570 8 216 2 -> 570 8 570 10 18446744073709551615 4 type 570 10 570 14 59 1 = 570 15 570 16 127 8 any_cast 570 17 570 25 182 1 < 570 25 570 26 182 5 Class 570 26 570 31 35 1 > 570 31 570 32 182 1 ( 570 32 570 33 182 5 value 570 33 570 38 218 1 ) 570 38 570 39 182 1 . 570 39 570 40 18446744073709551615 4 type 570 40 570 44 111 1 ; 570 44 570 45 18446744073709551615 1 } 571 3 571 4 18446744073709551615 4 else 572 3 572 7 18446744073709551615 1 { 573 3 573 4 18446744073709551615 5 throw 574 4 574 9 18446744073709551615 7 wstring 574 10 574 17 136 1 ( 574 17 574 18 138 21 L"not supported type" 574 18 574 39 18446744073709551615 1 ) 574 39 574 40 138 1 ; 574 40 574 41 18446744073709551615 1 } 575 3 575 4 18446744073709551615 1 } 576 2 576 3 18446744073709551615 4 else 577 2 577 6 18446744073709551615 1 { 578 2 578 3 18446744073709551615 5 throw 579 3 579 8 18446744073709551615 13 TypeException 579 9 579 22 62 1 ( 579 22 579 23 62 4 node 579 23 579 27 216 2 -> 579 27 579 29 18446744073709551615 4 line 579 29 579 33 63 1 , 579 33 579 34 62 4 node 579 35 579 39 216 2 -> 579 39 579 41 18446744073709551615 6 column 579 41 579 47 64 1 , 579 47 579 48 62 9 L"name '" 580 8 580 17 18446744073709551615 1 + 580 18 580 19 65 4 node 580 20 580 24 216 2 -> 580 24 580 26 18446744073709551615 4 name 580 26 580 30 217 1 + 580 31 580 32 65 19 L"' is not defined" 580 33 580 52 18446744073709551615 1 ) 580 52 580 53 62 1 ; 580 53 580 54 18446744073709551615 1 } 581 2 581 3 18446744073709551615 1 } 582 1 582 2 18446744073709551615 4 void 583 1 583 5 18446744073709551615 11 TypeChecker 583 6 583 17 4 2 :: 583 17 583 19 119 5 Visit 583 19 583 24 119 1 ( 583 24 583 25 119 16 ReturnExpression 583 25 583 41 226 1 * 583 41 583 42 18446744073709551615 4 node 583 43 583 47 227 1 ) 583 47 583 48 119 1 { 584 1 584 2 18446744073709551615 4 node 585 2 585 6 227 2 -> 585 6 585 8 18446744073709551615 5 value 585 8 585 13 228 2 -> 585 13 585 15 58 6 Accept 585 15 585 21 58 1 ( 585 21 585 22 58 4 this 585 22 585 26 18446744073709551615 1 ) 585 26 585 27 58 1 ; 585 27 585 28 18446744073709551615 4 node 586 2 586 6 227 2 -> 586 6 586 8 18446744073709551615 4 type 586 8 586 12 59 1 = 586 13 586 14 127 4 node 586 15 586 19 227 2 -> 586 19 586 21 18446744073709551615 5 value 586 21 586 26 228 2 -> 586 26 586 28 18446744073709551615 4 type 586 28 586 32 59 1 ; 586 32 586 33 18446744073709551615 1 } 587 1 587 2 18446744073709551615 4 void 588 1 588 5 18446744073709551615 11 TypeChecker 588 6 588 17 4 2 :: 588 17 588 19 119 5 Visit 588 19 588 24 119 1 ( 588 24 588 25 119 15 WhileExpression 588 25 588 40 229 1 * 588 40 588 41 18446744073709551615 4 node 588 42 588 46 230 1 ) 588 46 588 47 119 1 { 589 1 589 2 18446744073709551615 4 node 590 2 590 6 230 2 -> 590 6 590 8 18446744073709551615 9 condition 590 8 590 17 231 2 -> 590 17 590 19 58 6 Accept 590 19 590 25 58 1 ( 590 25 590 26 58 4 this 590 26 590 30 18446744073709551615 1 ) 590 30 590 31 58 1 ; 590 31 590 32 18446744073709551615 2 if 591 2 591 4 18446744073709551615 1 ( 591 5 591 6 18446744073709551615 4 node 591 6 591 10 230 2 -> 591 10 591 12 18446744073709551615 9 condition 591 12 591 21 231 2 -> 591 21 591 23 18446744073709551615 4 type 591 23 591 27 59 1 . 591 27 591 28 151 9 IsBoolean 591 28 591 37 151 1 ( 591 37 591 38 151 1 ) 591 38 591 39 151 1 ) 591 39 591 40 18446744073709551615 1 { 592 2 592 3 18446744073709551615 4 node 593 3 593 7 230 2 -> 593 7 593 9 18446744073709551615 4 body 593 9 593 13 232 2 -> 593 13 593 15 58 6 Accept 593 15 593 21 58 1 ( 593 21 593 22 58 4 this 593 22 593 26 18446744073709551615 1 ) 593 26 593 27 58 1 ; 593 27 593 28 18446744073709551615 4 node 594 3 594 7 230 2 -> 594 7 594 9 18446744073709551615 4 type 594 9 594 13 59 1 = 594 14 594 15 127 4 Type 594 16 594 20 128 2 :: 594 20 594 22 191 4 Unit 594 22 594 26 191 1 ( 594 26 594 27 191 1 ) 594 27 594 28 191 1 ; 594 28 594 29 18446744073709551615 1 } 595 2 595 3 18446744073709551615 4 else 596 2 596 6 18446744073709551615 1 { 597 2 597 3 18446744073709551615 5 throw 598 3 598 8 18446744073709551615 13 TypeException 598 9 598 22 62 1 ( 598 22 598 23 62 4 node 598 23 598 27 230 2 -> 598 27 598 29 18446744073709551615 4 line 598 29 598 33 63 1 , 598 33 598 34 62 4 node 598 35 598 39 230 2 -> 598 39 598 41 18446744073709551615 6 column 598 41 598 47 64 1 , 598 47 598 48 62 41 L"value cannot be converted to 'Boolean'" 599 8 599 49 18446744073709551615 1 ) 599 49 599 50 62 1 ; 599 50 599 51 18446744073709551615 1 } 600 2 600 3 18446744073709551615 1 } 601 1 601 2 18446744073709551615 4 void 602 1 602 5 18446744073709551615 11 TypeChecker 602 6 602 17 4 2 :: 602 17 602 19 119 5 Visit 602 19 602 24 119 1 ( 602 24 602 25 119 13 DotExpression 602 25 602 38 233 1 * 602 38 602 39 18446744073709551615 4 node 602 40 602 44 234 1 ) 602 44 602 45 119 1 { 603 1 603 2 18446744073709551615 4 node 604 2 604 6 234 2 -> 604 6 604 8 18446744073709551615 6 object 604 8 604 14 235 2 -> 604 14 604 16 58 6 Accept 604 16 604 22 58 1 ( 604 22 604 23 58 4 this 604 23 604 27 18446744073709551615 1 ) 604 27 604 28 58 1 ; 604 28 604 29 18446744073709551615 4 Type 605 2 605 6 128 1 & 605 6 605 7 18446744073709551615 7 objType 605 8 605 15 236 1 = 605 16 605 17 18446744073709551615 4 node 605 18 605 22 234 2 -> 605 22 605 24 18446744073709551615 6 object 605 24 605 30 235 2 -> 605 30 605 32 18446744073709551615 4 type 605 32 605 36 59 1 ; 605 36 605 37 18446744073709551615 2 if 606 2 606 4 18446744073709551615 1 ( 606 5 606 6 18446744073709551615 7 objType 606 6 606 13 236 1 . 606 13 606 14 237 8 IsModule 606 14 606 22 237 1 ( 606 22 606 23 237 1 ) 606 23 606 24 237 1 ) 606 24 606 25 18446744073709551615 1 { 607 2 607 3 18446744073709551615 6 Module 608 3 608 9 30 10 moduleInfo 608 10 608 20 238 1 = 608 21 608 22 18446744073709551615 8 any_cast 608 23 608 31 182 1 < 608 31 608 32 182 6 Module 608 32 608 38 30 1 > 608 38 608 39 182 1 ( 608 39 608 40 182 5 scope 608 40 608 45 10 2 -> 608 45 608 47 180 3 Get 608 47 608 50 180 1 ( 608 50 608 51 180 7 objType 608 51 608 58 236 1 . 608 58 608 59 18446744073709551615 4 name 608 59 608 63 92 1 ) 608 63 608 64 180 1 ) 608 64 608 65 182 1 ; 608 65 608 66 18446744073709551615 2 if 609 3 609 5 18446744073709551615 1 ( 609 6 609 7 18446744073709551615 10 moduleInfo 609 7 609 17 238 1 . 609 17 609 18 18446744073709551615 8 fieldMap 609 18 609 26 239 1 . 609 26 609 27 240 4 find 609 27 609 31 240 1 ( 609 31 609 32 240 4 node 609 32 609 36 234 2 -> 609 36 609 38 18446744073709551615 4 name 609 38 609 42 241 1 ) 609 42 609 43 240 2 != 609 44 609 46 242 10 moduleInfo 609 47 609 57 238 1 . 609 57 609 58 18446744073709551615 8 fieldMap 609 58 609 66 239 1 . 609 66 609 67 243 3 end 609 67 609 70 243 1 ( 609 70 609 71 243 1 ) 609 71 609 72 243 1 ) 609 72 609 73 18446744073709551615 1 { 610 3 610 4 18446744073709551615 4 node 611 4 611 8 234 2 -> 611 8 611 10 18446744073709551615 4 type 611 10 611 14 59 1 = 611 15 611 16 127 10 moduleInfo 611 17 611 27 238 1 . 611 27 611 28 18446744073709551615 8 fieldMap 611 28 611 36 239 1 [ 611 36 611 37 244 4 node 611 37 611 41 234 2 -> 611 41 611 43 18446744073709551615 4 name 611 43 611 47 241 1 ] 611 47 611 48 244 1 . 611 48 611 49 18446744073709551615 4 type 611 49 611 53 61 1 ; 611 53 611 54 18446744073709551615 1 } 612 3 612 4 18446744073709551615 4 else 613 3 613 7 18446744073709551615 2 if 613 8 613 10 18446744073709551615 1 ( 613 11 613 12 18446744073709551615 10 moduleInfo 613 12 613 22 238 1 . 613 22 613 23 18446744073709551615 11 functionMap 613 23 613 34 245 1 . 613 34 613 35 240 4 find 613 35 613 39 240 1 ( 613 39 613 40 240 4 node 613 40 613 44 234 2 -> 613 44 613 46 18446744073709551615 4 name 613 46 613 50 241 1 ) 613 50 613 51 240 2 != 613 52 613 54 242 10 moduleInfo 614 6 614 16 238 1 . 614 16 614 17 18446744073709551615 11 functionMap 614 17 614 28 245 1 . 614 28 614 29 243 3 end 614 29 614 32 243 1 ( 614 32 614 33 243 1 ) 614 33 614 34 243 1 ) 614 34 614 35 18446744073709551615 1 { 615 3 615 4 18446744073709551615 4 node 616 4 616 8 234 2 -> 616 8 616 10 18446744073709551615 4 type 616 10 616 14 59 1 = 616 15 616 16 127 10 moduleInfo 616 17 616 27 238 1 . 616 27 616 28 18446744073709551615 11 functionMap 616 28 616 39 245 1 [ 616 39 616 40 244 4 node 616 40 616 44 234 2 -> 616 44 616 46 18446744073709551615 4 name 616 46 616 50 241 1 ] 616 50 616 51 244 1 . 616 51 616 52 18446744073709551615 12 functionType 616 52 616 64 225 1 ; 616 64 616 65 18446744073709551615 1 } 617 3 617 4 18446744073709551615 4 else 618 3 618 7 18446744073709551615 1 { 619 3 619 4 18446744073709551615 5 throw 620 4 620 9 18446744073709551615 13 TypeException 620 10 620 23 62 1 ( 620 23 620 24 62 4 node 620 24 620 28 234 2 -> 620 28 620 30 18446744073709551615 4 line 620 30 620 34 63 1 , 620 34 620 35 62 4 node 620 36 620 40 234 2 -> 620 40 620 42 18446744073709551615 6 column 620 42 620 48 64 1 , 620 48 620 49 62 20 L"field not defined" 620 50 620 70 18446744073709551615 1 ) 620 70 620 71 62 1 ; 620 71 620 72 18446744073709551615 1 } 621 3 621 4 18446744073709551615 1 } 622 2 622 3 18446744073709551615 4 else 623 2 623 6 18446744073709551615 2 if 623 7 623 9 18446744073709551615 1 ( 623 10 623 11 18446744073709551615 7 objType 623 11 623 18 236 1 . 623 18 623 19 246 7 IsClass 623 19 623 26 246 1 ( 623 26 623 27 246 1 ) 623 27 623 28 246 1 ) 623 28 623 29 18446744073709551615 1 { 624 2 624 3 18446744073709551615 5 Class 625 3 625 8 35 9 classInfo 625 9 625 18 247 1 = 625 19 625 20 18446744073709551615 8 any_cast 625 21 625 29 182 1 < 625 29 625 30 182 5 Class 625 30 625 35 35 1 > 625 35 625 36 182 1 ( 625 36 625 37 182 5 scope 625 37 625 42 10 2 -> 625 42 625 44 180 3 Get 625 44 625 47 180 1 ( 625 47 625 48 180 7 objType 625 48 625 55 236 1 . 625 55 625 56 18446744073709551615 4 name 625 56 625 60 92 1 ) 625 60 625 61 180 1 ) 625 61 625 62 182 1 ; 625 62 625 63 18446744073709551615 2 if 626 3 626 5 18446744073709551615 1 ( 626 6 626 7 18446744073709551615 9 classInfo 626 7 626 16 247 1 . 626 16 626 17 18446744073709551615 8 fieldMap 626 17 626 25 248 1 . 626 25 626 26 240 4 find 626 26 626 30 240 1 ( 626 30 626 31 240 4 node 626 31 626 35 234 2 -> 626 35 626 37 18446744073709551615 4 name 626 37 626 41 241 1 ) 626 41 626 42 240 2 != 626 43 626 45 242 9 classInfo 626 46 626 55 247 1 . 626 55 626 56 18446744073709551615 8 fieldMap 626 56 626 64 248 1 . 626 64 626 65 243 3 end 626 65 626 68 243 1 ( 626 68 626 69 243 1 ) 626 69 626 70 243 1 ) 626 70 626 71 18446744073709551615 1 { 627 3 627 4 18446744073709551615 4 node 628 4 628 8 234 2 -> 628 8 628 10 18446744073709551615 4 type 628 10 628 14 59 1 = 628 15 628 16 127 9 classInfo 628 17 628 26 247 1 . 628 26 628 27 18446744073709551615 8 fieldMap 628 27 628 35 248 1 [ 628 35 628 36 244 4 node 628 36 628 40 234 2 -> 628 40 628 42 18446744073709551615 4 name 628 42 628 46 241 1 ] 628 46 628 47 244 1 . 628 47 628 48 18446744073709551615 4 type 628 48 628 52 61 1 ; 628 52 628 53 18446744073709551615 1 } 629 3 629 4 18446744073709551615 4 else 630 3 630 7 18446744073709551615 2 if 630 8 630 10 18446744073709551615 1 ( 630 11 630 12 18446744073709551615 9 classInfo 630 12 630 21 247 1 . 630 21 630 22 18446744073709551615 11 functionMap 630 22 630 33 249 1 . 630 33 630 34 240 4 find 630 34 630 38 240 1 ( 630 38 630 39 240 4 node 630 39 630 43 234 2 -> 630 43 630 45 18446744073709551615 4 name 630 45 630 49 241 1 ) 630 49 630 50 240 2 != 630 51 630 53 242 9 classInfo 631 6 631 15 247 1 . 631 15 631 16 18446744073709551615 11 functionMap 631 16 631 27 249 1 . 631 27 631 28 243 3 end 631 28 631 31 243 1 ( 631 31 631 32 243 1 ) 631 32 631 33 243 1 ) 631 33 631 34 18446744073709551615 1 { 632 3 632 4 18446744073709551615 4 node 633 4 633 8 234 2 -> 633 8 633 10 18446744073709551615 4 type 633 10 633 14 59 1 = 633 15 633 16 127 9 classInfo 633 17 633 26 247 1 . 633 26 633 27 18446744073709551615 11 functionMap 633 27 633 38 249 1 [ 633 38 633 39 244 4 node 633 39 633 43 234 2 -> 633 43 633 45 18446744073709551615 4 name 633 45 633 49 241 1 ] 633 49 633 50 244 1 . 633 50 633 51 18446744073709551615 12 functionType 633 51 633 63 225 1 ; 633 63 633 64 18446744073709551615 1 } 634 3 634 4 18446744073709551615 4 else 635 3 635 7 18446744073709551615 1 { 636 3 636 4 18446744073709551615 5 throw 637 4 637 9 18446744073709551615 13 TypeException 637 10 637 23 62 1 ( 637 23 637 24 62 4 node 637 24 637 28 234 2 -> 637 28 637 30 18446744073709551615 4 line 637 30 637 34 63 1 , 637 34 637 35 62 4 node 637 36 637 40 234 2 -> 637 40 637 42 18446744073709551615 6 column 637 42 637 48 64 1 , 637 48 637 49 62 20 L"field not defined" 637 50 637 70 18446744073709551615 1 ) 637 70 637 71 62 1 ; 637 71 637 72 18446744073709551615 1 } 638 3 638 4 18446744073709551615 1 } 639 2 639 3 18446744073709551615 4 else 640 2 640 6 18446744073709551615 1 { 641 2 641 3 18446744073709551615 5 throw 642 3 642 8 18446744073709551615 13 TypeException 642 9 642 22 62 1 ( 642 22 642 23 62 4 node 642 23 642 27 234 2 -> 642 27 642 29 18446744073709551615 4 line 642 29 642 33 63 1 , 642 33 642 34 62 4 node 642 35 642 39 234 2 -> 642 39 642 41 18446744073709551615 6 column 642 41 642 47 64 1 , 642 47 642 48 62 13 L"error type" 642 49 642 62 18446744073709551615 1 ) 642 62 642 63 62 1 ; 642 63 642 64 18446744073709551615 1 } 643 2 643 3 18446744073709551615 1 } 644 1 644 2 18446744073709551615 0 0 250 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 11 TypeChecker 4 1 3 0 15 NamespaceRecord 10 1 3 0 76 8:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 nsRecord:TypeChecker 4 1 3 0 5 Scope 9 1 3 0 76 11:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 scope:TypeChecker 20 1 3 0 7 int32_t 9 1 3 0 77 13:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 14:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 15:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 76 17:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 19 Collect:TypeChecker 9 1 3 0 77 20:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 22:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 17 Check:TypeChecker 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 77 26:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 28:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 29:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 31:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 77 33:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 23 CheckModule:TypeChecker 9 1 3 0 77 36:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 77 38:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 22 CheckClass:TypeChecker 10 1 3 0 77 43:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 45:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 46:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 48:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 21 1 3 0 22 CheckField:TypeChecker 9 1 3 0 77 52:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 16 functions:Module 21 1 3 0 25 CheckFunction:TypeChecker 10 1 3 0 77 58:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 60:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 61:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 63:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 12 fields:Class 9 1 3 0 77 67:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 functions:Class 4 1 3 0 5 Field 10 1 3 0 77 73:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 6 1 3 0 15 type:Expression 8 1 3 0 10 operator!= 6 1 3 0 10 type:Field 4 1 3 0 13 TypeException 6 1 3 0 15 line:Expression 6 1 3 0 17 column:Expression 8 1 3 0 13 operator+:std 8 1 3 0 12 TypeToString 4 1 3 0 8 Function 10 1 3 0 77 84:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 86:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 76 87:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 9 Parameter 9 1 3 0 77 89:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 parameters:Function 21 1 3 0 9 Put:Scope 6 1 3 0 14 name:Parameter 4 1 3 0 13 LocalVariable 9 1 3 0 77 93:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 18 variables:Function 6 1 3 0 18 name:LocalVariable 9 1 3 0 77 97:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 19 value:LocalVariable 36 1 3 0 6 ExpPtr 9 1 3 0 78 101:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 expressions:Function 10 1 3 0 78 107:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 10 1 3 0 78 107:64:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 10 1 3 0 78 108:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 110:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 112:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 12 index:Module 6 1 3 0 11 type:Module 6 1 3 0 9 name:Type 9 1 3 0 78 116:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 117:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 118:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 location:Field 21 1 3 0 18 operator=:Location 4 1 3 0 8 Location 6 1 3 0 10 name:Field 9 1 3 0 78 124:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 17 location:Function 6 1 3 0 13 name:Function 9 1 3 0 78 129:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 130:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 18 location:Parameter 9 1 3 0 78 135:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 location:LocalVariable 9 1 3 0 78 142:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 144:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 11 index:Class 6 1 3 0 10 type:Class 9 1 3 0 78 148:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 149:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 150:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 156:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 161:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 162:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 167:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 2 3 0 24 Visit:Visitor:Expression 17 Visit:TypeChecker 4 1 3 0 18 ConstantExpression 10 1 3 0 78 175:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 7 any:std 9 1 3 0 77 177:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 21 1 3 0 14 operator=:Type 4 1 3 0 4 Type 21 1 3 0 8 Int:Type 20 1 3 0 7 int64_t 21 1 3 0 9 Long:Type 21 1 3 0 10 Float:Type 21 1 3 0 11 Double:Type 21 1 3 0 9 Char:Type 21 1 3 0 12 Boolean:Type 20 1 3 0 19 wstring:__cxx11:std 21 1 3 0 11 String:Type 24 1 3 0 24 basic_string:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 78 211:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 21 1 3 0 10 IsInt:Type 21 1 3 0 11 IsLong:Type 21 1 3 0 12 IsFloat:Type 21 1 3 0 13 IsDouble:Type 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 18 Not:ExpressionKind 21 1 3 0 14 IsBoolean:Type 4 1 3 0 16 BinaryExpression 10 1 3 0 78 263:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 9 1 3 0 77 267:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 268:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 269:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 18 And:ExpressionKind 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 23 NotEqual:ExpressionKind 21 1 3 0 11 IsChar:Type 21 1 3 0 13 IsString:Type 4 1 3 0 16 AssignExpression 10 1 3 0 78 410:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:AssignExpression 21 1 3 0 14 Contains:Scope 6 1 3 0 21 name:AssignExpression 9 1 3 0 77 415:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 9 Get:Scope 9 1 3 0 78 418:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 8 1 3 0 12 any_cast:std 6 1 3 0 18 type:LocalVariable 8 1 3 0 10 operator== 6 1 3 0 25 location:AssignExpression 9 1 3 0 78 435:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 15 BlockExpression 10 1 3 0 78 463:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 465:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 expressions:BlockExpression 21 1 3 0 9 Unit:Type 4 1 3 0 16 IfThenExpression 10 1 3 0 78 471:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 78 485:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 14 CallExpression 10 1 3 0 78 500:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 78 503:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 arguments:CallExpression 21 1 3 0 15 IsFunction:Type 31 1 3 0 10 vector:std 9 1 3 0 78 509:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 parameters:Type 21 1 3 0 15 size:vector:std 9 1 3 0 78 512:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 513:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 at:vector:std 21 1 3 0 15 back:vector:std 4 1 3 0 18 VariableExpression 10 1 3 0 78 535:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 name:VariableExpression 9 1 3 0 77 539:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 542:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 location:VariableExpression 9 1 3 0 78 548:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 type:Parameter 9 1 3 0 78 554:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 560:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 functionType:Function 4 1 3 0 16 ReturnExpression 10 1 3 0 78 583:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 78 588:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 4 1 3 0 13 DotExpression 10 1 3 0 78 602:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 20 object:DotExpression 9 1 3 0 77 605:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 IsModule:Type 9 1 3 0 78 608:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 fieldMap:Module 21 1 3 0 22 find:unordered_map:std 6 1 3 0 18 name:DotExpression 8 1 3 0 23 operator!=:__detail:std 21 1 3 0 21 end:unordered_map:std 21 1 3 0 28 operator[]:unordered_map:std 6 1 3 0 18 functionMap:Module 21 1 3 0 12 IsClass:Type 9 1 3 0 77 625:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 14 fieldMap:Class 6 1 3 0 17 functionMap:Class 0 0 8 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1530931711 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530932060 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1530931928 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530932187 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1530610472 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 1530953757 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1530931203
22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 2306 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 17 "TypeChecker.hpp" 1 10 1 27 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 1 < 3 10 3 11 18446744073709551615 8 iostream 3 11 3 19 18446744073709551615 1 > 3 19 3 20 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 8 any_cast 4 12 4 20 1 1 ; 4 20 4 21 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 4 endl 5 12 5 16 2 1 ; 5 16 5 17 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 5 wcout 6 12 6 17 3 1 ; 6 17 6 18 18446744073709551615 11 TypeChecker 7 1 7 12 4 2 :: 7 12 7 14 4 11 TypeChecker 7 14 7 25 4 1 ( 7 25 7 26 4 1 ) 7 26 7 27 4 1 : 8 2 8 3 4 6 global 8 4 8 10 5 1 ( 8 10 8 11 6 1 ) 8 11 8 12 6 1 , 9 2 9 3 4 7 current 9 4 9 11 7 1 { 9 11 9 12 18446744073709551615 1 & 9 12 9 13 18446744073709551615 6 global 9 13 9 19 5 1 } 9 19 9 20 18446744073709551615 1 { 10 1 10 2 18446744073709551615 1 } 11 1 11 2 18446744073709551615 4 void 12 1 12 5 18446744073709551615 11 TypeChecker 12 6 12 17 4 2 :: 12 17 12 19 8 5 Visit 12 19 12 24 8 1 ( 12 24 12 25 8 18 ConstantExpression 12 25 12 43 9 1 * 12 43 12 44 18446744073709551615 4 node 12 45 12 49 10 1 ) 12 49 12 50 8 1 { 13 1 13 2 18446744073709551615 3 any 14 2 14 5 11 1 & 14 5 14 6 18446744073709551615 5 value 14 7 14 12 12 1 = 14 13 14 14 18446744073709551615 4 node 14 15 14 19 10 2 -> 14 19 14 21 18446744073709551615 5 value 14 21 14 26 13 1 ; 14 26 14 27 18446744073709551615 2 if 15 2 15 4 18446744073709551615 1 ( 15 5 15 6 18446744073709551615 5 value 15 6 15 11 12 1 . 15 11 15 12 14 4 type 15 12 15 16 14 1 ( 15 16 15 17 14 1 ) 15 17 15 18 14 2 == 15 19 15 21 15 6 typeid 15 22 15 28 18446744073709551615 1 ( 15 28 15 29 18446744073709551615 7 int32_t 15 29 15 36 16 1 ) 15 36 15 37 18446744073709551615 1 ) 15 37 15 38 18446744073709551615 1 { 16 2 16 3 18446744073709551615 4 node 17 3 17 7 10 2 -> 17 7 17 9 18446744073709551615 4 type 17 9 17 13 17 1 = 17 14 17 15 18 4 Type 17 16 17 20 19 2 :: 17 20 17 22 20 3 Int 17 22 17 25 20 1 ( 17 25 17 26 20 1 ) 17 26 17 27 20 1 ; 17 27 17 28 18446744073709551615 1 } 18 2 18 3 18446744073709551615 4 else 19 2 19 6 18446744073709551615 2 if 19 7 19 9 18446744073709551615 1 ( 19 10 19 11 18446744073709551615 5 value 19 11 19 16 12 1 . 19 16 19 17 14 4 type 19 17 19 21 14 1 ( 19 21 19 22 14 1 ) 19 22 19 23 14 2 == 19 24 19 26 15 6 typeid 19 27 19 33 18446744073709551615 1 ( 19 33 19 34 18446744073709551615 7 int64_t 19 34 19 41 21 1 ) 19 41 19 42 18446744073709551615 1 ) 19 42 19 43 18446744073709551615 1 { 20 2 20 3 18446744073709551615 4 node 21 3 21 7 10 2 -> 21 7 21 9 18446744073709551615 4 type 21 9 21 13 17 1 = 21 14 21 15 18 4 Type 21 16 21 20 19 2 :: 21 20 21 22 22 4 Long 21 22 21 26 22 1 ( 21 26 21 27 22 1 ) 21 27 21 28 22 1 ; 21 28 21 29 18446744073709551615 1 } 22 2 22 3 18446744073709551615 4 else 23 2 23 6 18446744073709551615 2 if 23 7 23 9 18446744073709551615 1 ( 23 10 23 11 18446744073709551615 5 value 23 11 23 16 12 1 . 23 16 23 17 14 4 type 23 17 23 21 14 1 ( 23 21 23 22 14 1 ) 23 22 23 23 14 2 == 23 24 23 26 15 6 typeid 23 27 23 33 18446744073709551615 1 ( 23 33 23 34 18446744073709551615 5 float 23 34 23 39 18446744073709551615 1 ) 23 39 23 40 18446744073709551615 1 ) 23 40 23 41 18446744073709551615 1 { 24 2 24 3 18446744073709551615 4 node 25 3 25 7 10 2 -> 25 7 25 9 18446744073709551615 4 type 25 9 25 13 17 1 = 25 14 25 15 18 4 Type 25 16 25 20 19 2 :: 25 20 25 22 23 5 Float 25 22 25 27 23 1 ( 25 27 25 28 23 1 ) 25 28 25 29 23 1 ; 25 29 25 30 18446744073709551615 1 } 26 2 26 3 18446744073709551615 4 else 27 2 27 6 18446744073709551615 2 if 27 7 27 9 18446744073709551615 1 ( 27 10 27 11 18446744073709551615 5 value 27 11 27 16 12 1 . 27 16 27 17 14 4 type 27 17 27 21 14 1 ( 27 21 27 22 14 1 ) 27 22 27 23 14 2 == 27 24 27 26 15 6 typeid 27 27 27 33 18446744073709551615 1 ( 27 33 27 34 18446744073709551615 6 double 27 34 27 40 18446744073709551615 1 ) 27 40 27 41 18446744073709551615 1 ) 27 41 27 42 18446744073709551615 1 { 28 2 28 3 18446744073709551615 4 node 29 3 29 7 10 2 -> 29 7 29 9 18446744073709551615 4 type 29 9 29 13 17 1 = 29 14 29 15 18 4 Type 29 16 29 20 19 2 :: 29 20 29 22 24 6 Double 29 22 29 28 24 1 ( 29 28 29 29 24 1 ) 29 29 29 30 24 1 ; 29 30 29 31 18446744073709551615 1 } 30 2 30 3 18446744073709551615 4 else 31 2 31 6 18446744073709551615 2 if 31 7 31 9 18446744073709551615 1 ( 31 10 31 11 18446744073709551615 5 value 31 11 31 16 12 1 . 31 16 31 17 14 4 type 31 17 31 21 14 1 ( 31 21 31 22 14 1 ) 31 22 31 23 14 2 == 31 24 31 26 15 6 typeid 31 27 31 33 18446744073709551615 1 ( 31 33 31 34 18446744073709551615 7 wchar_t 31 34 31 41 18446744073709551615 1 ) 31 41 31 42 18446744073709551615 1 ) 31 42 31 43 18446744073709551615 1 { 32 2 32 3 18446744073709551615 4 node 33 3 33 7 10 2 -> 33 7 33 9 18446744073709551615 4 type 33 9 33 13 17 1 = 33 14 33 15 18 4 Type 33 16 33 20 19 2 :: 33 20 33 22 25 4 Char 33 22 33 26 25 1 ( 33 26 33 27 25 1 ) 33 27 33 28 25 1 ; 33 28 33 29 18446744073709551615 1 } 34 2 34 3 18446744073709551615 4 else 35 2 35 6 18446744073709551615 2 if 35 7 35 9 18446744073709551615 1 ( 35 10 35 11 18446744073709551615 5 value 35 11 35 16 12 1 . 35 16 35 17 14 4 type 35 17 35 21 14 1 ( 35 21 35 22 14 1 ) 35 22 35 23 14 2 == 35 24 35 26 15 6 typeid 35 27 35 33 18446744073709551615 1 ( 35 33 35 34 18446744073709551615 4 bool 35 34 35 38 18446744073709551615 1 ) 35 38 35 39 18446744073709551615 1 ) 35 39 35 40 18446744073709551615 1 { 36 2 36 3 18446744073709551615 4 node 37 3 37 7 10 2 -> 37 7 37 9 18446744073709551615 4 type 37 9 37 13 17 1 = 37 14 37 15 18 4 Type 37 16 37 20 19 2 :: 37 20 37 22 26 7 Boolean 37 22 37 29 26 1 ( 37 29 37 30 26 1 ) 37 30 37 31 26 1 ; 37 31 37 32 18446744073709551615 1 } 38 2 38 3 18446744073709551615 4 else 39 2 39 6 18446744073709551615 2 if 39 7 39 9 18446744073709551615 1 ( 39 10 39 11 18446744073709551615 5 value 39 11 39 16 12 1 . 39 16 39 17 14 4 type 39 17 39 21 14 1 ( 39 21 39 22 14 1 ) 39 22 39 23 14 2 == 39 24 39 26 15 6 typeid 39 27 39 33 18446744073709551615 1 ( 39 33 39 34 18446744073709551615 7 wstring 39 34 39 41 27 1 ) 39 41 39 42 18446744073709551615 1 ) 39 42 39 43 18446744073709551615 1 { 40 2 40 3 18446744073709551615 4 node 41 3 41 7 10 2 -> 41 7 41 9 18446744073709551615 4 type 41 9 41 13 17 1 = 41 14 41 15 18 4 Type 41 16 41 20 19 2 :: 41 20 41 22 28 6 String 41 22 41 28 28 1 ( 41 28 41 29 28 1 ) 41 29 41 30 28 1 ; 41 30 41 31 18446744073709551615 1 } 42 2 42 3 18446744073709551615 4 else 43 2 43 6 18446744073709551615 1 { 44 2 44 3 18446744073709551615 5 throw 45 3 45 8 18446744073709551615 7 wstring 45 9 45 16 27 1 ( 45 16 45 17 29 8 L"error" 45 17 45 25 18446744073709551615 1 ) 45 25 45 26 29 1 ; 45 26 45 27 18446744073709551615 1 } 46 2 46 3 18446744073709551615 1 } 47 1 47 2 18446744073709551615 4 void 48 1 48 5 18446744073709551615 11 TypeChecker 48 6 48 17 4 2 :: 48 17 48 19 8 5 Visit 48 19 48 24 8 1 ( 48 24 48 25 8 15 UnaryExpression 48 25 48 40 30 1 * 48 40 48 41 18446744073709551615 4 node 48 42 48 46 31 1 ) 48 46 48 47 8 1 { 49 1 49 2 18446744073709551615 4 node 50 2 50 6 31 2 -> 50 6 50 8 18446744073709551615 7 operand 50 8 50 15 32 2 -> 50 15 50 17 33 6 Accept 50 17 50 23 33 1 ( 50 23 50 24 33 4 this 50 24 50 28 18446744073709551615 1 ) 50 28 50 29 33 1 ; 50 29 50 30 18446744073709551615 2 if 51 2 51 4 18446744073709551615 1 ( 51 5 51 6 18446744073709551615 4 node 51 6 51 10 31 2 -> 51 10 51 12 18446744073709551615 4 kind 51 12 51 16 34 2 == 51 17 51 19 18446744073709551615 14 ExpressionKind 51 20 51 34 35 2 :: 51 34 51 36 18446744073709551615 9 UnaryPlus 51 36 51 45 36 1 ) 51 45 51 46 18446744073709551615 1 { 52 2 52 3 18446744073709551615 2 if 53 3 53 5 18446744073709551615 1 ( 53 6 53 7 18446744073709551615 4 node 53 7 53 11 31 2 -> 53 11 53 13 18446744073709551615 7 operand 53 13 53 20 32 2 -> 53 20 53 22 18446744073709551615 4 type 53 22 53 26 17 1 . 53 26 53 27 37 5 IsInt 53 27 53 32 37 1 ( 53 32 53 33 37 1 ) 53 33 53 34 37 2 || 53 35 53 37 18446744073709551615 4 node 53 38 53 42 31 2 -> 53 42 53 44 18446744073709551615 7 operand 53 44 53 51 32 2 -> 53 51 53 53 18446744073709551615 4 type 53 53 53 57 17 1 . 53 57 53 58 38 6 IsLong 53 58 53 64 38 1 ( 53 64 53 65 38 1 ) 53 65 53 66 38 2 || 53 67 53 69 18446744073709551615 4 node 54 4 54 8 31 2 -> 54 8 54 10 18446744073709551615 7 operand 54 10 54 17 32 2 -> 54 17 54 19 18446744073709551615 4 type 54 19 54 23 17 1 . 54 23 54 24 39 7 IsFloat 54 24 54 31 39 1 ( 54 31 54 32 39 1 ) 54 32 54 33 39 2 || 54 34 54 36 18446744073709551615 4 node 54 37 54 41 31 2 -> 54 41 54 43 18446744073709551615 7 operand 54 43 54 50 32 2 -> 54 50 54 52 18446744073709551615 4 type 54 52 54 56 17 1 . 54 56 54 57 40 8 IsDouble 54 57 54 65 40 1 ( 54 65 54 66 40 1 ) 54 66 54 67 40 1 ) 54 67 54 68 18446744073709551615 1 { 55 3 55 4 18446744073709551615 4 node 56 4 56 8 31 2 -> 56 8 56 10 18446744073709551615 4 type 56 10 56 14 17 1 = 56 15 56 16 18 4 node 56 17 56 21 31 2 -> 56 21 56 23 18446744073709551615 7 operand 56 23 56 30 32 2 -> 56 30 56 32 18446744073709551615 4 type 56 32 56 36 17 1 ; 56 36 56 37 18446744073709551615 1 } 57 3 57 4 18446744073709551615 4 else 58 3 58 7 18446744073709551615 1 { 59 3 59 4 18446744073709551615 5 throw 60 4 60 9 18446744073709551615 13 TypeException 60 10 60 23 41 1 ( 60 23 60 24 41 4 node 61 5 61 9 31 2 -> 61 9 61 11 18446744073709551615 4 line 61 11 61 15 42 1 , 61 15 61 16 41 4 node 61 17 61 21 31 2 -> 61 21 61 23 18446744073709551615 6 column 61 23 61 29 43 1 , 61 29 61 30 41 57 L"The '+' operator cannot be applied to operand of type " 62 5 62 62 18446744073709551615 1 + 62 63 62 64 44 12 TypeToString 63 6 63 18 45 1 ( 63 18 63 19 45 4 node 63 19 63 23 31 2 -> 63 23 63 25 18446744073709551615 7 operand 63 25 63 32 32 2 -> 63 32 63 34 18446744073709551615 4 type 63 34 63 38 17 1 ) 63 38 63 39 45 1 ) 63 39 63 40 41 1 ; 63 40 63 41 18446744073709551615 1 } 64 3 64 4 18446744073709551615 1 } 65 2 65 3 18446744073709551615 4 else 66 2 66 6 18446744073709551615 2 if 66 7 66 9 18446744073709551615 1 ( 66 10 66 11 18446744073709551615 4 node 66 11 66 15 31 2 -> 66 15 66 17 18446744073709551615 4 kind 66 17 66 21 34 2 == 66 22 66 24 18446744073709551615 14 ExpressionKind 66 25 66 39 35 2 :: 66 39 66 41 18446744073709551615 10 UnaryMinus 66 41 66 51 46 1 ) 66 51 66 52 18446744073709551615 1 { 67 2 67 3 18446744073709551615 2 if 68 3 68 5 18446744073709551615 1 ( 68 6 68 7 18446744073709551615 4 node 68 7 68 11 31 2 -> 68 11 68 13 18446744073709551615 7 operand 68 13 68 20 32 2 -> 68 20 68 22 18446744073709551615 4 type 68 22 68 26 17 1 . 68 26 68 27 37 5 IsInt 68 27 68 32 37 1 ( 68 32 68 33 37 1 ) 68 33 68 34 37 2 || 68 35 68 37 18446744073709551615 4 node 68 38 68 42 31 2 -> 68 42 68 44 18446744073709551615 7 operand 68 44 68 51 32 2 -> 68 51 68 53 18446744073709551615 4 type 68 53 68 57 17 1 . 68 57 68 58 38 6 IsLong 68 58 68 64 38 1 ( 68 64 68 65 38 1 ) 68 65 68 66 38 2 || 68 67 68 69 18446744073709551615 4 node 69 4 69 8 31 2 -> 69 8 69 10 18446744073709551615 7 operand 69 10 69 17 32 2 -> 69 17 69 19 18446744073709551615 4 type 69 19 69 23 17 1 . 69 23 69 24 39 7 IsFloat 69 24 69 31 39 1 ( 69 31 69 32 39 1 ) 69 32 69 33 39 2 || 69 34 69 36 18446744073709551615 4 node 69 37 69 41 31 2 -> 69 41 69 43 18446744073709551615 7 operand 69 43 69 50 32 2 -> 69 50 69 52 18446744073709551615 4 type 69 52 69 56 17 1 . 69 56 69 57 40 8 IsDouble 69 57 69 65 40 1 ( 69 65 69 66 40 1 ) 69 66 69 67 40 1 ) 69 67 69 68 18446744073709551615 1 { 70 3 70 4 18446744073709551615 4 node 71 4 71 8 31 2 -> 71 8 71 10 18446744073709551615 4 type 71 10 71 14 17 1 = 71 15 71 16 18 4 node 71 17 71 21 31 2 -> 71 21 71 23 18446744073709551615 7 operand 71 23 71 30 32 2 -> 71 30 71 32 18446744073709551615 4 type 71 32 71 36 17 1 ; 71 36 71 37 18446744073709551615 1 } 72 3 72 4 18446744073709551615 4 else 73 3 73 7 18446744073709551615 1 { 74 3 74 4 18446744073709551615 5 throw 75 4 75 9 18446744073709551615 13 TypeException 75 10 75 23 41 1 ( 75 23 75 24 41 4 node 76 5 76 9 31 2 -> 76 9 76 11 18446744073709551615 4 line 76 11 76 15 42 1 , 76 15 76 16 41 4 node 76 17 76 21 31 2 -> 76 21 76 23 18446744073709551615 6 column 76 23 76 29 43 1 , 76 29 76 30 41 57 L"The '-' operator cannot be applied to operand of type " 77 5 77 62 18446744073709551615 1 + 77 63 77 64 44 12 TypeToString 78 6 78 18 45 1 ( 78 18 78 19 45 4 node 78 19 78 23 31 2 -> 78 23 78 25 18446744073709551615 7 operand 78 25 78 32 32 2 -> 78 32 78 34 18446744073709551615 4 type 78 34 78 38 17 1 ) 78 38 78 39 45 1 ) 78 39 78 40 41 1 ; 78 40 78 41 18446744073709551615 1 } 79 3 79 4 18446744073709551615 1 } 80 2 80 3 18446744073709551615 4 else 81 2 81 6 18446744073709551615 2 if 81 7 81 9 18446744073709551615 1 ( 81 10 81 11 18446744073709551615 4 node 81 11 81 15 31 2 -> 81 15 81 17 18446744073709551615 4 kind 81 17 81 21 34 2 == 81 22 81 24 18446744073709551615 14 ExpressionKind 81 25 81 39 35 2 :: 81 39 81 41 18446744073709551615 3 Not 81 41 81 44 47 1 ) 81 44 81 45 18446744073709551615 1 { 82 2 82 3 18446744073709551615 2 if 83 3 83 5 18446744073709551615 1 ( 83 6 83 7 18446744073709551615 4 node 83 7 83 11 31 2 -> 83 11 83 13 18446744073709551615 7 operand 83 13 83 20 32 2 -> 83 20 83 22 18446744073709551615 4 type 83 22 83 26 17 1 . 83 26 83 27 48 9 IsBoolean 83 27 83 36 48 1 ( 83 36 83 37 48 1 ) 83 37 83 38 48 1 ) 83 38 83 39 18446744073709551615 1 { 84 3 84 4 18446744073709551615 4 node 85 4 85 8 31 2 -> 85 8 85 10 18446744073709551615 4 type 85 10 85 14 17 1 = 85 15 85 16 18 4 node 85 17 85 21 31 2 -> 85 21 85 23 18446744073709551615 7 operand 85 23 85 30 32 2 -> 85 30 85 32 18446744073709551615 4 type 85 32 85 36 17 1 ; 85 36 85 37 18446744073709551615 1 } 86 3 86 4 18446744073709551615 4 else 87 3 87 7 18446744073709551615 1 { 88 3 88 4 18446744073709551615 5 throw 89 4 89 9 18446744073709551615 13 TypeException 89 10 89 23 41 1 ( 89 23 89 24 41 4 node 90 5 90 9 31 2 -> 90 9 90 11 18446744073709551615 4 line 90 11 90 15 42 1 , 90 15 90 16 41 4 node 90 17 90 21 31 2 -> 90 21 90 23 18446744073709551615 6 column 90 23 90 29 43 1 , 90 29 90 30 41 59 L"The 'not' operator cannot be applied to operand of type " 91 5 91 64 18446744073709551615 1 + 91 65 91 66 44 12 TypeToString 92 6 92 18 45 1 ( 92 18 92 19 45 4 node 92 19 92 23 31 2 -> 92 23 92 25 18446744073709551615 7 operand 92 25 92 32 32 2 -> 92 32 92 34 18446744073709551615 4 type 92 34 92 38 17 1 ) 92 38 92 39 45 1 ) 92 39 92 40 41 1 ; 92 40 92 41 18446744073709551615 1 } 93 3 93 4 18446744073709551615 1 } 94 2 94 3 18446744073709551615 4 else 95 2 95 6 18446744073709551615 1 { 96 2 96 3 18446744073709551615 5 throw 97 3 97 8 18446744073709551615 7 wstring 97 9 97 16 27 1 ( 97 16 97 17 29 8 L"error" 97 17 97 25 18446744073709551615 1 ) 97 25 97 26 29 1 ; 97 26 97 27 18446744073709551615 1 } 98 2 98 3 18446744073709551615 1 } 99 1 99 2 18446744073709551615 4 void 100 1 100 5 18446744073709551615 11 TypeChecker 100 6 100 17 4 2 :: 100 17 100 19 8 5 Visit 100 19 100 24 8 1 ( 100 24 100 25 8 16 BinaryExpression 100 25 100 41 49 1 * 100 41 100 42 18446744073709551615 4 node 100 43 100 47 50 1 ) 100 47 100 48 8 1 { 101 1 101 2 18446744073709551615 4 node 102 2 102 6 50 2 -> 102 6 102 8 18446744073709551615 4 left 102 8 102 12 51 2 -> 102 12 102 14 33 6 Accept 102 14 102 20 33 1 ( 102 20 102 21 33 4 this 102 21 102 25 18446744073709551615 1 ) 102 25 102 26 33 1 ; 102 26 102 27 18446744073709551615 4 node 103 2 103 6 50 2 -> 103 6 103 8 18446744073709551615 5 right 103 8 103 13 52 2 -> 103 13 103 15 33 6 Accept 103 15 103 21 33 1 ( 103 21 103 22 33 4 this 103 22 103 26 18446744073709551615 1 ) 103 26 103 27 33 1 ; 103 27 103 28 18446744073709551615 4 Type 104 2 104 6 19 1 & 104 6 104 7 18446744073709551615 4 left 104 8 104 12 53 1 = 104 13 104 14 18446744073709551615 4 node 104 15 104 19 50 2 -> 104 19 104 21 18446744073709551615 4 left 104 21 104 25 51 2 -> 104 25 104 27 18446744073709551615 4 type 104 27 104 31 17 1 ; 104 31 104 32 18446744073709551615 4 Type 105 2 105 6 19 1 & 105 6 105 7 18446744073709551615 5 right 105 8 105 13 54 1 = 105 14 105 15 18446744073709551615 4 node 105 16 105 20 50 2 -> 105 20 105 22 18446744073709551615 5 right 105 22 105 27 52 2 -> 105 27 105 29 18446744073709551615 4 type 105 29 105 33 17 1 ; 105 33 105 34 18446744073709551615 14 ExpressionKind 106 2 106 16 35 4 kind 106 17 106 21 55 1 = 106 22 106 23 18446744073709551615 4 node 106 24 106 28 50 2 -> 106 28 106 30 18446744073709551615 4 kind 106 30 106 34 34 1 ; 106 34 106 35 18446744073709551615 2 if 107 2 107 4 18446744073709551615 1 ( 107 5 107 6 18446744073709551615 4 kind 107 6 107 10 55 2 == 107 11 107 13 18446744073709551615 14 ExpressionKind 107 14 107 28 35 2 :: 107 28 107 30 18446744073709551615 3 Add 107 30 107 33 56 2 || 107 34 107 36 18446744073709551615 4 kind 107 37 107 41 55 2 == 107 42 107 44 18446744073709551615 14 ExpressionKind 107 45 107 59 35 2 :: 107 59 107 61 18446744073709551615 8 Subtract 107 61 107 69 57 2 || 107 70 107 72 18446744073709551615 4 kind 108 3 108 7 55 2 == 108 8 108 10 18446744073709551615 14 ExpressionKind 108 11 108 25 35 2 :: 108 25 108 27 18446744073709551615 8 Multiply 108 27 108 35 58 2 || 108 36 108 38 18446744073709551615 4 kind 108 39 108 43 55 2 == 108 44 108 46 18446744073709551615 14 ExpressionKind 108 47 108 61 35 2 :: 108 61 108 63 18446744073709551615 6 Divide 108 63 108 69 59 1 ) 108 69 108 70 18446744073709551615 1 { 109 2 109 3 18446744073709551615 2 if 110 3 110 5 18446744073709551615 1 ( 110 6 110 7 18446744073709551615 4 left 110 7 110 11 53 1 . 110 11 110 12 37 5 IsInt 110 12 110 17 37 1 ( 110 17 110 18 37 1 ) 110 18 110 19 37 2 && 110 20 110 22 18446744073709551615 5 right 110 23 110 28 54 1 . 110 28 110 29 37 5 IsInt 110 29 110 34 37 1 ( 110 34 110 35 37 1 ) 110 35 110 36 37 1 ) 110 36 110 37 18446744073709551615 1 { 111 3 111 4 18446744073709551615 4 node 112 4 112 8 50 2 -> 112 8 112 10 18446744073709551615 4 type 112 10 112 14 17 1 = 112 15 112 16 18 4 Type 112 17 112 21 19 2 :: 112 21 112 23 20 3 Int 112 23 112 26 20 1 ( 112 26 112 27 20 1 ) 112 27 112 28 20 1 ; 112 28 112 29 18446744073709551615 1 } 113 3 113 4 18446744073709551615 4 else 114 3 114 7 18446744073709551615 2 if 114 8 114 10 18446744073709551615 1 ( 114 11 114 12 18446744073709551615 4 left 114 12 114 16 53 1 . 114 16 114 17 40 8 IsDouble 114 17 114 25 40 1 ( 114 25 114 26 40 1 ) 114 26 114 27 40 2 && 114 28 114 30 18446744073709551615 5 right 114 31 114 36 54 1 . 114 36 114 37 40 8 IsDouble 114 37 114 45 40 1 ( 114 45 114 46 40 1 ) 114 46 114 47 40 1 ) 114 47 114 48 18446744073709551615 1 { 115 3 115 4 18446744073709551615 4 node 116 4 116 8 50 2 -> 116 8 116 10 18446744073709551615 4 type 116 10 116 14 17 1 = 116 15 116 16 18 4 Type 116 17 116 21 19 2 :: 116 21 116 23 24 6 Double 116 23 116 29 24 1 ( 116 29 116 30 24 1 ) 116 30 116 31 24 1 ; 116 31 116 32 18446744073709551615 1 } 117 3 117 4 18446744073709551615 4 else 118 3 118 7 18446744073709551615 2 if 118 8 118 10 18446744073709551615 1 ( 118 11 118 12 18446744073709551615 4 left 118 12 118 16 53 1 . 118 16 118 17 39 7 IsFloat 118 17 118 24 39 1 ( 118 24 118 25 39 1 ) 118 25 118 26 39 2 && 118 27 118 29 18446744073709551615 5 right 118 30 118 35 54 1 . 118 35 118 36 39 7 IsFloat 118 36 118 43 39 1 ( 118 43 118 44 39 1 ) 118 44 118 45 39 1 ) 118 45 118 46 18446744073709551615 1 { 119 3 119 4 18446744073709551615 4 node 120 4 120 8 50 2 -> 120 8 120 10 18446744073709551615 4 type 120 10 120 14 17 1 = 120 15 120 16 18 4 Type 120 17 120 21 19 2 :: 120 21 120 23 23 5 Float 120 23 120 28 23 1 ( 120 28 120 29 23 1 ) 120 29 120 30 23 1 ; 120 30 120 31 18446744073709551615 1 } 121 3 121 4 18446744073709551615 4 else 122 3 122 7 18446744073709551615 2 if 122 8 122 10 18446744073709551615 1 ( 122 11 122 12 18446744073709551615 4 left 122 12 122 16 53 1 . 122 16 122 17 38 6 IsLong 122 17 122 23 38 1 ( 122 23 122 24 38 1 ) 122 24 122 25 38 2 && 122 26 122 28 18446744073709551615 5 right 122 29 122 34 54 1 . 122 34 122 35 38 6 IsLong 122 35 122 41 38 1 ( 122 41 122 42 38 1 ) 122 42 122 43 38 1 ) 122 43 122 44 18446744073709551615 1 { 123 3 123 4 18446744073709551615 4 node 124 4 124 8 50 2 -> 124 8 124 10 18446744073709551615 4 type 124 10 124 14 17 1 = 124 15 124 16 18 4 Type 124 17 124 21 19 2 :: 124 21 124 23 22 4 Long 124 23 124 27 22 1 ( 124 27 124 28 22 1 ) 124 28 124 29 22 1 ; 124 29 124 30 18446744073709551615 1 } 125 3 125 4 18446744073709551615 4 else 126 3 126 7 18446744073709551615 1 { 127 3 127 4 18446744073709551615 5 throw 128 4 128 9 18446744073709551615 13 TypeException 128 10 128 23 41 1 ( 128 23 128 24 41 4 node 128 24 128 28 50 2 -> 128 28 128 30 18446744073709551615 4 line 128 30 128 34 42 1 , 128 34 128 35 41 4 node 128 36 128 40 50 2 -> 128 40 128 42 18446744073709551615 6 column 128 42 128 48 43 1 , 128 48 128 49 41 46 L"Operator `-' cannot be applied to operands " 129 9 129 55 18446744073709551615 12 L"of type '" 130 9 130 21 18446744073709551615 1 + 130 22 130 23 44 12 TypeToString 131 10 131 22 45 1 ( 131 22 131 23 45 4 left 131 23 131 27 53 1 ) 131 27 131 28 45 1 + 131 29 131 30 44 10 L"' and '" 131 31 131 41 18446744073709551615 1 + 131 42 131 43 44 12 TypeToString 132 10 132 22 45 1 ( 132 22 132 23 45 5 right 132 23 132 28 54 1 ) 132 28 132 29 45 1 + 132 30 132 31 44 4 L"'" 132 32 132 36 18446744073709551615 1 ) 132 36 132 37 41 1 ; 132 37 132 38 18446744073709551615 1 } 133 3 133 4 18446744073709551615 1 } 134 2 134 3 18446744073709551615 4 else 135 2 135 6 18446744073709551615 2 if 135 7 135 9 18446744073709551615 1 ( 135 10 135 11 18446744073709551615 4 kind 135 11 135 15 55 2 == 135 16 135 18 18446744073709551615 14 ExpressionKind 135 19 135 33 35 2 :: 135 33 135 35 18446744073709551615 6 Modulo 135 35 135 41 60 1 ) 135 41 135 42 18446744073709551615 1 { 136 2 136 3 18446744073709551615 2 if 137 3 137 5 18446744073709551615 1 ( 137 6 137 7 18446744073709551615 4 left 137 7 137 11 53 1 . 137 11 137 12 37 5 IsInt 137 12 137 17 37 1 ( 137 17 137 18 37 1 ) 137 18 137 19 37 2 && 137 20 137 22 18446744073709551615 5 right 137 23 137 28 54 1 . 137 28 137 29 37 5 IsInt 137 29 137 34 37 1 ( 137 34 137 35 37 1 ) 137 35 137 36 37 1 ) 137 36 137 37 18446744073709551615 1 { 138 3 138 4 18446744073709551615 4 node 139 4 139 8 50 2 -> 139 8 139 10 18446744073709551615 4 type 139 10 139 14 17 1 = 139 15 139 16 18 4 Type 139 17 139 21 19 2 :: 139 21 139 23 20 3 Int 139 23 139 26 20 1 ( 139 26 139 27 20 1 ) 139 27 139 28 20 1 ; 139 28 139 29 18446744073709551615 1 } 140 3 140 4 18446744073709551615 4 else 141 3 141 7 18446744073709551615 2 if 141 8 141 10 18446744073709551615 1 ( 141 11 141 12 18446744073709551615 4 left 141 12 141 16 53 1 . 141 16 141 17 38 6 IsLong 141 17 141 23 38 1 ( 141 23 141 24 38 1 ) 141 24 141 25 38 2 && 141 26 141 28 18446744073709551615 5 right 141 29 141 34 54 1 . 141 34 141 35 38 6 IsLong 141 35 141 41 38 1 ( 141 41 141 42 38 1 ) 141 42 141 43 38 1 ) 141 43 141 44 18446744073709551615 1 { 142 3 142 4 18446744073709551615 4 node 143 4 143 8 50 2 -> 143 8 143 10 18446744073709551615 4 type 143 10 143 14 17 1 = 143 15 143 16 18 4 Type 143 17 143 21 19 2 :: 143 21 143 23 22 4 Long 143 23 143 27 22 1 ( 143 27 143 28 22 1 ) 143 28 143 29 22 1 ; 143 29 143 30 18446744073709551615 1 } 144 3 144 4 18446744073709551615 4 else 145 3 145 7 18446744073709551615 1 { 146 3 146 4 18446744073709551615 5 throw 147 4 147 9 18446744073709551615 13 TypeException 147 10 147 23 41 1 ( 147 23 147 24 41 4 node 147 24 147 28 50 2 -> 147 28 147 30 18446744073709551615 4 line 147 30 147 34 42 1 , 147 34 147 35 41 4 node 147 36 147 40 50 2 -> 147 40 147 42 18446744073709551615 6 column 147 42 147 48 43 1 , 147 48 147 49 41 42 L"Operator cannot be applied to operands " 148 9 148 51 18446744073709551615 12 L"of type '" 149 9 149 21 18446744073709551615 1 + 149 22 149 23 44 12 TypeToString 150 10 150 22 45 1 ( 150 22 150 23 45 4 left 150 23 150 27 53 1 ) 150 27 150 28 45 1 + 150 29 150 30 44 10 L"' and '" 150 31 150 41 18446744073709551615 1 + 150 42 150 43 44 12 TypeToString 151 10 151 22 45 1 ( 151 22 151 23 45 5 right 151 23 151 28 54 1 ) 151 28 151 29 45 1 + 151 30 151 31 44 4 L"'" 151 32 151 36 18446744073709551615 1 ) 151 36 151 37 41 1 ; 151 37 151 38 18446744073709551615 1 } 152 3 152 4 18446744073709551615 1 } 153 2 153 3 18446744073709551615 4 else 154 2 154 6 18446744073709551615 2 if 154 7 154 9 18446744073709551615 1 ( 154 10 154 11 18446744073709551615 4 kind 154 11 154 15 55 2 == 154 16 154 18 18446744073709551615 14 ExpressionKind 154 19 154 33 35 2 :: 154 33 154 35 18446744073709551615 11 GreaterThan 154 35 154 46 61 2 || 154 47 154 49 18446744073709551615 4 kind 155 5 155 9 55 2 == 155 10 155 12 18446744073709551615 14 ExpressionKind 155 13 155 27 35 2 :: 155 27 155 29 18446744073709551615 8 LessThan 155 29 155 37 62 2 || 155 38 155 40 18446744073709551615 4 kind 156 5 156 9 55 2 == 156 10 156 12 18446744073709551615 14 ExpressionKind 156 13 156 27 35 2 :: 156 27 156 29 18446744073709551615 18 GreaterThanOrEqual 156 29 156 47 63 2 || 156 48 156 50 18446744073709551615 4 kind 157 5 157 9 55 2 == 157 10 157 12 18446744073709551615 14 ExpressionKind 157 13 157 27 35 2 :: 157 27 157 29 18446744073709551615 15 LessThanOrEqual 157 29 157 44 64 1 ) 157 44 157 45 18446744073709551615 1 { 158 2 158 3 18446744073709551615 2 if 159 3 159 5 18446744073709551615 1 ( 159 6 159 7 18446744073709551615 4 left 159 7 159 11 53 1 . 159 11 159 12 37 5 IsInt 159 12 159 17 37 1 ( 159 17 159 18 37 1 ) 159 18 159 19 37 2 && 159 20 159 22 18446744073709551615 5 right 159 23 159 28 54 1 . 159 28 159 29 37 5 IsInt 159 29 159 34 37 1 ( 159 34 159 35 37 1 ) 159 35 159 36 37 1 ) 159 36 159 37 18446744073709551615 1 { 160 3 160 4 18446744073709551615 4 node 161 4 161 8 50 2 -> 161 8 161 10 18446744073709551615 4 type 161 10 161 14 17 1 = 161 15 161 16 18 4 Type 161 17 161 21 19 2 :: 161 21 161 23 26 7 Boolean 161 23 161 30 26 1 ( 161 30 161 31 26 1 ) 161 31 161 32 26 1 ; 161 32 161 33 18446744073709551615 1 } 162 3 162 4 18446744073709551615 4 else 163 3 163 7 18446744073709551615 2 if 163 8 163 10 18446744073709551615 1 ( 163 11 163 12 18446744073709551615 4 left 163 12 163 16 53 1 . 163 16 163 17 40 8 IsDouble 163 17 163 25 40 1 ( 163 25 163 26 40 1 ) 163 26 163 27 40 2 && 163 28 163 30 18446744073709551615 5 right 163 31 163 36 54 1 . 163 36 163 37 40 8 IsDouble 163 37 163 45 40 1 ( 163 45 163 46 40 1 ) 163 46 163 47 40 1 ) 163 47 163 48 18446744073709551615 1 { 164 3 164 4 18446744073709551615 4 node 165 4 165 8 50 2 -> 165 8 165 10 18446744073709551615 4 type 165 10 165 14 17 1 = 165 15 165 16 18 4 Type 165 17 165 21 19 2 :: 165 21 165 23 26 7 Boolean 165 23 165 30 26 1 ( 165 30 165 31 26 1 ) 165 31 165 32 26 1 ; 165 32 165 33 18446744073709551615 1 } 166 3 166 4 18446744073709551615 4 else 167 3 167 7 18446744073709551615 2 if 167 8 167 10 18446744073709551615 1 ( 167 11 167 12 18446744073709551615 4 left 167 12 167 16 53 1 . 167 16 167 17 38 6 IsLong 167 17 167 23 38 1 ( 167 23 167 24 38 1 ) 167 24 167 25 38 2 && 167 26 167 28 18446744073709551615 5 right 167 29 167 34 54 1 . 167 34 167 35 38 6 IsLong 167 35 167 41 38 1 ( 167 41 167 42 38 1 ) 167 42 167 43 38 1 ) 167 43 167 44 18446744073709551615 1 { 168 3 168 4 18446744073709551615 4 node 169 4 169 8 50 2 -> 169 8 169 10 18446744073709551615 4 type 169 10 169 14 17 1 = 169 15 169 16 18 4 Type 169 17 169 21 19 2 :: 169 21 169 23 26 7 Boolean 169 23 169 30 26 1 ( 169 30 169 31 26 1 ) 169 31 169 32 26 1 ; 169 32 169 33 18446744073709551615 1 } 170 3 170 4 18446744073709551615 4 else 171 3 171 7 18446744073709551615 2 if 171 8 171 10 18446744073709551615 1 ( 171 11 171 12 18446744073709551615 4 left 171 12 171 16 53 1 . 171 16 171 17 39 7 IsFloat 171 17 171 24 39 1 ( 171 24 171 25 39 1 ) 171 25 171 26 39 2 && 171 27 171 29 18446744073709551615 5 right 171 30 171 35 54 1 . 171 35 171 36 39 7 IsFloat 171 36 171 43 39 1 ( 171 43 171 44 39 1 ) 171 44 171 45 39 1 ) 171 45 171 46 18446744073709551615 1 { 172 3 172 4 18446744073709551615 4 node 173 4 173 8 50 2 -> 173 8 173 10 18446744073709551615 4 type 173 10 173 14 17 1 = 173 15 173 16 18 4 Type 173 17 173 21 19 2 :: 173 21 173 23 26 7 Boolean 173 23 173 30 26 1 ( 173 30 173 31 26 1 ) 173 31 173 32 26 1 ; 173 32 173 33 18446744073709551615 1 } 174 3 174 4 18446744073709551615 4 else 175 3 175 7 18446744073709551615 1 { 176 3 176 4 18446744073709551615 5 throw 177 4 177 9 18446744073709551615 13 TypeException 177 10 177 23 41 1 ( 177 23 177 24 41 4 node 177 24 177 28 50 2 -> 177 28 177 30 18446744073709551615 4 line 177 30 177 34 42 1 , 177 34 177 35 41 4 node 177 36 177 40 50 2 -> 177 40 177 42 18446744073709551615 6 column 177 42 177 48 43 1 , 177 48 177 49 41 42 L"Operator cannot be applied to operands " 178 9 178 51 18446744073709551615 12 L"of type '" 179 9 179 21 18446744073709551615 1 + 179 22 179 23 44 12 TypeToString 180 10 180 22 45 1 ( 180 22 180 23 45 4 left 180 23 180 27 53 1 ) 180 27 180 28 45 1 + 180 29 180 30 44 10 L"' and '" 180 31 180 41 18446744073709551615 1 + 180 42 180 43 44 12 TypeToString 181 10 181 22 45 1 ( 181 22 181 23 45 5 right 181 23 181 28 54 1 ) 181 28 181 29 45 1 + 181 30 181 31 44 4 L"'" 181 32 181 36 18446744073709551615 1 ) 181 36 181 37 41 1 ; 181 37 181 38 18446744073709551615 1 } 182 3 182 4 18446744073709551615 1 } 183 2 183 3 18446744073709551615 4 else 184 2 184 6 18446744073709551615 2 if 184 7 184 9 18446744073709551615 1 ( 184 10 184 11 18446744073709551615 4 kind 184 11 184 15 55 2 == 184 16 184 18 18446744073709551615 14 ExpressionKind 184 19 184 33 35 2 :: 184 33 184 35 18446744073709551615 3 And 184 35 184 38 65 2 || 184 39 184 41 18446744073709551615 4 kind 184 42 184 46 55 2 == 184 47 184 49 18446744073709551615 14 ExpressionKind 184 50 184 64 35 2 :: 184 64 184 66 18446744073709551615 2 Or 184 66 184 68 66 1 ) 184 68 184 69 18446744073709551615 1 { 185 2 185 3 18446744073709551615 2 if 186 3 186 5 18446744073709551615 1 ( 186 6 186 7 18446744073709551615 4 left 186 7 186 11 53 1 . 186 11 186 12 48 9 IsBoolean 186 12 186 21 48 1 ( 186 21 186 22 48 1 ) 186 22 186 23 48 2 && 186 24 186 26 18446744073709551615 5 right 186 27 186 32 54 1 . 186 32 186 33 48 9 IsBoolean 186 33 186 42 48 1 ( 186 42 186 43 48 1 ) 186 43 186 44 48 1 ) 186 44 186 45 18446744073709551615 1 { 187 3 187 4 18446744073709551615 4 node 188 4 188 8 50 2 -> 188 8 188 10 18446744073709551615 4 type 188 10 188 14 17 1 = 188 15 188 16 18 4 Type 188 17 188 21 19 2 :: 188 21 188 23 26 7 Boolean 188 23 188 30 26 1 ( 188 30 188 31 26 1 ) 188 31 188 32 26 1 ; 188 32 188 33 18446744073709551615 1 } 189 3 189 4 18446744073709551615 4 else 190 3 190 7 18446744073709551615 1 { 191 3 191 4 18446744073709551615 5 throw 192 4 192 9 18446744073709551615 13 TypeException 192 10 192 23 41 1 ( 192 23 192 24 41 4 node 192 24 192 28 50 2 -> 192 28 192 30 18446744073709551615 4 line 192 30 192 34 42 1 , 192 34 192 35 41 4 node 192 36 192 40 50 2 -> 192 40 192 42 18446744073709551615 6 column 192 42 192 48 43 1 , 192 48 192 49 41 42 L"Operator cannot be applied to operands " 193 9 193 51 18446744073709551615 12 L"of type '" 194 9 194 21 18446744073709551615 1 + 194 22 194 23 44 12 TypeToString 195 10 195 22 45 1 ( 195 22 195 23 45 4 left 195 23 195 27 53 1 ) 195 27 195 28 45 1 + 195 29 195 30 44 10 L"' and '" 195 31 195 41 18446744073709551615 1 + 195 42 195 43 44 12 TypeToString 196 10 196 22 45 1 ( 196 22 196 23 45 5 right 196 23 196 28 54 1 ) 196 28 196 29 45 1 + 196 30 196 31 44 4 L"'" 196 32 196 36 18446744073709551615 1 ) 196 36 196 37 41 1 ; 196 37 196 38 18446744073709551615 1 } 197 3 197 4 18446744073709551615 1 } 198 2 198 3 18446744073709551615 4 else 199 2 199 6 18446744073709551615 2 if 199 7 199 9 18446744073709551615 1 ( 199 10 199 11 18446744073709551615 4 kind 199 11 199 15 55 2 == 199 16 199 18 18446744073709551615 14 ExpressionKind 199 19 199 33 35 2 :: 199 33 199 35 18446744073709551615 5 Equal 199 35 199 40 67 2 || 199 41 199 43 18446744073709551615 4 kind 199 44 199 48 55 2 == 199 49 199 51 18446744073709551615 14 ExpressionKind 199 52 199 66 35 2 :: 199 66 199 68 18446744073709551615 8 NotEqual 199 68 199 76 68 1 ) 199 76 199 77 18446744073709551615 1 { 200 2 200 3 18446744073709551615 2 if 201 3 201 5 18446744073709551615 1 ( 201 6 201 7 18446744073709551615 4 left 201 7 201 11 53 1 . 201 11 201 12 37 5 IsInt 201 12 201 17 37 1 ( 201 17 201 18 37 1 ) 201 18 201 19 37 2 && 201 20 201 22 18446744073709551615 5 right 201 23 201 28 54 1 . 201 28 201 29 37 5 IsInt 201 29 201 34 37 1 ( 201 34 201 35 37 1 ) 201 35 201 36 37 1 ) 201 36 201 37 18446744073709551615 1 { 202 3 202 4 18446744073709551615 4 node 203 4 203 8 50 2 -> 203 8 203 10 18446744073709551615 4 type 203 10 203 14 17 1 = 203 15 203 16 18 4 Type 203 17 203 21 19 2 :: 203 21 203 23 26 7 Boolean 203 23 203 30 26 1 ( 203 30 203 31 26 1 ) 203 31 203 32 26 1 ; 203 32 203 33 18446744073709551615 1 } 204 3 204 4 18446744073709551615 4 else 205 3 205 7 18446744073709551615 2 if 205 8 205 10 18446744073709551615 1 ( 205 11 205 12 18446744073709551615 4 left 205 12 205 16 53 1 . 205 16 205 17 40 8 IsDouble 205 17 205 25 40 1 ( 205 25 205 26 40 1 ) 205 26 205 27 40 2 && 205 28 205 30 18446744073709551615 5 right 205 31 205 36 54 1 . 205 36 205 37 40 8 IsDouble 205 37 205 45 40 1 ( 205 45 205 46 40 1 ) 205 46 205 47 40 1 ) 205 47 205 48 18446744073709551615 1 { 206 3 206 4 18446744073709551615 4 node 207 4 207 8 50 2 -> 207 8 207 10 18446744073709551615 4 type 207 10 207 14 17 1 = 207 15 207 16 18 4 Type 207 17 207 21 19 2 :: 207 21 207 23 26 7 Boolean 207 23 207 30 26 1 ( 207 30 207 31 26 1 ) 207 31 207 32 26 1 ; 207 32 207 33 18446744073709551615 1 } 208 3 208 4 18446744073709551615 4 else 209 3 209 7 18446744073709551615 2 if 209 8 209 10 18446744073709551615 1 ( 209 11 209 12 18446744073709551615 4 left 209 12 209 16 53 1 . 209 16 209 17 48 9 IsBoolean 209 17 209 26 48 1 ( 209 26 209 27 48 1 ) 209 27 209 28 48 2 && 209 29 209 31 18446744073709551615 5 right 209 32 209 37 54 1 . 209 37 209 38 48 9 IsBoolean 209 38 209 47 48 1 ( 209 47 209 48 48 1 ) 209 48 209 49 48 1 ) 209 49 209 50 18446744073709551615 1 { 210 3 210 4 18446744073709551615 4 node 211 4 211 8 50 2 -> 211 8 211 10 18446744073709551615 4 type 211 10 211 14 17 1 = 211 15 211 16 18 4 Type 211 17 211 21 19 2 :: 211 21 211 23 26 7 Boolean 211 23 211 30 26 1 ( 211 30 211 31 26 1 ) 211 31 211 32 26 1 ; 211 32 211 33 18446744073709551615 1 } 212 3 212 4 18446744073709551615 4 else 213 3 213 7 18446744073709551615 2 if 213 8 213 10 18446744073709551615 1 ( 213 11 213 12 18446744073709551615 4 left 213 12 213 16 53 1 . 213 16 213 17 69 6 IsChar 213 17 213 23 69 1 ( 213 23 213 24 69 1 ) 213 24 213 25 69 2 && 213 26 213 28 18446744073709551615 5 right 213 29 213 34 54 1 . 213 34 213 35 69 6 IsChar 213 35 213 41 69 1 ( 213 41 213 42 69 1 ) 213 42 213 43 69 1 ) 213 43 213 44 18446744073709551615 1 { 214 3 214 4 18446744073709551615 4 node 215 4 215 8 50 2 -> 215 8 215 10 18446744073709551615 4 type 215 10 215 14 17 1 = 215 15 215 16 18 4 Type 215 17 215 21 19 2 :: 215 21 215 23 26 7 Boolean 215 23 215 30 26 1 ( 215 30 215 31 26 1 ) 215 31 215 32 26 1 ; 215 32 215 33 18446744073709551615 1 } 216 3 216 4 18446744073709551615 4 else 217 3 217 7 18446744073709551615 2 if 217 8 217 10 18446744073709551615 1 ( 217 11 217 12 18446744073709551615 4 left 217 12 217 16 53 1 . 217 16 217 17 70 8 IsString 217 17 217 25 70 1 ( 217 25 217 26 70 1 ) 217 26 217 27 70 2 && 217 28 217 30 18446744073709551615 5 right 217 31 217 36 54 1 . 217 36 217 37 70 8 IsString 217 37 217 45 70 1 ( 217 45 217 46 70 1 ) 217 46 217 47 70 1 ) 217 47 217 48 18446744073709551615 1 { 218 3 218 4 18446744073709551615 4 node 219 4 219 8 50 2 -> 219 8 219 10 18446744073709551615 4 type 219 10 219 14 17 1 = 219 15 219 16 18 4 Type 219 17 219 21 19 2 :: 219 21 219 23 26 7 Boolean 219 23 219 30 26 1 ( 219 30 219 31 26 1 ) 219 31 219 32 26 1 ; 219 32 219 33 18446744073709551615 1 } 220 3 220 4 18446744073709551615 4 else 221 3 221 7 18446744073709551615 1 { 222 3 222 4 18446744073709551615 5 throw 223 4 223 9 18446744073709551615 13 TypeException 223 10 223 23 41 1 ( 223 23 223 24 41 4 node 223 24 223 28 50 2 -> 223 28 223 30 18446744073709551615 4 line 223 30 223 34 42 1 , 223 34 223 35 41 4 node 223 36 223 40 50 2 -> 223 40 223 42 18446744073709551615 6 column 223 42 223 48 43 1 , 223 48 223 49 41 42 L"Operator cannot be applied to operands " 224 9 224 51 18446744073709551615 12 L"of type '" 225 9 225 21 18446744073709551615 1 + 225 22 225 23 44 12 TypeToString 226 10 226 22 45 1 ( 226 22 226 23 45 4 left 226 23 226 27 53 1 ) 226 27 226 28 45 1 + 226 29 226 30 44 10 L"' and '" 226 31 226 41 18446744073709551615 1 + 226 42 226 43 44 12 TypeToString 227 10 227 22 45 1 ( 227 22 227 23 45 5 right 227 23 227 28 54 1 ) 227 28 227 29 45 1 + 227 30 227 31 44 4 L"'" 227 32 227 36 18446744073709551615 1 ) 227 36 227 37 41 1 ; 227 37 227 38 18446744073709551615 1 } 228 3 228 4 18446744073709551615 1 } 229 2 229 3 18446744073709551615 4 else 230 2 230 6 18446744073709551615 1 { 231 2 231 3 18446744073709551615 5 throw 232 3 232 8 18446744073709551615 13 TypeException 232 9 232 22 41 1 ( 232 22 232 23 41 4 node 232 23 232 27 50 2 -> 232 27 232 29 18446744073709551615 4 line 232 29 232 33 42 1 , 232 33 232 34 41 4 node 232 35 232 39 50 2 -> 232 39 232 41 18446744073709551615 6 column 232 41 232 47 43 1 , 232 47 232 48 41 42 L"Operator cannot be applied to operands " 233 8 233 50 18446744073709551615 12 L"of type '" 234 8 234 20 18446744073709551615 1 + 234 21 234 22 44 12 TypeToString 235 9 235 21 45 1 ( 235 21 235 22 45 4 left 235 22 235 26 53 1 ) 235 26 235 27 45 1 + 235 28 235 29 44 10 L"' and '" 235 30 235 40 18446744073709551615 1 + 235 41 235 42 44 12 TypeToString 236 9 236 21 45 1 ( 236 21 236 22 45 5 right 236 22 236 27 54 1 ) 236 27 236 28 45 1 + 236 29 236 30 44 4 L"'" 236 31 236 35 18446744073709551615 1 ) 236 35 236 36 41 1 ; 236 36 236 37 18446744073709551615 1 } 237 2 237 3 18446744073709551615 1 } 238 1 238 2 18446744073709551615 4 void 239 1 239 5 18446744073709551615 11 TypeChecker 239 6 239 17 4 2 :: 239 17 239 19 8 5 Visit 239 19 239 24 8 1 ( 239 24 239 25 8 16 AssignExpression 239 25 239 41 71 1 * 239 41 239 42 18446744073709551615 4 node 239 43 239 47 72 1 ) 239 47 239 48 8 1 { 240 1 240 2 18446744073709551615 4 node 241 2 241 6 72 2 -> 241 6 241 8 18446744073709551615 5 value 241 8 241 13 73 2 -> 241 13 241 15 33 6 Accept 241 15 241 21 33 1 ( 241 21 241 22 33 4 this 241 22 241 26 18446744073709551615 1 ) 241 26 241 27 33 1 ; 241 27 241 28 18446744073709551615 2 if 242 2 242 4 18446744073709551615 1 ( 242 5 242 6 18446744073709551615 7 current 242 6 242 13 7 2 -> 242 13 242 15 74 9 HasSymbol 242 15 242 24 74 1 ( 242 24 242 25 74 4 node 242 25 242 29 72 2 -> 242 29 242 31 18446744073709551615 4 name 242 31 242 35 75 1 ) 242 35 242 36 74 1 ) 242 36 242 37 18446744073709551615 1 { 243 2 243 3 18446744073709551615 6 Symbol 244 3 244 9 76 6 symbol 244 10 244 16 77 1 = 244 17 244 18 18446744073709551615 7 current 244 19 244 26 7 2 -> 244 26 244 28 78 4 Find 244 28 244 32 78 1 ( 244 32 244 33 78 4 node 244 33 244 37 72 2 -> 244 37 244 39 18446744073709551615 4 name 244 39 244 43 75 1 ) 244 43 244 44 78 1 ; 244 44 244 45 18446744073709551615 2 if 245 3 245 5 18446744073709551615 1 ( 245 6 245 7 18446744073709551615 6 symbol 245 7 245 13 77 1 . 245 13 245 14 18446744073709551615 4 kind 245 14 245 18 79 2 == 245 19 245 21 18446744073709551615 10 SymbolKind 245 22 245 32 80 2 :: 245 32 245 34 18446744073709551615 14 VariableSymbol 245 34 245 48 81 1 ) 245 48 245 49 18446744073709551615 1 { 246 3 246 4 18446744073709551615 4 Type 247 4 247 8 19 4 type 247 9 247 13 82 1 = 247 14 247 15 18446744073709551615 8 any_cast 247 16 247 24 83 1 < 247 24 247 25 83 4 Type 247 25 247 29 19 1 > 247 29 247 30 83 1 ( 247 30 247 31 83 6 symbol 247 31 247 37 77 1 . 247 37 247 38 18446744073709551615 5 value 247 38 247 43 84 1 ) 247 43 247 44 83 1 ; 247 44 247 45 18446744073709551615 2 if 248 4 248 6 18446744073709551615 1 ( 248 7 248 8 18446744073709551615 4 type 248 8 248 12 82 2 == 248 13 248 15 85 4 node 248 16 248 20 72 2 -> 248 20 248 22 18446744073709551615 5 value 248 22 248 27 73 2 -> 248 27 248 29 18446744073709551615 4 type 248 29 248 33 17 1 ) 248 33 248 34 18446744073709551615 1 { 249 4 249 5 18446744073709551615 4 node 250 5 250 9 72 2 -> 250 9 250 11 18446744073709551615 4 type 250 11 250 15 17 1 = 250 16 250 17 18 4 type 250 18 250 22 82 1 ; 250 22 250 23 18446744073709551615 1 } 251 4 251 5 18446744073709551615 4 else 252 4 252 8 18446744073709551615 1 { 253 4 253 5 18446744073709551615 5 throw 254 5 254 10 18446744073709551615 13 TypeException 254 11 254 24 41 1 ( 254 24 254 25 41 4 node 254 25 254 29 72 2 -> 254 29 254 31 18446744073709551615 4 line 254 31 254 35 42 1 , 254 35 254 36 41 4 node 254 37 254 41 72 2 -> 254 41 254 43 18446744073709551615 6 column 254 43 254 49 43 1 , 254 49 254 50 41 35 L"Cannot implicitly convert type `" 255 10 255 45 18446744073709551615 1 + 255 46 255 47 44 12 TypeToString 256 11 256 23 45 1 ( 256 23 256 24 45 4 node 256 24 256 28 72 2 -> 256 28 256 30 18446744073709551615 5 value 256 30 256 35 73 2 -> 256 35 256 37 18446744073709551615 4 type 256 37 256 41 17 1 ) 256 41 256 42 45 1 + 256 43 256 44 44 8 L" to '" 257 11 257 19 18446744073709551615 1 + 257 20 257 21 44 12 TypeToString 257 22 257 34 45 1 ( 257 34 257 35 45 4 type 257 35 257 39 82 1 ) 257 39 257 40 45 1 + 257 41 257 42 44 4 L"'" 257 43 257 47 18446744073709551615 1 ) 257 47 257 48 41 1 ; 257 48 257 49 18446744073709551615 1 } 258 4 258 5 18446744073709551615 1 } 259 3 259 4 18446744073709551615 4 else 260 3 260 7 18446744073709551615 1 { 261 3 261 4 18446744073709551615 5 throw 262 4 262 9 18446744073709551615 13 TypeException 262 10 262 23 41 1 ( 262 23 262 24 41 4 node 262 24 262 28 72 2 -> 262 28 262 30 18446744073709551615 4 line 262 30 262 34 42 1 , 262 34 262 35 41 4 node 262 36 262 40 72 2 -> 262 40 262 42 18446744073709551615 6 column 262 42 262 48 43 1 , 262 48 262 49 41 9 L"name '" 263 9 263 18 18446744073709551615 1 + 263 19 263 20 44 4 node 263 21 263 25 72 2 -> 263 25 263 27 18446744073709551615 4 name 263 27 263 31 75 1 + 263 32 263 33 44 22 L"' is not a variable" 264 10 264 32 18446744073709551615 1 ) 264 32 264 33 41 1 ; 264 33 264 34 18446744073709551615 1 } 265 3 265 4 18446744073709551615 1 } 266 2 266 3 18446744073709551615 4 else 267 2 267 6 18446744073709551615 1 { 268 2 268 3 18446744073709551615 5 throw 269 3 269 8 18446744073709551615 13 TypeException 269 9 269 22 41 1 ( 269 22 269 23 41 4 node 269 23 269 27 72 2 -> 269 27 269 29 18446744073709551615 4 line 269 29 269 33 42 1 , 269 33 269 34 41 4 node 269 35 269 39 72 2 -> 269 39 269 41 18446744073709551615 6 column 269 41 269 47 43 1 , 269 47 269 48 41 9 L"name '" 270 8 270 17 18446744073709551615 1 + 270 18 270 19 44 4 node 270 20 270 24 72 2 -> 270 24 270 26 18446744073709551615 4 name 270 26 270 30 75 1 + 270 31 270 32 44 19 L"' is not defined" 270 33 270 52 18446744073709551615 1 ) 270 52 270 53 41 1 ; 270 53 270 54 18446744073709551615 1 } 271 2 271 3 18446744073709551615 1 } 272 1 272 2 18446744073709551615 4 void 273 1 273 5 18446744073709551615 11 TypeChecker 273 6 273 17 4 2 :: 273 17 273 19 8 5 Visit 273 19 273 24 8 1 ( 273 24 273 25 8 15 BlockExpression 273 25 273 40 86 1 * 273 40 273 41 18446744073709551615 4 node 273 42 273 46 87 1 ) 273 46 273 47 8 1 { 274 1 274 2 18446744073709551615 3 for 275 2 275 5 18446744073709551615 1 ( 275 6 275 7 18446744073709551615 6 ExpPtr 275 7 275 13 88 1 & 275 13 275 14 18446744073709551615 3 exp 275 15 275 18 89 1 : 275 19 275 20 90 4 node 275 21 275 25 87 2 -> 275 25 275 27 18446744073709551615 11 expressions 275 27 275 38 91 1 ) 275 38 275 39 18446744073709551615 1 { 276 2 276 3 18446744073709551615 3 exp 277 3 277 6 89 2 -> 277 6 277 8 33 6 Accept 277 8 277 14 33 1 ( 277 14 277 15 33 4 this 277 15 277 19 18446744073709551615 1 ) 277 19 277 20 33 1 ; 277 20 277 21 18446744073709551615 1 } 278 2 278 3 18446744073709551615 4 node 279 2 279 6 87 2 -> 279 6 279 8 18446744073709551615 4 type 279 8 279 12 17 1 = 279 13 279 14 18 4 Type 279 15 279 19 19 2 :: 279 19 279 21 92 4 Unit 279 21 279 25 92 1 ( 279 25 279 26 92 1 ) 279 26 279 27 92 1 ; 279 27 279 28 18446744073709551615 1 } 280 1 280 2 18446744073709551615 4 void 281 1 281 5 18446744073709551615 11 TypeChecker 281 6 281 17 4 2 :: 281 17 281 19 8 5 Visit 281 19 281 24 8 1 ( 281 24 281 25 8 16 IfThenExpression 281 25 281 41 93 1 * 281 41 281 42 18446744073709551615 4 node 281 43 281 47 94 1 ) 281 47 281 48 8 1 { 282 1 282 2 18446744073709551615 4 node 283 2 283 6 94 2 -> 283 6 283 8 18446744073709551615 9 condition 283 8 283 17 95 2 -> 283 17 283 19 33 6 Accept 283 19 283 25 33 1 ( 283 25 283 26 33 4 this 283 26 283 30 18446744073709551615 1 ) 283 30 283 31 33 1 ; 283 31 283 32 18446744073709551615 2 if 284 2 284 4 18446744073709551615 1 ( 284 5 284 6 18446744073709551615 4 node 284 6 284 10 94 2 -> 284 10 284 12 18446744073709551615 9 condition 284 12 284 21 95 2 -> 284 21 284 23 18446744073709551615 4 type 284 23 284 27 17 1 . 284 27 284 28 48 9 IsBoolean 284 28 284 37 48 1 ( 284 37 284 38 48 1 ) 284 38 284 39 48 1 ) 284 39 284 40 18446744073709551615 1 { 285 2 285 3 18446744073709551615 4 node 286 3 286 7 94 2 -> 286 7 286 9 18446744073709551615 6 ifTrue 286 9 286 15 96 2 -> 286 15 286 17 33 6 Accept 286 17 286 23 33 1 ( 286 23 286 24 33 4 this 286 24 286 28 18446744073709551615 1 ) 286 28 286 29 33 1 ; 286 29 286 30 18446744073709551615 4 node 287 3 287 7 94 2 -> 287 7 287 9 18446744073709551615 4 type 287 9 287 13 17 1 = 287 14 287 15 18 4 Type 287 16 287 20 19 2 :: 287 20 287 22 92 4 Unit 287 22 287 26 92 1 ( 287 26 287 27 92 1 ) 287 27 287 28 92 1 ; 287 28 287 29 18446744073709551615 1 } 288 2 288 3 18446744073709551615 4 else 289 2 289 6 18446744073709551615 1 { 290 2 290 3 18446744073709551615 5 throw 291 3 291 8 18446744073709551615 13 TypeException 291 9 291 22 41 1 ( 291 22 291 23 41 4 node 291 23 291 27 94 2 -> 291 27 291 29 18446744073709551615 4 line 291 29 291 33 42 1 , 291 33 291 34 41 4 node 291 35 291 39 94 2 -> 291 39 291 41 18446744073709551615 6 column 291 41 291 47 43 1 , 291 47 291 48 41 41 L"value cannot be converted to 'Boolean'" 292 8 292 49 18446744073709551615 1 ) 292 49 292 50 41 1 ; 292 50 292 51 18446744073709551615 1 } 293 2 293 3 18446744073709551615 1 } 294 1 294 2 18446744073709551615 4 void 295 1 295 5 18446744073709551615 11 TypeChecker 295 6 295 17 4 2 :: 295 17 295 19 8 5 Visit 295 19 295 24 8 1 ( 295 24 295 25 8 20 IfThenElseExpression 295 25 295 45 97 1 * 295 45 295 46 18446744073709551615 4 node 295 47 295 51 98 1 ) 295 51 295 52 8 1 { 296 1 296 2 18446744073709551615 4 node 297 2 297 6 98 2 -> 297 6 297 8 18446744073709551615 9 condition 297 8 297 17 99 2 -> 297 17 297 19 33 6 Accept 297 19 297 25 33 1 ( 297 25 297 26 33 4 this 297 26 297 30 18446744073709551615 1 ) 297 30 297 31 33 1 ; 297 31 297 32 18446744073709551615 2 if 298 2 298 4 18446744073709551615 1 ( 298 5 298 6 18446744073709551615 4 node 298 6 298 10 98 2 -> 298 10 298 12 18446744073709551615 9 condition 298 12 298 21 99 2 -> 298 21 298 23 18446744073709551615 4 type 298 23 298 27 17 1 . 298 27 298 28 48 9 IsBoolean 298 28 298 37 48 1 ( 298 37 298 38 48 1 ) 298 38 298 39 48 1 ) 298 39 298 40 18446744073709551615 1 { 299 2 299 3 18446744073709551615 4 node 300 3 300 7 98 2 -> 300 7 300 9 18446744073709551615 6 ifTrue 300 9 300 15 100 2 -> 300 15 300 17 33 6 Accept 300 17 300 23 33 1 ( 300 23 300 24 33 4 this 300 24 300 28 18446744073709551615 1 ) 300 28 300 29 33 1 ; 300 29 300 30 18446744073709551615 4 node 301 3 301 7 98 2 -> 301 7 301 9 18446744073709551615 7 ifFalse 301 9 301 16 101 2 -> 301 16 301 18 33 6 Accept 301 18 301 24 33 1 ( 301 24 301 25 33 4 this 301 25 301 29 18446744073709551615 1 ) 301 29 301 30 33 1 ; 301 30 301 31 18446744073709551615 4 node 302 3 302 7 98 2 -> 302 7 302 9 18446744073709551615 4 type 302 9 302 13 17 1 = 302 14 302 15 18 4 Type 302 16 302 20 19 2 :: 302 20 302 22 92 4 Unit 302 22 302 26 92 1 ( 302 26 302 27 92 1 ) 302 27 302 28 92 1 ; 302 28 302 29 18446744073709551615 1 } 303 2 303 3 18446744073709551615 4 else 304 2 304 6 18446744073709551615 1 { 305 2 305 3 18446744073709551615 5 throw 306 3 306 8 18446744073709551615 13 TypeException 306 9 306 22 41 1 ( 306 22 306 23 41 4 node 306 23 306 27 98 2 -> 306 27 306 29 18446744073709551615 4 line 306 29 306 33 42 1 , 306 33 306 34 41 4 node 306 35 306 39 98 2 -> 306 39 306 41 18446744073709551615 6 column 306 41 306 47 43 1 , 306 47 306 48 41 41 L"value cannot be converted to 'Boolean'" 307 8 307 49 18446744073709551615 1 ) 307 49 307 50 41 1 ; 307 50 307 51 18446744073709551615 1 } 308 2 308 3 18446744073709551615 1 } 309 1 309 2 18446744073709551615 4 void 310 1 310 5 18446744073709551615 11 TypeChecker 310 6 310 17 4 2 :: 310 17 310 19 8 5 Visit 310 19 310 24 8 1 ( 310 24 310 25 8 16 DefVarExpression 310 25 310 41 102 1 * 310 41 310 42 18446744073709551615 4 node 310 43 310 47 103 1 ) 310 47 310 48 8 1 { 311 1 311 2 18446744073709551615 4 node 312 2 312 6 103 2 -> 312 6 312 8 18446744073709551615 5 value 312 8 312 13 104 2 -> 312 13 312 15 33 6 Accept 312 15 312 21 33 1 ( 312 21 312 22 33 4 this 312 22 312 26 18446744073709551615 1 ) 312 26 312 27 33 1 ; 312 27 312 28 18446744073709551615 4 Type 313 2 313 6 19 1 & 313 6 313 7 18446744073709551615 5 rtype 313 8 313 13 105 1 = 313 14 313 15 18446744073709551615 4 node 313 16 313 20 103 2 -> 313 20 313 22 18446744073709551615 5 value 313 22 313 27 104 2 -> 313 27 313 29 18446744073709551615 4 type 313 29 313 33 17 1 ; 313 33 313 34 18446744073709551615 2 if 314 2 314 4 18446744073709551615 1 ( 314 5 314 6 18446744073709551615 4 node 314 6 314 10 103 2 -> 314 10 314 12 18446744073709551615 4 type 314 12 314 16 17 2 == 314 17 314 19 85 5 rtype 314 20 314 25 105 1 ) 314 25 314 26 18446744073709551615 1 { 315 2 315 3 18446744073709551615 7 current 316 3 316 10 7 2 -> 316 10 316 12 106 3 Put 316 12 316 15 106 1 ( 316 15 316 16 106 4 node 316 16 316 20 103 2 -> 316 20 316 22 18446744073709551615 4 name 316 22 316 26 107 1 , 316 26 316 27 106 6 Symbol 317 7 317 13 76 1 ( 317 13 317 14 76 10 SymbolKind 317 14 317 24 80 2 :: 317 24 317 26 18446744073709551615 14 VariableSymbol 317 26 317 40 81 1 , 317 40 317 41 76 4 node 317 42 317 46 103 2 -> 317 46 317 48 18446744073709551615 4 type 317 48 317 52 17 1 ) 317 52 317 53 76 1 ) 317 53 317 54 106 1 ; 317 54 317 55 18446744073709551615 1 } 318 2 318 3 18446744073709551615 4 else 319 2 319 6 18446744073709551615 1 { 320 2 320 3 18446744073709551615 5 throw 321 3 321 8 18446744073709551615 13 TypeException 321 9 321 22 41 1 ( 321 22 321 23 41 4 node 321 23 321 27 103 2 -> 321 27 321 29 18446744073709551615 4 line 321 29 321 33 42 1 , 321 33 321 34 41 4 node 321 35 321 39 103 2 -> 321 39 321 41 18446744073709551615 6 column 321 41 321 47 43 1 , 321 47 321 48 41 35 L"Cannot implicitly convert type '" 322 8 322 43 18446744073709551615 1 + 322 44 322 45 44 12 TypeToString 323 9 323 21 45 1 ( 323 21 323 22 45 4 node 323 22 323 26 103 2 -> 323 26 323 28 18446744073709551615 4 type 323 28 323 32 17 1 ) 323 32 323 33 45 1 + 323 34 323 35 44 9 L"' to '" 323 36 323 45 18446744073709551615 1 + 323 46 323 47 44 12 TypeToString 324 9 324 21 45 1 ( 324 21 324 22 45 5 rtype 324 22 324 27 105 1 ) 324 27 324 28 45 1 + 324 29 324 30 44 4 L"'" 324 31 324 35 18446744073709551615 1 ) 324 35 324 36 41 1 ; 324 36 324 37 18446744073709551615 1 } 325 2 325 3 18446744073709551615 1 } 326 1 326 2 18446744073709551615 4 void 327 1 327 5 18446744073709551615 11 TypeChecker 327 6 327 17 4 2 :: 327 17 327 19 8 5 Visit 327 19 327 24 8 1 ( 327 24 327 25 8 16 DefFunExpression 327 25 327 41 108 1 * 327 41 327 42 18446744073709551615 4 node 327 43 327 47 109 1 ) 327 47 327 48 8 1 { 328 1 328 2 18446744073709551615 11 SymbolTable 329 2 329 13 6 1 * 329 13 329 14 18446744073709551615 4 prev 329 15 329 19 110 1 = 329 20 329 21 18446744073709551615 7 current 329 22 329 29 7 1 ; 329 29 329 30 18446744073709551615 11 SymbolTable 330 2 330 13 6 8 newTable 330 14 330 22 111 1 ( 330 22 330 23 6 4 prev 330 23 330 27 110 1 ) 330 27 330 28 6 1 ; 330 28 330 29 18446744073709551615 7 current 331 2 331 9 7 1 = 331 10 331 11 18446744073709551615 1 & 331 12 331 13 18446744073709551615 8 newTable 331 13 331 21 111 1 ; 331 21 331 22 18446744073709551615 7 current 332 2 332 9 7 2 -> 332 9 332 11 106 3 Put 332 11 332 14 106 1 ( 332 14 332 15 106 4 node 332 15 332 19 109 2 -> 332 19 332 21 18446744073709551615 4 name 332 21 332 25 112 1 , 332 25 332 26 106 6 Symbol 332 27 332 33 76 1 ( 332 33 332 34 76 10 SymbolKind 332 34 332 44 80 2 :: 332 44 332 46 18446744073709551615 14 FunctionSymbol 332 46 332 60 113 1 , 332 60 332 61 76 4 node 332 62 332 66 109 2 -> 332 66 332 68 18446744073709551615 4 type 332 68 332 72 17 1 ) 332 72 332 73 76 1 ) 332 73 332 74 106 1 ; 332 74 332 75 18446744073709551615 3 for 333 2 333 5 18446744073709551615 1 ( 333 6 333 7 18446744073709551615 15 ParameterExpPtr 333 7 333 22 114 1 & 333 22 333 23 18446744073709551615 1 p 333 24 333 25 115 1 : 333 26 333 27 90 4 node 333 28 333 32 109 2 -> 333 32 333 34 18446744073709551615 10 parameters 333 34 333 44 116 1 ) 333 44 333 45 18446744073709551615 1 { 334 2 334 3 18446744073709551615 7 current 335 3 335 10 7 2 -> 335 10 335 12 106 3 Put 335 12 335 15 106 1 ( 335 15 335 16 106 1 p 335 16 335 17 115 2 -> 335 17 335 19 18446744073709551615 4 name 335 19 335 23 117 1 , 335 23 335 24 106 6 Symbol 335 25 335 31 76 1 ( 335 31 335 32 76 10 SymbolKind 335 32 335 42 80 2 :: 335 42 335 44 18446744073709551615 14 VariableSymbol 335 44 335 58 81 1 , 335 58 335 59 76 1 p 335 60 335 61 115 2 -> 335 61 335 63 18446744073709551615 4 type 335 63 335 67 17 1 ) 335 67 335 68 76 1 ) 335 68 335 69 106 1 ; 335 69 335 70 18446744073709551615 1 } 336 2 336 3 18446744073709551615 4 node 337 2 337 6 109 2 -> 337 6 337 8 18446744073709551615 4 body 337 8 337 12 118 2 -> 337 12 337 14 33 6 Accept 337 14 337 20 33 1 ( 337 20 337 21 33 4 this 337 21 337 25 18446744073709551615 1 ) 337 25 337 26 33 1 ; 337 26 337 27 18446744073709551615 7 current 338 2 338 9 7 1 = 338 10 338 11 18446744073709551615 4 prev 338 12 338 16 110 1 ; 338 16 338 17 18446744073709551615 1 } 339 1 339 2 18446744073709551615 4 void 340 1 340 5 18446744073709551615 11 TypeChecker 340 6 340 17 4 2 :: 340 17 340 19 8 5 Visit 340 19 340 24 8 1 ( 340 24 340 25 8 19 ParameterExpression 340 25 340 44 119 1 * 340 44 340 45 18446744073709551615 1 ) 340 45 340 46 8 1 { 341 1 341 2 18446744073709551615 5 throw 342 2 342 7 18446744073709551615 7 wstring 342 8 342 15 27 1 ( 342 15 342 16 29 18 L"not implemented" 342 16 342 34 18446744073709551615 1 ) 342 34 342 35 29 1 ; 342 35 342 36 18446744073709551615 1 } 343 1 343 2 18446744073709551615 4 void 344 1 344 5 18446744073709551615 11 TypeChecker 344 6 344 17 4 2 :: 344 17 344 19 8 5 Visit 344 19 344 24 8 1 ( 344 24 344 25 8 14 CallExpression 344 25 344 39 120 1 * 344 39 344 40 18446744073709551615 4 node 344 41 344 45 121 1 ) 344 45 344 46 8 1 { 345 1 345 2 18446744073709551615 4 node 346 2 346 6 121 2 -> 346 6 346 8 18446744073709551615 8 function 346 8 346 16 122 2 -> 346 16 346 18 33 6 Accept 346 18 346 24 33 1 ( 346 24 346 25 33 4 this 346 25 346 29 18446744073709551615 1 ) 346 29 346 30 33 1 ; 346 30 346 31 18446744073709551615 3 for 347 2 347 5 18446744073709551615 1 ( 347 6 347 7 18446744073709551615 6 ExpPtr 347 7 347 13 88 1 & 347 13 347 14 18446744073709551615 3 arg 347 15 347 18 123 1 : 347 19 347 20 90 4 node 347 21 347 25 121 2 -> 347 25 347 27 18446744073709551615 9 arguments 347 27 347 36 124 1 ) 347 36 347 37 18446744073709551615 1 { 348 2 348 3 18446744073709551615 3 arg 349 3 349 6 123 2 -> 349 6 349 8 33 6 Accept 349 8 349 14 33 1 ( 349 14 349 15 33 4 this 349 15 349 19 18446744073709551615 1 ) 349 19 349 20 33 1 ; 349 20 349 21 18446744073709551615 1 } 350 2 350 3 18446744073709551615 2 if 351 2 351 4 18446744073709551615 1 ( 351 5 351 6 18446744073709551615 4 node 351 6 351 10 121 2 -> 351 10 351 12 18446744073709551615 8 function 351 12 351 20 122 2 -> 351 20 351 22 18446744073709551615 4 type 351 22 351 26 17 1 . 351 26 351 27 125 10 IsFunction 351 27 351 37 125 1 ( 351 37 351 38 125 1 ) 351 38 351 39 125 1 ) 351 39 351 40 18446744073709551615 1 { 352 2 352 3 18446744073709551615 6 vector 353 3 353 9 126 1 < 353 9 353 10 18446744073709551615 4 Type 353 10 353 14 19 1 > 353 14 353 15 18446744073709551615 1 & 353 15 353 16 18446744073709551615 5 types 353 17 353 22 127 1 = 353 23 353 24 18446744073709551615 4 node 353 25 353 29 121 2 -> 353 29 353 31 18446744073709551615 8 function 353 31 353 39 122 2 -> 353 39 353 41 18446744073709551615 4 type 353 41 353 45 17 1 . 353 45 353 46 18446744073709551615 10 parameters 353 46 353 56 128 1 ; 353 56 353 57 18446744073709551615 2 if 354 3 354 5 18446744073709551615 1 ( 354 6 354 7 18446744073709551615 5 types 354 7 354 12 127 1 . 354 12 354 13 129 4 size 354 13 354 17 129 1 ( 354 17 354 18 129 1 ) 354 18 354 19 129 2 == 354 20 354 22 18446744073709551615 4 node 354 23 354 27 121 2 -> 354 27 354 29 18446744073709551615 9 arguments 354 29 354 38 124 1 . 354 38 354 39 129 4 size 354 39 354 43 129 1 ( 354 43 354 44 129 1 ) 354 44 354 45 129 1 + 354 46 354 47 18446744073709551615 1 1 354 48 354 49 18446744073709551615 1 ) 354 49 354 50 18446744073709551615 1 { 355 3 355 4 18446744073709551615 3 int 356 4 356 7 18446744073709551615 1 n 356 8 356 9 130 1 = 356 10 356 11 18446744073709551615 4 node 356 12 356 16 121 2 -> 356 16 356 18 18446744073709551615 9 arguments 356 18 356 27 124 1 . 356 27 356 28 129 4 size 356 28 356 32 129 1 ( 356 32 356 33 129 1 ) 356 33 356 34 129 1 ; 356 34 356 35 18446744073709551615 3 for 357 4 357 7 18446744073709551615 1 ( 357 8 357 9 18446744073709551615 3 int 357 9 357 12 18446744073709551615 1 i 357 13 357 14 131 1 = 357 15 357 16 18446744073709551615 1 0 357 17 357 18 18446744073709551615 1 ; 357 18 357 19 18446744073709551615 1 i 357 20 357 21 131 1 < 357 22 357 23 18446744073709551615 1 n 357 24 357 25 130 1 ; 357 25 357 26 18446744073709551615 1 i 357 27 357 28 131 2 ++ 357 28 357 30 18446744073709551615 1 ) 357 30 357 31 18446744073709551615 1 { 358 4 358 5 18446744073709551615 2 if 359 5 359 7 18446744073709551615 1 ( 359 8 359 9 18446744073709551615 5 types 359 9 359 14 127 1 . 359 14 359 15 132 2 at 359 15 359 17 132 1 ( 359 17 359 18 132 1 i 359 18 359 19 131 1 ) 359 19 359 20 132 2 != 359 21 359 23 133 4 node 359 24 359 28 121 2 -> 359 28 359 30 18446744073709551615 9 arguments 359 30 359 39 124 1 . 359 39 359 40 132 2 at 359 40 359 42 132 1 ( 359 42 359 43 132 1 i 359 43 359 44 131 1 ) 359 44 359 45 132 2 -> 359 45 359 47 18446744073709551615 4 type 359 47 359 51 17 1 ) 359 51 359 52 18446744073709551615 1 { 360 5 360 6 18446744073709551615 5 throw 361 6 361 11 18446744073709551615 13 TypeException 361 12 361 25 41 1 ( 361 25 361 26 41 4 node 361 26 361 30 121 2 -> 361 30 361 32 18446744073709551615 4 line 361 32 361 36 42 1 , 361 36 361 37 41 4 node 361 38 361 42 121 2 -> 361 42 361 44 18446744073709551615 6 column 361 44 361 50 43 1 , 361 50 361 51 41 31 L"argument type does not match" 362 11 362 42 18446744073709551615 1 ) 362 42 362 43 41 1 ; 362 43 362 44 18446744073709551615 1 } 363 5 363 6 18446744073709551615 1 } 364 4 364 5 18446744073709551615 4 node 365 4 365 8 121 2 -> 365 8 365 10 18446744073709551615 4 type 365 10 365 14 17 1 = 365 15 365 16 18 5 types 365 17 365 22 127 1 . 365 22 365 23 134 4 back 365 23 365 27 134 1 ( 365 27 365 28 134 1 ) 365 28 365 29 134 1 ; 365 29 365 30 18446744073709551615 1 } 366 3 366 4 18446744073709551615 4 else 367 3 367 7 18446744073709551615 1 { 368 3 368 4 18446744073709551615 5 throw 369 4 369 9 18446744073709551615 13 TypeException 369 10 369 23 41 1 ( 369 23 369 24 41 4 node 369 24 369 28 121 2 -> 369 28 369 30 18446744073709551615 4 line 369 30 369 34 42 1 , 369 34 369 35 41 4 node 369 36 369 40 121 2 -> 369 40 369 42 18446744073709551615 6 column 369 42 369 48 43 1 , 369 48 369 49 41 32 L"argument count does not match" 370 9 370 41 18446744073709551615 1 ) 370 41 370 42 41 1 ; 370 42 370 43 18446744073709551615 1 } 371 3 371 4 18446744073709551615 1 } 372 2 372 3 18446744073709551615 4 else 373 2 373 6 18446744073709551615 1 { 374 2 374 3 18446744073709551615 5 throw 375 3 375 8 18446744073709551615 13 TypeException 375 9 375 22 41 1 ( 375 22 375 23 41 4 node 375 23 375 27 121 2 -> 375 27 375 29 18446744073709551615 4 line 375 29 375 33 42 1 , 375 33 375 34 41 4 node 375 35 375 39 121 2 -> 375 39 375 41 18446744073709551615 6 column 375 41 375 47 43 1 , 375 47 375 48 41 36 L"object cannot be used as function" 376 8 376 44 18446744073709551615 1 ) 376 44 376 45 41 1 ; 376 45 376 46 18446744073709551615 1 } 377 2 377 3 18446744073709551615 1 } 378 1 378 2 18446744073709551615 4 void 379 1 379 5 18446744073709551615 11 TypeChecker 379 6 379 17 4 2 :: 379 17 379 19 8 5 Visit 379 19 379 24 8 1 ( 379 24 379 25 8 18 VariableExpression 379 25 379 43 135 1 * 379 43 379 44 18446744073709551615 4 node 379 45 379 49 136 1 ) 379 49 379 50 8 1 { 380 1 380 2 18446744073709551615 2 if 381 2 381 4 18446744073709551615 1 ( 381 5 381 6 18446744073709551615 7 current 381 6 381 13 7 2 -> 381 13 381 15 74 9 HasSymbol 381 15 381 24 74 1 ( 381 24 381 25 74 4 node 381 25 381 29 136 2 -> 381 29 381 31 18446744073709551615 4 name 381 31 381 35 137 1 ) 381 35 381 36 74 1 ) 381 36 381 37 18446744073709551615 1 { 382 2 382 3 18446744073709551615 6 Symbol 383 3 383 9 76 6 symbol 383 10 383 16 138 1 = 383 17 383 18 18446744073709551615 7 current 383 19 383 26 7 2 -> 383 26 383 28 78 4 Find 383 28 383 32 78 1 ( 383 32 383 33 78 4 node 383 33 383 37 136 2 -> 383 37 383 39 18446744073709551615 4 name 383 39 383 43 137 1 ) 383 43 383 44 78 1 ; 383 44 383 45 18446744073709551615 2 if 384 3 384 5 18446744073709551615 1 ( 384 6 384 7 18446744073709551615 6 symbol 384 7 384 13 138 1 . 384 13 384 14 18446744073709551615 4 kind 384 14 384 18 79 2 == 384 19 384 21 18446744073709551615 10 SymbolKind 384 22 384 32 80 2 :: 384 32 384 34 18446744073709551615 14 VariableSymbol 384 34 384 48 81 1 ) 384 48 384 49 18446744073709551615 1 { 385 3 385 4 18446744073709551615 4 Type 386 4 386 8 19 4 type 386 9 386 13 139 1 = 386 14 386 15 18446744073709551615 8 any_cast 386 16 386 24 83 1 < 386 24 386 25 83 4 Type 386 25 386 29 19 1 > 386 29 386 30 83 1 ( 386 30 386 31 83 6 symbol 386 31 386 37 138 1 . 386 37 386 38 18446744073709551615 5 value 386 38 386 43 84 1 ) 386 43 386 44 83 1 ; 386 44 386 45 18446744073709551615 4 node 387 4 387 8 136 2 -> 387 8 387 10 18446744073709551615 4 type 387 10 387 14 17 1 = 387 15 387 16 18 4 type 387 17 387 21 139 1 ; 387 21 387 22 18446744073709551615 1 } 388 3 388 4 18446744073709551615 4 else 389 3 389 7 18446744073709551615 2 if 389 8 389 10 18446744073709551615 1 ( 389 11 389 12 18446744073709551615 6 symbol 389 12 389 18 138 1 . 389 18 389 19 18446744073709551615 4 kind 389 19 389 23 79 2 == 389 24 389 26 18446744073709551615 10 SymbolKind 389 27 389 37 80 2 :: 389 37 389 39 18446744073709551615 14 FunctionSymbol 389 39 389 53 113 1 ) 389 53 389 54 18446744073709551615 1 { 390 3 390 4 18446744073709551615 4 Type 391 4 391 8 19 4 type 391 9 391 13 140 1 = 391 14 391 15 18446744073709551615 8 any_cast 391 16 391 24 83 1 < 391 24 391 25 83 4 Type 391 25 391 29 19 1 > 391 29 391 30 83 1 ( 391 30 391 31 83 6 symbol 391 31 391 37 138 1 . 391 37 391 38 18446744073709551615 5 value 391 38 391 43 84 1 ) 391 43 391 44 83 1 ; 391 44 391 45 18446744073709551615 4 node 392 4 392 8 136 2 -> 392 8 392 10 18446744073709551615 4 type 392 10 392 14 17 1 = 392 15 392 16 18 4 type 392 17 392 21 140 1 ; 392 21 392 22 18446744073709551615 1 } 393 3 393 4 18446744073709551615 4 else 394 3 394 7 18446744073709551615 1 { 395 3 395 4 18446744073709551615 5 throw 396 4 396 9 18446744073709551615 13 TypeException 396 10 396 23 41 1 ( 396 23 396 24 41 4 node 396 24 396 28 136 2 -> 396 28 396 30 18446744073709551615 4 line 396 30 396 34 42 1 , 396 34 396 35 41 4 node 396 36 396 40 136 2 -> 396 40 396 42 18446744073709551615 6 column 396 42 396 48 43 1 , 396 48 396 49 41 9 L"name '" 397 9 397 18 18446744073709551615 1 + 397 19 397 20 44 4 node 397 21 397 25 136 2 -> 397 25 397 27 18446744073709551615 4 name 397 27 397 31 137 1 + 397 32 397 33 44 22 L"' is not a variable" 398 10 398 32 18446744073709551615 1 ) 398 32 398 33 41 1 ; 398 33 398 34 18446744073709551615 1 } 399 3 399 4 18446744073709551615 1 } 400 2 400 3 18446744073709551615 4 else 401 2 401 6 18446744073709551615 1 { 402 2 402 3 18446744073709551615 5 throw 403 3 403 8 18446744073709551615 13 TypeException 403 9 403 22 41 1 ( 403 22 403 23 41 4 node 403 23 403 27 136 2 -> 403 27 403 29 18446744073709551615 4 line 403 29 403 33 42 1 , 403 33 403 34 41 4 node 403 35 403 39 136 2 -> 403 39 403 41 18446744073709551615 6 column 403 41 403 47 43 1 , 403 47 403 48 41 9 L"name '" 404 8 404 17 18446744073709551615 1 + 404 18 404 19 44 4 node 404 20 404 24 136 2 -> 404 24 404 26 18446744073709551615 4 name 404 26 404 30 137 1 + 404 31 404 32 44 19 L"' is not defined" 404 33 404 52 18446744073709551615 1 ) 404 52 404 53 41 1 ; 404 53 404 54 18446744073709551615 1 } 405 2 405 3 18446744073709551615 1 } 406 1 406 2 18446744073709551615 4 void 407 1 407 5 18446744073709551615 11 TypeChecker 407 6 407 17 4 2 :: 407 17 407 19 8 5 Visit 407 19 407 24 8 1 ( 407 24 407 25 8 16 ReturnExpression 407 25 407 41 141 1 * 407 41 407 42 18446744073709551615 4 node 407 43 407 47 142 1 ) 407 47 407 48 8 1 { 408 1 408 2 18446744073709551615 4 node 409 2 409 6 142 2 -> 409 6 409 8 18446744073709551615 5 value 409 8 409 13 143 2 -> 409 13 409 15 33 6 Accept 409 15 409 21 33 1 ( 409 21 409 22 33 4 this 409 22 409 26 18446744073709551615 1 ) 409 26 409 27 33 1 ; 409 27 409 28 18446744073709551615 4 node 410 2 410 6 142 2 -> 410 6 410 8 18446744073709551615 4 type 410 8 410 12 17 1 = 410 13 410 14 18 4 node 410 15 410 19 142 2 -> 410 19 410 21 18446744073709551615 5 value 410 21 410 26 143 2 -> 410 26 410 28 18446744073709551615 4 type 410 28 410 32 17 1 ; 410 32 410 33 18446744073709551615 1 } 411 1 411 2 18446744073709551615 4 void 412 1 412 5 18446744073709551615 11 TypeChecker 412 6 412 17 4 2 :: 412 17 412 19 8 5 Visit 412 19 412 24 8 1 ( 412 24 412 25 8 15 WhileExpression 412 25 412 40 144 1 * 412 40 412 41 18446744073709551615 4 node 412 42 412 46 145 1 ) 412 46 412 47 8 1 { 413 1 413 2 18446744073709551615 4 node 414 2 414 6 145 2 -> 414 6 414 8 18446744073709551615 9 condition 414 8 414 17 146 2 -> 414 17 414 19 33 6 Accept 414 19 414 25 33 1 ( 414 25 414 26 33 4 this 414 26 414 30 18446744073709551615 1 ) 414 30 414 31 33 1 ; 414 31 414 32 18446744073709551615 2 if 415 2 415 4 18446744073709551615 1 ( 415 5 415 6 18446744073709551615 4 node 415 6 415 10 145 2 -> 415 10 415 12 18446744073709551615 9 condition 415 12 415 21 146 2 -> 415 21 415 23 18446744073709551615 4 type 415 23 415 27 17 1 . 415 27 415 28 48 9 IsBoolean 415 28 415 37 48 1 ( 415 37 415 38 48 1 ) 415 38 415 39 48 1 ) 415 39 415 40 18446744073709551615 1 { 416 2 416 3 18446744073709551615 4 node 417 3 417 7 145 2 -> 417 7 417 9 18446744073709551615 4 body 417 9 417 13 147 2 -> 417 13 417 15 33 6 Accept 417 15 417 21 33 1 ( 417 21 417 22 33 4 this 417 22 417 26 18446744073709551615 1 ) 417 26 417 27 33 1 ; 417 27 417 28 18446744073709551615 4 node 418 3 418 7 145 2 -> 418 7 418 9 18446744073709551615 4 type 418 9 418 13 17 1 = 418 14 418 15 18 4 Type 418 16 418 20 19 2 :: 418 20 418 22 92 4 Unit 418 22 418 26 92 1 ( 418 26 418 27 92 1 ) 418 27 418 28 92 1 ; 418 28 418 29 18446744073709551615 1 } 419 2 419 3 18446744073709551615 4 else 420 2 420 6 18446744073709551615 1 { 421 2 421 3 18446744073709551615 5 throw 422 3 422 8 18446744073709551615 13 TypeException 422 9 422 22 41 1 ( 422 22 422 23 41 4 node 422 23 422 27 145 2 -> 422 27 422 29 18446744073709551615 4 line 422 29 422 33 42 1 , 422 33 422 34 41 4 node 422 35 422 39 145 2 -> 422 39 422 41 18446744073709551615 6 column 422 41 422 47 43 1 , 422 47 422 48 41 41 L"value cannot be converted to 'Boolean'" 423 8 423 49 18446744073709551615 1 ) 423 49 423 50 41 1 ; 423 50 423 51 18446744073709551615 1 } 424 2 424 3 18446744073709551615 1 } 425 1 425 2 18446744073709551615 0 0 148 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 11 TypeChecker 6 1 3 0 18 global:TypeChecker 24 1 3 0 11 SymbolTable 6 1 3 0 19 current:TypeChecker 21 2 3 0 24 Visit:Visitor:Expression 17 Visit:TypeChecker 4 1 3 0 18 ConstantExpression 10 1 3 0 77 12:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 7 any:std 9 1 3 0 76 14:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 6 1 3 0 15 type:Expression 21 1 3 0 14 operator=:Type 4 1 3 0 4 Type 21 1 3 0 8 Int:Type 20 1 3 0 7 int64_t 21 1 3 0 9 Long:Type 21 1 3 0 10 Float:Type 21 1 3 0 11 Double:Type 21 1 3 0 9 Char:Type 21 1 3 0 12 Boolean:Type 20 1 3 0 19 wstring:__cxx11:std 21 1 3 0 11 String:Type 24 1 3 0 24 basic_string:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 77 48:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 operand:UnaryExpression 21 1 3 0 17 Accept:Expression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 21 1 3 0 10 IsInt:Type 21 1 3 0 11 IsLong:Type 21 1 3 0 12 IsFloat:Type 21 1 3 0 13 IsDouble:Type 4 1 3 0 13 TypeException 6 1 3 0 15 line:Expression 6 1 3 0 17 column:Expression 8 1 3 0 13 operator+:std 8 1 3 0 12 TypeToString 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 18 Not:ExpressionKind 21 1 3 0 14 IsBoolean:Type 4 1 3 0 16 BinaryExpression 10 1 3 0 78 100:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 9 1 3 0 77 104:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 105:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 106:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 18 And:ExpressionKind 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 23 NotEqual:ExpressionKind 21 1 3 0 11 IsChar:Type 21 1 3 0 13 IsString:Type 4 1 3 0 16 AssignExpression 10 1 3 0 78 239:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:AssignExpression 21 1 3 0 21 HasSymbol:SymbolTable 6 1 3 0 21 name:AssignExpression 4 1 3 0 6 Symbol 9 1 3 0 78 244:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 16 Find:SymbolTable 6 1 3 0 11 kind:Symbol 5 1 3 0 10 SymbolKind 7 1 3 0 25 VariableSymbol:SymbolKind 9 1 3 0 77 247:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 8 1 3 0 12 any_cast:std 6 1 3 0 12 value:Symbol 8 1 3 0 10 operator== 4 1 3 0 15 BlockExpression 10 1 3 0 78 273:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 36 1 3 0 6 ExpPtr 9 1 3 0 78 275:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 27 expressions:BlockExpression 21 1 3 0 9 Unit:Type 4 1 3 0 16 IfThenExpression 10 1 3 0 78 281:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 78 295:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 16 DefVarExpression 10 1 3 0 78 310:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:DefVarExpression 9 1 3 0 77 313:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 15 Put:SymbolTable 6 1 3 0 21 name:DefVarExpression 4 1 3 0 16 DefFunExpression 10 1 3 0 78 327:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 329:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 330:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 21 name:DefFunExpression 7 1 3 0 25 FunctionSymbol:SymbolKind 36 1 3 0 15 ParameterExpPtr 9 1 3 0 78 333:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 27 parameters:DefFunExpression 6 1 3 0 24 name:ParameterExpression 6 1 3 0 21 body:DefFunExpression 4 1 3 0 19 ParameterExpression 4 1 3 0 14 CallExpression 10 1 3 0 78 344:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 78 347:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 24 arguments:CallExpression 21 1 3 0 15 IsFunction:Type 31 1 3 0 10 vector:std 9 1 3 0 78 353:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 15 parameters:Type 21 1 3 0 15 size:vector:std 9 1 3 0 77 356:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 78 357:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 21 1 3 0 13 at:vector:std 8 1 3 0 10 operator!= 21 1 3 0 15 back:vector:std 4 1 3 0 18 VariableExpression 10 1 3 0 78 379:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 23 name:VariableExpression 9 1 3 0 78 383:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 386:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 9 1 3 0 77 391:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 4 1 3 0 16 ReturnExpression 10 1 3 0 78 407:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 78 412:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 0 0 6 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1529755055 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1529891544 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SymbolTable.hpp 1529836059 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1529762159 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.cpp 1529891820 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1529891618
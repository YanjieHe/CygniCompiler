22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 1701 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 10 "Test.hpp" 1 10 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 14 "Compiler.hpp" 2 10 2 24 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 22 "ExpressionViewer.hpp" 3 10 3 32 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 11 "Lexer.hpp" 4 10 4 21 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 12 "Parser.hpp" 5 10 5 22 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 10 "Type.hpp" 6 10 6 20 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 17 "TypeChecker.hpp" 7 10 7 27 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 8 iostream 8 11 8 19 18446744073709551615 1 > 8 19 8 20 18446744073709551615 1 # 9 1 9 2 18446744073709551615 7 include 9 2 9 9 18446744073709551615 1 < 9 10 9 11 18446744073709551615 6 string 9 11 9 17 18446744073709551615 1 > 9 17 9 18 18446744073709551615 1 # 10 1 10 2 18446744073709551615 7 include 10 2 10 9 18446744073709551615 1 < 10 10 10 11 18446744073709551615 6 vector 10 11 10 17 18446744073709551615 1 > 10 17 10 18 18446744073709551615 5 using 11 1 11 6 18446744073709551615 3 std 11 7 11 10 0 2 :: 11 10 11 12 18446744073709551615 8 any_cast 11 12 11 20 1 1 ; 11 20 11 21 18446744073709551615 5 using 12 1 12 6 18446744073709551615 3 std 12 7 12 10 0 2 :: 12 10 12 12 18446744073709551615 4 endl 12 12 12 16 2 1 ; 12 16 12 17 18446744073709551615 5 using 13 1 13 6 18446744073709551615 3 std 13 7 13 10 0 2 :: 13 10 13 12 18446744073709551615 6 string 13 12 13 18 3 1 ; 13 18 13 19 18446744073709551615 5 using 14 1 14 6 18446744073709551615 3 std 14 7 14 10 0 2 :: 14 10 14 12 18446744073709551615 6 vector 14 12 14 18 4 1 ; 14 18 14 19 18446744073709551615 5 using 15 1 15 6 18446744073709551615 3 std 15 7 15 10 0 2 :: 15 10 15 12 18446744073709551615 5 wcout 15 12 15 17 5 1 ; 15 17 15 18 18446744073709551615 4 void 16 1 16 5 18446744073709551615 9 TestLexer 16 6 16 15 6 2 :: 16 15 16 17 7 11 AssertEqual 16 17 16 28 7 1 ( 16 28 16 29 7 6 vector 16 29 16 35 8 1 < 16 35 16 36 18446744073709551615 5 Token 16 36 16 41 9 1 > 16 41 16 42 18446744073709551615 1 & 16 42 16 43 18446744073709551615 1 x 16 44 16 45 10 1 , 16 45 16 46 7 6 vector 16 47 16 53 8 1 < 16 53 16 54 18446744073709551615 5 Token 16 54 16 59 9 1 > 16 59 16 60 18446744073709551615 1 & 16 60 16 61 18446744073709551615 1 y 16 62 16 63 11 1 , 16 63 16 64 7 7 wstring 16 65 16 72 12 7 message 16 73 16 80 13 1 ) 16 80 16 81 7 1 { 17 1 17 2 18446744073709551615 2 if 18 2 18 4 18446744073709551615 1 ( 18 5 18 6 18446744073709551615 1 x 18 6 18 7 10 2 != 18 8 18 10 14 1 y 18 11 18 12 11 1 ) 18 12 18 13 18446744073709551615 1 { 19 2 19 3 18446744073709551615 5 wcout 20 3 20 8 15 2 << 20 9 20 11 16 7 message 20 12 20 19 13 2 << 20 20 20 22 17 4 endl 20 23 20 27 18 1 ; 20 27 20 28 18446744073709551615 1 } 21 2 21 3 18446744073709551615 1 } 22 1 22 2 18446744073709551615 4 void 23 1 23 5 18446744073709551615 9 TestLexer 23 6 23 15 6 2 :: 23 15 23 17 19 10 ShowTokens 23 17 23 27 19 1 ( 23 27 23 28 19 6 vector 23 28 23 34 8 1 < 23 34 23 35 18446744073709551615 5 Token 23 35 23 40 9 1 > 23 40 23 41 18446744073709551615 1 & 23 41 23 42 18446744073709551615 6 tokens 23 43 23 49 20 1 ) 23 49 23 50 19 1 { 24 1 24 2 18446744073709551615 3 for 25 2 25 5 18446744073709551615 1 ( 25 6 25 7 18446744073709551615 5 Token 25 7 25 12 9 1 & 25 12 25 13 18446744073709551615 5 token 25 14 25 19 21 1 : 25 20 25 21 22 6 tokens 25 22 25 28 20 1 ) 25 28 25 29 18446744073709551615 1 { 26 2 26 3 18446744073709551615 5 wcout 27 3 27 8 15 2 << 27 9 27 11 16 4 L"(" 27 12 27 16 18446744073709551615 2 << 27 17 27 19 17 5 token 27 20 27 25 21 1 . 27 25 27 26 18446744073709551615 4 line 27 26 27 30 23 1 ; 27 30 27 31 18446744073709551615 5 wcout 28 3 28 8 15 2 << 28 9 28 11 16 5 L", " 28 12 28 17 18446744073709551615 2 << 28 18 28 20 17 5 token 28 21 28 26 21 1 . 28 26 28 27 18446744073709551615 6 column 28 27 28 33 24 1 ; 28 33 28 34 18446744073709551615 5 wcout 29 3 29 8 15 2 << 29 9 29 11 16 5 L", " 29 12 29 17 18446744073709551615 2 << 29 18 29 20 16 16 TokenTagToString 29 21 29 37 25 1 ( 29 37 29 38 25 5 token 29 38 29 43 21 1 . 29 43 29 44 18446744073709551615 3 tag 29 44 29 47 26 1 ) 29 47 29 48 25 1 ; 29 48 29 49 18446744073709551615 2 if 30 3 30 5 18446744073709551615 1 ( 30 6 30 7 18446744073709551615 5 token 30 7 30 12 21 1 . 30 12 30 13 18446744073709551615 5 value 30 13 30 18 27 1 . 30 18 30 19 28 4 type 30 19 30 23 28 1 ( 30 23 30 24 28 1 ) 30 24 30 25 28 2 == 30 26 30 28 29 6 typeid 30 29 30 35 18446744073709551615 1 ( 30 35 30 36 18446744073709551615 7 int32_t 30 36 30 43 30 1 ) 30 43 30 44 18446744073709551615 1 ) 30 44 30 45 18446744073709551615 1 { 31 3 31 4 18446744073709551615 5 wcout 32 4 32 9 15 2 << 32 10 32 12 16 5 L", " 32 13 32 18 18446744073709551615 2 << 32 19 32 21 17 8 any_cast 32 22 32 30 31 1 < 32 30 32 31 31 7 int32_t 32 31 32 38 30 1 > 32 38 32 39 31 1 ( 32 39 32 40 31 5 token 32 40 32 45 21 1 . 32 45 32 46 18446744073709551615 5 value 32 46 32 51 27 1 ) 32 51 32 52 31 1 ; 32 52 32 53 18446744073709551615 1 } 33 3 33 4 18446744073709551615 4 else 34 3 34 7 18446744073709551615 2 if 34 8 34 10 18446744073709551615 1 ( 34 11 34 12 18446744073709551615 5 token 34 12 34 17 21 1 . 34 17 34 18 18446744073709551615 5 value 34 18 34 23 27 1 . 34 23 34 24 28 4 type 34 24 34 28 28 1 ( 34 28 34 29 28 1 ) 34 29 34 30 28 2 == 34 31 34 33 29 6 typeid 34 34 34 40 18446744073709551615 1 ( 34 40 34 41 18446744073709551615 7 int64_t 34 41 34 48 32 1 ) 34 48 34 49 18446744073709551615 1 ) 34 49 34 50 18446744073709551615 1 { 35 3 35 4 18446744073709551615 5 wcout 36 4 36 9 15 2 << 36 10 36 12 16 5 L", " 36 13 36 18 18446744073709551615 2 << 36 19 36 21 17 8 any_cast 36 22 36 30 31 1 < 36 30 36 31 31 7 int64_t 36 31 36 38 32 1 > 36 38 36 39 31 1 ( 36 39 36 40 31 5 token 36 40 36 45 21 1 . 36 45 36 46 18446744073709551615 5 value 36 46 36 51 27 1 ) 36 51 36 52 31 1 ; 36 52 36 53 18446744073709551615 1 } 37 3 37 4 18446744073709551615 4 else 38 3 38 7 18446744073709551615 2 if 38 8 38 10 18446744073709551615 1 ( 38 11 38 12 18446744073709551615 5 token 38 12 38 17 21 1 . 38 17 38 18 18446744073709551615 5 value 38 18 38 23 27 1 . 38 23 38 24 28 4 type 38 24 38 28 28 1 ( 38 28 38 29 28 1 ) 38 29 38 30 28 2 == 38 31 38 33 29 6 typeid 38 34 38 40 18446744073709551615 1 ( 38 40 38 41 18446744073709551615 5 float 38 41 38 46 18446744073709551615 1 ) 38 46 38 47 18446744073709551615 1 ) 38 47 38 48 18446744073709551615 1 { 39 3 39 4 18446744073709551615 5 wcout 40 4 40 9 15 2 << 40 10 40 12 16 5 L", " 40 13 40 18 18446744073709551615 2 << 40 19 40 21 17 8 any_cast 40 22 40 30 31 1 < 40 30 40 31 31 5 float 40 31 40 36 18446744073709551615 1 > 40 36 40 37 31 1 ( 40 37 40 38 31 5 token 40 38 40 43 21 1 . 40 43 40 44 18446744073709551615 5 value 40 44 40 49 27 1 ) 40 49 40 50 31 1 ; 40 50 40 51 18446744073709551615 1 } 41 3 41 4 18446744073709551615 4 else 42 3 42 7 18446744073709551615 2 if 42 8 42 10 18446744073709551615 1 ( 42 11 42 12 18446744073709551615 5 token 42 12 42 17 21 1 . 42 17 42 18 18446744073709551615 5 value 42 18 42 23 27 1 . 42 23 42 24 28 4 type 42 24 42 28 28 1 ( 42 28 42 29 28 1 ) 42 29 42 30 28 2 == 42 31 42 33 29 6 typeid 42 34 42 40 18446744073709551615 1 ( 42 40 42 41 18446744073709551615 6 double 42 41 42 47 18446744073709551615 1 ) 42 47 42 48 18446744073709551615 1 ) 42 48 42 49 18446744073709551615 1 { 43 3 43 4 18446744073709551615 5 wcout 44 4 44 9 15 2 << 44 10 44 12 16 5 L", " 44 13 44 18 18446744073709551615 2 << 44 19 44 21 17 8 any_cast 44 22 44 30 31 1 < 44 30 44 31 31 6 double 44 31 44 37 18446744073709551615 1 > 44 37 44 38 31 1 ( 44 38 44 39 31 5 token 44 39 44 44 21 1 . 44 44 44 45 18446744073709551615 5 value 44 45 44 50 27 1 ) 44 50 44 51 31 1 ; 44 51 44 52 18446744073709551615 1 } 45 3 45 4 18446744073709551615 4 else 46 3 46 7 18446744073709551615 2 if 46 8 46 10 18446744073709551615 1 ( 46 11 46 12 18446744073709551615 5 token 46 12 46 17 21 1 . 46 17 46 18 18446744073709551615 5 value 46 18 46 23 27 1 . 46 23 46 24 28 4 type 46 24 46 28 28 1 ( 46 28 46 29 28 1 ) 46 29 46 30 28 2 == 46 31 46 33 29 6 typeid 46 34 46 40 18446744073709551615 1 ( 46 40 46 41 18446744073709551615 7 wchar_t 46 41 46 48 18446744073709551615 1 ) 46 48 46 49 18446744073709551615 1 ) 46 49 46 50 18446744073709551615 1 { 47 3 47 4 18446744073709551615 5 wcout 48 4 48 9 15 2 << 48 10 48 12 16 5 L", " 48 13 48 18 18446744073709551615 2 << 48 19 48 21 16 8 any_cast 48 22 48 30 31 1 < 48 30 48 31 31 7 wchar_t 48 31 48 38 18446744073709551615 1 > 48 38 48 39 31 1 ( 48 39 48 40 31 5 token 48 40 48 45 21 1 . 48 45 48 46 18446744073709551615 5 value 48 46 48 51 27 1 ) 48 51 48 52 31 1 ; 48 52 48 53 18446744073709551615 1 } 49 3 49 4 18446744073709551615 4 else 50 3 50 7 18446744073709551615 1 { 51 3 51 4 18446744073709551615 5 wcout 52 4 52 9 15 2 << 52 10 52 12 16 5 L", " 52 13 52 18 18446744073709551615 2 << 52 19 52 21 16 8 any_cast 52 22 52 30 31 1 < 52 30 52 31 31 7 wstring 52 31 52 38 12 1 > 52 38 52 39 31 1 ( 52 39 52 40 31 5 token 52 40 52 45 21 1 . 52 45 52 46 18446744073709551615 5 value 52 46 52 51 27 1 ) 52 51 52 52 31 1 ; 52 52 52 53 18446744073709551615 1 } 53 3 53 4 18446744073709551615 5 wcout 54 3 54 8 15 2 << 54 9 54 11 16 4 L")" 54 12 54 16 18446744073709551615 2 << 54 17 54 19 17 4 endl 54 20 54 24 18 1 ; 54 24 54 25 18446744073709551615 1 } 55 2 55 3 18446744073709551615 1 } 56 1 56 2 18446744073709551615 4 void 57 1 57 5 18446744073709551615 9 TestLexer 57 6 57 15 6 2 :: 57 15 57 17 33 10 ShowErrors 57 17 57 27 33 1 ( 57 27 57 28 33 6 vector 57 28 57 34 8 1 < 57 34 57 35 18446744073709551615 16 LexicalException 57 35 57 51 34 1 > 57 51 57 52 18446744073709551615 1 & 57 52 57 53 18446744073709551615 6 errors 57 54 57 60 35 1 ) 57 60 57 61 33 1 { 58 1 58 2 18446744073709551615 3 for 59 2 59 5 18446744073709551615 1 ( 59 6 59 7 18446744073709551615 4 auto 59 7 59 11 18446744073709551615 1 & 59 11 59 12 18446744073709551615 2 ex 59 13 59 15 36 1 : 59 16 59 17 22 6 errors 59 18 59 24 35 1 ) 59 24 59 25 18446744073709551615 1 { 60 2 60 3 18446744073709551615 5 wcout 61 3 61 8 15 2 << 61 9 61 11 16 4 L"(" 61 12 61 16 18446744073709551615 2 << 61 17 61 19 17 2 ex 61 20 61 22 36 1 . 61 22 61 23 18446744073709551615 4 line 61 23 61 27 37 2 << 61 28 61 30 16 5 L", " 61 31 61 36 18446744073709551615 2 << 61 37 61 39 17 2 ex 61 40 61 42 36 1 . 61 42 61 43 18446744073709551615 6 column 61 43 61 49 38 2 << 61 50 61 52 16 6 L"): " 61 53 61 59 18446744073709551615 2 << 61 60 61 62 16 2 ex 61 63 61 65 36 1 . 61 65 61 66 18446744073709551615 7 message 61 66 61 73 39 2 << 62 6 62 8 17 4 endl 62 9 62 13 18 1 ; 62 13 62 14 18446744073709551615 1 } 63 2 63 3 18446744073709551615 1 } 64 1 64 2 18446744073709551615 4 void 65 1 65 5 18446744073709551615 9 TestLexer 65 6 65 15 6 2 :: 65 15 65 17 40 10 TestNumber 65 17 65 27 40 1 ( 65 27 65 28 40 1 ) 65 28 65 29 40 1 { 66 1 66 2 18446744073709551615 6 string 67 2 67 8 41 4 path 67 9 67 13 42 1 = 67 14 67 15 18446744073709551615 28 "test_cases/number_test.txt" 67 16 67 44 18446744073709551615 1 ; 67 44 67 45 18446744073709551615 5 wcout 68 2 68 7 15 2 << 68 8 68 10 16 18 L"Test Function: " 68 11 68 29 18446744073709551615 2 << 68 30 68 32 16 12 __FUNCTION__ 68 33 68 45 18446744073709551615 2 << 68 46 68 48 17 4 endl 68 49 68 53 18 1 ; 68 53 68 54 18446744073709551615 5 Lexer 69 2 69 7 43 5 lexer 69 8 69 13 44 1 ( 69 13 69 14 43 4 path 69 14 69 18 42 1 ) 69 18 69 19 43 1 ; 69 19 69 20 18446744073709551615 10 ShowTokens 70 2 70 12 19 1 ( 70 12 70 13 19 5 lexer 70 13 70 18 44 1 . 70 18 70 19 18446744073709551615 6 tokens 70 19 70 25 45 1 ) 70 25 70 26 19 1 ; 70 26 70 27 18446744073709551615 6 vector 71 2 71 8 8 1 < 71 8 71 9 18446744073709551615 5 Token 71 9 71 14 9 1 > 71 14 71 15 18446744073709551615 8 expected 71 16 71 24 46 1 = 71 25 71 26 18446744073709551615 1 { 71 27 71 28 18446744073709551615 5 Token 71 28 71 33 9 1 ( 71 33 71 34 9 1 1 71 34 71 35 18446744073709551615 1 , 71 35 71 36 9 1 1 71 37 71 38 18446744073709551615 1 , 71 38 71 39 9 3 Tag 71 40 71 43 47 2 :: 71 43 71 45 18446744073709551615 3 Int 71 45 71 48 48 1 , 71 48 71 49 9 7 int32_t 71 50 71 57 30 1 ( 71 57 71 58 18446744073709551615 2 12 71 58 71 60 18446744073709551615 1 ) 71 60 71 61 18446744073709551615 1 ) 71 61 71 62 9 1 , 71 62 71 63 18446744073709551615 5 Token 72 10 72 15 9 1 ( 72 15 72 16 9 1 1 72 16 72 17 18446744073709551615 1 , 72 17 72 18 9 1 4 72 19 72 20 18446744073709551615 1 , 72 20 72 21 9 3 Tag 72 22 72 25 47 2 :: 72 25 72 27 18446744073709551615 6 Double 72 27 72 33 49 1 , 72 33 72 34 9 6 double 72 35 72 41 18446744073709551615 1 ( 72 41 72 42 18446744073709551615 4 34.3 72 42 72 46 18446744073709551615 1 ) 72 46 72 47 18446744073709551615 1 ) 72 47 72 48 9 1 , 72 48 72 49 18446744073709551615 5 Token 73 10 73 15 9 1 ( 73 15 73 16 9 1 1 73 16 73 17 18446744073709551615 1 , 73 17 73 18 9 1 9 73 19 73 20 18446744073709551615 1 , 73 20 73 21 9 3 Tag 73 22 73 25 47 2 :: 73 25 73 27 18446744073709551615 6 Double 73 27 73 33 49 1 , 73 33 73 34 9 6 double 73 35 73 41 18446744073709551615 1 ( 73 41 73 42 18446744073709551615 4 4e08 73 42 73 46 18446744073709551615 1 ) 73 46 73 47 18446744073709551615 1 ) 73 47 73 48 9 1 , 73 48 73 49 18446744073709551615 5 Token 74 10 74 15 9 1 ( 74 15 74 16 9 1 2 74 16 74 17 18446744073709551615 1 , 74 17 74 18 9 1 1 74 19 74 20 18446744073709551615 1 , 74 20 74 21 9 3 Tag 74 22 74 25 47 2 :: 74 25 74 27 18446744073709551615 4 Long 74 27 74 31 50 1 , 74 31 74 32 9 7 int64_t 74 33 74 40 32 1 ( 74 40 74 41 18446744073709551615 2 32 74 41 74 43 18446744073709551615 1 ) 74 43 74 44 18446744073709551615 1 ) 74 44 74 45 9 1 , 74 45 74 46 18446744073709551615 5 Token 75 10 75 15 9 1 ( 75 15 75 16 9 1 2 75 16 75 17 18446744073709551615 1 , 75 17 75 18 9 1 5 75 19 75 20 18446744073709551615 1 , 75 20 75 21 9 3 Tag 75 22 75 25 47 2 :: 75 25 75 27 18446744073709551615 5 Float 75 27 75 32 51 1 , 75 32 75 33 9 5 float 75 34 75 39 18446744073709551615 1 ( 75 39 75 40 18446744073709551615 4 2.34 75 40 75 44 18446744073709551615 1 ) 75 44 75 45 18446744073709551615 1 ) 75 45 75 46 9 1 , 75 46 75 47 18446744073709551615 5 Token 76 10 76 15 9 1 ( 76 15 76 16 9 1 3 76 16 76 17 18446744073709551615 1 , 76 17 76 18 9 1 1 76 19 76 20 18446744073709551615 1 , 76 20 76 21 9 3 Tag 76 22 76 25 47 2 :: 76 25 76 27 18446744073709551615 3 Eof 76 27 76 30 52 1 , 76 30 76 31 9 7 wstring 76 32 76 39 12 1 ( 76 39 76 40 53 8 L"<EOF>" 76 40 76 48 18446744073709551615 1 ) 76 48 76 49 53 1 ) 76 49 76 50 9 1 } 76 50 76 51 18446744073709551615 1 ; 76 51 76 52 18446744073709551615 11 AssertEqual 77 2 77 13 7 1 ( 77 13 77 14 7 5 lexer 77 14 77 19 44 1 . 77 19 77 20 18446744073709551615 6 tokens 77 20 77 26 45 1 , 77 26 77 27 7 8 expected 77 28 77 36 46 1 , 77 36 77 37 7 20 L"test number fails" 77 38 77 58 18446744073709551615 1 ) 77 58 77 59 7 1 ; 77 59 77 60 18446744073709551615 1 } 78 1 78 2 18446744073709551615 4 void 79 1 79 5 18446744073709551615 9 TestLexer 79 6 79 15 6 2 :: 79 15 79 17 54 14 TestHelloWorld 79 17 79 31 54 1 ( 79 31 79 32 54 1 ) 79 32 79 33 54 1 { 80 1 80 2 18446744073709551615 6 string 81 2 81 8 41 4 path 81 9 81 13 55 1 = 81 14 81 15 18446744073709551615 33 "test_cases/hello_world_test.txt" 81 16 81 49 18446744073709551615 1 ; 81 49 81 50 18446744073709551615 5 wcout 82 2 82 7 15 2 << 82 8 82 10 16 18 L"Test Function: " 82 11 82 29 18446744073709551615 2 << 82 30 82 32 16 12 __FUNCTION__ 82 33 82 45 18446744073709551615 2 << 82 46 82 48 17 4 endl 82 49 82 53 18 1 ; 82 53 82 54 18446744073709551615 5 Lexer 83 2 83 7 43 5 lexer 83 8 83 13 56 1 ( 83 13 83 14 43 4 path 83 14 83 18 55 1 ) 83 18 83 19 43 1 ; 83 19 83 20 18446744073709551615 10 ShowTokens 84 2 84 12 19 1 ( 84 12 84 13 19 5 lexer 84 13 84 18 56 1 . 84 18 84 19 18446744073709551615 6 tokens 84 19 84 25 45 1 ) 84 25 84 26 19 1 ; 84 26 84 27 18446744073709551615 10 ShowErrors 85 2 85 12 33 1 ( 85 12 85 13 33 5 lexer 85 13 85 18 56 1 . 85 18 85 19 18446744073709551615 9 errorList 85 19 85 28 57 1 ) 85 28 85 29 33 1 ; 85 29 85 30 18446744073709551615 29 // vector<Token> expected = { 86 2 86 31 18446744073709551615 46 // 	Token(1, 1, Tag::DefFun, wstring(L"fun")), 87 2 87 48 18446744073709551615 51 // 	Token(1, 5, Tag::Identifier, wstring(L"Main")), 88 2 88 53 18446744073709551615 53 // 	Token(1, 9, Tag::LeftParenthesis, wstring(L"(")), 89 2 89 55 18446744073709551615 43 // 	Token(1, 10, Tag::Identifier, L"args"), 90 2 90 45 18446744073709551615 5 // }; 91 2 91 7 18446744073709551615 1 } 92 1 92 2 18446744073709551615 4 void 93 1 93 5 18446744073709551615 10 TestParser 93 6 93 16 58 2 :: 93 16 93 18 59 15 ShowSyntaxError 93 18 93 33 59 1 ( 93 33 93 34 59 15 SyntaxException 93 34 93 49 60 1 & 93 49 93 50 18446744073709551615 2 ex 93 51 93 53 61 1 ) 93 53 93 54 59 1 { 94 1 94 2 18446744073709551615 5 wcout 95 2 95 7 15 2 << 95 8 95 10 16 4 L"(" 95 11 95 15 18446744073709551615 2 << 95 16 95 18 17 2 ex 95 19 95 21 61 1 . 95 21 95 22 18446744073709551615 4 line 95 22 95 26 62 2 << 95 27 95 29 16 5 L", " 95 30 95 35 18446744073709551615 2 << 95 36 95 38 17 2 ex 95 39 95 41 61 1 . 95 41 95 42 18446744073709551615 6 column 95 42 95 48 63 2 << 95 49 95 51 16 6 L"): " 95 52 95 58 18446744073709551615 1 ; 95 58 95 59 18446744073709551615 5 wcout 96 2 96 7 15 2 << 96 8 96 10 16 2 ex 96 11 96 13 61 1 . 96 13 96 14 18446744073709551615 7 message 96 14 96 21 39 2 << 96 22 96 24 17 4 endl 96 25 96 29 18 1 ; 96 29 96 30 18446744073709551615 1 } 97 1 97 2 18446744073709551615 4 void 98 1 98 5 18446744073709551615 10 TestParser 98 6 98 16 58 2 :: 98 16 98 18 64 19 ViewNamespaceRecord 98 18 98 37 64 1 ( 98 37 98 38 64 15 NamespaceRecord 98 38 98 53 65 1 & 98 53 98 54 18446744073709551615 8 nsRecord 98 55 98 63 66 1 ) 98 63 98 64 64 1 { 99 1 99 2 18446744073709551615 16 ExpressionViewer 100 2 100 18 67 6 viewer 100 19 100 25 68 1 ; 100 25 100 26 18446744073709551615 3 for 101 2 101 5 18446744073709551615 1 ( 101 6 101 7 18446744073709551615 4 auto 101 7 101 11 18446744073709551615 1 & 101 11 101 12 18446744073709551615 4 pair 101 13 101 17 69 1 : 101 18 101 19 70 8 nsRecord 101 20 101 28 66 1 . 101 28 101 29 18446744073709551615 6 record 101 29 101 35 71 1 ) 101 35 101 36 18446744073709551615 1 { 102 2 102 3 18446744073709551615 4 auto 103 3 103 7 18446744073709551615 5 nsPtr 103 8 103 13 72 1 = 103 14 103 15 18446744073709551615 4 pair 103 16 103 20 69 1 . 103 20 103 21 18446744073709551615 6 second 103 21 103 27 73 1 ; 103 27 103 28 18446744073709551615 6 viewer 104 3 104 9 68 1 . 104 9 104 10 74 13 ViewNamespace 104 10 104 23 74 1 ( 104 23 104 24 74 5 nsPtr 104 24 104 29 72 1 ) 104 29 104 30 74 1 ; 104 30 104 31 18446744073709551615 1 } 105 2 105 3 18446744073709551615 1 } 106 1 106 2 18446744073709551615 4 void 107 1 107 5 18446744073709551615 10 TestParser 107 6 107 16 58 2 :: 107 16 107 18 75 20 TestSimpleArithmetic 107 18 107 38 75 1 ( 107 38 107 39 75 1 ) 107 39 107 40 75 1 { 108 1 108 2 18446744073709551615 5 wcout 109 2 109 7 15 2 << 109 8 109 10 16 18 L"Test Function: " 109 11 109 29 18446744073709551615 2 << 109 30 109 32 16 12 __FUNCTION__ 109 33 109 45 18446744073709551615 2 << 109 46 109 48 17 4 endl 109 49 109 53 18 1 ; 109 53 109 54 18446744073709551615 6 ExpPtr 110 2 110 8 76 1 x 110 9 110 10 77 1 = 110 11 110 12 18446744073709551615 3 Ast 111 3 111 6 78 2 :: 111 6 111 8 79 8 Multiply 111 8 111 16 79 1 ( 111 16 111 17 79 1 0 111 17 111 18 18446744073709551615 1 , 111 18 111 19 79 1 0 111 20 111 21 18446744073709551615 1 , 111 21 111 22 79 3 Ast 111 23 111 26 78 2 :: 111 26 111 28 80 8 Constant 111 28 111 36 80 1 ( 111 36 111 37 80 1 0 111 37 111 38 18446744073709551615 1 , 111 38 111 39 80 1 0 111 40 111 41 18446744073709551615 1 , 111 41 111 42 80 2 17 111 43 111 45 18446744073709551615 1 ) 111 45 111 46 80 1 , 111 46 111 47 79 3 Ast 111 48 111 51 78 2 :: 111 51 111 53 80 8 Constant 111 53 111 61 80 1 ( 111 61 111 62 80 1 0 111 62 111 63 18446744073709551615 1 , 111 63 111 64 80 1 0 111 65 111 66 18446744073709551615 1 , 111 66 111 67 80 2 18 111 68 111 70 18446744073709551615 1 ) 111 70 111 71 80 1 ) 111 71 111 72 79 1 ; 111 72 111 73 18446744073709551615 6 ExpPtr 112 2 112 8 76 1 y 112 9 112 10 81 1 = 112 11 112 12 18446744073709551615 3 Ast 113 3 113 6 78 2 :: 113 6 113 8 82 6 Divide 113 8 113 14 82 1 ( 113 14 113 15 82 1 0 113 15 113 16 18446744073709551615 1 , 113 16 113 17 82 1 0 113 18 113 19 18446744073709551615 1 , 113 19 113 20 82 3 Ast 113 21 113 24 78 2 :: 113 24 113 26 80 8 Constant 113 26 113 34 80 1 ( 113 34 113 35 80 1 0 113 35 113 36 18446744073709551615 1 , 113 36 113 37 80 1 0 113 38 113 39 18446744073709551615 1 , 113 39 113 40 80 2 17 113 41 113 43 18446744073709551615 1 ) 113 43 113 44 80 1 , 113 44 113 45 82 3 Ast 113 46 113 49 78 2 :: 113 49 113 51 80 8 Constant 113 51 113 59 80 1 ( 113 59 113 60 80 1 0 113 60 113 61 18446744073709551615 1 , 113 61 113 62 80 1 0 113 63 113 64 18446744073709551615 1 , 113 64 113 65 80 2 18 113 66 113 68 18446744073709551615 1 ) 113 68 113 69 80 1 ) 113 69 113 70 82 1 ; 113 70 113 71 18446744073709551615 6 ExpPtr 114 2 114 8 76 3 exp 114 9 114 12 83 1 = 114 13 114 14 18446744073709551615 3 Ast 114 15 114 18 78 2 :: 114 18 114 20 84 3 Add 114 20 114 23 84 1 ( 114 23 114 24 84 1 0 114 24 114 25 18446744073709551615 1 , 114 25 114 26 84 1 0 114 27 114 28 18446744073709551615 1 , 114 28 114 29 84 1 x 114 30 114 31 77 1 , 114 31 114 32 84 1 y 114 33 114 34 81 1 ) 114 34 114 35 84 1 ; 114 35 114 36 18446744073709551615 16 ExpressionViewer 115 2 115 18 67 6 viewer 115 19 115 25 85 1 ; 115 25 115 26 18446744073709551615 3 exp 116 2 116 5 83 2 -> 116 5 116 7 86 6 Accept 116 7 116 13 86 1 ( 116 13 116 14 86 1 & 116 14 116 15 18446744073709551615 6 viewer 116 15 116 21 85 1 ) 116 21 116 22 86 1 ; 116 22 116 23 18446744073709551615 5 wcout 117 2 117 7 15 2 << 117 8 117 10 17 4 endl 117 11 117 15 18 2 << 117 16 117 18 17 4 endl 117 19 117 23 18 1 ; 117 23 117 24 18446744073709551615 1 } 118 1 118 2 18446744073709551615 4 void 119 1 119 5 18446744073709551615 10 TestParser 119 6 119 16 58 2 :: 119 16 119 18 87 12 TestAddition 119 18 119 30 87 1 ( 119 30 119 31 87 1 ) 119 31 119 32 87 1 { 120 1 120 2 18446744073709551615 5 wcout 121 2 121 7 15 2 << 121 8 121 10 16 18 L"Test Function: " 121 11 121 29 18446744073709551615 2 << 121 30 121 32 16 12 __FUNCTION__ 121 33 121 45 18446744073709551615 2 << 121 46 121 48 17 4 endl 121 49 121 53 18 1 ; 121 53 121 54 18446744073709551615 6 string 122 2 122 8 41 4 path 122 9 122 13 88 1 = 122 14 122 15 18446744073709551615 34 "test_cases/addition_function.txt" 122 16 122 50 18446744073709551615 1 ; 122 50 122 51 18446744073709551615 5 Lexer 123 2 123 7 43 5 lexer 123 8 123 13 89 1 ( 123 13 123 14 43 4 path 123 14 123 18 88 1 ) 123 18 123 19 43 1 ; 123 19 123 20 18446744073709551615 3 try 124 2 124 5 18446744073709551615 1 { 125 2 125 3 18446744073709551615 6 Parser 126 3 126 9 90 6 parser 126 10 126 16 91 1 ( 126 16 126 17 90 4 path 126 17 126 21 88 1 , 126 21 126 22 90 5 lexer 126 23 126 28 89 1 . 126 28 126 29 18446744073709551615 6 tokens 126 29 126 35 45 1 ) 126 35 126 36 90 1 ; 126 36 126 37 18446744073709551615 15 NamespaceRecord 127 3 127 18 65 8 nsRecord 127 19 127 27 92 1 ; 127 27 127 28 18446744073709551615 8 CodeFile 128 3 128 11 93 4 file 128 12 128 16 94 1 = 128 17 128 18 18446744073709551615 6 parser 128 19 128 25 91 1 . 128 25 128 26 95 7 Program 128 26 128 33 95 1 ( 128 33 128 34 95 1 ) 128 34 128 35 95 1 ; 128 35 128 36 18446744073709551615 8 nsRecord 129 3 129 11 92 1 . 129 11 129 12 96 7 AddFile 129 12 129 19 96 1 ( 129 19 129 20 96 4 file 129 20 129 24 94 1 ) 129 24 129 25 96 1 ; 129 25 129 26 18446744073709551615 11 TypeChecker 130 3 130 14 97 7 checker 130 15 130 22 98 1 ( 130 22 130 23 97 8 nsRecord 130 23 130 31 92 1 ) 130 31 130 32 97 1 ; 130 32 130 33 18446744073709551615 19 ViewNamespaceRecord 131 3 131 22 64 1 ( 131 22 131 23 64 8 nsRecord 131 23 131 31 92 1 ) 131 31 131 32 64 1 ; 131 32 131 33 18446744073709551615 1 } 132 2 132 3 18446744073709551615 5 catch 133 2 133 7 18446744073709551615 1 ( 133 8 133 9 18446744073709551615 15 SyntaxException 133 9 133 24 60 1 & 133 24 133 25 18446744073709551615 2 ex 133 26 133 28 99 1 ) 133 28 133 29 18446744073709551615 1 { 134 2 134 3 18446744073709551615 15 ShowSyntaxError 135 3 135 18 59 1 ( 135 18 135 19 59 2 ex 135 19 135 21 99 1 ) 135 21 135 22 59 1 ; 135 22 135 23 18446744073709551615 1 } 136 2 136 3 18446744073709551615 5 wcout 137 2 137 7 15 2 << 137 8 137 10 17 4 endl 137 11 137 15 18 2 << 137 16 137 18 17 4 endl 137 19 137 23 18 1 ; 137 23 137 24 18446744073709551615 1 } 138 1 138 2 18446744073709551615 4 void 139 1 139 5 18446744073709551615 10 TestParser 139 6 139 16 58 2 :: 139 16 139 18 100 13 TestFactorial 139 18 139 31 100 1 ( 139 31 139 32 100 1 ) 139 32 139 33 100 1 { 140 1 140 2 18446744073709551615 5 wcout 141 2 141 7 15 2 << 141 8 141 10 16 18 L"Test Function: " 141 11 141 29 18446744073709551615 2 << 141 30 141 32 16 12 __FUNCTION__ 141 33 141 45 18446744073709551615 2 << 141 46 141 48 17 4 endl 141 49 141 53 18 1 ; 141 53 141 54 18446744073709551615 6 string 142 2 142 8 41 4 path 142 9 142 13 101 1 = 142 14 142 15 18446744073709551615 35 "test_cases/factorial_function.txt" 142 16 142 51 18446744073709551615 1 ; 142 51 142 52 18446744073709551615 5 Lexer 143 2 143 7 43 5 lexer 143 8 143 13 102 1 ( 143 13 143 14 43 4 path 143 14 143 18 101 1 ) 143 18 143 19 43 1 ; 143 19 143 20 18446744073709551615 3 try 144 2 144 5 18446744073709551615 1 { 145 2 145 3 18446744073709551615 6 Parser 146 3 146 9 90 6 parser 146 10 146 16 103 1 ( 146 16 146 17 90 4 path 146 17 146 21 101 1 , 146 21 146 22 90 5 lexer 146 23 146 28 102 1 . 146 28 146 29 18446744073709551615 6 tokens 146 29 146 35 45 1 ) 146 35 146 36 90 1 ; 146 36 146 37 18446744073709551615 15 NamespaceRecord 147 3 147 18 65 8 nsRecord 147 19 147 27 104 1 ; 147 27 147 28 18446744073709551615 8 CodeFile 148 3 148 11 93 4 file 148 12 148 16 105 1 = 148 17 148 18 18446744073709551615 6 parser 148 19 148 25 103 1 . 148 25 148 26 95 7 Program 148 26 148 33 95 1 ( 148 33 148 34 95 1 ) 148 34 148 35 95 1 ; 148 35 148 36 18446744073709551615 8 nsRecord 149 3 149 11 104 1 . 149 11 149 12 96 7 AddFile 149 12 149 19 96 1 ( 149 19 149 20 96 4 file 149 20 149 24 105 1 ) 149 24 149 25 96 1 ; 149 25 149 26 18446744073709551615 11 TypeChecker 150 3 150 14 97 7 checker 150 15 150 22 106 1 ( 150 22 150 23 97 8 nsRecord 150 23 150 31 104 1 ) 150 31 150 32 97 1 ; 150 32 150 33 18446744073709551615 19 ViewNamespaceRecord 151 3 151 22 64 1 ( 151 22 151 23 64 8 nsRecord 151 23 151 31 104 1 ) 151 31 151 32 64 1 ; 151 32 151 33 18446744073709551615 1 } 152 2 152 3 18446744073709551615 5 catch 153 2 153 7 18446744073709551615 1 ( 153 8 153 9 18446744073709551615 15 SyntaxException 153 9 153 24 60 1 & 153 24 153 25 18446744073709551615 2 ex 153 26 153 28 107 1 ) 153 28 153 29 18446744073709551615 1 { 154 2 154 3 18446744073709551615 15 ShowSyntaxError 155 3 155 18 59 1 ( 155 18 155 19 59 2 ex 155 19 155 21 107 1 ) 155 21 155 22 59 1 ; 155 22 155 23 18446744073709551615 1 } 156 2 156 3 18446744073709551615 5 catch 157 2 157 7 18446744073709551615 1 ( 157 8 157 9 18446744073709551615 13 TypeException 157 9 157 22 108 1 & 157 22 157 23 18446744073709551615 2 ex 157 24 157 26 109 1 ) 157 26 157 27 18446744073709551615 1 { 158 2 158 3 18446744073709551615 15 TestTypeChecker 159 3 159 18 110 2 :: 159 18 159 20 111 13 ShowTypeError 159 20 159 33 111 1 ( 159 33 159 34 111 2 ex 159 34 159 36 109 1 ) 159 36 159 37 111 1 ; 159 37 159 38 18446744073709551615 1 } 160 2 160 3 18446744073709551615 5 wcout 161 2 161 7 15 2 << 161 8 161 10 17 4 endl 161 11 161 15 18 2 << 161 16 161 18 17 4 endl 161 19 161 23 18 1 ; 161 23 161 24 18446744073709551615 1 } 162 1 162 2 18446744073709551615 4 void 163 1 163 5 18446744073709551615 10 TestParser 163 6 163 16 58 2 :: 163 16 163 18 112 18 TestMultiplication 163 18 163 36 112 1 ( 163 36 163 37 112 1 ) 163 37 163 38 112 1 { 164 1 164 2 18446744073709551615 5 wcout 165 2 165 7 15 2 << 165 8 165 10 16 21 L"TestMultiplication" 165 11 165 32 18446744073709551615 2 << 165 33 165 35 17 4 endl 165 36 165 40 18 1 ; 165 40 165 41 18446744073709551615 6 string 166 2 166 8 41 4 path 166 9 166 13 113 1 = 166 14 166 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 166 16 166 56 18446744073709551615 1 ; 166 56 166 57 18446744073709551615 5 Lexer 167 2 167 7 43 5 lexer 167 8 167 13 114 1 ( 167 13 167 14 43 4 path 167 14 167 18 113 1 ) 167 18 167 19 43 1 ; 167 19 167 20 18446744073709551615 3 try 168 2 168 5 18446744073709551615 1 { 169 2 169 3 18446744073709551615 6 Parser 170 3 170 9 90 6 parser 170 10 170 16 115 1 ( 170 16 170 17 90 4 path 170 17 170 21 113 1 , 170 21 170 22 90 5 lexer 170 23 170 28 114 1 . 170 28 170 29 18446744073709551615 6 tokens 170 29 170 35 45 1 ) 170 35 170 36 90 1 ; 170 36 170 37 18446744073709551615 8 CodeFile 171 3 171 11 93 4 file 171 12 171 16 116 1 = 171 17 171 18 18446744073709551615 6 parser 171 19 171 25 115 1 . 171 25 171 26 95 7 Program 171 26 171 33 95 1 ( 171 33 171 34 95 1 ) 171 34 171 35 95 1 ; 171 35 171 36 18446744073709551615 16 ExpressionViewer 172 3 172 19 67 6 viewer 172 20 172 26 117 1 ; 172 26 172 27 18446744073709551615 1 } 173 2 173 3 18446744073709551615 5 catch 174 2 174 7 18446744073709551615 1 ( 174 8 174 9 18446744073709551615 15 SyntaxException 174 9 174 24 60 1 & 174 24 174 25 18446744073709551615 2 ex 174 26 174 28 118 1 ) 174 28 174 29 18446744073709551615 1 { 175 2 175 3 18446744073709551615 5 wcout 176 3 176 8 15 2 << 176 9 176 11 16 4 L"(" 176 12 176 16 18446744073709551615 2 << 176 17 176 19 17 2 ex 176 20 176 22 118 1 . 176 22 176 23 18446744073709551615 4 line 176 23 176 27 62 2 << 176 28 176 30 16 5 L", " 176 31 176 36 18446744073709551615 2 << 176 37 176 39 17 2 ex 176 40 176 42 118 1 . 176 42 176 43 18446744073709551615 6 column 176 43 176 49 63 2 << 176 50 176 52 16 6 L"): " 176 53 176 59 18446744073709551615 1 ; 176 59 176 60 18446744073709551615 5 wcout 177 3 177 8 15 2 << 177 9 177 11 16 2 ex 177 12 177 14 118 1 . 177 14 177 15 18446744073709551615 7 message 177 15 177 22 39 2 << 177 23 177 25 17 4 endl 177 26 177 30 18 1 ; 177 30 177 31 18446744073709551615 1 } 178 2 178 3 18446744073709551615 5 wcout 179 2 179 7 15 2 << 179 8 179 10 17 4 endl 179 11 179 15 18 2 << 179 16 179 18 17 4 endl 179 19 179 23 18 1 ; 179 23 179 24 18446744073709551615 1 } 180 1 180 2 18446744073709551615 4 void 182 1 182 5 18446744073709551615 8 TestType 182 6 182 14 119 2 :: 182 14 182 16 120 14 TestBasicTypes 182 16 182 30 120 1 ( 182 30 182 31 120 1 ) 182 31 182 32 120 1 { 183 1 183 2 18446744073709551615 4 Type 184 2 184 6 121 7 intType 184 7 184 14 122 1 = 184 15 184 16 18446744073709551615 4 Type 184 17 184 21 121 2 :: 184 21 184 23 123 3 Int 184 23 184 26 123 1 ( 184 26 184 27 123 1 ) 184 27 184 28 123 1 ; 184 28 184 29 18446744073709551615 4 Type 185 2 185 6 121 9 arrayType 185 7 185 16 124 1 = 185 17 185 18 18446744073709551615 4 Type 185 19 185 23 121 2 :: 185 23 185 25 125 5 Array 185 25 185 30 125 1 ( 185 30 185 31 125 7 intType 185 31 185 38 122 1 ) 185 38 185 39 125 1 ; 185 39 185 40 18446744073709551615 2 if 186 2 186 4 18446744073709551615 1 ( 186 5 186 6 18446744073709551615 12 TypeToString 186 6 186 18 126 1 ( 186 18 186 19 126 7 intType 186 19 186 26 122 1 ) 186 26 186 27 126 2 != 186 28 186 30 14 6 L"Int" 186 31 186 37 18446744073709551615 1 ) 186 37 186 38 18446744073709551615 1 { 187 2 187 3 18446744073709551615 5 wcout 188 3 188 8 15 2 << 188 9 188 11 16 27 L"TestBasicTypes Int fails" 188 12 188 39 18446744073709551615 2 << 188 40 188 42 17 4 endl 188 43 188 47 18 1 ; 188 47 188 48 18446744073709551615 1 } 189 2 189 3 18446744073709551615 2 if 190 2 190 4 18446744073709551615 1 ( 190 5 190 6 18446744073709551615 12 TypeToString 190 6 190 18 126 1 ( 190 18 190 19 126 9 arrayType 190 19 190 28 124 1 ) 190 28 190 29 126 2 != 190 30 190 32 14 13 L"Array[Int]" 190 33 190 46 18446744073709551615 1 ) 190 46 190 47 18446744073709551615 1 { 191 2 191 3 18446744073709551615 5 wcout 192 3 192 8 15 2 << 192 9 192 11 16 27 L"TestBasicTypes Int fails" 192 12 192 39 18446744073709551615 2 << 192 40 192 42 17 4 endl 192 43 192 47 18 1 ; 192 47 192 48 18446744073709551615 1 } 193 2 193 3 18446744073709551615 1 } 194 1 194 2 18446744073709551615 4 void 195 1 195 5 18446744073709551615 15 TestTypeChecker 195 6 195 21 110 2 :: 195 21 195 23 111 13 ShowTypeError 195 23 195 36 111 1 ( 195 36 195 37 111 13 TypeException 195 37 195 50 108 1 & 195 50 195 51 18446744073709551615 2 ex 195 52 195 54 127 1 ) 195 54 195 55 111 1 { 196 1 196 2 18446744073709551615 5 wcout 197 2 197 7 15 2 << 197 8 197 10 16 4 L"(" 197 11 197 15 18446744073709551615 2 << 197 16 197 18 17 2 ex 197 19 197 21 127 1 . 197 21 197 22 18446744073709551615 4 line 197 22 197 26 128 2 << 197 27 197 29 16 5 L", " 197 30 197 35 18446744073709551615 2 << 197 36 197 38 17 2 ex 197 39 197 41 127 1 . 197 41 197 42 18446744073709551615 6 column 197 42 197 48 129 2 << 197 49 197 51 16 6 L"): " 197 52 197 58 18446744073709551615 1 ; 197 58 197 59 18446744073709551615 5 wcout 198 2 198 7 15 2 << 198 8 198 10 16 2 ex 198 11 198 13 127 1 . 198 13 198 14 18446744073709551615 7 message 198 14 198 21 39 2 << 198 22 198 24 17 4 endl 198 25 198 29 18 1 ; 198 29 198 30 18446744073709551615 1 } 199 1 199 2 18446744073709551615 4 void 201 1 201 5 18446744073709551615 15 TestTypeChecker 201 6 201 21 110 2 :: 201 21 201 23 130 18 TestMultiplication 201 23 201 41 130 1 ( 201 41 201 42 130 1 ) 201 42 201 43 130 1 { 202 1 202 2 18446744073709551615 5 wcout 203 2 203 7 15 2 << 203 8 203 10 16 21 L"TestMultiplication" 203 11 203 32 18446744073709551615 2 << 203 33 203 35 17 4 endl 203 36 203 40 18 1 ; 203 40 203 41 18446744073709551615 6 string 204 2 204 8 41 4 path 204 9 204 13 131 1 = 204 14 204 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 204 16 204 56 18446744073709551615 1 ; 204 56 204 57 18446744073709551615 5 Lexer 205 2 205 7 43 5 lexer 205 8 205 13 132 1 ( 205 13 205 14 43 4 path 205 14 205 18 131 1 ) 205 18 205 19 43 1 ; 205 19 205 20 18446744073709551615 3 try 206 2 206 5 18446744073709551615 1 { 207 2 207 3 18446744073709551615 6 Parser 208 3 208 9 90 6 parser 208 10 208 16 133 1 ( 208 16 208 17 90 4 path 208 17 208 21 131 1 , 208 21 208 22 90 5 lexer 208 23 208 28 132 1 . 208 28 208 29 18446744073709551615 6 tokens 208 29 208 35 45 1 ) 208 35 208 36 90 1 ; 208 36 208 37 18446744073709551615 15 NamespaceRecord 209 3 209 18 65 8 nsRecord 209 19 209 27 134 1 ; 209 27 209 28 18446744073709551615 8 CodeFile 210 3 210 11 93 4 file 210 12 210 16 135 1 = 210 17 210 18 18446744073709551615 6 parser 210 19 210 25 133 1 . 210 25 210 26 95 7 Program 210 26 210 33 95 1 ( 210 33 210 34 95 1 ) 210 34 210 35 95 1 ; 210 35 210 36 18446744073709551615 8 nsRecord 211 3 211 11 134 1 . 211 11 211 12 96 7 AddFile 211 12 211 19 96 1 ( 211 19 211 20 96 4 file 211 20 211 24 135 1 ) 211 24 211 25 96 1 ; 211 25 211 26 18446744073709551615 11 TypeChecker 212 3 212 14 97 7 checker 212 15 212 22 136 1 ( 212 22 212 23 97 8 nsRecord 212 23 212 31 134 1 ) 212 31 212 32 97 1 ; 212 32 212 33 18446744073709551615 10 TestParser 213 3 213 13 58 2 :: 213 13 213 15 64 19 ViewNamespaceRecord 213 15 213 34 64 1 ( 213 34 213 35 64 8 nsRecord 213 35 213 43 134 1 ) 213 43 213 44 64 1 ; 213 44 213 45 18446744073709551615 1 } 214 2 214 3 18446744073709551615 5 catch 215 2 215 7 18446744073709551615 1 ( 215 8 215 9 18446744073709551615 15 SyntaxException 215 9 215 24 60 1 & 215 24 215 25 18446744073709551615 2 ex 215 26 215 28 137 1 ) 215 28 215 29 18446744073709551615 1 { 216 2 216 3 18446744073709551615 10 TestParser 217 3 217 13 58 2 :: 217 13 217 15 59 15 ShowSyntaxError 217 15 217 30 59 1 ( 217 30 217 31 59 2 ex 217 31 217 33 137 1 ) 217 33 217 34 59 1 ; 217 34 217 35 18446744073709551615 1 } 218 2 218 3 18446744073709551615 5 catch 219 2 219 7 18446744073709551615 1 ( 219 8 219 9 18446744073709551615 13 TypeException 219 9 219 22 108 1 & 219 22 219 23 18446744073709551615 2 ex 219 24 219 26 138 1 ) 219 26 219 27 18446744073709551615 1 { 220 2 220 3 18446744073709551615 15 TestTypeChecker 221 3 221 18 110 2 :: 221 18 221 20 111 13 ShowTypeError 221 20 221 33 111 1 ( 221 33 221 34 111 2 ex 221 34 221 36 138 1 ) 221 36 221 37 111 1 ; 221 37 221 38 18446744073709551615 1 } 222 2 222 3 18446744073709551615 5 wcout 223 2 223 7 15 2 << 223 8 223 10 17 4 endl 223 11 223 15 18 2 << 223 16 223 18 17 4 endl 223 19 223 23 18 1 ; 223 23 223 24 18446744073709551615 1 } 224 1 224 2 18446744073709551615 4 void 225 1 225 5 18446744073709551615 15 TestTypeChecker 225 6 225 21 110 2 :: 225 21 225 23 139 14 TestCircleArea 225 23 225 37 139 1 ( 225 37 225 38 139 1 ) 225 38 225 39 139 1 { 226 1 226 2 18446744073709551615 5 wcout 227 2 227 7 15 2 << 227 8 227 10 16 28 L"TestCircleAreaTypeChecker" 227 11 227 39 18446744073709551615 2 << 227 40 227 42 17 4 endl 227 43 227 47 18 1 ; 227 47 227 48 18446744073709551615 6 string 228 2 228 8 41 4 path 228 9 228 13 140 1 = 228 14 228 15 18446744073709551615 27 "test_cases/CircleArea.txt" 228 16 228 43 18446744073709551615 1 ; 228 43 228 44 18446744073709551615 5 Lexer 229 2 229 7 43 5 lexer 229 8 229 13 141 1 ( 229 13 229 14 43 4 path 229 14 229 18 140 1 ) 229 18 229 19 43 1 ; 229 19 229 20 18446744073709551615 3 try 230 2 230 5 18446744073709551615 1 { 231 2 231 3 18446744073709551615 6 Parser 232 3 232 9 90 6 parser 232 10 232 16 142 1 ( 232 16 232 17 90 4 path 232 17 232 21 140 1 , 232 21 232 22 90 5 lexer 232 23 232 28 141 1 . 232 28 232 29 18446744073709551615 6 tokens 232 29 232 35 45 1 ) 232 35 232 36 90 1 ; 232 36 232 37 18446744073709551615 15 NamespaceRecord 233 3 233 18 65 8 nsRecord 233 19 233 27 143 1 ; 233 27 233 28 18446744073709551615 8 CodeFile 234 3 234 11 93 4 file 234 12 234 16 144 1 = 234 17 234 18 18446744073709551615 6 parser 234 19 234 25 142 1 . 234 25 234 26 95 7 Program 234 26 234 33 95 1 ( 234 33 234 34 95 1 ) 234 34 234 35 95 1 ; 234 35 234 36 18446744073709551615 8 nsRecord 235 3 235 11 143 1 . 235 11 235 12 96 7 AddFile 235 12 235 19 96 1 ( 235 19 235 20 96 4 file 235 20 235 24 144 1 ) 235 24 235 25 96 1 ; 235 25 235 26 18446744073709551615 11 TypeChecker 236 3 236 14 97 7 checker 236 15 236 22 145 1 ( 236 22 236 23 97 8 nsRecord 236 23 236 31 143 1 ) 236 31 236 32 97 1 ; 236 32 236 33 18446744073709551615 10 TestParser 237 3 237 13 58 2 :: 237 13 237 15 64 19 ViewNamespaceRecord 237 15 237 34 64 1 ( 237 34 237 35 64 8 nsRecord 237 35 237 43 143 1 ) 237 43 237 44 64 1 ; 237 44 237 45 18446744073709551615 1 } 238 2 238 3 18446744073709551615 5 catch 239 2 239 7 18446744073709551615 1 ( 239 8 239 9 18446744073709551615 15 SyntaxException 239 9 239 24 60 1 & 239 24 239 25 18446744073709551615 2 ex 239 26 239 28 146 1 ) 239 28 239 29 18446744073709551615 1 { 240 2 240 3 18446744073709551615 10 TestParser 241 3 241 13 58 2 :: 241 13 241 15 59 15 ShowSyntaxError 241 15 241 30 59 1 ( 241 30 241 31 59 2 ex 241 31 241 33 146 1 ) 241 33 241 34 59 1 ; 241 34 241 35 18446744073709551615 1 } 242 2 242 3 18446744073709551615 5 catch 243 2 243 7 18446744073709551615 1 ( 243 8 243 9 18446744073709551615 13 TypeException 243 9 243 22 108 1 & 243 22 243 23 18446744073709551615 2 ex 243 24 243 26 147 1 ) 243 26 243 27 18446744073709551615 1 { 244 2 244 3 18446744073709551615 15 TestTypeChecker 245 3 245 18 110 2 :: 245 18 245 20 111 13 ShowTypeError 245 20 245 33 111 1 ( 245 33 245 34 111 2 ex 245 34 245 36 147 1 ) 245 36 245 37 111 1 ; 245 37 245 38 18446744073709551615 1 } 246 2 246 3 18446744073709551615 5 wcout 247 2 247 7 15 2 << 247 8 247 10 17 4 endl 247 11 247 15 18 2 << 247 16 247 18 17 4 endl 247 19 247 23 18 1 ; 247 23 247 24 18446744073709551615 1 } 248 1 248 2 18446744073709551615 4 void 249 1 249 5 18446744073709551615 15 TestTypeChecker 249 6 249 21 110 2 :: 249 21 249 23 148 13 TestSummation 249 23 249 36 148 1 ( 249 36 249 37 148 1 ) 249 37 249 38 148 1 { 250 1 250 2 18446744073709551615 5 wcout 251 2 251 7 15 2 << 251 8 251 10 16 16 L"TestSummation" 251 11 251 27 18446744073709551615 2 << 251 28 251 30 17 4 endl 251 31 251 35 18 1 ; 251 35 251 36 18446744073709551615 6 string 252 2 252 8 41 4 path 252 9 252 13 149 1 = 252 14 252 15 18446744073709551615 26 "test_cases/summation.txt" 252 16 252 42 18446744073709551615 1 ; 252 42 252 43 18446744073709551615 5 Lexer 253 2 253 7 43 5 lexer 253 8 253 13 150 1 ( 253 13 253 14 43 4 path 253 14 253 18 149 1 ) 253 18 253 19 43 1 ; 253 19 253 20 18446744073709551615 3 try 254 2 254 5 18446744073709551615 1 { 255 2 255 3 18446744073709551615 6 Parser 256 3 256 9 90 6 parser 256 10 256 16 151 1 ( 256 16 256 17 90 4 path 256 17 256 21 149 1 , 256 21 256 22 90 5 lexer 256 23 256 28 150 1 . 256 28 256 29 18446744073709551615 6 tokens 256 29 256 35 45 1 ) 256 35 256 36 90 1 ; 256 36 256 37 18446744073709551615 8 CodeFile 257 3 257 11 93 8 codeFile 257 12 257 20 152 1 = 257 21 257 22 18446744073709551615 6 parser 257 23 257 29 151 1 . 257 29 257 30 95 7 Program 257 30 257 37 95 1 ( 257 37 257 38 95 1 ) 257 38 257 39 95 1 ; 257 39 257 40 18446744073709551615 1 } 258 2 258 3 18446744073709551615 5 catch 259 2 259 7 18446744073709551615 1 ( 259 8 259 9 18446744073709551615 15 SyntaxException 259 9 259 24 60 1 & 259 24 259 25 18446744073709551615 2 ex 259 26 259 28 153 1 ) 259 28 259 29 18446744073709551615 1 { 260 2 260 3 18446744073709551615 10 TestParser 261 3 261 13 58 2 :: 261 13 261 15 59 15 ShowSyntaxError 261 15 261 30 59 1 ( 261 30 261 31 59 2 ex 261 31 261 33 153 1 ) 261 33 261 34 59 1 ; 261 34 261 35 18446744073709551615 1 } 262 2 262 3 18446744073709551615 5 catch 263 2 263 7 18446744073709551615 1 ( 263 8 263 9 18446744073709551615 13 TypeException 263 9 263 22 108 1 & 263 22 263 23 18446744073709551615 2 ex 263 24 263 26 154 1 ) 263 26 263 27 18446744073709551615 1 { 264 2 264 3 18446744073709551615 15 TestTypeChecker 265 3 265 18 110 2 :: 265 18 265 20 111 13 ShowTypeError 265 20 265 33 111 1 ( 265 33 265 34 111 2 ex 265 34 265 36 154 1 ) 265 36 265 37 111 1 ; 265 37 265 38 18446744073709551615 1 } 266 2 266 3 18446744073709551615 5 wcout 267 2 267 7 15 2 << 267 8 267 10 17 4 endl 267 11 267 15 18 2 << 267 16 267 18 17 4 endl 267 19 267 23 18 1 ; 267 23 267 24 18446744073709551615 1 } 268 1 268 2 18446744073709551615 4 void 269 1 269 5 18446744073709551615 12 TestCompiler 269 6 269 18 155 2 :: 269 18 269 20 156 17 TestAddTwoNumbers 269 20 269 37 156 1 ( 269 37 269 38 156 1 ) 269 38 269 39 156 1 { 270 1 270 2 18446744073709551615 5 wcout 271 2 271 7 15 2 << 271 8 271 10 16 18 L"Test Function: " 271 11 271 29 18446744073709551615 2 << 271 30 271 32 16 12 __FUNCTION__ 271 33 271 45 18446744073709551615 2 << 271 46 271 48 17 4 endl 271 49 271 53 18 1 ; 271 53 271 54 18446744073709551615 6 string 272 2 272 8 41 4 path 272 9 272 13 157 1 = 272 14 272 15 18446744073709551615 32 "test_cases/add_two_numbers.txt" 272 16 272 48 18446744073709551615 1 ; 272 48 272 49 18446744073709551615 5 Lexer 273 2 273 7 43 5 lexer 273 8 273 13 158 1 ( 273 13 273 14 43 4 path 273 14 273 18 157 1 ) 273 18 273 19 43 1 ; 273 19 273 20 18446744073709551615 3 try 274 2 274 5 18446744073709551615 1 { 275 2 275 3 18446744073709551615 6 Parser 276 3 276 9 90 6 parser 276 10 276 16 159 1 ( 276 16 276 17 90 4 path 276 17 276 21 157 1 , 276 21 276 22 90 5 lexer 276 23 276 28 158 1 . 276 28 276 29 18446744073709551615 6 tokens 276 29 276 35 45 1 ) 276 35 276 36 90 1 ; 276 36 276 37 18446744073709551615 15 NamespaceRecord 277 3 277 18 65 8 nsRecord 277 19 277 27 160 1 ; 277 27 277 28 18446744073709551615 8 CodeFile 278 3 278 11 93 4 file 278 12 278 16 161 1 = 278 17 278 18 18446744073709551615 6 parser 278 19 278 25 159 1 . 278 25 278 26 95 7 Program 278 26 278 33 95 1 ( 278 33 278 34 95 1 ) 278 34 278 35 95 1 ; 278 35 278 36 18446744073709551615 8 nsRecord 279 3 279 11 160 1 . 279 11 279 12 96 7 AddFile 279 12 279 19 96 1 ( 279 19 279 20 96 4 file 279 20 279 24 161 1 ) 279 24 279 25 96 1 ; 279 25 279 26 18446744073709551615 11 TypeChecker 280 3 280 14 97 7 checker 280 15 280 22 162 1 ( 280 22 280 23 97 8 nsRecord 280 23 280 31 160 1 ) 280 31 280 32 97 1 ; 280 32 280 33 18446744073709551615 10 TestParser 281 3 281 13 58 2 :: 281 13 281 15 64 19 ViewNamespaceRecord 281 15 281 34 64 1 ( 281 34 281 35 64 8 nsRecord 281 35 281 43 160 1 ) 281 43 281 44 64 1 ; 281 44 281 45 18446744073709551615 8 Compiler 282 3 282 11 163 8 compiler 282 12 282 20 164 1 ; 282 20 282 21 18446744073709551615 15 CompiledProgram 283 3 283 18 165 7 program 283 19 283 26 166 1 = 283 27 283 28 18446744073709551615 8 compiler 283 29 283 37 164 1 . 283 37 283 38 167 7 Compile 283 38 283 45 167 1 ( 283 45 283 46 167 8 nsRecord 283 46 283 54 160 1 ) 283 54 283 55 167 1 ; 283 55 283 56 18446744073709551615 8 ByteCode 284 3 284 11 168 4 code 284 12 284 16 169 1 = 284 17 284 18 18446744073709551615 7 program 284 19 284 26 166 1 . 284 26 284 27 170 12 EmitByteCode 284 27 284 39 170 1 ( 284 39 284 40 170 1 ) 284 40 284 41 170 1 ; 284 41 284 42 18446744073709551615 3 for 285 3 285 6 18446744073709551615 1 ( 285 7 285 8 18446744073709551615 4 auto 285 8 285 12 18446744073709551615 1 & 285 12 285 13 18446744073709551615 1 b 285 14 285 15 171 1 : 285 16 285 17 22 4 code 285 18 285 22 169 1 ) 285 22 285 23 18446744073709551615 1 { 286 3 286 4 18446744073709551615 5 wcout 287 4 287 9 15 2 << 287 10 287 12 17 1 b 287 13 287 14 171 2 << 287 15 287 17 16 4 L"," 287 18 287 22 18446744073709551615 2 << 287 23 287 25 17 4 endl 287 26 287 30 18 1 ; 287 30 287 31 18446744073709551615 1 } 288 3 288 4 18446744073709551615 1 } 289 2 289 3 18446744073709551615 5 catch 290 2 290 7 18446744073709551615 1 ( 290 8 290 9 18446744073709551615 15 SyntaxException 290 9 290 24 60 1 & 290 24 290 25 18446744073709551615 2 ex 290 26 290 28 172 1 ) 290 28 290 29 18446744073709551615 1 { 291 2 291 3 18446744073709551615 10 TestParser 292 3 292 13 58 2 :: 292 13 292 15 59 15 ShowSyntaxError 292 15 292 30 59 1 ( 292 30 292 31 59 2 ex 292 31 292 33 172 1 ) 292 33 292 34 59 1 ; 292 34 292 35 18446744073709551615 1 } 293 2 293 3 18446744073709551615 5 catch 294 2 294 7 18446744073709551615 1 ( 294 8 294 9 18446744073709551615 13 TypeException 294 9 294 22 108 1 & 294 22 294 23 18446744073709551615 2 ex 294 24 294 26 173 1 ) 294 26 294 27 18446744073709551615 1 { 295 2 295 3 18446744073709551615 15 TestTypeChecker 296 3 296 18 110 2 :: 296 18 296 20 111 13 ShowTypeError 296 20 296 33 111 1 ( 296 33 296 34 111 2 ex 296 34 296 36 173 1 ) 296 36 296 37 111 1 ; 296 37 296 38 18446744073709551615 1 } 297 2 297 3 18446744073709551615 5 wcout 298 2 298 7 15 2 << 298 8 298 10 17 4 endl 298 11 298 15 18 2 << 298 16 298 18 17 4 endl 298 19 298 23 18 1 ; 298 23 298 24 18446744073709551615 1 } 299 1 299 2 18446744073709551615 4 void 300 1 300 5 18446744073709551615 12 TestCompiler 300 6 300 18 155 2 :: 300 18 300 20 174 7 TestMax 300 20 300 27 174 1 ( 300 27 300 28 174 1 ) 300 28 300 29 174 1 { 301 1 301 2 18446744073709551615 5 wcout 302 2 302 7 15 2 << 302 8 302 10 16 18 L"Test Function: " 302 11 302 29 18446744073709551615 2 << 302 30 302 32 16 12 __FUNCTION__ 302 33 302 45 18446744073709551615 2 << 302 46 302 48 17 4 endl 302 49 302 53 18 1 ; 302 53 302 54 18446744073709551615 6 string 303 2 303 8 41 4 path 303 9 303 13 175 1 = 303 14 303 15 18446744073709551615 20 "test_cases/max.txt" 303 16 303 36 18446744073709551615 1 ; 303 36 303 37 18446744073709551615 5 Lexer 304 2 304 7 43 5 lexer 304 8 304 13 176 1 ( 304 13 304 14 43 4 path 304 14 304 18 175 1 ) 304 18 304 19 43 1 ; 304 19 304 20 18446744073709551615 3 try 305 2 305 5 18446744073709551615 1 { 306 2 306 3 18446744073709551615 6 Parser 307 3 307 9 90 6 parser 307 10 307 16 177 1 ( 307 16 307 17 90 4 path 307 17 307 21 175 1 , 307 21 307 22 90 5 lexer 307 23 307 28 176 1 . 307 28 307 29 18446744073709551615 6 tokens 307 29 307 35 45 1 ) 307 35 307 36 90 1 ; 307 36 307 37 18446744073709551615 15 NamespaceRecord 308 3 308 18 65 8 nsRecord 308 19 308 27 178 1 ; 308 27 308 28 18446744073709551615 8 CodeFile 309 3 309 11 93 4 file 309 12 309 16 179 1 = 309 17 309 18 18446744073709551615 6 parser 309 19 309 25 177 1 . 309 25 309 26 95 7 Program 309 26 309 33 95 1 ( 309 33 309 34 95 1 ) 309 34 309 35 95 1 ; 309 35 309 36 18446744073709551615 8 nsRecord 310 3 310 11 178 1 . 310 11 310 12 96 7 AddFile 310 12 310 19 96 1 ( 310 19 310 20 96 4 file 310 20 310 24 179 1 ) 310 24 310 25 96 1 ; 310 25 310 26 18446744073709551615 11 TypeChecker 311 3 311 14 97 7 checker 311 15 311 22 180 1 ( 311 22 311 23 97 8 nsRecord 311 23 311 31 178 1 ) 311 31 311 32 97 1 ; 311 32 311 33 18446744073709551615 10 TestParser 312 3 312 13 58 2 :: 312 13 312 15 64 19 ViewNamespaceRecord 312 15 312 34 64 1 ( 312 34 312 35 64 8 nsRecord 312 35 312 43 178 1 ) 312 43 312 44 64 1 ; 312 44 312 45 18446744073709551615 21 // Compiler compiler; 313 3 313 24 18446744073709551615 56 // CompiledProgram program = compiler.Compile(nsRecord); 314 3 314 59 18446744073709551615 42 // ByteCode code = program.EmitByteCode(); 315 3 315 45 18446744073709551615 23 // for (auto& b : code) 316 3 316 26 18446744073709551615 4 // { 317 3 317 7 18446744073709551615 31 // 	wcout << b << L"," << endl; 318 3 318 34 18446744073709551615 4 // } 319 3 319 7 18446744073709551615 1 } 320 2 320 3 18446744073709551615 5 catch 321 2 321 7 18446744073709551615 1 ( 321 8 321 9 18446744073709551615 15 SyntaxException 321 9 321 24 60 1 & 321 24 321 25 18446744073709551615 2 ex 321 26 321 28 181 1 ) 321 28 321 29 18446744073709551615 1 { 322 2 322 3 18446744073709551615 10 TestParser 323 3 323 13 58 2 :: 323 13 323 15 59 15 ShowSyntaxError 323 15 323 30 59 1 ( 323 30 323 31 59 2 ex 323 31 323 33 181 1 ) 323 33 323 34 59 1 ; 323 34 323 35 18446744073709551615 1 } 324 2 324 3 18446744073709551615 5 catch 325 2 325 7 18446744073709551615 1 ( 325 8 325 9 18446744073709551615 13 TypeException 325 9 325 22 108 1 & 325 22 325 23 18446744073709551615 2 ex 325 24 325 26 182 1 ) 325 26 325 27 18446744073709551615 1 { 326 2 326 3 18446744073709551615 15 TestTypeChecker 327 3 327 18 110 2 :: 327 18 327 20 111 13 ShowTypeError 327 20 327 33 111 1 ( 327 33 327 34 111 2 ex 327 34 327 36 182 1 ) 327 36 327 37 111 1 ; 327 37 327 38 18446744073709551615 1 } 328 2 328 3 18446744073709551615 5 wcout 329 2 329 7 15 2 << 329 8 329 10 17 4 endl 329 11 329 15 18 2 << 329 16 329 18 17 4 endl 329 19 329 23 18 1 ; 329 23 329 24 18446744073709551615 1 } 330 1 330 2 18446744073709551615 0 0 183 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 6 string 49 1 3 0 6 vector 49 1 3 0 5 wcout 22 1 3 0 9 TestLexer 8 1 3 0 21 AssertEqual:TestLexer 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 70 16:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 10 1 3 0 70 16:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 70 16:73:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 14 operator!=:std 9 1 3 0 9 wcout:std 8 1 3 0 12 operator:std 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 8 1 3 0 20 ShowTokens:TestLexer 10 1 3 0 70 23:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 25:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 8 1 3 0 16 TokenTagToString 6 1 3 0 9 tag:Token 6 1 3 0 11 value:Token 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 8 1 3 0 20 ShowErrors:TestLexer 4 1 3 0 16 LexicalException 10 1 3 0 70 57:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 59:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 21 line:LexicalException 6 1 3 0 23 column:LexicalException 6 1 3 0 17 message:Exception 8 1 3 0 20 TestNumber:TestLexer 20 1 3 0 18 string:__cxx11:std 9 1 3 0 69 67:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 5 Lexer 9 1 3 0 69 69:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 12 tokens:Lexer 9 1 3 0 70 71:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 5 1 3 0 3 Tag 7 1 3 0 7 Int:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 7 Eof:Tag 24 1 3 0 24 basic_string:__cxx11:std 8 1 3 0 24 TestHelloWorld:TestLexer 9 1 3 0 69 81:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 69 83:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 errorList:Lexer 22 1 3 0 10 TestParser 8 1 3 0 26 ShowSyntaxError:TestParser 4 1 3 0 15 SyntaxException 10 1 3 0 70 93:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 20 line:SyntaxException 6 1 3 0 22 column:SyntaxException 8 1 3 0 30 ViewNamespaceRecord:TestParser 4 1 3 0 15 NamespaceRecord 10 1 3 0 70 98:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 16 ExpressionViewer 9 1 3 0 71 100:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 101:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 70 103:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 30 ViewNamespace:ExpressionViewer 8 1 3 0 31 TestSimpleArithmetic:TestParser 36 1 3 0 6 ExpPtr 9 1 3 0 70 110:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 3 Ast 8 1 3 0 12 Multiply:Ast 8 1 3 0 12 Constant:Ast 9 1 3 0 70 112:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 10 Divide:Ast 9 1 3 0 70 114:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 7 Add:Ast 9 1 3 0 71 115:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 17 Accept:Expression 8 1 3 0 23 TestAddition:TestParser 9 1 3 0 70 122:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 123:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 6 Parser 9 1 3 0 71 126:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 127:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 8 CodeFile 9 1 3 0 71 128:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 14 Program:Parser 21 1 3 0 23 AddFile:NamespaceRecord 4 1 3 0 11 TypeChecker 9 1 3 0 71 130:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 133:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 24 TestFactorial:TestParser 9 1 3 0 70 142:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 143:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 146:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 147:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 148:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 150:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 153:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 13 TypeException 9 1 3 0 71 157:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 15 TestTypeChecker 8 1 3 0 29 ShowTypeError:TestTypeChecker 8 1 3 0 29 TestMultiplication:TestParser 9 1 3 0 70 166:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 167:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 170:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 171:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 172:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 174:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 8 TestType 8 1 3 0 23 TestBasicTypes:TestType 4 1 3 0 4 Type 9 1 3 0 70 184:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 8 Int:Type 9 1 3 0 70 185:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 10 Array:Type 8 1 3 0 12 TypeToString 10 1 3 0 71 195:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 18 line:TypeException 6 1 3 0 20 column:TypeException 8 1 3 0 34 TestMultiplication:TestTypeChecker 9 1 3 0 70 204:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 205:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 208:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 209:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 210:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 212:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 215:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 219:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 30 TestCircleArea:TestTypeChecker 9 1 3 0 70 228:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 229:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 232:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 233:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 234:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 236:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 239:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 243:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 29 TestSummation:TestTypeChecker 9 1 3 0 70 252:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 253:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 256:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 257:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 259:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 263:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 12 TestCompiler 8 1 3 0 30 TestAddTwoNumbers:TestCompiler 9 1 3 0 70 272:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 273:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 276:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 277:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 278:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 280:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 8 Compiler 9 1 3 0 71 282:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 15 CompiledProgram 9 1 3 0 71 283:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 16 Compile:Compiler 20 1 3 0 8 ByteCode 9 1 3 0 71 284:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 28 EmitByteCode:CompiledProgram 9 1 3 0 71 285:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 290:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 294:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 20 TestMax:TestCompiler 9 1 3 0 70 303:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 304:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 307:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 308:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 309:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 311:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 321:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 325:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 0 0 16 0 0 0 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.hpp 1531021024 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1530931711 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530932060 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1530715740 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Lexer.hpp 1529140218 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1530931928 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530932187 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1530953732 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1530610472 72 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SourceReader.hpp 1529028688 73 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/StringBuilder.hpp 1529046370 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 1531038791 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.hpp 1531038740 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1530679194 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1530931203
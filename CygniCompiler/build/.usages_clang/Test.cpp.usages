22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 2198 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 10 "Test.hpp" 1 10 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 20 "ByteCodeReader.hpp" 2 10 2 30 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 14 "Compiler.hpp" 3 10 3 24 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 22 "ExpressionViewer.hpp" 4 10 4 32 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 11 "Lexer.hpp" 5 10 5 21 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 12 "Parser.hpp" 6 10 6 22 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 10 "Type.hpp" 7 10 7 20 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 17 "TypeChecker.hpp" 8 10 8 27 18446744073709551615 1 # 9 1 9 2 18446744073709551615 7 include 9 2 9 9 18446744073709551615 1 < 9 10 9 11 18446744073709551615 8 iostream 9 11 9 19 18446744073709551615 1 > 9 19 9 20 18446744073709551615 1 # 10 1 10 2 18446744073709551615 7 include 10 2 10 9 18446744073709551615 1 < 10 10 10 11 18446744073709551615 6 string 10 11 10 17 18446744073709551615 1 > 10 17 10 18 18446744073709551615 1 # 11 1 11 2 18446744073709551615 7 include 11 2 11 9 18446744073709551615 1 < 11 10 11 11 18446744073709551615 6 vector 11 11 11 17 18446744073709551615 1 > 11 17 11 18 18446744073709551615 5 using 13 1 13 6 18446744073709551615 3 std 13 7 13 10 0 2 :: 13 10 13 12 18446744073709551615 8 any_cast 13 12 13 20 1 1 ; 13 20 13 21 18446744073709551615 5 using 14 1 14 6 18446744073709551615 3 std 14 7 14 10 0 2 :: 14 10 14 12 18446744073709551615 4 endl 14 12 14 16 2 1 ; 14 16 14 17 18446744073709551615 5 using 15 1 15 6 18446744073709551615 3 std 15 7 15 10 0 2 :: 15 10 15 12 18446744073709551615 6 string 15 12 15 18 3 1 ; 15 18 15 19 18446744073709551615 5 using 16 1 16 6 18446744073709551615 3 std 16 7 16 10 0 2 :: 16 10 16 12 18446744073709551615 6 vector 16 12 16 18 4 1 ; 16 18 16 19 18446744073709551615 5 using 17 1 17 6 18446744073709551615 3 std 17 7 17 10 0 2 :: 17 10 17 12 18446744073709551615 5 wcout 17 12 17 17 5 1 ; 17 17 17 18 18446744073709551615 4 void 18 1 18 5 18446744073709551615 9 TestLexer 18 6 18 15 6 2 :: 18 15 18 17 7 11 AssertEqual 18 17 18 28 7 1 ( 18 28 18 29 7 6 vector 18 29 18 35 8 1 < 18 35 18 36 18446744073709551615 5 Token 18 36 18 41 9 1 > 18 41 18 42 18446744073709551615 1 & 18 42 18 43 18446744073709551615 1 x 18 44 18 45 10 1 , 18 45 18 46 7 6 vector 18 47 18 53 8 1 < 18 53 18 54 18446744073709551615 5 Token 18 54 18 59 9 1 > 18 59 18 60 18446744073709551615 1 & 18 60 18 61 18446744073709551615 1 y 18 62 18 63 11 1 , 18 63 18 64 7 7 wstring 18 65 18 72 12 7 message 18 73 18 80 13 1 ) 18 80 18 81 7 1 { 19 1 19 2 18446744073709551615 2 if 20 2 20 4 18446744073709551615 1 ( 20 5 20 6 18446744073709551615 1 x 20 6 20 7 10 2 != 20 8 20 10 14 1 y 20 11 20 12 11 1 ) 20 12 20 13 18446744073709551615 1 { 21 2 21 3 18446744073709551615 5 wcout 22 3 22 8 15 2 << 22 9 22 11 16 7 message 22 12 22 19 13 2 << 22 20 22 22 17 4 endl 22 23 22 27 18 1 ; 22 27 22 28 18446744073709551615 1 } 23 2 23 3 18446744073709551615 1 } 24 1 24 2 18446744073709551615 4 void 25 1 25 5 18446744073709551615 9 TestLexer 25 6 25 15 6 2 :: 25 15 25 17 19 10 ShowTokens 25 17 25 27 19 1 ( 25 27 25 28 19 6 vector 25 28 25 34 8 1 < 25 34 25 35 18446744073709551615 5 Token 25 35 25 40 9 1 > 25 40 25 41 18446744073709551615 1 & 25 41 25 42 18446744073709551615 6 tokens 25 43 25 49 20 1 ) 25 49 25 50 19 1 { 26 1 26 2 18446744073709551615 3 for 27 2 27 5 18446744073709551615 1 ( 27 6 27 7 18446744073709551615 5 Token 27 7 27 12 9 1 & 27 12 27 13 18446744073709551615 5 token 27 14 27 19 21 1 : 27 20 27 21 22 6 tokens 27 22 27 28 20 1 ) 27 28 27 29 18446744073709551615 1 { 28 2 28 3 18446744073709551615 5 wcout 29 3 29 8 15 2 << 29 9 29 11 16 4 L"(" 29 12 29 16 18446744073709551615 2 << 29 17 29 19 17 5 token 29 20 29 25 21 1 . 29 25 29 26 18446744073709551615 4 line 29 26 29 30 23 1 ; 29 30 29 31 18446744073709551615 5 wcout 30 3 30 8 15 2 << 30 9 30 11 16 5 L", " 30 12 30 17 18446744073709551615 2 << 30 18 30 20 17 5 token 30 21 30 26 21 1 . 30 26 30 27 18446744073709551615 6 column 30 27 30 33 24 1 ; 30 33 30 34 18446744073709551615 5 wcout 31 3 31 8 15 2 << 31 9 31 11 16 5 L", " 31 12 31 17 18446744073709551615 2 << 31 18 31 20 16 16 TokenTagToString 31 21 31 37 25 1 ( 31 37 31 38 25 5 token 31 38 31 43 21 1 . 31 43 31 44 18446744073709551615 3 tag 31 44 31 47 26 1 ) 31 47 31 48 25 1 ; 31 48 31 49 18446744073709551615 2 if 32 3 32 5 18446744073709551615 1 ( 32 6 32 7 18446744073709551615 5 token 32 7 32 12 21 1 . 32 12 32 13 18446744073709551615 5 value 32 13 32 18 27 1 . 32 18 32 19 28 4 type 32 19 32 23 28 1 ( 32 23 32 24 28 1 ) 32 24 32 25 28 2 == 32 26 32 28 29 6 typeid 32 29 32 35 18446744073709551615 1 ( 32 35 32 36 18446744073709551615 7 int32_t 32 36 32 43 30 1 ) 32 43 32 44 18446744073709551615 1 ) 32 44 32 45 18446744073709551615 1 { 33 3 33 4 18446744073709551615 5 wcout 34 4 34 9 15 2 << 34 10 34 12 16 5 L", " 34 13 34 18 18446744073709551615 2 << 34 19 34 21 17 8 any_cast 34 22 34 30 31 1 < 34 30 34 31 31 7 int32_t 34 31 34 38 30 1 > 34 38 34 39 31 1 ( 34 39 34 40 31 5 token 34 40 34 45 21 1 . 34 45 34 46 18446744073709551615 5 value 34 46 34 51 27 1 ) 34 51 34 52 31 1 ; 34 52 34 53 18446744073709551615 1 } 35 3 35 4 18446744073709551615 4 else 36 3 36 7 18446744073709551615 2 if 36 8 36 10 18446744073709551615 1 ( 36 11 36 12 18446744073709551615 5 token 36 12 36 17 21 1 . 36 17 36 18 18446744073709551615 5 value 36 18 36 23 27 1 . 36 23 36 24 28 4 type 36 24 36 28 28 1 ( 36 28 36 29 28 1 ) 36 29 36 30 28 2 == 36 31 36 33 29 6 typeid 36 34 36 40 18446744073709551615 1 ( 36 40 36 41 18446744073709551615 7 int64_t 36 41 36 48 32 1 ) 36 48 36 49 18446744073709551615 1 ) 36 49 36 50 18446744073709551615 1 { 37 3 37 4 18446744073709551615 5 wcout 38 4 38 9 15 2 << 38 10 38 12 16 5 L", " 38 13 38 18 18446744073709551615 2 << 38 19 38 21 17 8 any_cast 38 22 38 30 31 1 < 38 30 38 31 31 7 int64_t 38 31 38 38 32 1 > 38 38 38 39 31 1 ( 38 39 38 40 31 5 token 38 40 38 45 21 1 . 38 45 38 46 18446744073709551615 5 value 38 46 38 51 27 1 ) 38 51 38 52 31 1 ; 38 52 38 53 18446744073709551615 1 } 39 3 39 4 18446744073709551615 4 else 40 3 40 7 18446744073709551615 2 if 40 8 40 10 18446744073709551615 1 ( 40 11 40 12 18446744073709551615 5 token 40 12 40 17 21 1 . 40 17 40 18 18446744073709551615 5 value 40 18 40 23 27 1 . 40 23 40 24 28 4 type 40 24 40 28 28 1 ( 40 28 40 29 28 1 ) 40 29 40 30 28 2 == 40 31 40 33 29 6 typeid 40 34 40 40 18446744073709551615 1 ( 40 40 40 41 18446744073709551615 5 float 40 41 40 46 18446744073709551615 1 ) 40 46 40 47 18446744073709551615 1 ) 40 47 40 48 18446744073709551615 1 { 41 3 41 4 18446744073709551615 5 wcout 42 4 42 9 15 2 << 42 10 42 12 16 5 L", " 42 13 42 18 18446744073709551615 2 << 42 19 42 21 17 8 any_cast 42 22 42 30 31 1 < 42 30 42 31 31 5 float 42 31 42 36 18446744073709551615 1 > 42 36 42 37 31 1 ( 42 37 42 38 31 5 token 42 38 42 43 21 1 . 42 43 42 44 18446744073709551615 5 value 42 44 42 49 27 1 ) 42 49 42 50 31 1 ; 42 50 42 51 18446744073709551615 1 } 43 3 43 4 18446744073709551615 4 else 44 3 44 7 18446744073709551615 2 if 44 8 44 10 18446744073709551615 1 ( 44 11 44 12 18446744073709551615 5 token 44 12 44 17 21 1 . 44 17 44 18 18446744073709551615 5 value 44 18 44 23 27 1 . 44 23 44 24 28 4 type 44 24 44 28 28 1 ( 44 28 44 29 28 1 ) 44 29 44 30 28 2 == 44 31 44 33 29 6 typeid 44 34 44 40 18446744073709551615 1 ( 44 40 44 41 18446744073709551615 6 double 44 41 44 47 18446744073709551615 1 ) 44 47 44 48 18446744073709551615 1 ) 44 48 44 49 18446744073709551615 1 { 45 3 45 4 18446744073709551615 5 wcout 46 4 46 9 15 2 << 46 10 46 12 16 5 L", " 46 13 46 18 18446744073709551615 2 << 46 19 46 21 17 8 any_cast 46 22 46 30 31 1 < 46 30 46 31 31 6 double 46 31 46 37 18446744073709551615 1 > 46 37 46 38 31 1 ( 46 38 46 39 31 5 token 46 39 46 44 21 1 . 46 44 46 45 18446744073709551615 5 value 46 45 46 50 27 1 ) 46 50 46 51 31 1 ; 46 51 46 52 18446744073709551615 1 } 47 3 47 4 18446744073709551615 4 else 48 3 48 7 18446744073709551615 2 if 48 8 48 10 18446744073709551615 1 ( 48 11 48 12 18446744073709551615 5 token 48 12 48 17 21 1 . 48 17 48 18 18446744073709551615 5 value 48 18 48 23 27 1 . 48 23 48 24 28 4 type 48 24 48 28 28 1 ( 48 28 48 29 28 1 ) 48 29 48 30 28 2 == 48 31 48 33 29 6 typeid 48 34 48 40 18446744073709551615 1 ( 48 40 48 41 18446744073709551615 7 wchar_t 48 41 48 48 18446744073709551615 1 ) 48 48 48 49 18446744073709551615 1 ) 48 49 48 50 18446744073709551615 1 { 49 3 49 4 18446744073709551615 5 wcout 50 4 50 9 15 2 << 50 10 50 12 16 5 L", " 50 13 50 18 18446744073709551615 2 << 50 19 50 21 16 8 any_cast 50 22 50 30 31 1 < 50 30 50 31 31 7 wchar_t 50 31 50 38 18446744073709551615 1 > 50 38 50 39 31 1 ( 50 39 50 40 31 5 token 50 40 50 45 21 1 . 50 45 50 46 18446744073709551615 5 value 50 46 50 51 27 1 ) 50 51 50 52 31 1 ; 50 52 50 53 18446744073709551615 1 } 51 3 51 4 18446744073709551615 4 else 52 3 52 7 18446744073709551615 1 { 53 3 53 4 18446744073709551615 5 wcout 54 4 54 9 15 2 << 54 10 54 12 16 5 L", " 54 13 54 18 18446744073709551615 2 << 54 19 54 21 16 8 any_cast 54 22 54 30 31 1 < 54 30 54 31 31 7 wstring 54 31 54 38 12 1 > 54 38 54 39 31 1 ( 54 39 54 40 31 5 token 54 40 54 45 21 1 . 54 45 54 46 18446744073709551615 5 value 54 46 54 51 27 1 ) 54 51 54 52 31 1 ; 54 52 54 53 18446744073709551615 1 } 55 3 55 4 18446744073709551615 5 wcout 56 3 56 8 15 2 << 56 9 56 11 16 4 L")" 56 12 56 16 18446744073709551615 2 << 56 17 56 19 17 4 endl 56 20 56 24 18 1 ; 56 24 56 25 18446744073709551615 1 } 57 2 57 3 18446744073709551615 1 } 58 1 58 2 18446744073709551615 4 void 59 1 59 5 18446744073709551615 9 TestLexer 59 6 59 15 6 2 :: 59 15 59 17 33 10 ShowErrors 59 17 59 27 33 1 ( 59 27 59 28 33 6 vector 59 28 59 34 8 1 < 59 34 59 35 18446744073709551615 16 LexicalException 59 35 59 51 34 1 > 59 51 59 52 18446744073709551615 1 & 59 52 59 53 18446744073709551615 6 errors 59 54 59 60 35 1 ) 59 60 59 61 33 1 { 60 1 60 2 18446744073709551615 3 for 61 2 61 5 18446744073709551615 1 ( 61 6 61 7 18446744073709551615 4 auto 61 7 61 11 18446744073709551615 1 & 61 11 61 12 18446744073709551615 2 ex 61 13 61 15 36 1 : 61 16 61 17 22 6 errors 61 18 61 24 35 1 ) 61 24 61 25 18446744073709551615 1 { 62 2 62 3 18446744073709551615 5 wcout 63 3 63 8 15 2 << 63 9 63 11 16 4 L"(" 63 12 63 16 18446744073709551615 2 << 63 17 63 19 17 2 ex 63 20 63 22 36 1 . 63 22 63 23 18446744073709551615 4 line 63 23 63 27 37 2 << 63 28 63 30 16 5 L", " 63 31 63 36 18446744073709551615 2 << 63 37 63 39 17 2 ex 63 40 63 42 36 1 . 63 42 63 43 18446744073709551615 6 column 63 43 63 49 38 2 << 63 50 63 52 16 6 L"): " 63 53 63 59 18446744073709551615 2 << 63 60 63 62 16 2 ex 63 63 63 65 36 1 . 63 65 63 66 18446744073709551615 7 message 63 66 63 73 39 2 << 64 6 64 8 17 4 endl 64 9 64 13 18 1 ; 64 13 64 14 18446744073709551615 1 } 65 2 65 3 18446744073709551615 1 } 66 1 66 2 18446744073709551615 4 void 67 1 67 5 18446744073709551615 9 TestLexer 67 6 67 15 6 2 :: 67 15 67 17 40 10 TestNumber 67 17 67 27 40 1 ( 67 27 67 28 40 1 ) 67 28 67 29 40 1 { 68 1 68 2 18446744073709551615 6 string 69 2 69 8 41 4 path 69 9 69 13 42 1 = 69 14 69 15 18446744073709551615 28 "test_cases/number_test.txt" 69 16 69 44 18446744073709551615 1 ; 69 44 69 45 18446744073709551615 5 wcout 70 2 70 7 15 2 << 70 8 70 10 16 18 L"Test Function: " 70 11 70 29 18446744073709551615 2 << 70 30 70 32 16 12 __FUNCTION__ 70 33 70 45 18446744073709551615 2 << 70 46 70 48 17 4 endl 70 49 70 53 18 1 ; 70 53 70 54 18446744073709551615 5 Lexer 71 2 71 7 43 5 lexer 71 8 71 13 44 1 ( 71 13 71 14 43 4 path 71 14 71 18 42 1 ) 71 18 71 19 43 1 ; 71 19 71 20 18446744073709551615 10 ShowTokens 72 2 72 12 19 1 ( 72 12 72 13 19 5 lexer 72 13 72 18 44 1 . 72 18 72 19 18446744073709551615 6 tokens 72 19 72 25 45 1 ) 72 25 72 26 19 1 ; 72 26 72 27 18446744073709551615 6 vector 73 2 73 8 8 1 < 73 8 73 9 18446744073709551615 5 Token 73 9 73 14 9 1 > 73 14 73 15 18446744073709551615 8 expected 73 16 73 24 46 1 = 73 25 73 26 18446744073709551615 1 { 73 27 73 28 18446744073709551615 5 Token 73 28 73 33 9 1 ( 73 33 73 34 9 1 1 73 34 73 35 18446744073709551615 1 , 73 35 73 36 9 1 1 73 37 73 38 18446744073709551615 1 , 73 38 73 39 9 3 Tag 73 40 73 43 47 2 :: 73 43 73 45 18446744073709551615 3 Int 73 45 73 48 48 1 , 73 48 73 49 9 7 int32_t 73 50 73 57 30 1 ( 73 57 73 58 18446744073709551615 2 12 73 58 73 60 18446744073709551615 1 ) 73 60 73 61 18446744073709551615 1 ) 73 61 73 62 9 1 , 73 62 73 63 18446744073709551615 5 Token 74 10 74 15 9 1 ( 74 15 74 16 9 1 1 74 16 74 17 18446744073709551615 1 , 74 17 74 18 9 1 4 74 19 74 20 18446744073709551615 1 , 74 20 74 21 9 3 Tag 74 22 74 25 47 2 :: 74 25 74 27 18446744073709551615 6 Double 74 27 74 33 49 1 , 74 33 74 34 9 6 double 74 35 74 41 18446744073709551615 1 ( 74 41 74 42 18446744073709551615 4 34.3 74 42 74 46 18446744073709551615 1 ) 74 46 74 47 18446744073709551615 1 ) 74 47 74 48 9 1 , 74 48 74 49 18446744073709551615 5 Token 75 10 75 15 9 1 ( 75 15 75 16 9 1 1 75 16 75 17 18446744073709551615 1 , 75 17 75 18 9 1 9 75 19 75 20 18446744073709551615 1 , 75 20 75 21 9 3 Tag 75 22 75 25 47 2 :: 75 25 75 27 18446744073709551615 6 Double 75 27 75 33 49 1 , 75 33 75 34 9 6 double 75 35 75 41 18446744073709551615 1 ( 75 41 75 42 18446744073709551615 4 4e08 75 42 75 46 18446744073709551615 1 ) 75 46 75 47 18446744073709551615 1 ) 75 47 75 48 9 1 , 75 48 75 49 18446744073709551615 5 Token 76 10 76 15 9 1 ( 76 15 76 16 9 1 2 76 16 76 17 18446744073709551615 1 , 76 17 76 18 9 1 1 76 19 76 20 18446744073709551615 1 , 76 20 76 21 9 3 Tag 76 22 76 25 47 2 :: 76 25 76 27 18446744073709551615 4 Long 76 27 76 31 50 1 , 76 31 76 32 9 7 int64_t 76 33 76 40 32 1 ( 76 40 76 41 18446744073709551615 2 32 76 41 76 43 18446744073709551615 1 ) 76 43 76 44 18446744073709551615 1 ) 76 44 76 45 9 1 , 76 45 76 46 18446744073709551615 5 Token 77 10 77 15 9 1 ( 77 15 77 16 9 1 2 77 16 77 17 18446744073709551615 1 , 77 17 77 18 9 1 5 77 19 77 20 18446744073709551615 1 , 77 20 77 21 9 3 Tag 77 22 77 25 47 2 :: 77 25 77 27 18446744073709551615 5 Float 77 27 77 32 51 1 , 77 32 77 33 9 5 float 77 34 77 39 18446744073709551615 1 ( 77 39 77 40 18446744073709551615 4 2.34 77 40 77 44 18446744073709551615 1 ) 77 44 77 45 18446744073709551615 1 ) 77 45 77 46 9 1 , 77 46 77 47 18446744073709551615 5 Token 78 10 78 15 9 1 ( 78 15 78 16 9 1 3 78 16 78 17 18446744073709551615 1 , 78 17 78 18 9 1 1 78 19 78 20 18446744073709551615 1 , 78 20 78 21 9 3 Tag 78 22 78 25 47 2 :: 78 25 78 27 18446744073709551615 3 Eof 78 27 78 30 52 1 , 78 30 78 31 9 7 wstring 78 32 78 39 12 1 ( 78 39 78 40 53 8 L"<EOF>" 78 40 78 48 18446744073709551615 1 ) 78 48 78 49 53 1 ) 78 49 78 50 9 1 } 78 50 78 51 18446744073709551615 1 ; 78 51 78 52 18446744073709551615 11 AssertEqual 79 2 79 13 7 1 ( 79 13 79 14 7 5 lexer 79 14 79 19 44 1 . 79 19 79 20 18446744073709551615 6 tokens 79 20 79 26 45 1 , 79 26 79 27 7 8 expected 79 28 79 36 46 1 , 79 36 79 37 7 20 L"test number fails" 79 38 79 58 18446744073709551615 1 ) 79 58 79 59 7 1 ; 79 59 79 60 18446744073709551615 1 } 80 1 80 2 18446744073709551615 4 void 81 1 81 5 18446744073709551615 9 TestLexer 81 6 81 15 6 2 :: 81 15 81 17 54 14 TestHelloWorld 81 17 81 31 54 1 ( 81 31 81 32 54 1 ) 81 32 81 33 54 1 { 82 1 82 2 18446744073709551615 6 string 83 2 83 8 41 4 path 83 9 83 13 55 1 = 83 14 83 15 18446744073709551615 33 "test_cases/hello_world_test.txt" 83 16 83 49 18446744073709551615 1 ; 83 49 83 50 18446744073709551615 5 wcout 84 2 84 7 15 2 << 84 8 84 10 16 18 L"Test Function: " 84 11 84 29 18446744073709551615 2 << 84 30 84 32 16 12 __FUNCTION__ 84 33 84 45 18446744073709551615 2 << 84 46 84 48 17 4 endl 84 49 84 53 18 1 ; 84 53 84 54 18446744073709551615 5 Lexer 85 2 85 7 43 5 lexer 85 8 85 13 56 1 ( 85 13 85 14 43 4 path 85 14 85 18 55 1 ) 85 18 85 19 43 1 ; 85 19 85 20 18446744073709551615 10 ShowTokens 86 2 86 12 19 1 ( 86 12 86 13 19 5 lexer 86 13 86 18 56 1 . 86 18 86 19 18446744073709551615 6 tokens 86 19 86 25 45 1 ) 86 25 86 26 19 1 ; 86 26 86 27 18446744073709551615 10 ShowErrors 87 2 87 12 33 1 ( 87 12 87 13 33 5 lexer 87 13 87 18 56 1 . 87 18 87 19 18446744073709551615 9 errorList 87 19 87 28 57 1 ) 87 28 87 29 33 1 ; 87 29 87 30 18446744073709551615 29 // vector<Token> expected = { 88 2 88 31 18446744073709551615 46 // 	Token(1, 1, Tag::DefFun, wstring(L"fun")), 89 2 89 48 18446744073709551615 51 // 	Token(1, 5, Tag::Identifier, wstring(L"Main")), 90 2 90 53 18446744073709551615 53 // 	Token(1, 9, Tag::LeftParenthesis, wstring(L"(")), 91 2 91 55 18446744073709551615 43 // 	Token(1, 10, Tag::Identifier, L"args"), 92 2 92 45 18446744073709551615 5 // }; 93 2 93 7 18446744073709551615 1 } 94 1 94 2 18446744073709551615 4 void 95 1 95 5 18446744073709551615 10 TestParser 95 6 95 16 58 2 :: 95 16 95 18 59 15 ShowSyntaxError 95 18 95 33 59 1 ( 95 33 95 34 59 15 SyntaxException 95 34 95 49 60 1 & 95 49 95 50 18446744073709551615 2 ex 95 51 95 53 61 1 ) 95 53 95 54 59 1 { 96 1 96 2 18446744073709551615 5 wcout 97 2 97 7 15 2 << 97 8 97 10 16 4 L"(" 97 11 97 15 18446744073709551615 2 << 97 16 97 18 17 2 ex 97 19 97 21 61 1 . 97 21 97 22 18446744073709551615 4 line 97 22 97 26 62 2 << 97 27 97 29 16 5 L", " 97 30 97 35 18446744073709551615 2 << 97 36 97 38 17 2 ex 97 39 97 41 61 1 . 97 41 97 42 18446744073709551615 6 column 97 42 97 48 63 2 << 97 49 97 51 16 6 L"): " 97 52 97 58 18446744073709551615 1 ; 97 58 97 59 18446744073709551615 5 wcout 98 2 98 7 15 2 << 98 8 98 10 16 2 ex 98 11 98 13 61 1 . 98 13 98 14 18446744073709551615 7 message 98 14 98 21 39 2 << 98 22 98 24 17 4 endl 98 25 98 29 18 1 ; 98 29 98 30 18446744073709551615 1 } 99 1 99 2 18446744073709551615 4 void 100 1 100 5 18446744073709551615 10 TestParser 100 6 100 16 58 2 :: 100 16 100 18 64 19 ViewNamespaceRecord 100 18 100 37 64 1 ( 100 37 100 38 64 15 NamespaceRecord 100 38 100 53 65 1 & 100 53 100 54 18446744073709551615 8 nsRecord 100 55 100 63 66 1 ) 100 63 100 64 64 1 { 101 1 101 2 18446744073709551615 16 ExpressionViewer 102 2 102 18 67 6 viewer 102 19 102 25 68 1 ; 102 25 102 26 18446744073709551615 3 for 103 2 103 5 18446744073709551615 1 ( 103 6 103 7 18446744073709551615 4 auto 103 7 103 11 18446744073709551615 1 & 103 11 103 12 18446744073709551615 4 pair 103 13 103 17 69 1 : 103 18 103 19 70 8 nsRecord 103 20 103 28 66 1 . 103 28 103 29 18446744073709551615 6 record 103 29 103 35 71 1 ) 103 35 103 36 18446744073709551615 1 { 104 2 104 3 18446744073709551615 4 auto 105 3 105 7 18446744073709551615 5 nsPtr 105 8 105 13 72 1 = 105 14 105 15 18446744073709551615 4 pair 105 16 105 20 69 1 . 105 20 105 21 18446744073709551615 6 second 105 21 105 27 73 1 ; 105 27 105 28 18446744073709551615 6 viewer 106 3 106 9 68 1 . 106 9 106 10 74 13 ViewNamespace 106 10 106 23 74 1 ( 106 23 106 24 74 5 nsPtr 106 24 106 29 72 1 ) 106 29 106 30 74 1 ; 106 30 106 31 18446744073709551615 1 } 107 2 107 3 18446744073709551615 1 } 108 1 108 2 18446744073709551615 4 void 109 1 109 5 18446744073709551615 10 TestParser 109 6 109 16 58 2 :: 109 16 109 18 75 20 TestSimpleArithmetic 109 18 109 38 75 1 ( 109 38 109 39 75 1 ) 109 39 109 40 75 1 { 110 1 110 2 18446744073709551615 5 wcout 111 2 111 7 15 2 << 111 8 111 10 16 18 L"Test Function: " 111 11 111 29 18446744073709551615 2 << 111 30 111 32 16 12 __FUNCTION__ 111 33 111 45 18446744073709551615 2 << 111 46 111 48 17 4 endl 111 49 111 53 18 1 ; 111 53 111 54 18446744073709551615 6 ExpPtr 112 2 112 8 76 1 x 112 9 112 10 77 1 = 112 11 112 12 18446744073709551615 3 Ast 113 3 113 6 78 2 :: 113 6 113 8 79 8 Multiply 113 8 113 16 79 1 ( 113 16 113 17 79 1 0 113 17 113 18 18446744073709551615 1 , 113 18 113 19 79 1 0 113 20 113 21 18446744073709551615 1 , 113 21 113 22 79 3 Ast 113 23 113 26 78 2 :: 113 26 113 28 80 8 Constant 113 28 113 36 80 1 ( 113 36 113 37 80 1 0 113 37 113 38 18446744073709551615 1 , 113 38 113 39 80 1 0 113 40 113 41 18446744073709551615 1 , 113 41 113 42 80 2 17 113 43 113 45 18446744073709551615 1 ) 113 45 113 46 80 1 , 113 46 113 47 79 3 Ast 113 48 113 51 78 2 :: 113 51 113 53 80 8 Constant 113 53 113 61 80 1 ( 113 61 113 62 80 1 0 113 62 113 63 18446744073709551615 1 , 113 63 113 64 80 1 0 113 65 113 66 18446744073709551615 1 , 113 66 113 67 80 2 18 113 68 113 70 18446744073709551615 1 ) 113 70 113 71 80 1 ) 113 71 113 72 79 1 ; 113 72 113 73 18446744073709551615 6 ExpPtr 114 2 114 8 76 1 y 114 9 114 10 81 1 = 114 11 114 12 18446744073709551615 3 Ast 115 3 115 6 78 2 :: 115 6 115 8 82 6 Divide 115 8 115 14 82 1 ( 115 14 115 15 82 1 0 115 15 115 16 18446744073709551615 1 , 115 16 115 17 82 1 0 115 18 115 19 18446744073709551615 1 , 115 19 115 20 82 3 Ast 115 21 115 24 78 2 :: 115 24 115 26 80 8 Constant 115 26 115 34 80 1 ( 115 34 115 35 80 1 0 115 35 115 36 18446744073709551615 1 , 115 36 115 37 80 1 0 115 38 115 39 18446744073709551615 1 , 115 39 115 40 80 2 17 115 41 115 43 18446744073709551615 1 ) 115 43 115 44 80 1 , 115 44 115 45 82 3 Ast 115 46 115 49 78 2 :: 115 49 115 51 80 8 Constant 115 51 115 59 80 1 ( 115 59 115 60 80 1 0 115 60 115 61 18446744073709551615 1 , 115 61 115 62 80 1 0 115 63 115 64 18446744073709551615 1 , 115 64 115 65 80 2 18 115 66 115 68 18446744073709551615 1 ) 115 68 115 69 80 1 ) 115 69 115 70 82 1 ; 115 70 115 71 18446744073709551615 6 ExpPtr 116 2 116 8 76 3 exp 116 9 116 12 83 1 = 116 13 116 14 18446744073709551615 3 Ast 116 15 116 18 78 2 :: 116 18 116 20 84 3 Add 116 20 116 23 84 1 ( 116 23 116 24 84 1 0 116 24 116 25 18446744073709551615 1 , 116 25 116 26 84 1 0 116 27 116 28 18446744073709551615 1 , 116 28 116 29 84 1 x 116 30 116 31 77 1 , 116 31 116 32 84 1 y 116 33 116 34 81 1 ) 116 34 116 35 84 1 ; 116 35 116 36 18446744073709551615 16 ExpressionViewer 117 2 117 18 67 6 viewer 117 19 117 25 85 1 ; 117 25 117 26 18446744073709551615 3 exp 118 2 118 5 83 2 -> 118 5 118 7 86 6 Accept 118 7 118 13 86 1 ( 118 13 118 14 86 1 & 118 14 118 15 18446744073709551615 6 viewer 118 15 118 21 85 1 ) 118 21 118 22 86 1 ; 118 22 118 23 18446744073709551615 5 wcout 119 2 119 7 15 2 << 119 8 119 10 17 4 endl 119 11 119 15 18 2 << 119 16 119 18 17 4 endl 119 19 119 23 18 1 ; 119 23 119 24 18446744073709551615 1 } 120 1 120 2 18446744073709551615 4 void 121 1 121 5 18446744073709551615 10 TestParser 121 6 121 16 58 2 :: 121 16 121 18 87 12 TestAddition 121 18 121 30 87 1 ( 121 30 121 31 87 1 ) 121 31 121 32 87 1 { 122 1 122 2 18446744073709551615 5 wcout 123 2 123 7 15 2 << 123 8 123 10 16 18 L"Test Function: " 123 11 123 29 18446744073709551615 2 << 123 30 123 32 16 12 __FUNCTION__ 123 33 123 45 18446744073709551615 2 << 123 46 123 48 17 4 endl 123 49 123 53 18 1 ; 123 53 123 54 18446744073709551615 6 string 124 2 124 8 41 4 path 124 9 124 13 88 1 = 124 14 124 15 18446744073709551615 34 "test_cases/addition_function.txt" 124 16 124 50 18446744073709551615 1 ; 124 50 124 51 18446744073709551615 5 Lexer 125 2 125 7 43 5 lexer 125 8 125 13 89 1 ( 125 13 125 14 43 4 path 125 14 125 18 88 1 ) 125 18 125 19 43 1 ; 125 19 125 20 18446744073709551615 3 try 126 2 126 5 18446744073709551615 1 { 127 2 127 3 18446744073709551615 6 Parser 128 3 128 9 90 6 parser 128 10 128 16 91 1 ( 128 16 128 17 90 4 path 128 17 128 21 88 1 , 128 21 128 22 90 5 lexer 128 23 128 28 89 1 . 128 28 128 29 18446744073709551615 6 tokens 128 29 128 35 45 1 ) 128 35 128 36 90 1 ; 128 36 128 37 18446744073709551615 15 NamespaceRecord 129 3 129 18 65 8 nsRecord 129 19 129 27 92 1 ; 129 27 129 28 18446744073709551615 8 CodeFile 130 3 130 11 93 4 file 130 12 130 16 94 1 = 130 17 130 18 18446744073709551615 6 parser 130 19 130 25 91 1 . 130 25 130 26 95 7 Program 130 26 130 33 95 1 ( 130 33 130 34 95 1 ) 130 34 130 35 95 1 ; 130 35 130 36 18446744073709551615 8 nsRecord 131 3 131 11 92 1 . 131 11 131 12 96 7 AddFile 131 12 131 19 96 1 ( 131 19 131 20 96 4 file 131 20 131 24 94 1 ) 131 24 131 25 96 1 ; 131 25 131 26 18446744073709551615 11 TypeChecker 132 3 132 14 97 7 checker 132 15 132 22 98 1 ( 132 22 132 23 97 8 nsRecord 132 23 132 31 92 1 ) 132 31 132 32 97 1 ; 132 32 132 33 18446744073709551615 19 ViewNamespaceRecord 133 3 133 22 64 1 ( 133 22 133 23 64 8 nsRecord 133 23 133 31 92 1 ) 133 31 133 32 64 1 ; 133 32 133 33 18446744073709551615 1 } 134 2 134 3 18446744073709551615 5 catch 135 2 135 7 18446744073709551615 1 ( 135 8 135 9 18446744073709551615 15 SyntaxException 135 9 135 24 60 1 & 135 24 135 25 18446744073709551615 2 ex 135 26 135 28 99 1 ) 135 28 135 29 18446744073709551615 1 { 136 2 136 3 18446744073709551615 15 ShowSyntaxError 137 3 137 18 59 1 ( 137 18 137 19 59 2 ex 137 19 137 21 99 1 ) 137 21 137 22 59 1 ; 137 22 137 23 18446744073709551615 1 } 138 2 138 3 18446744073709551615 5 wcout 139 2 139 7 15 2 << 139 8 139 10 17 4 endl 139 11 139 15 18 2 << 139 16 139 18 17 4 endl 139 19 139 23 18 1 ; 139 23 139 24 18446744073709551615 1 } 140 1 140 2 18446744073709551615 4 void 141 1 141 5 18446744073709551615 10 TestParser 141 6 141 16 58 2 :: 141 16 141 18 100 13 TestFactorial 141 18 141 31 100 1 ( 141 31 141 32 100 1 ) 141 32 141 33 100 1 { 142 1 142 2 18446744073709551615 5 wcout 143 2 143 7 15 2 << 143 8 143 10 16 18 L"Test Function: " 143 11 143 29 18446744073709551615 2 << 143 30 143 32 16 12 __FUNCTION__ 143 33 143 45 18446744073709551615 2 << 143 46 143 48 17 4 endl 143 49 143 53 18 1 ; 143 53 143 54 18446744073709551615 6 string 144 2 144 8 41 4 path 144 9 144 13 101 1 = 144 14 144 15 18446744073709551615 35 "test_cases/factorial_function.txt" 144 16 144 51 18446744073709551615 1 ; 144 51 144 52 18446744073709551615 5 Lexer 145 2 145 7 43 5 lexer 145 8 145 13 102 1 ( 145 13 145 14 43 4 path 145 14 145 18 101 1 ) 145 18 145 19 43 1 ; 145 19 145 20 18446744073709551615 3 try 146 2 146 5 18446744073709551615 1 { 147 2 147 3 18446744073709551615 6 Parser 148 3 148 9 90 6 parser 148 10 148 16 103 1 ( 148 16 148 17 90 4 path 148 17 148 21 101 1 , 148 21 148 22 90 5 lexer 148 23 148 28 102 1 . 148 28 148 29 18446744073709551615 6 tokens 148 29 148 35 45 1 ) 148 35 148 36 90 1 ; 148 36 148 37 18446744073709551615 15 NamespaceRecord 149 3 149 18 65 8 nsRecord 149 19 149 27 104 1 ; 149 27 149 28 18446744073709551615 8 CodeFile 150 3 150 11 93 4 file 150 12 150 16 105 1 = 150 17 150 18 18446744073709551615 6 parser 150 19 150 25 103 1 . 150 25 150 26 95 7 Program 150 26 150 33 95 1 ( 150 33 150 34 95 1 ) 150 34 150 35 95 1 ; 150 35 150 36 18446744073709551615 8 nsRecord 151 3 151 11 104 1 . 151 11 151 12 96 7 AddFile 151 12 151 19 96 1 ( 151 19 151 20 96 4 file 151 20 151 24 105 1 ) 151 24 151 25 96 1 ; 151 25 151 26 18446744073709551615 11 TypeChecker 152 3 152 14 97 7 checker 152 15 152 22 106 1 ( 152 22 152 23 97 8 nsRecord 152 23 152 31 104 1 ) 152 31 152 32 97 1 ; 152 32 152 33 18446744073709551615 19 ViewNamespaceRecord 153 3 153 22 64 1 ( 153 22 153 23 64 8 nsRecord 153 23 153 31 104 1 ) 153 31 153 32 64 1 ; 153 32 153 33 18446744073709551615 1 } 154 2 154 3 18446744073709551615 5 catch 155 2 155 7 18446744073709551615 1 ( 155 8 155 9 18446744073709551615 15 SyntaxException 155 9 155 24 60 1 & 155 24 155 25 18446744073709551615 2 ex 155 26 155 28 107 1 ) 155 28 155 29 18446744073709551615 1 { 156 2 156 3 18446744073709551615 15 ShowSyntaxError 157 3 157 18 59 1 ( 157 18 157 19 59 2 ex 157 19 157 21 107 1 ) 157 21 157 22 59 1 ; 157 22 157 23 18446744073709551615 1 } 158 2 158 3 18446744073709551615 5 catch 159 2 159 7 18446744073709551615 1 ( 159 8 159 9 18446744073709551615 13 TypeException 159 9 159 22 108 1 & 159 22 159 23 18446744073709551615 2 ex 159 24 159 26 109 1 ) 159 26 159 27 18446744073709551615 1 { 160 2 160 3 18446744073709551615 15 TestTypeChecker 161 3 161 18 110 2 :: 161 18 161 20 111 13 ShowTypeError 161 20 161 33 111 1 ( 161 33 161 34 111 2 ex 161 34 161 36 109 1 ) 161 36 161 37 111 1 ; 161 37 161 38 18446744073709551615 1 } 162 2 162 3 18446744073709551615 5 wcout 163 2 163 7 15 2 << 163 8 163 10 17 4 endl 163 11 163 15 18 2 << 163 16 163 18 17 4 endl 163 19 163 23 18 1 ; 163 23 163 24 18446744073709551615 1 } 164 1 164 2 18446744073709551615 4 void 165 1 165 5 18446744073709551615 10 TestParser 165 6 165 16 58 2 :: 165 16 165 18 112 18 TestMultiplication 165 18 165 36 112 1 ( 165 36 165 37 112 1 ) 165 37 165 38 112 1 { 166 1 166 2 18446744073709551615 5 wcout 167 2 167 7 15 2 << 167 8 167 10 16 21 L"TestMultiplication" 167 11 167 32 18446744073709551615 2 << 167 33 167 35 17 4 endl 167 36 167 40 18 1 ; 167 40 167 41 18446744073709551615 6 string 168 2 168 8 41 4 path 168 9 168 13 113 1 = 168 14 168 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 168 16 168 56 18446744073709551615 1 ; 168 56 168 57 18446744073709551615 5 Lexer 169 2 169 7 43 5 lexer 169 8 169 13 114 1 ( 169 13 169 14 43 4 path 169 14 169 18 113 1 ) 169 18 169 19 43 1 ; 169 19 169 20 18446744073709551615 3 try 170 2 170 5 18446744073709551615 1 { 171 2 171 3 18446744073709551615 6 Parser 172 3 172 9 90 6 parser 172 10 172 16 115 1 ( 172 16 172 17 90 4 path 172 17 172 21 113 1 , 172 21 172 22 90 5 lexer 172 23 172 28 114 1 . 172 28 172 29 18446744073709551615 6 tokens 172 29 172 35 45 1 ) 172 35 172 36 90 1 ; 172 36 172 37 18446744073709551615 8 CodeFile 173 3 173 11 93 4 file 173 12 173 16 116 1 = 173 17 173 18 18446744073709551615 6 parser 173 19 173 25 115 1 . 173 25 173 26 95 7 Program 173 26 173 33 95 1 ( 173 33 173 34 95 1 ) 173 34 173 35 95 1 ; 173 35 173 36 18446744073709551615 16 ExpressionViewer 174 3 174 19 67 6 viewer 174 20 174 26 117 1 ; 174 26 174 27 18446744073709551615 1 } 175 2 175 3 18446744073709551615 5 catch 176 2 176 7 18446744073709551615 1 ( 176 8 176 9 18446744073709551615 15 SyntaxException 176 9 176 24 60 1 & 176 24 176 25 18446744073709551615 2 ex 176 26 176 28 118 1 ) 176 28 176 29 18446744073709551615 1 { 177 2 177 3 18446744073709551615 5 wcout 178 3 178 8 15 2 << 178 9 178 11 16 4 L"(" 178 12 178 16 18446744073709551615 2 << 178 17 178 19 17 2 ex 178 20 178 22 118 1 . 178 22 178 23 18446744073709551615 4 line 178 23 178 27 62 2 << 178 28 178 30 16 5 L", " 178 31 178 36 18446744073709551615 2 << 178 37 178 39 17 2 ex 178 40 178 42 118 1 . 178 42 178 43 18446744073709551615 6 column 178 43 178 49 63 2 << 178 50 178 52 16 6 L"): " 178 53 178 59 18446744073709551615 1 ; 178 59 178 60 18446744073709551615 5 wcout 179 3 179 8 15 2 << 179 9 179 11 16 2 ex 179 12 179 14 118 1 . 179 14 179 15 18446744073709551615 7 message 179 15 179 22 39 2 << 179 23 179 25 17 4 endl 179 26 179 30 18 1 ; 179 30 179 31 18446744073709551615 1 } 180 2 180 3 18446744073709551615 5 wcout 181 2 181 7 15 2 << 181 8 181 10 17 4 endl 181 11 181 15 18 2 << 181 16 181 18 17 4 endl 181 19 181 23 18 1 ; 181 23 181 24 18446744073709551615 1 } 182 1 182 2 18446744073709551615 4 void 184 1 184 5 18446744073709551615 8 TestType 184 6 184 14 119 2 :: 184 14 184 16 120 14 TestBasicTypes 184 16 184 30 120 1 ( 184 30 184 31 120 1 ) 184 31 184 32 120 1 { 185 1 185 2 18446744073709551615 4 Type 186 2 186 6 121 7 intType 186 7 186 14 122 1 = 186 15 186 16 18446744073709551615 4 Type 186 17 186 21 121 2 :: 186 21 186 23 123 3 Int 186 23 186 26 123 1 ( 186 26 186 27 123 1 ) 186 27 186 28 123 1 ; 186 28 186 29 18446744073709551615 4 Type 187 2 187 6 121 9 arrayType 187 7 187 16 124 1 = 187 17 187 18 18446744073709551615 4 Type 187 19 187 23 121 2 :: 187 23 187 25 125 5 Array 187 25 187 30 125 1 ( 187 30 187 31 125 7 intType 187 31 187 38 122 1 ) 187 38 187 39 125 1 ; 187 39 187 40 18446744073709551615 2 if 188 2 188 4 18446744073709551615 1 ( 188 5 188 6 18446744073709551615 12 TypeToString 188 6 188 18 126 1 ( 188 18 188 19 126 7 intType 188 19 188 26 122 1 ) 188 26 188 27 126 2 != 188 28 188 30 14 6 L"Int" 188 31 188 37 18446744073709551615 1 ) 188 37 188 38 18446744073709551615 1 { 189 2 189 3 18446744073709551615 5 wcout 190 3 190 8 15 2 << 190 9 190 11 16 27 L"TestBasicTypes Int fails" 190 12 190 39 18446744073709551615 2 << 190 40 190 42 17 4 endl 190 43 190 47 18 1 ; 190 47 190 48 18446744073709551615 1 } 191 2 191 3 18446744073709551615 2 if 192 2 192 4 18446744073709551615 1 ( 192 5 192 6 18446744073709551615 12 TypeToString 192 6 192 18 126 1 ( 192 18 192 19 126 9 arrayType 192 19 192 28 124 1 ) 192 28 192 29 126 2 != 192 30 192 32 14 13 L"Array[Int]" 192 33 192 46 18446744073709551615 1 ) 192 46 192 47 18446744073709551615 1 { 193 2 193 3 18446744073709551615 5 wcout 194 3 194 8 15 2 << 194 9 194 11 16 27 L"TestBasicTypes Int fails" 194 12 194 39 18446744073709551615 2 << 194 40 194 42 17 4 endl 194 43 194 47 18 1 ; 194 47 194 48 18446744073709551615 1 } 195 2 195 3 18446744073709551615 1 } 196 1 196 2 18446744073709551615 4 void 197 1 197 5 18446744073709551615 15 TestTypeChecker 197 6 197 21 110 2 :: 197 21 197 23 111 13 ShowTypeError 197 23 197 36 111 1 ( 197 36 197 37 111 13 TypeException 197 37 197 50 108 1 & 197 50 197 51 18446744073709551615 2 ex 197 52 197 54 127 1 ) 197 54 197 55 111 1 { 198 1 198 2 18446744073709551615 5 wcout 199 2 199 7 15 2 << 199 8 199 10 16 4 L"(" 199 11 199 15 18446744073709551615 2 << 199 16 199 18 17 2 ex 199 19 199 21 127 1 . 199 21 199 22 18446744073709551615 4 line 199 22 199 26 128 2 << 199 27 199 29 16 5 L", " 199 30 199 35 18446744073709551615 2 << 199 36 199 38 17 2 ex 199 39 199 41 127 1 . 199 41 199 42 18446744073709551615 6 column 199 42 199 48 129 2 << 199 49 199 51 16 6 L"): " 199 52 199 58 18446744073709551615 1 ; 199 58 199 59 18446744073709551615 5 wcout 200 2 200 7 15 2 << 200 8 200 10 16 2 ex 200 11 200 13 127 1 . 200 13 200 14 18446744073709551615 7 message 200 14 200 21 39 2 << 200 22 200 24 17 4 endl 200 25 200 29 18 1 ; 200 29 200 30 18446744073709551615 1 } 201 1 201 2 18446744073709551615 4 void 203 1 203 5 18446744073709551615 15 TestTypeChecker 203 6 203 21 110 2 :: 203 21 203 23 130 18 TestMultiplication 203 23 203 41 130 1 ( 203 41 203 42 130 1 ) 203 42 203 43 130 1 { 204 1 204 2 18446744073709551615 5 wcout 205 2 205 7 15 2 << 205 8 205 10 16 21 L"TestMultiplication" 205 11 205 32 18446744073709551615 2 << 205 33 205 35 17 4 endl 205 36 205 40 18 1 ; 205 40 205 41 18446744073709551615 6 string 206 2 206 8 41 4 path 206 9 206 13 131 1 = 206 14 206 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 206 16 206 56 18446744073709551615 1 ; 206 56 206 57 18446744073709551615 5 Lexer 207 2 207 7 43 5 lexer 207 8 207 13 132 1 ( 207 13 207 14 43 4 path 207 14 207 18 131 1 ) 207 18 207 19 43 1 ; 207 19 207 20 18446744073709551615 3 try 208 2 208 5 18446744073709551615 1 { 209 2 209 3 18446744073709551615 6 Parser 210 3 210 9 90 6 parser 210 10 210 16 133 1 ( 210 16 210 17 90 4 path 210 17 210 21 131 1 , 210 21 210 22 90 5 lexer 210 23 210 28 132 1 . 210 28 210 29 18446744073709551615 6 tokens 210 29 210 35 45 1 ) 210 35 210 36 90 1 ; 210 36 210 37 18446744073709551615 15 NamespaceRecord 211 3 211 18 65 8 nsRecord 211 19 211 27 134 1 ; 211 27 211 28 18446744073709551615 8 CodeFile 212 3 212 11 93 4 file 212 12 212 16 135 1 = 212 17 212 18 18446744073709551615 6 parser 212 19 212 25 133 1 . 212 25 212 26 95 7 Program 212 26 212 33 95 1 ( 212 33 212 34 95 1 ) 212 34 212 35 95 1 ; 212 35 212 36 18446744073709551615 8 nsRecord 213 3 213 11 134 1 . 213 11 213 12 96 7 AddFile 213 12 213 19 96 1 ( 213 19 213 20 96 4 file 213 20 213 24 135 1 ) 213 24 213 25 96 1 ; 213 25 213 26 18446744073709551615 11 TypeChecker 214 3 214 14 97 7 checker 214 15 214 22 136 1 ( 214 22 214 23 97 8 nsRecord 214 23 214 31 134 1 ) 214 31 214 32 97 1 ; 214 32 214 33 18446744073709551615 10 TestParser 215 3 215 13 58 2 :: 215 13 215 15 64 19 ViewNamespaceRecord 215 15 215 34 64 1 ( 215 34 215 35 64 8 nsRecord 215 35 215 43 134 1 ) 215 43 215 44 64 1 ; 215 44 215 45 18446744073709551615 1 } 216 2 216 3 18446744073709551615 5 catch 217 2 217 7 18446744073709551615 1 ( 217 8 217 9 18446744073709551615 15 SyntaxException 217 9 217 24 60 1 & 217 24 217 25 18446744073709551615 2 ex 217 26 217 28 137 1 ) 217 28 217 29 18446744073709551615 1 { 218 2 218 3 18446744073709551615 10 TestParser 219 3 219 13 58 2 :: 219 13 219 15 59 15 ShowSyntaxError 219 15 219 30 59 1 ( 219 30 219 31 59 2 ex 219 31 219 33 137 1 ) 219 33 219 34 59 1 ; 219 34 219 35 18446744073709551615 1 } 220 2 220 3 18446744073709551615 5 catch 221 2 221 7 18446744073709551615 1 ( 221 8 221 9 18446744073709551615 13 TypeException 221 9 221 22 108 1 & 221 22 221 23 18446744073709551615 2 ex 221 24 221 26 138 1 ) 221 26 221 27 18446744073709551615 1 { 222 2 222 3 18446744073709551615 15 TestTypeChecker 223 3 223 18 110 2 :: 223 18 223 20 111 13 ShowTypeError 223 20 223 33 111 1 ( 223 33 223 34 111 2 ex 223 34 223 36 138 1 ) 223 36 223 37 111 1 ; 223 37 223 38 18446744073709551615 1 } 224 2 224 3 18446744073709551615 5 wcout 225 2 225 7 15 2 << 225 8 225 10 17 4 endl 225 11 225 15 18 2 << 225 16 225 18 17 4 endl 225 19 225 23 18 1 ; 225 23 225 24 18446744073709551615 1 } 226 1 226 2 18446744073709551615 4 void 227 1 227 5 18446744073709551615 15 TestTypeChecker 227 6 227 21 110 2 :: 227 21 227 23 139 14 TestCircleArea 227 23 227 37 139 1 ( 227 37 227 38 139 1 ) 227 38 227 39 139 1 { 228 1 228 2 18446744073709551615 5 wcout 229 2 229 7 15 2 << 229 8 229 10 16 28 L"TestCircleAreaTypeChecker" 229 11 229 39 18446744073709551615 2 << 229 40 229 42 17 4 endl 229 43 229 47 18 1 ; 229 47 229 48 18446744073709551615 6 string 230 2 230 8 41 4 path 230 9 230 13 140 1 = 230 14 230 15 18446744073709551615 27 "test_cases/CircleArea.txt" 230 16 230 43 18446744073709551615 1 ; 230 43 230 44 18446744073709551615 5 Lexer 231 2 231 7 43 5 lexer 231 8 231 13 141 1 ( 231 13 231 14 43 4 path 231 14 231 18 140 1 ) 231 18 231 19 43 1 ; 231 19 231 20 18446744073709551615 3 try 232 2 232 5 18446744073709551615 1 { 233 2 233 3 18446744073709551615 6 Parser 234 3 234 9 90 6 parser 234 10 234 16 142 1 ( 234 16 234 17 90 4 path 234 17 234 21 140 1 , 234 21 234 22 90 5 lexer 234 23 234 28 141 1 . 234 28 234 29 18446744073709551615 6 tokens 234 29 234 35 45 1 ) 234 35 234 36 90 1 ; 234 36 234 37 18446744073709551615 15 NamespaceRecord 235 3 235 18 65 8 nsRecord 235 19 235 27 143 1 ; 235 27 235 28 18446744073709551615 8 CodeFile 236 3 236 11 93 4 file 236 12 236 16 144 1 = 236 17 236 18 18446744073709551615 6 parser 236 19 236 25 142 1 . 236 25 236 26 95 7 Program 236 26 236 33 95 1 ( 236 33 236 34 95 1 ) 236 34 236 35 95 1 ; 236 35 236 36 18446744073709551615 8 nsRecord 237 3 237 11 143 1 . 237 11 237 12 96 7 AddFile 237 12 237 19 96 1 ( 237 19 237 20 96 4 file 237 20 237 24 144 1 ) 237 24 237 25 96 1 ; 237 25 237 26 18446744073709551615 11 TypeChecker 238 3 238 14 97 7 checker 238 15 238 22 145 1 ( 238 22 238 23 97 8 nsRecord 238 23 238 31 143 1 ) 238 31 238 32 97 1 ; 238 32 238 33 18446744073709551615 10 TestParser 239 3 239 13 58 2 :: 239 13 239 15 64 19 ViewNamespaceRecord 239 15 239 34 64 1 ( 239 34 239 35 64 8 nsRecord 239 35 239 43 143 1 ) 239 43 239 44 64 1 ; 239 44 239 45 18446744073709551615 1 } 240 2 240 3 18446744073709551615 5 catch 241 2 241 7 18446744073709551615 1 ( 241 8 241 9 18446744073709551615 15 SyntaxException 241 9 241 24 60 1 & 241 24 241 25 18446744073709551615 2 ex 241 26 241 28 146 1 ) 241 28 241 29 18446744073709551615 1 { 242 2 242 3 18446744073709551615 10 TestParser 243 3 243 13 58 2 :: 243 13 243 15 59 15 ShowSyntaxError 243 15 243 30 59 1 ( 243 30 243 31 59 2 ex 243 31 243 33 146 1 ) 243 33 243 34 59 1 ; 243 34 243 35 18446744073709551615 1 } 244 2 244 3 18446744073709551615 5 catch 245 2 245 7 18446744073709551615 1 ( 245 8 245 9 18446744073709551615 13 TypeException 245 9 245 22 108 1 & 245 22 245 23 18446744073709551615 2 ex 245 24 245 26 147 1 ) 245 26 245 27 18446744073709551615 1 { 246 2 246 3 18446744073709551615 15 TestTypeChecker 247 3 247 18 110 2 :: 247 18 247 20 111 13 ShowTypeError 247 20 247 33 111 1 ( 247 33 247 34 111 2 ex 247 34 247 36 147 1 ) 247 36 247 37 111 1 ; 247 37 247 38 18446744073709551615 1 } 248 2 248 3 18446744073709551615 5 wcout 249 2 249 7 15 2 << 249 8 249 10 17 4 endl 249 11 249 15 18 2 << 249 16 249 18 17 4 endl 249 19 249 23 18 1 ; 249 23 249 24 18446744073709551615 1 } 250 1 250 2 18446744073709551615 4 void 251 1 251 5 18446744073709551615 15 TestTypeChecker 251 6 251 21 110 2 :: 251 21 251 23 148 13 TestSummation 251 23 251 36 148 1 ( 251 36 251 37 148 1 ) 251 37 251 38 148 1 { 252 1 252 2 18446744073709551615 5 wcout 253 2 253 7 15 2 << 253 8 253 10 16 16 L"TestSummation" 253 11 253 27 18446744073709551615 2 << 253 28 253 30 17 4 endl 253 31 253 35 18 1 ; 253 35 253 36 18446744073709551615 6 string 254 2 254 8 41 4 path 254 9 254 13 149 1 = 254 14 254 15 18446744073709551615 26 "test_cases/summation.txt" 254 16 254 42 18446744073709551615 1 ; 254 42 254 43 18446744073709551615 5 Lexer 255 2 255 7 43 5 lexer 255 8 255 13 150 1 ( 255 13 255 14 43 4 path 255 14 255 18 149 1 ) 255 18 255 19 43 1 ; 255 19 255 20 18446744073709551615 3 try 256 2 256 5 18446744073709551615 1 { 257 2 257 3 18446744073709551615 6 Parser 258 3 258 9 90 6 parser 258 10 258 16 151 1 ( 258 16 258 17 90 4 path 258 17 258 21 149 1 , 258 21 258 22 90 5 lexer 258 23 258 28 150 1 . 258 28 258 29 18446744073709551615 6 tokens 258 29 258 35 45 1 ) 258 35 258 36 90 1 ; 258 36 258 37 18446744073709551615 8 CodeFile 259 3 259 11 93 8 codeFile 259 12 259 20 152 1 = 259 21 259 22 18446744073709551615 6 parser 259 23 259 29 151 1 . 259 29 259 30 95 7 Program 259 30 259 37 95 1 ( 259 37 259 38 95 1 ) 259 38 259 39 95 1 ; 259 39 259 40 18446744073709551615 1 } 260 2 260 3 18446744073709551615 5 catch 261 2 261 7 18446744073709551615 1 ( 261 8 261 9 18446744073709551615 15 SyntaxException 261 9 261 24 60 1 & 261 24 261 25 18446744073709551615 2 ex 261 26 261 28 153 1 ) 261 28 261 29 18446744073709551615 1 { 262 2 262 3 18446744073709551615 10 TestParser 263 3 263 13 58 2 :: 263 13 263 15 59 15 ShowSyntaxError 263 15 263 30 59 1 ( 263 30 263 31 59 2 ex 263 31 263 33 153 1 ) 263 33 263 34 59 1 ; 263 34 263 35 18446744073709551615 1 } 264 2 264 3 18446744073709551615 5 catch 265 2 265 7 18446744073709551615 1 ( 265 8 265 9 18446744073709551615 13 TypeException 265 9 265 22 108 1 & 265 22 265 23 18446744073709551615 2 ex 265 24 265 26 154 1 ) 265 26 265 27 18446744073709551615 1 { 266 2 266 3 18446744073709551615 15 TestTypeChecker 267 3 267 18 110 2 :: 267 18 267 20 111 13 ShowTypeError 267 20 267 33 111 1 ( 267 33 267 34 111 2 ex 267 34 267 36 154 1 ) 267 36 267 37 111 1 ; 267 37 267 38 18446744073709551615 1 } 268 2 268 3 18446744073709551615 5 wcout 269 2 269 7 15 2 << 269 8 269 10 17 4 endl 269 11 269 15 18 2 << 269 16 269 18 17 4 endl 269 19 269 23 18 1 ; 269 23 269 24 18446744073709551615 1 } 270 1 270 2 18446744073709551615 4 void 271 1 271 5 18446744073709551615 12 TestCompiler 271 6 271 18 155 2 :: 271 18 271 20 156 17 TestAddTwoNumbers 271 20 271 37 156 1 ( 271 37 271 38 156 1 ) 271 38 271 39 156 1 { 272 1 272 2 18446744073709551615 5 wcout 273 2 273 7 15 2 << 273 8 273 10 16 18 L"Test Function: " 273 11 273 29 18446744073709551615 2 << 273 30 273 32 16 12 __FUNCTION__ 273 33 273 45 18446744073709551615 2 << 273 46 273 48 17 4 endl 273 49 273 53 18 1 ; 273 53 273 54 18446744073709551615 6 string 274 2 274 8 41 4 path 274 9 274 13 157 1 = 274 14 274 15 18446744073709551615 32 "test_cases/add_two_numbers.txt" 274 16 274 48 18446744073709551615 1 ; 274 48 274 49 18446744073709551615 5 Lexer 275 2 275 7 43 5 lexer 275 8 275 13 158 1 ( 275 13 275 14 43 4 path 275 14 275 18 157 1 ) 275 18 275 19 43 1 ; 275 19 275 20 18446744073709551615 3 try 276 2 276 5 18446744073709551615 1 { 277 2 277 3 18446744073709551615 6 Parser 278 3 278 9 90 6 parser 278 10 278 16 159 1 ( 278 16 278 17 90 4 path 278 17 278 21 157 1 , 278 21 278 22 90 5 lexer 278 23 278 28 158 1 . 278 28 278 29 18446744073709551615 6 tokens 278 29 278 35 45 1 ) 278 35 278 36 90 1 ; 278 36 278 37 18446744073709551615 15 NamespaceRecord 279 3 279 18 65 8 nsRecord 279 19 279 27 160 1 ; 279 27 279 28 18446744073709551615 8 CodeFile 280 3 280 11 93 4 file 280 12 280 16 161 1 = 280 17 280 18 18446744073709551615 6 parser 280 19 280 25 159 1 . 280 25 280 26 95 7 Program 280 26 280 33 95 1 ( 280 33 280 34 95 1 ) 280 34 280 35 95 1 ; 280 35 280 36 18446744073709551615 8 nsRecord 281 3 281 11 160 1 . 281 11 281 12 96 7 AddFile 281 12 281 19 96 1 ( 281 19 281 20 96 4 file 281 20 281 24 161 1 ) 281 24 281 25 96 1 ; 281 25 281 26 18446744073709551615 11 TypeChecker 282 3 282 14 97 7 checker 282 15 282 22 162 1 ( 282 22 282 23 97 8 nsRecord 282 23 282 31 160 1 ) 282 31 282 32 97 1 ; 282 32 282 33 18446744073709551615 10 TestParser 283 3 283 13 58 2 :: 283 13 283 15 64 19 ViewNamespaceRecord 283 15 283 34 64 1 ( 283 34 283 35 64 8 nsRecord 283 35 283 43 160 1 ) 283 43 283 44 64 1 ; 283 44 283 45 18446744073709551615 8 Compiler 284 3 284 11 163 8 compiler 284 12 284 20 164 1 ; 284 20 284 21 18446744073709551615 15 CompiledProgram 285 3 285 18 165 7 program 285 19 285 26 166 1 = 285 27 285 28 18446744073709551615 8 compiler 285 29 285 37 164 1 . 285 37 285 38 167 7 Compile 285 38 285 45 167 1 ( 285 45 285 46 167 8 nsRecord 285 46 285 54 160 1 ) 285 54 285 55 167 1 ; 285 55 285 56 18446744073709551615 8 ByteCode 286 3 286 11 168 4 code 286 12 286 16 169 1 = 286 17 286 18 18446744073709551615 7 program 286 19 286 26 166 1 . 286 26 286 27 170 12 EmitByteCode 286 27 286 39 170 1 ( 286 39 286 40 170 1 ) 286 40 286 41 170 1 ; 286 41 286 42 18446744073709551615 3 for 287 3 287 6 18446744073709551615 1 ( 287 7 287 8 18446744073709551615 4 auto 287 8 287 12 18446744073709551615 1 & 287 12 287 13 18446744073709551615 1 b 287 14 287 15 171 1 : 287 16 287 17 22 4 code 287 18 287 22 169 1 ) 287 22 287 23 18446744073709551615 1 { 288 3 288 4 18446744073709551615 5 wcout 289 4 289 9 15 2 << 289 10 289 12 17 1 b 289 13 289 14 171 2 << 289 15 289 17 16 4 L"," 289 18 289 22 18446744073709551615 2 << 289 23 289 25 17 4 endl 289 26 289 30 18 1 ; 289 30 289 31 18446744073709551615 1 } 290 3 290 4 18446744073709551615 1 } 291 2 291 3 18446744073709551615 5 catch 292 2 292 7 18446744073709551615 1 ( 292 8 292 9 18446744073709551615 15 SyntaxException 292 9 292 24 60 1 & 292 24 292 25 18446744073709551615 2 ex 292 26 292 28 172 1 ) 292 28 292 29 18446744073709551615 1 { 293 2 293 3 18446744073709551615 10 TestParser 294 3 294 13 58 2 :: 294 13 294 15 59 15 ShowSyntaxError 294 15 294 30 59 1 ( 294 30 294 31 59 2 ex 294 31 294 33 172 1 ) 294 33 294 34 59 1 ; 294 34 294 35 18446744073709551615 1 } 295 2 295 3 18446744073709551615 5 catch 296 2 296 7 18446744073709551615 1 ( 296 8 296 9 18446744073709551615 13 TypeException 296 9 296 22 108 1 & 296 22 296 23 18446744073709551615 2 ex 296 24 296 26 173 1 ) 296 26 296 27 18446744073709551615 1 { 297 2 297 3 18446744073709551615 15 TestTypeChecker 298 3 298 18 110 2 :: 298 18 298 20 111 13 ShowTypeError 298 20 298 33 111 1 ( 298 33 298 34 111 2 ex 298 34 298 36 173 1 ) 298 36 298 37 111 1 ; 298 37 298 38 18446744073709551615 1 } 299 2 299 3 18446744073709551615 5 wcout 300 2 300 7 15 2 << 300 8 300 10 17 4 endl 300 11 300 15 18 2 << 300 16 300 18 17 4 endl 300 19 300 23 18 1 ; 300 23 300 24 18446744073709551615 1 } 301 1 301 2 18446744073709551615 4 void 302 1 302 5 18446744073709551615 12 TestCompiler 302 6 302 18 155 2 :: 302 18 302 20 174 7 TestMax 302 20 302 27 174 1 ( 302 27 302 28 174 1 ) 302 28 302 29 174 1 { 303 1 303 2 18446744073709551615 5 wcout 304 2 304 7 15 2 << 304 8 304 10 16 18 L"Test Function: " 304 11 304 29 18446744073709551615 2 << 304 30 304 32 16 12 __FUNCTION__ 304 33 304 45 18446744073709551615 2 << 304 46 304 48 17 4 endl 304 49 304 53 18 1 ; 304 53 304 54 18446744073709551615 6 string 305 2 305 8 41 4 path 305 9 305 13 175 1 = 305 14 305 15 18446744073709551615 20 "test_cases/max.txt" 305 16 305 36 18446744073709551615 1 ; 305 36 305 37 18446744073709551615 5 Lexer 306 2 306 7 43 5 lexer 306 8 306 13 176 1 ( 306 13 306 14 43 4 path 306 14 306 18 175 1 ) 306 18 306 19 43 1 ; 306 19 306 20 18446744073709551615 3 try 307 2 307 5 18446744073709551615 1 { 308 2 308 3 18446744073709551615 6 Parser 309 3 309 9 90 6 parser 309 10 309 16 177 1 ( 309 16 309 17 90 4 path 309 17 309 21 175 1 , 309 21 309 22 90 5 lexer 309 23 309 28 176 1 . 309 28 309 29 18446744073709551615 6 tokens 309 29 309 35 45 1 ) 309 35 309 36 90 1 ; 309 36 309 37 18446744073709551615 15 NamespaceRecord 310 3 310 18 65 8 nsRecord 310 19 310 27 178 1 ; 310 27 310 28 18446744073709551615 8 CodeFile 311 3 311 11 93 4 file 311 12 311 16 179 1 = 311 17 311 18 18446744073709551615 6 parser 311 19 311 25 177 1 . 311 25 311 26 95 7 Program 311 26 311 33 95 1 ( 311 33 311 34 95 1 ) 311 34 311 35 95 1 ; 311 35 311 36 18446744073709551615 8 nsRecord 312 3 312 11 178 1 . 312 11 312 12 96 7 AddFile 312 12 312 19 96 1 ( 312 19 312 20 96 4 file 312 20 312 24 179 1 ) 312 24 312 25 96 1 ; 312 25 312 26 18446744073709551615 11 TypeChecker 313 3 313 14 97 7 checker 313 15 313 22 180 1 ( 313 22 313 23 97 8 nsRecord 313 23 313 31 178 1 ) 313 31 313 32 97 1 ; 313 32 313 33 18446744073709551615 10 TestParser 314 3 314 13 58 2 :: 314 13 314 15 64 19 ViewNamespaceRecord 314 15 314 34 64 1 ( 314 34 314 35 64 8 nsRecord 314 35 314 43 178 1 ) 314 43 314 44 64 1 ; 314 44 314 45 18446744073709551615 8 Compiler 315 3 315 11 163 8 compiler 315 12 315 20 181 1 ; 315 20 315 21 18446744073709551615 15 CompiledProgram 316 3 316 18 165 7 program 316 19 316 26 182 1 = 316 27 316 28 18446744073709551615 8 compiler 316 29 316 37 181 1 . 316 37 316 38 167 7 Compile 316 38 316 45 167 1 ( 316 45 316 46 167 8 nsRecord 316 46 316 54 178 1 ) 316 54 316 55 167 1 ; 316 55 316 56 18446744073709551615 8 ByteCode 317 3 317 11 168 4 code 317 12 317 16 183 1 = 317 17 317 18 18446744073709551615 7 program 317 19 317 26 182 1 . 317 26 317 27 170 12 EmitByteCode 317 27 317 39 170 1 ( 317 39 317 40 170 1 ) 317 40 317 41 170 1 ; 317 41 317 42 18446744073709551615 3 for 318 3 318 6 18446744073709551615 1 ( 318 7 318 8 18446744073709551615 4 auto 318 8 318 12 18446744073709551615 1 & 318 12 318 13 18446744073709551615 1 b 318 14 318 15 184 1 : 318 16 318 17 22 4 code 318 18 318 22 183 1 ) 318 22 318 23 18446744073709551615 1 { 319 3 319 4 18446744073709551615 5 wcout 320 4 320 9 15 2 << 320 10 320 12 17 1 b 320 13 320 14 184 2 << 320 15 320 17 16 4 L"," 320 18 320 22 18446744073709551615 2 << 320 23 320 25 17 4 endl 320 26 320 30 18 1 ; 320 30 320 31 18446744073709551615 1 } 321 3 321 4 18446744073709551615 1 } 322 2 322 3 18446744073709551615 5 catch 323 2 323 7 18446744073709551615 1 ( 323 8 323 9 18446744073709551615 15 SyntaxException 323 9 323 24 60 1 & 323 24 323 25 18446744073709551615 2 ex 323 26 323 28 185 1 ) 323 28 323 29 18446744073709551615 1 { 324 2 324 3 18446744073709551615 10 TestParser 325 3 325 13 58 2 :: 325 13 325 15 59 15 ShowSyntaxError 325 15 325 30 59 1 ( 325 30 325 31 59 2 ex 325 31 325 33 185 1 ) 325 33 325 34 59 1 ; 325 34 325 35 18446744073709551615 1 } 326 2 326 3 18446744073709551615 5 catch 327 2 327 7 18446744073709551615 1 ( 327 8 327 9 18446744073709551615 13 TypeException 327 9 327 22 108 1 & 327 22 327 23 18446744073709551615 2 ex 327 24 327 26 186 1 ) 327 26 327 27 18446744073709551615 1 { 328 2 328 3 18446744073709551615 15 TestTypeChecker 329 3 329 18 110 2 :: 329 18 329 20 111 13 ShowTypeError 329 20 329 33 111 1 ( 329 33 329 34 111 2 ex 329 34 329 36 186 1 ) 329 36 329 37 111 1 ; 329 37 329 38 18446744073709551615 1 } 330 2 330 3 18446744073709551615 5 wcout 331 2 331 7 15 2 << 331 8 331 10 17 4 endl 331 11 331 15 18 2 << 331 16 331 18 17 4 endl 331 19 331 23 18 1 ; 331 23 331 24 18446744073709551615 1 } 332 1 332 2 18446744073709551615 4 void 333 1 333 5 18446744073709551615 12 TestCompiler 333 6 333 18 155 2 :: 333 18 333 20 187 13 TestFactorial 333 20 333 33 187 1 ( 333 33 333 34 187 1 ) 333 34 333 35 187 1 { 334 1 334 2 18446744073709551615 5 wcout 335 2 335 7 15 2 << 335 8 335 10 16 18 L"Test Function: " 335 11 335 29 18446744073709551615 2 << 335 30 335 32 16 12 __FUNCTION__ 335 33 335 45 18446744073709551615 2 << 335 46 335 48 17 4 endl 335 49 335 53 18 1 ; 335 53 335 54 18446744073709551615 6 string 336 2 336 8 41 4 path 336 9 336 13 188 1 = 336 14 336 15 18446744073709551615 26 "test_cases/factorial.txt" 336 16 336 42 18446744073709551615 1 ; 336 42 336 43 18446744073709551615 5 Lexer 337 2 337 7 43 5 lexer 337 8 337 13 189 1 ( 337 13 337 14 43 4 path 337 14 337 18 188 1 ) 337 18 337 19 43 1 ; 337 19 337 20 18446744073709551615 3 try 338 2 338 5 18446744073709551615 1 { 339 2 339 3 18446744073709551615 6 Parser 340 3 340 9 90 6 parser 340 10 340 16 190 1 ( 340 16 340 17 90 4 path 340 17 340 21 188 1 , 340 21 340 22 90 5 lexer 340 23 340 28 189 1 . 340 28 340 29 18446744073709551615 6 tokens 340 29 340 35 45 1 ) 340 35 340 36 90 1 ; 340 36 340 37 18446744073709551615 15 NamespaceRecord 341 3 341 18 65 8 nsRecord 341 19 341 27 191 1 ; 341 27 341 28 18446744073709551615 8 CodeFile 342 3 342 11 93 4 file 342 12 342 16 192 1 = 342 17 342 18 18446744073709551615 6 parser 342 19 342 25 190 1 . 342 25 342 26 95 7 Program 342 26 342 33 95 1 ( 342 33 342 34 95 1 ) 342 34 342 35 95 1 ; 342 35 342 36 18446744073709551615 8 nsRecord 343 3 343 11 191 1 . 343 11 343 12 96 7 AddFile 343 12 343 19 96 1 ( 343 19 343 20 96 4 file 343 20 343 24 192 1 ) 343 24 343 25 96 1 ; 343 25 343 26 18446744073709551615 11 TypeChecker 344 3 344 14 97 7 checker 344 15 344 22 193 1 ( 344 22 344 23 97 8 nsRecord 344 23 344 31 191 1 ) 344 31 344 32 97 1 ; 344 32 344 33 18446744073709551615 10 TestParser 345 3 345 13 58 2 :: 345 13 345 15 64 19 ViewNamespaceRecord 345 15 345 34 64 1 ( 345 34 345 35 64 8 nsRecord 345 35 345 43 191 1 ) 345 43 345 44 64 1 ; 345 44 345 45 18446744073709551615 8 Compiler 346 3 346 11 163 8 compiler 346 12 346 20 194 1 ; 346 20 346 21 18446744073709551615 15 CompiledProgram 347 3 347 18 165 7 program 347 19 347 26 195 1 = 347 27 347 28 18446744073709551615 8 compiler 347 29 347 37 194 1 . 347 37 347 38 167 7 Compile 347 38 347 45 167 1 ( 347 45 347 46 167 8 nsRecord 347 46 347 54 191 1 ) 347 54 347 55 167 1 ; 347 55 347 56 18446744073709551615 8 ByteCode 348 3 348 11 168 4 code 348 12 348 16 196 1 = 348 17 348 18 18446744073709551615 7 program 348 19 348 26 195 1 . 348 26 348 27 170 12 EmitByteCode 348 27 348 39 170 1 ( 348 39 348 40 170 1 ) 348 40 348 41 170 1 ; 348 41 348 42 18446744073709551615 3 for 349 3 349 6 18446744073709551615 1 ( 349 7 349 8 18446744073709551615 4 auto 349 8 349 12 18446744073709551615 1 & 349 12 349 13 18446744073709551615 1 b 349 14 349 15 197 1 : 349 16 349 17 22 4 code 349 18 349 22 196 1 ) 349 22 349 23 18446744073709551615 1 { 350 3 350 4 18446744073709551615 5 wcout 351 4 351 9 15 2 << 351 10 351 12 17 1 b 351 13 351 14 197 2 << 351 15 351 17 16 4 L"," 351 18 351 22 18446744073709551615 2 << 351 23 351 25 17 4 endl 351 26 351 30 18 1 ; 351 30 351 31 18446744073709551615 1 } 352 3 352 4 18446744073709551615 1 } 353 2 353 3 18446744073709551615 5 catch 354 2 354 7 18446744073709551615 1 ( 354 8 354 9 18446744073709551615 15 SyntaxException 354 9 354 24 60 1 & 354 24 354 25 18446744073709551615 2 ex 354 26 354 28 198 1 ) 354 28 354 29 18446744073709551615 1 { 355 2 355 3 18446744073709551615 10 TestParser 356 3 356 13 58 2 :: 356 13 356 15 59 15 ShowSyntaxError 356 15 356 30 59 1 ( 356 30 356 31 59 2 ex 356 31 356 33 198 1 ) 356 33 356 34 59 1 ; 356 34 356 35 18446744073709551615 1 } 357 2 357 3 18446744073709551615 5 catch 358 2 358 7 18446744073709551615 1 ( 358 8 358 9 18446744073709551615 13 TypeException 358 9 358 22 108 1 & 358 22 358 23 18446744073709551615 2 ex 358 24 358 26 199 1 ) 358 26 358 27 18446744073709551615 1 { 359 2 359 3 18446744073709551615 15 TestTypeChecker 360 3 360 18 110 2 :: 360 18 360 20 111 13 ShowTypeError 360 20 360 33 111 1 ( 360 33 360 34 111 2 ex 360 34 360 36 199 1 ) 360 36 360 37 111 1 ; 360 37 360 38 18446744073709551615 1 } 361 2 361 3 18446744073709551615 5 wcout 362 2 362 7 15 2 << 362 8 362 10 17 4 endl 362 11 362 15 18 2 << 362 16 362 18 17 4 endl 362 19 362 23 18 1 ; 362 23 362 24 18446744073709551615 1 } 363 1 363 2 18446744073709551615 4 void 364 1 364 5 18446744073709551615 12 TestCompiler 364 6 364 18 155 2 :: 364 18 364 20 200 13 TestFibonacci 364 20 364 33 200 1 ( 364 33 364 34 200 1 ) 364 34 364 35 200 1 { 365 1 365 2 18446744073709551615 5 wcout 366 2 366 7 15 2 << 366 8 366 10 16 18 L"Test Function: " 366 11 366 29 18446744073709551615 2 << 366 30 366 32 16 12 __FUNCTION__ 366 33 366 45 18446744073709551615 2 << 366 46 366 48 17 4 endl 366 49 366 53 18 1 ; 366 53 366 54 18446744073709551615 6 string 367 2 367 8 41 4 path 367 9 367 13 201 1 = 367 14 367 15 18446744073709551615 26 "test_cases/fibonacci.txt" 367 16 367 42 18446744073709551615 1 ; 367 42 367 43 18446744073709551615 5 Lexer 368 2 368 7 43 5 lexer 368 8 368 13 202 1 ( 368 13 368 14 43 4 path 368 14 368 18 201 1 ) 368 18 368 19 43 1 ; 368 19 368 20 18446744073709551615 3 try 369 2 369 5 18446744073709551615 1 { 370 2 370 3 18446744073709551615 6 Parser 371 3 371 9 90 6 parser 371 10 371 16 203 1 ( 371 16 371 17 90 4 path 371 17 371 21 201 1 , 371 21 371 22 90 5 lexer 371 23 371 28 202 1 . 371 28 371 29 18446744073709551615 6 tokens 371 29 371 35 45 1 ) 371 35 371 36 90 1 ; 371 36 371 37 18446744073709551615 15 NamespaceRecord 372 3 372 18 65 8 nsRecord 372 19 372 27 204 1 ; 372 27 372 28 18446744073709551615 8 CodeFile 373 3 373 11 93 4 file 373 12 373 16 205 1 = 373 17 373 18 18446744073709551615 6 parser 373 19 373 25 203 1 . 373 25 373 26 95 7 Program 373 26 373 33 95 1 ( 373 33 373 34 95 1 ) 373 34 373 35 95 1 ; 373 35 373 36 18446744073709551615 8 nsRecord 374 3 374 11 204 1 . 374 11 374 12 96 7 AddFile 374 12 374 19 96 1 ( 374 19 374 20 96 4 file 374 20 374 24 205 1 ) 374 24 374 25 96 1 ; 374 25 374 26 18446744073709551615 11 TypeChecker 375 3 375 14 97 7 checker 375 15 375 22 206 1 ( 375 22 375 23 97 8 nsRecord 375 23 375 31 204 1 ) 375 31 375 32 97 1 ; 375 32 375 33 18446744073709551615 10 TestParser 376 3 376 13 58 2 :: 376 13 376 15 64 19 ViewNamespaceRecord 376 15 376 34 64 1 ( 376 34 376 35 64 8 nsRecord 376 35 376 43 204 1 ) 376 43 376 44 64 1 ; 376 44 376 45 18446744073709551615 8 Compiler 377 3 377 11 163 8 compiler 377 12 377 20 207 1 ; 377 20 377 21 18446744073709551615 15 CompiledProgram 378 3 378 18 165 7 program 378 19 378 26 208 1 = 378 27 378 28 18446744073709551615 8 compiler 378 29 378 37 207 1 . 378 37 378 38 167 7 Compile 378 38 378 45 167 1 ( 378 45 378 46 167 8 nsRecord 378 46 378 54 204 1 ) 378 54 378 55 167 1 ; 378 55 378 56 18446744073709551615 8 ByteCode 379 3 379 11 168 4 code 379 12 379 16 209 1 = 379 17 379 18 18446744073709551615 7 program 379 19 379 26 208 1 . 379 26 379 27 170 12 EmitByteCode 379 27 379 39 170 1 ( 379 39 379 40 170 1 ) 379 40 379 41 170 1 ; 379 41 379 42 18446744073709551615 3 for 380 3 380 6 18446744073709551615 1 ( 380 7 380 8 18446744073709551615 4 auto 380 8 380 12 18446744073709551615 1 & 380 12 380 13 18446744073709551615 1 b 380 14 380 15 210 1 : 380 16 380 17 22 4 code 380 18 380 22 209 1 ) 380 22 380 23 18446744073709551615 1 { 381 3 381 4 18446744073709551615 5 wcout 382 4 382 9 15 2 << 382 10 382 12 17 1 b 382 13 382 14 210 2 << 382 15 382 17 16 4 L"," 382 18 382 22 18446744073709551615 1 ; 382 22 382 23 18446744073709551615 1 } 383 3 383 4 18446744073709551615 5 wcout 384 3 384 8 15 2 << 384 9 384 11 17 4 endl 384 12 384 16 18 1 ; 384 16 384 17 18446744073709551615 1 } 385 2 385 3 18446744073709551615 5 catch 386 2 386 7 18446744073709551615 1 ( 386 8 386 9 18446744073709551615 15 SyntaxException 386 9 386 24 60 1 & 386 24 386 25 18446744073709551615 2 ex 386 26 386 28 211 1 ) 386 28 386 29 18446744073709551615 1 { 387 2 387 3 18446744073709551615 10 TestParser 388 3 388 13 58 2 :: 388 13 388 15 59 15 ShowSyntaxError 388 15 388 30 59 1 ( 388 30 388 31 59 2 ex 388 31 388 33 211 1 ) 388 33 388 34 59 1 ; 388 34 388 35 18446744073709551615 1 } 389 2 389 3 18446744073709551615 5 catch 390 2 390 7 18446744073709551615 1 ( 390 8 390 9 18446744073709551615 13 TypeException 390 9 390 22 108 1 & 390 22 390 23 18446744073709551615 2 ex 390 24 390 26 212 1 ) 390 26 390 27 18446744073709551615 1 { 391 2 391 3 18446744073709551615 15 TestTypeChecker 392 3 392 18 110 2 :: 392 18 392 20 111 13 ShowTypeError 392 20 392 33 111 1 ( 392 33 392 34 111 2 ex 392 34 392 36 212 1 ) 392 36 392 37 111 1 ; 392 37 392 38 18446744073709551615 1 } 393 2 393 3 18446744073709551615 5 wcout 394 2 394 7 15 2 << 394 8 394 10 17 4 endl 394 11 394 15 18 2 << 394 16 394 18 17 4 endl 394 19 394 23 18 1 ; 394 23 394 24 18446744073709551615 1 } 395 1 395 2 18446744073709551615 4 void 396 1 396 5 18446744073709551615 12 TestCompiler 396 6 396 18 155 2 :: 396 18 396 20 213 25 TestFactorialAndFibonacci 396 20 396 45 213 1 ( 396 45 396 46 213 1 ) 396 46 396 47 213 1 { 397 1 397 2 18446744073709551615 5 wcout 398 2 398 7 15 2 << 398 8 398 10 16 18 L"Test Function: " 398 11 398 29 18446744073709551615 2 << 398 30 398 32 16 12 __FUNCTION__ 398 33 398 45 18446744073709551615 2 << 398 46 398 48 17 4 endl 398 49 398 53 18 1 ; 398 53 398 54 18446744073709551615 6 vector 399 2 399 8 8 1 < 399 8 399 9 18446744073709551615 6 string 399 9 399 15 41 1 > 399 15 399 16 18446744073709551615 6 source 399 17 399 23 214 1 = 399 24 399 25 18446744073709551615 1 { 399 26 399 27 18446744073709551615 48 "test_cases/FactorialAndFibonacci/fibonacci.txt" 399 27 399 75 18446744073709551615 1 , 399 75 399 76 18446744073709551615 48 "test_cases/FactorialAndFibonacci/factorial.txt" 400 9 400 57 18446744073709551615 1 } 400 57 400 58 18446744073709551615 1 ; 400 58 400 59 18446744073709551615 15 NamespaceRecord 401 2 401 17 65 8 nsRecord 401 18 401 26 215 1 ; 401 26 401 27 18446744073709551615 3 for 402 2 402 5 18446744073709551615 1 ( 402 6 402 7 18446744073709551615 6 string 402 7 402 13 41 4 path 402 14 402 18 216 1 : 402 19 402 20 22 6 source 402 21 402 27 214 1 ) 402 27 402 28 18446744073709551615 1 { 403 2 403 3 18446744073709551615 3 try 404 3 404 6 18446744073709551615 1 { 405 3 405 4 18446744073709551615 5 Lexer 406 4 406 9 43 5 lexer 406 10 406 15 217 1 ( 406 15 406 16 43 4 path 406 16 406 20 216 1 ) 406 20 406 21 43 1 ; 406 21 406 22 18446744073709551615 6 Parser 407 4 407 10 90 6 parser 407 11 407 17 218 1 ( 407 17 407 18 90 4 path 407 18 407 22 216 1 , 407 22 407 23 90 5 lexer 407 24 407 29 217 1 . 407 29 407 30 18446744073709551615 6 tokens 407 30 407 36 45 1 ) 407 36 407 37 90 1 ; 407 37 407 38 18446744073709551615 8 CodeFile 408 4 408 12 93 4 file 408 13 408 17 219 1 = 408 18 408 19 18446744073709551615 6 parser 408 20 408 26 218 1 . 408 26 408 27 95 7 Program 408 27 408 34 95 1 ( 408 34 408 35 95 1 ) 408 35 408 36 95 1 ; 408 36 408 37 18446744073709551615 8 nsRecord 409 4 409 12 215 1 . 409 12 409 13 96 7 AddFile 409 13 409 20 96 1 ( 409 20 409 21 96 4 file 409 21 409 25 219 1 ) 409 25 409 26 96 1 ; 409 26 409 27 18446744073709551615 1 } 410 3 410 4 18446744073709551615 5 catch 411 3 411 8 18446744073709551615 1 ( 411 9 411 10 18446744073709551615 15 SyntaxException 411 10 411 25 60 1 & 411 25 411 26 18446744073709551615 2 ex 411 27 411 29 220 1 ) 411 29 411 30 18446744073709551615 1 { 412 3 412 4 18446744073709551615 10 TestParser 413 4 413 14 58 2 :: 413 14 413 16 59 15 ShowSyntaxError 413 16 413 31 59 1 ( 413 31 413 32 59 2 ex 413 32 413 34 220 1 ) 413 34 413 35 59 1 ; 413 35 413 36 18446744073709551615 1 } 414 3 414 4 18446744073709551615 1 } 415 2 415 3 18446744073709551615 3 try 416 2 416 5 18446744073709551615 1 { 417 2 417 3 18446744073709551615 11 TypeChecker 418 3 418 14 97 7 checker 418 15 418 22 221 1 ( 418 22 418 23 97 8 nsRecord 418 23 418 31 215 1 ) 418 31 418 32 97 1 ; 418 32 418 33 18446744073709551615 10 TestParser 419 3 419 13 58 2 :: 419 13 419 15 64 19 ViewNamespaceRecord 419 15 419 34 64 1 ( 419 34 419 35 64 8 nsRecord 419 35 419 43 215 1 ) 419 43 419 44 64 1 ; 419 44 419 45 18446744073709551615 8 Compiler 421 3 421 11 163 8 compiler 421 12 421 20 222 1 ; 421 20 421 21 18446744073709551615 15 CompiledProgram 422 3 422 18 165 7 program 422 19 422 26 223 1 = 422 27 422 28 18446744073709551615 8 compiler 422 29 422 37 222 1 . 422 37 422 38 167 7 Compile 422 38 422 45 167 1 ( 422 45 422 46 167 8 nsRecord 422 46 422 54 215 1 ) 422 54 422 55 167 1 ; 422 55 422 56 18446744073709551615 8 ByteCode 423 3 423 11 168 4 code 423 12 423 16 224 1 = 423 17 423 18 18446744073709551615 7 program 423 19 423 26 223 1 . 423 26 423 27 170 12 EmitByteCode 423 27 423 39 170 1 ( 423 39 423 40 170 1 ) 423 40 423 41 170 1 ; 423 41 423 42 18446744073709551615 10 WriteBytes 424 3 424 13 225 1 ( 424 13 424 14 225 62 "test_cases/FactorialAndFibonacci/factorial_and_fibonacci.bin" 425 4 425 66 18446744073709551615 1 , 425 66 425 67 225 4 code 426 4 426 8 224 1 ) 426 8 426 9 225 1 ; 426 9 426 10 18446744073709551615 5 wcout 427 3 427 8 15 2 << 427 9 427 11 16 27 L"byte code is written to " 427 12 427 39 18446744073709551615 63 L"test_cases/FactorialAndFibonacci/factorial_and_fibonacci.bin" 428 6 428 69 18446744073709551615 2 << 429 6 429 8 17 4 endl 429 9 429 13 18 1 ; 429 13 429 14 18446744073709551615 1 } 430 2 430 3 18446744073709551615 5 catch 431 2 431 7 18446744073709551615 1 ( 431 8 431 9 18446744073709551615 13 TypeException 431 9 431 22 108 1 & 431 22 431 23 18446744073709551615 2 ex 431 24 431 26 226 1 ) 431 26 431 27 18446744073709551615 1 { 432 2 432 3 18446744073709551615 15 TestTypeChecker 433 3 433 18 110 2 :: 433 18 433 20 111 13 ShowTypeError 433 20 433 33 111 1 ( 433 33 433 34 111 2 ex 433 34 433 36 226 1 ) 433 36 433 37 111 1 ; 433 37 433 38 18446744073709551615 1 } 434 2 434 3 18446744073709551615 5 wcout 435 2 435 7 15 2 << 435 8 435 10 17 4 endl 435 11 435 15 18 2 << 435 16 435 18 17 4 endl 435 19 435 23 18 1 ; 435 23 435 24 18446744073709551615 1 } 436 1 436 2 18446744073709551615 0 0 227 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 6 string 49 1 3 0 6 vector 49 1 3 0 5 wcout 22 1 3 0 9 TestLexer 8 1 3 0 21 AssertEqual:TestLexer 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 70 18:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 10 1 3 0 70 18:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 70 18:73:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 14 operator!=:std 9 1 3 0 9 wcout:std 8 1 3 0 12 operator:std 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 8 1 3 0 20 ShowTokens:TestLexer 10 1 3 0 70 25:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 27:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 8 1 3 0 16 TokenTagToString 6 1 3 0 9 tag:Token 6 1 3 0 11 value:Token 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 8 1 3 0 20 ShowErrors:TestLexer 4 1 3 0 16 LexicalException 10 1 3 0 70 59:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 61:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 21 line:LexicalException 6 1 3 0 23 column:LexicalException 6 1 3 0 17 message:Exception 8 1 3 0 20 TestNumber:TestLexer 20 1 3 0 18 string:__cxx11:std 9 1 3 0 69 69:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 5 Lexer 9 1 3 0 69 71:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 12 tokens:Lexer 9 1 3 0 70 73:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 5 1 3 0 3 Tag 7 1 3 0 7 Int:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 7 Eof:Tag 24 1 3 0 24 basic_string:__cxx11:std 8 1 3 0 24 TestHelloWorld:TestLexer 9 1 3 0 69 83:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 69 85:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 errorList:Lexer 22 1 3 0 10 TestParser 8 1 3 0 26 ShowSyntaxError:TestParser 4 1 3 0 15 SyntaxException 10 1 3 0 70 95:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 20 line:SyntaxException 6 1 3 0 22 column:SyntaxException 8 1 3 0 30 ViewNamespaceRecord:TestParser 4 1 3 0 15 NamespaceRecord 10 1 3 0 71 100:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 16 ExpressionViewer 9 1 3 0 71 102:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 103:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 70 105:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 30 ViewNamespace:ExpressionViewer 8 1 3 0 31 TestSimpleArithmetic:TestParser 36 1 3 0 6 ExpPtr 9 1 3 0 70 112:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 3 Ast 8 1 3 0 12 Multiply:Ast 8 1 3 0 12 Constant:Ast 9 1 3 0 70 114:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 10 Divide:Ast 9 1 3 0 70 116:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 7 Add:Ast 9 1 3 0 71 117:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 17 Accept:Expression 8 1 3 0 23 TestAddition:TestParser 9 1 3 0 70 124:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 125:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 6 Parser 9 1 3 0 71 128:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 129:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 8 CodeFile 9 1 3 0 71 130:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 14 Program:Parser 21 1 3 0 23 AddFile:NamespaceRecord 4 1 3 0 11 TypeChecker 9 1 3 0 71 132:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 135:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 24 TestFactorial:TestParser 9 1 3 0 70 144:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 145:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 148:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 149:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 150:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 152:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 155:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 13 TypeException 9 1 3 0 71 159:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 15 TestTypeChecker 8 1 3 0 29 ShowTypeError:TestTypeChecker 8 1 3 0 29 TestMultiplication:TestParser 9 1 3 0 70 168:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 169:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 172:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 173:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 174:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 176:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 8 TestType 8 1 3 0 23 TestBasicTypes:TestType 4 1 3 0 4 Type 9 1 3 0 70 186:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 8 Int:Type 9 1 3 0 70 187:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 10 Array:Type 8 1 3 0 12 TypeToString 10 1 3 0 71 197:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 18 line:TypeException 6 1 3 0 20 column:TypeException 8 1 3 0 34 TestMultiplication:TestTypeChecker 9 1 3 0 70 206:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 207:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 210:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 211:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 212:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 214:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 217:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 221:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 30 TestCircleArea:TestTypeChecker 9 1 3 0 70 230:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 231:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 234:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 235:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 236:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 238:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 241:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 245:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 29 TestSummation:TestTypeChecker 9 1 3 0 70 254:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 255:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 258:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 259:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 261:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 265:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 12 TestCompiler 8 1 3 0 30 TestAddTwoNumbers:TestCompiler 9 1 3 0 70 274:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 275:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 278:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 279:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 280:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 282:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 8 Compiler 9 1 3 0 71 284:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 15 CompiledProgram 9 1 3 0 71 285:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 16 Compile:Compiler 20 1 3 0 8 ByteCode 9 1 3 0 71 286:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 28 EmitByteCode:CompiledProgram 9 1 3 0 71 287:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 292:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 296:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 20 TestMax:TestCompiler 9 1 3 0 70 305:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 306:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 309:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 310:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 311:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 313:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 315:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 316:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 317:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 318:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 323:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 327:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 26 TestFactorial:TestCompiler 9 1 3 0 70 336:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 337:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 340:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 341:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 342:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 344:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 346:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 347:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 348:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 349:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 354:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 358:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 26 TestFibonacci:TestCompiler 9 1 3 0 70 367:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 368:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 371:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 372:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 373:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 375:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 377:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 378:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 379:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 380:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 386:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 390:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 38 TestFactorialAndFibonacci:TestCompiler 9 1 3 0 71 399:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 401:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 402:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 406:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 407:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 408:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 411:27:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 418:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 421:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 422:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 423:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 10 WriteBytes 9 1 3 0 71 431:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 0 0 17 0 0 0 74 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ByteCodeReader.hpp 1531196691 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.hpp 1531108467 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1530931711 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1531290788 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1530715740 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Lexer.hpp 1529140218 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1530931928 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1531291274 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1530953732 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1530610472 72 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SourceReader.hpp 1529028688 73 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/StringBuilder.hpp 1529046370 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 1531284278 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.hpp 1531138986 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1530679194 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1531139461
22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 1569 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 10 "Test.hpp" 1 10 1 20 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 22 "ExpressionViewer.hpp" 2 10 2 32 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 11 "Lexer.hpp" 3 10 3 21 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 12 "Parser.hpp" 4 10 4 22 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 10 "Type.hpp" 5 10 5 20 18446744073709551615 1 # 6 1 6 2 18446744073709551615 7 include 6 2 6 9 18446744073709551615 17 "TypeChecker.hpp" 6 10 6 27 18446744073709551615 1 # 7 1 7 2 18446744073709551615 7 include 7 2 7 9 18446744073709551615 1 < 7 10 7 11 18446744073709551615 8 iostream 7 11 7 19 18446744073709551615 1 > 7 19 7 20 18446744073709551615 1 # 8 1 8 2 18446744073709551615 7 include 8 2 8 9 18446744073709551615 1 < 8 10 8 11 18446744073709551615 6 string 8 11 8 17 18446744073709551615 1 > 8 17 8 18 18446744073709551615 1 # 9 1 9 2 18446744073709551615 7 include 9 2 9 9 18446744073709551615 1 < 9 10 9 11 18446744073709551615 6 vector 9 11 9 17 18446744073709551615 1 > 9 17 9 18 18446744073709551615 5 using 10 1 10 6 18446744073709551615 3 std 10 7 10 10 0 2 :: 10 10 10 12 18446744073709551615 8 any_cast 10 12 10 20 1 1 ; 10 20 10 21 18446744073709551615 5 using 11 1 11 6 18446744073709551615 3 std 11 7 11 10 0 2 :: 11 10 11 12 18446744073709551615 4 endl 11 12 11 16 2 1 ; 11 16 11 17 18446744073709551615 5 using 12 1 12 6 18446744073709551615 3 std 12 7 12 10 0 2 :: 12 10 12 12 18446744073709551615 6 string 12 12 12 18 3 1 ; 12 18 12 19 18446744073709551615 5 using 13 1 13 6 18446744073709551615 3 std 13 7 13 10 0 2 :: 13 10 13 12 18446744073709551615 6 vector 13 12 13 18 4 1 ; 13 18 13 19 18446744073709551615 5 using 14 1 14 6 18446744073709551615 3 std 14 7 14 10 0 2 :: 14 10 14 12 18446744073709551615 5 wcout 14 12 14 17 5 1 ; 14 17 14 18 18446744073709551615 4 void 15 1 15 5 18446744073709551615 9 TestLexer 15 6 15 15 6 2 :: 15 15 15 17 7 11 AssertEqual 15 17 15 28 7 1 ( 15 28 15 29 7 6 vector 15 29 15 35 8 1 < 15 35 15 36 18446744073709551615 5 Token 15 36 15 41 9 1 > 15 41 15 42 18446744073709551615 1 & 15 42 15 43 18446744073709551615 1 x 15 44 15 45 10 1 , 15 45 15 46 7 6 vector 15 47 15 53 8 1 < 15 53 15 54 18446744073709551615 5 Token 15 54 15 59 9 1 > 15 59 15 60 18446744073709551615 1 & 15 60 15 61 18446744073709551615 1 y 15 62 15 63 11 1 , 15 63 15 64 7 7 wstring 15 65 15 72 12 7 message 15 73 15 80 13 1 ) 15 80 15 81 7 1 { 16 1 16 2 18446744073709551615 2 if 17 2 17 4 18446744073709551615 1 ( 17 5 17 6 18446744073709551615 1 x 17 6 17 7 10 2 != 17 8 17 10 14 1 y 17 11 17 12 11 1 ) 17 12 17 13 18446744073709551615 1 { 18 2 18 3 18446744073709551615 5 wcout 19 3 19 8 15 2 << 19 9 19 11 16 7 message 19 12 19 19 13 2 << 19 20 19 22 17 4 endl 19 23 19 27 18 1 ; 19 27 19 28 18446744073709551615 1 } 20 2 20 3 18446744073709551615 1 } 21 1 21 2 18446744073709551615 4 void 22 1 22 5 18446744073709551615 9 TestLexer 22 6 22 15 6 2 :: 22 15 22 17 19 10 ShowTokens 22 17 22 27 19 1 ( 22 27 22 28 19 6 vector 22 28 22 34 8 1 < 22 34 22 35 18446744073709551615 5 Token 22 35 22 40 9 1 > 22 40 22 41 18446744073709551615 1 & 22 41 22 42 18446744073709551615 6 tokens 22 43 22 49 20 1 ) 22 49 22 50 19 1 { 23 1 23 2 18446744073709551615 3 for 24 2 24 5 18446744073709551615 1 ( 24 6 24 7 18446744073709551615 5 Token 24 7 24 12 9 1 & 24 12 24 13 18446744073709551615 5 token 24 14 24 19 21 1 : 24 20 24 21 22 6 tokens 24 22 24 28 20 1 ) 24 28 24 29 18446744073709551615 1 { 25 2 25 3 18446744073709551615 5 wcout 26 3 26 8 15 2 << 26 9 26 11 16 4 L"(" 26 12 26 16 18446744073709551615 2 << 26 17 26 19 17 5 token 26 20 26 25 21 1 . 26 25 26 26 18446744073709551615 4 line 26 26 26 30 23 1 ; 26 30 26 31 18446744073709551615 5 wcout 27 3 27 8 15 2 << 27 9 27 11 16 5 L", " 27 12 27 17 18446744073709551615 2 << 27 18 27 20 17 5 token 27 21 27 26 21 1 . 27 26 27 27 18446744073709551615 6 column 27 27 27 33 24 1 ; 27 33 27 34 18446744073709551615 5 wcout 28 3 28 8 15 2 << 28 9 28 11 16 5 L", " 28 12 28 17 18446744073709551615 2 << 28 18 28 20 16 16 TokenTagToString 28 21 28 37 25 1 ( 28 37 28 38 25 5 token 28 38 28 43 21 1 . 28 43 28 44 18446744073709551615 3 tag 28 44 28 47 26 1 ) 28 47 28 48 25 1 ; 28 48 28 49 18446744073709551615 2 if 29 3 29 5 18446744073709551615 1 ( 29 6 29 7 18446744073709551615 5 token 29 7 29 12 21 1 . 29 12 29 13 18446744073709551615 5 value 29 13 29 18 27 1 . 29 18 29 19 28 4 type 29 19 29 23 28 1 ( 29 23 29 24 28 1 ) 29 24 29 25 28 2 == 29 26 29 28 29 6 typeid 29 29 29 35 18446744073709551615 1 ( 29 35 29 36 18446744073709551615 7 int32_t 29 36 29 43 30 1 ) 29 43 29 44 18446744073709551615 1 ) 29 44 29 45 18446744073709551615 1 { 30 3 30 4 18446744073709551615 5 wcout 31 4 31 9 15 2 << 31 10 31 12 16 5 L", " 31 13 31 18 18446744073709551615 2 << 31 19 31 21 17 8 any_cast 31 22 31 30 31 1 < 31 30 31 31 31 7 int32_t 31 31 31 38 30 1 > 31 38 31 39 31 1 ( 31 39 31 40 31 5 token 31 40 31 45 21 1 . 31 45 31 46 18446744073709551615 5 value 31 46 31 51 27 1 ) 31 51 31 52 31 1 ; 31 52 31 53 18446744073709551615 1 } 32 3 32 4 18446744073709551615 4 else 33 3 33 7 18446744073709551615 2 if 33 8 33 10 18446744073709551615 1 ( 33 11 33 12 18446744073709551615 5 token 33 12 33 17 21 1 . 33 17 33 18 18446744073709551615 5 value 33 18 33 23 27 1 . 33 23 33 24 28 4 type 33 24 33 28 28 1 ( 33 28 33 29 28 1 ) 33 29 33 30 28 2 == 33 31 33 33 29 6 typeid 33 34 33 40 18446744073709551615 1 ( 33 40 33 41 18446744073709551615 7 int64_t 33 41 33 48 32 1 ) 33 48 33 49 18446744073709551615 1 ) 33 49 33 50 18446744073709551615 1 { 34 3 34 4 18446744073709551615 5 wcout 35 4 35 9 15 2 << 35 10 35 12 16 5 L", " 35 13 35 18 18446744073709551615 2 << 35 19 35 21 17 8 any_cast 35 22 35 30 31 1 < 35 30 35 31 31 7 int64_t 35 31 35 38 32 1 > 35 38 35 39 31 1 ( 35 39 35 40 31 5 token 35 40 35 45 21 1 . 35 45 35 46 18446744073709551615 5 value 35 46 35 51 27 1 ) 35 51 35 52 31 1 ; 35 52 35 53 18446744073709551615 1 } 36 3 36 4 18446744073709551615 4 else 37 3 37 7 18446744073709551615 2 if 37 8 37 10 18446744073709551615 1 ( 37 11 37 12 18446744073709551615 5 token 37 12 37 17 21 1 . 37 17 37 18 18446744073709551615 5 value 37 18 37 23 27 1 . 37 23 37 24 28 4 type 37 24 37 28 28 1 ( 37 28 37 29 28 1 ) 37 29 37 30 28 2 == 37 31 37 33 29 6 typeid 37 34 37 40 18446744073709551615 1 ( 37 40 37 41 18446744073709551615 5 float 37 41 37 46 18446744073709551615 1 ) 37 46 37 47 18446744073709551615 1 ) 37 47 37 48 18446744073709551615 1 { 38 3 38 4 18446744073709551615 5 wcout 39 4 39 9 15 2 << 39 10 39 12 16 5 L", " 39 13 39 18 18446744073709551615 2 << 39 19 39 21 17 8 any_cast 39 22 39 30 31 1 < 39 30 39 31 31 5 float 39 31 39 36 18446744073709551615 1 > 39 36 39 37 31 1 ( 39 37 39 38 31 5 token 39 38 39 43 21 1 . 39 43 39 44 18446744073709551615 5 value 39 44 39 49 27 1 ) 39 49 39 50 31 1 ; 39 50 39 51 18446744073709551615 1 } 40 3 40 4 18446744073709551615 4 else 41 3 41 7 18446744073709551615 2 if 41 8 41 10 18446744073709551615 1 ( 41 11 41 12 18446744073709551615 5 token 41 12 41 17 21 1 . 41 17 41 18 18446744073709551615 5 value 41 18 41 23 27 1 . 41 23 41 24 28 4 type 41 24 41 28 28 1 ( 41 28 41 29 28 1 ) 41 29 41 30 28 2 == 41 31 41 33 29 6 typeid 41 34 41 40 18446744073709551615 1 ( 41 40 41 41 18446744073709551615 6 double 41 41 41 47 18446744073709551615 1 ) 41 47 41 48 18446744073709551615 1 ) 41 48 41 49 18446744073709551615 1 { 42 3 42 4 18446744073709551615 5 wcout 43 4 43 9 15 2 << 43 10 43 12 16 5 L", " 43 13 43 18 18446744073709551615 2 << 43 19 43 21 17 8 any_cast 43 22 43 30 31 1 < 43 30 43 31 31 6 double 43 31 43 37 18446744073709551615 1 > 43 37 43 38 31 1 ( 43 38 43 39 31 5 token 43 39 43 44 21 1 . 43 44 43 45 18446744073709551615 5 value 43 45 43 50 27 1 ) 43 50 43 51 31 1 ; 43 51 43 52 18446744073709551615 1 } 44 3 44 4 18446744073709551615 4 else 45 3 45 7 18446744073709551615 2 if 45 8 45 10 18446744073709551615 1 ( 45 11 45 12 18446744073709551615 5 token 45 12 45 17 21 1 . 45 17 45 18 18446744073709551615 5 value 45 18 45 23 27 1 . 45 23 45 24 28 4 type 45 24 45 28 28 1 ( 45 28 45 29 28 1 ) 45 29 45 30 28 2 == 45 31 45 33 29 6 typeid 45 34 45 40 18446744073709551615 1 ( 45 40 45 41 18446744073709551615 7 wchar_t 45 41 45 48 18446744073709551615 1 ) 45 48 45 49 18446744073709551615 1 ) 45 49 45 50 18446744073709551615 1 { 46 3 46 4 18446744073709551615 5 wcout 47 4 47 9 15 2 << 47 10 47 12 16 5 L", " 47 13 47 18 18446744073709551615 2 << 47 19 47 21 16 8 any_cast 47 22 47 30 31 1 < 47 30 47 31 31 7 wchar_t 47 31 47 38 18446744073709551615 1 > 47 38 47 39 31 1 ( 47 39 47 40 31 5 token 47 40 47 45 21 1 . 47 45 47 46 18446744073709551615 5 value 47 46 47 51 27 1 ) 47 51 47 52 31 1 ; 47 52 47 53 18446744073709551615 1 } 48 3 48 4 18446744073709551615 4 else 49 3 49 7 18446744073709551615 1 { 50 3 50 4 18446744073709551615 5 wcout 51 4 51 9 15 2 << 51 10 51 12 16 5 L", " 51 13 51 18 18446744073709551615 2 << 51 19 51 21 16 8 any_cast 51 22 51 30 31 1 < 51 30 51 31 31 7 wstring 51 31 51 38 12 1 > 51 38 51 39 31 1 ( 51 39 51 40 31 5 token 51 40 51 45 21 1 . 51 45 51 46 18446744073709551615 5 value 51 46 51 51 27 1 ) 51 51 51 52 31 1 ; 51 52 51 53 18446744073709551615 1 } 52 3 52 4 18446744073709551615 5 wcout 53 3 53 8 15 2 << 53 9 53 11 16 4 L")" 53 12 53 16 18446744073709551615 2 << 53 17 53 19 17 4 endl 53 20 53 24 18 1 ; 53 24 53 25 18446744073709551615 1 } 54 2 54 3 18446744073709551615 1 } 55 1 55 2 18446744073709551615 4 void 56 1 56 5 18446744073709551615 9 TestLexer 56 6 56 15 6 2 :: 56 15 56 17 33 10 ShowErrors 56 17 56 27 33 1 ( 56 27 56 28 33 6 vector 56 28 56 34 8 1 < 56 34 56 35 18446744073709551615 16 LexicalException 56 35 56 51 34 1 > 56 51 56 52 18446744073709551615 1 & 56 52 56 53 18446744073709551615 6 errors 56 54 56 60 35 1 ) 56 60 56 61 33 1 { 57 1 57 2 18446744073709551615 3 for 58 2 58 5 18446744073709551615 1 ( 58 6 58 7 18446744073709551615 4 auto 58 7 58 11 18446744073709551615 1 & 58 11 58 12 18446744073709551615 2 ex 58 13 58 15 36 1 : 58 16 58 17 22 6 errors 58 18 58 24 35 1 ) 58 24 58 25 18446744073709551615 1 { 59 2 59 3 18446744073709551615 5 wcout 60 3 60 8 15 2 << 60 9 60 11 16 4 L"(" 60 12 60 16 18446744073709551615 2 << 60 17 60 19 17 2 ex 60 20 60 22 36 1 . 60 22 60 23 18446744073709551615 4 line 60 23 60 27 37 2 << 60 28 60 30 16 5 L", " 60 31 60 36 18446744073709551615 2 << 60 37 60 39 17 2 ex 60 40 60 42 36 1 . 60 42 60 43 18446744073709551615 6 column 60 43 60 49 38 2 << 60 50 60 52 16 6 L"): " 60 53 60 59 18446744073709551615 2 << 60 60 60 62 16 2 ex 60 63 60 65 36 1 . 60 65 60 66 18446744073709551615 7 message 60 66 60 73 39 2 << 61 6 61 8 17 4 endl 61 9 61 13 18 1 ; 61 13 61 14 18446744073709551615 1 } 62 2 62 3 18446744073709551615 1 } 63 1 63 2 18446744073709551615 4 void 64 1 64 5 18446744073709551615 9 TestLexer 64 6 64 15 6 2 :: 64 15 64 17 40 10 TestNumber 64 17 64 27 40 1 ( 64 27 64 28 40 1 ) 64 28 64 29 40 1 { 65 1 65 2 18446744073709551615 6 string 66 2 66 8 41 4 path 66 9 66 13 42 1 = 66 14 66 15 18446744073709551615 28 "test_cases/number_test.txt" 66 16 66 44 18446744073709551615 1 ; 66 44 66 45 18446744073709551615 5 wcout 67 2 67 7 15 2 << 67 8 67 10 16 18 L"Test Function: " 67 11 67 29 18446744073709551615 2 << 67 30 67 32 16 12 __FUNCTION__ 67 33 67 45 18446744073709551615 2 << 67 46 67 48 17 4 endl 67 49 67 53 18 1 ; 67 53 67 54 18446744073709551615 5 Lexer 68 2 68 7 43 5 lexer 68 8 68 13 44 1 ( 68 13 68 14 43 4 path 68 14 68 18 42 1 ) 68 18 68 19 43 1 ; 68 19 68 20 18446744073709551615 10 ShowTokens 69 2 69 12 19 1 ( 69 12 69 13 19 5 lexer 69 13 69 18 44 1 . 69 18 69 19 18446744073709551615 6 tokens 69 19 69 25 45 1 ) 69 25 69 26 19 1 ; 69 26 69 27 18446744073709551615 6 vector 70 2 70 8 8 1 < 70 8 70 9 18446744073709551615 5 Token 70 9 70 14 9 1 > 70 14 70 15 18446744073709551615 8 expected 70 16 70 24 46 1 = 70 25 70 26 18446744073709551615 1 { 70 27 70 28 18446744073709551615 5 Token 70 28 70 33 9 1 ( 70 33 70 34 9 1 1 70 34 70 35 18446744073709551615 1 , 70 35 70 36 9 1 1 70 37 70 38 18446744073709551615 1 , 70 38 70 39 9 3 Tag 70 40 70 43 47 2 :: 70 43 70 45 18446744073709551615 3 Int 70 45 70 48 48 1 , 70 48 70 49 9 7 int32_t 70 50 70 57 30 1 ( 70 57 70 58 18446744073709551615 2 12 70 58 70 60 18446744073709551615 1 ) 70 60 70 61 18446744073709551615 1 ) 70 61 70 62 9 1 , 70 62 70 63 18446744073709551615 5 Token 71 10 71 15 9 1 ( 71 15 71 16 9 1 1 71 16 71 17 18446744073709551615 1 , 71 17 71 18 9 1 4 71 19 71 20 18446744073709551615 1 , 71 20 71 21 9 3 Tag 71 22 71 25 47 2 :: 71 25 71 27 18446744073709551615 6 Double 71 27 71 33 49 1 , 71 33 71 34 9 6 double 71 35 71 41 18446744073709551615 1 ( 71 41 71 42 18446744073709551615 4 34.3 71 42 71 46 18446744073709551615 1 ) 71 46 71 47 18446744073709551615 1 ) 71 47 71 48 9 1 , 71 48 71 49 18446744073709551615 5 Token 72 10 72 15 9 1 ( 72 15 72 16 9 1 1 72 16 72 17 18446744073709551615 1 , 72 17 72 18 9 1 9 72 19 72 20 18446744073709551615 1 , 72 20 72 21 9 3 Tag 72 22 72 25 47 2 :: 72 25 72 27 18446744073709551615 6 Double 72 27 72 33 49 1 , 72 33 72 34 9 6 double 72 35 72 41 18446744073709551615 1 ( 72 41 72 42 18446744073709551615 4 4e08 72 42 72 46 18446744073709551615 1 ) 72 46 72 47 18446744073709551615 1 ) 72 47 72 48 9 1 , 72 48 72 49 18446744073709551615 5 Token 73 10 73 15 9 1 ( 73 15 73 16 9 1 2 73 16 73 17 18446744073709551615 1 , 73 17 73 18 9 1 1 73 19 73 20 18446744073709551615 1 , 73 20 73 21 9 3 Tag 73 22 73 25 47 2 :: 73 25 73 27 18446744073709551615 4 Long 73 27 73 31 50 1 , 73 31 73 32 9 7 int64_t 73 33 73 40 32 1 ( 73 40 73 41 18446744073709551615 2 32 73 41 73 43 18446744073709551615 1 ) 73 43 73 44 18446744073709551615 1 ) 73 44 73 45 9 1 , 73 45 73 46 18446744073709551615 5 Token 74 10 74 15 9 1 ( 74 15 74 16 9 1 2 74 16 74 17 18446744073709551615 1 , 74 17 74 18 9 1 5 74 19 74 20 18446744073709551615 1 , 74 20 74 21 9 3 Tag 74 22 74 25 47 2 :: 74 25 74 27 18446744073709551615 5 Float 74 27 74 32 51 1 , 74 32 74 33 9 5 float 74 34 74 39 18446744073709551615 1 ( 74 39 74 40 18446744073709551615 4 2.34 74 40 74 44 18446744073709551615 1 ) 74 44 74 45 18446744073709551615 1 ) 74 45 74 46 9 1 , 74 46 74 47 18446744073709551615 5 Token 75 10 75 15 9 1 ( 75 15 75 16 9 1 3 75 16 75 17 18446744073709551615 1 , 75 17 75 18 9 1 1 75 19 75 20 18446744073709551615 1 , 75 20 75 21 9 3 Tag 75 22 75 25 47 2 :: 75 25 75 27 18446744073709551615 3 Eof 75 27 75 30 52 1 , 75 30 75 31 9 7 wstring 75 32 75 39 12 1 ( 75 39 75 40 53 8 L"<EOF>" 75 40 75 48 18446744073709551615 1 ) 75 48 75 49 53 1 ) 75 49 75 50 9 1 } 75 50 75 51 18446744073709551615 1 ; 75 51 75 52 18446744073709551615 11 AssertEqual 76 2 76 13 7 1 ( 76 13 76 14 7 5 lexer 76 14 76 19 44 1 . 76 19 76 20 18446744073709551615 6 tokens 76 20 76 26 45 1 , 76 26 76 27 7 8 expected 76 28 76 36 46 1 , 76 36 76 37 7 20 L"test number fails" 76 38 76 58 18446744073709551615 1 ) 76 58 76 59 7 1 ; 76 59 76 60 18446744073709551615 1 } 77 1 77 2 18446744073709551615 4 void 78 1 78 5 18446744073709551615 9 TestLexer 78 6 78 15 6 2 :: 78 15 78 17 54 14 TestHelloWorld 78 17 78 31 54 1 ( 78 31 78 32 54 1 ) 78 32 78 33 54 1 { 79 1 79 2 18446744073709551615 6 string 80 2 80 8 41 4 path 80 9 80 13 55 1 = 80 14 80 15 18446744073709551615 33 "test_cases/hello_world_test.txt" 80 16 80 49 18446744073709551615 1 ; 80 49 80 50 18446744073709551615 5 wcout 81 2 81 7 15 2 << 81 8 81 10 16 18 L"Test Function: " 81 11 81 29 18446744073709551615 2 << 81 30 81 32 16 12 __FUNCTION__ 81 33 81 45 18446744073709551615 2 << 81 46 81 48 17 4 endl 81 49 81 53 18 1 ; 81 53 81 54 18446744073709551615 5 Lexer 82 2 82 7 43 5 lexer 82 8 82 13 56 1 ( 82 13 82 14 43 4 path 82 14 82 18 55 1 ) 82 18 82 19 43 1 ; 82 19 82 20 18446744073709551615 10 ShowTokens 83 2 83 12 19 1 ( 83 12 83 13 19 5 lexer 83 13 83 18 56 1 . 83 18 83 19 18446744073709551615 6 tokens 83 19 83 25 45 1 ) 83 25 83 26 19 1 ; 83 26 83 27 18446744073709551615 10 ShowErrors 84 2 84 12 33 1 ( 84 12 84 13 33 5 lexer 84 13 84 18 56 1 . 84 18 84 19 18446744073709551615 9 errorList 84 19 84 28 57 1 ) 84 28 84 29 33 1 ; 84 29 84 30 18446744073709551615 29 // vector<Token> expected = { 85 2 85 31 18446744073709551615 46 // 	Token(1, 1, Tag::DefFun, wstring(L"fun")), 86 2 86 48 18446744073709551615 51 // 	Token(1, 5, Tag::Identifier, wstring(L"Main")), 87 2 87 53 18446744073709551615 53 // 	Token(1, 9, Tag::LeftParenthesis, wstring(L"(")), 88 2 88 55 18446744073709551615 43 // 	Token(1, 10, Tag::Identifier, L"args"), 89 2 89 45 18446744073709551615 5 // }; 90 2 90 7 18446744073709551615 1 } 91 1 91 2 18446744073709551615 4 void 92 1 92 5 18446744073709551615 10 TestParser 92 6 92 16 58 2 :: 92 16 92 18 59 15 ShowSyntaxError 92 18 92 33 59 1 ( 92 33 92 34 59 15 SyntaxException 92 34 92 49 60 1 & 92 49 92 50 18446744073709551615 2 ex 92 51 92 53 61 1 ) 92 53 92 54 59 1 { 93 1 93 2 18446744073709551615 5 wcout 94 2 94 7 15 2 << 94 8 94 10 16 4 L"(" 94 11 94 15 18446744073709551615 2 << 94 16 94 18 17 2 ex 94 19 94 21 61 1 . 94 21 94 22 18446744073709551615 4 line 94 22 94 26 62 2 << 94 27 94 29 16 5 L", " 94 30 94 35 18446744073709551615 2 << 94 36 94 38 17 2 ex 94 39 94 41 61 1 . 94 41 94 42 18446744073709551615 6 column 94 42 94 48 63 2 << 94 49 94 51 16 6 L"): " 94 52 94 58 18446744073709551615 1 ; 94 58 94 59 18446744073709551615 5 wcout 95 2 95 7 15 2 << 95 8 95 10 16 2 ex 95 11 95 13 61 1 . 95 13 95 14 18446744073709551615 7 message 95 14 95 21 39 2 << 95 22 95 24 17 4 endl 95 25 95 29 18 1 ; 95 29 95 30 18446744073709551615 1 } 96 1 96 2 18446744073709551615 4 void 97 1 97 5 18446744073709551615 10 TestParser 97 6 97 16 58 2 :: 97 16 97 18 64 19 ViewNamespaceRecord 97 18 97 37 64 1 ( 97 37 97 38 64 15 NamespaceRecord 97 38 97 53 65 1 & 97 53 97 54 18446744073709551615 8 nsRecord 97 55 97 63 66 1 ) 97 63 97 64 64 1 { 98 1 98 2 18446744073709551615 16 ExpressionViewer 99 2 99 18 67 6 viewer 99 19 99 25 68 1 ; 99 25 99 26 18446744073709551615 3 for 100 2 100 5 18446744073709551615 1 ( 100 6 100 7 18446744073709551615 4 auto 100 7 100 11 18446744073709551615 1 & 100 11 100 12 18446744073709551615 4 pair 100 13 100 17 69 1 : 100 18 100 19 70 8 nsRecord 100 20 100 28 66 1 . 100 28 100 29 18446744073709551615 6 record 100 29 100 35 71 1 ) 100 35 100 36 18446744073709551615 1 { 101 2 101 3 18446744073709551615 4 auto 102 3 102 7 18446744073709551615 5 nsPtr 102 8 102 13 72 1 = 102 14 102 15 18446744073709551615 4 pair 102 16 102 20 69 1 . 102 20 102 21 18446744073709551615 6 second 102 21 102 27 73 1 ; 102 27 102 28 18446744073709551615 6 viewer 103 3 103 9 68 1 . 103 9 103 10 74 13 ViewNamespace 103 10 103 23 74 1 ( 103 23 103 24 74 5 nsPtr 103 24 103 29 72 1 ) 103 29 103 30 74 1 ; 103 30 103 31 18446744073709551615 1 } 104 2 104 3 18446744073709551615 1 } 105 1 105 2 18446744073709551615 4 void 106 1 106 5 18446744073709551615 10 TestParser 106 6 106 16 58 2 :: 106 16 106 18 75 20 TestSimpleArithmetic 106 18 106 38 75 1 ( 106 38 106 39 75 1 ) 106 39 106 40 75 1 { 107 1 107 2 18446744073709551615 5 wcout 108 2 108 7 15 2 << 108 8 108 10 16 18 L"Test Function: " 108 11 108 29 18446744073709551615 2 << 108 30 108 32 16 12 __FUNCTION__ 108 33 108 45 18446744073709551615 2 << 108 46 108 48 17 4 endl 108 49 108 53 18 1 ; 108 53 108 54 18446744073709551615 6 ExpPtr 109 2 109 8 76 1 x 109 9 109 10 77 1 = 109 11 109 12 18446744073709551615 3 Ast 110 3 110 6 78 2 :: 110 6 110 8 79 8 Multiply 110 8 110 16 79 1 ( 110 16 110 17 79 1 0 110 17 110 18 18446744073709551615 1 , 110 18 110 19 79 1 0 110 20 110 21 18446744073709551615 1 , 110 21 110 22 79 3 Ast 110 23 110 26 78 2 :: 110 26 110 28 80 8 Constant 110 28 110 36 80 1 ( 110 36 110 37 80 1 0 110 37 110 38 18446744073709551615 1 , 110 38 110 39 80 1 0 110 40 110 41 18446744073709551615 1 , 110 41 110 42 80 2 17 110 43 110 45 18446744073709551615 1 ) 110 45 110 46 80 1 , 110 46 110 47 79 3 Ast 110 48 110 51 78 2 :: 110 51 110 53 80 8 Constant 110 53 110 61 80 1 ( 110 61 110 62 80 1 0 110 62 110 63 18446744073709551615 1 , 110 63 110 64 80 1 0 110 65 110 66 18446744073709551615 1 , 110 66 110 67 80 2 18 110 68 110 70 18446744073709551615 1 ) 110 70 110 71 80 1 ) 110 71 110 72 79 1 ; 110 72 110 73 18446744073709551615 6 ExpPtr 111 2 111 8 76 1 y 111 9 111 10 81 1 = 111 11 111 12 18446744073709551615 3 Ast 112 3 112 6 78 2 :: 112 6 112 8 82 6 Divide 112 8 112 14 82 1 ( 112 14 112 15 82 1 0 112 15 112 16 18446744073709551615 1 , 112 16 112 17 82 1 0 112 18 112 19 18446744073709551615 1 , 112 19 112 20 82 3 Ast 112 21 112 24 78 2 :: 112 24 112 26 80 8 Constant 112 26 112 34 80 1 ( 112 34 112 35 80 1 0 112 35 112 36 18446744073709551615 1 , 112 36 112 37 80 1 0 112 38 112 39 18446744073709551615 1 , 112 39 112 40 80 2 17 112 41 112 43 18446744073709551615 1 ) 112 43 112 44 80 1 , 112 44 112 45 82 3 Ast 112 46 112 49 78 2 :: 112 49 112 51 80 8 Constant 112 51 112 59 80 1 ( 112 59 112 60 80 1 0 112 60 112 61 18446744073709551615 1 , 112 61 112 62 80 1 0 112 63 112 64 18446744073709551615 1 , 112 64 112 65 80 2 18 112 66 112 68 18446744073709551615 1 ) 112 68 112 69 80 1 ) 112 69 112 70 82 1 ; 112 70 112 71 18446744073709551615 6 ExpPtr 113 2 113 8 76 3 exp 113 9 113 12 83 1 = 113 13 113 14 18446744073709551615 3 Ast 113 15 113 18 78 2 :: 113 18 113 20 84 3 Add 113 20 113 23 84 1 ( 113 23 113 24 84 1 0 113 24 113 25 18446744073709551615 1 , 113 25 113 26 84 1 0 113 27 113 28 18446744073709551615 1 , 113 28 113 29 84 1 x 113 30 113 31 77 1 , 113 31 113 32 84 1 y 113 33 113 34 81 1 ) 113 34 113 35 84 1 ; 113 35 113 36 18446744073709551615 16 ExpressionViewer 114 2 114 18 67 6 viewer 114 19 114 25 85 1 ; 114 25 114 26 18446744073709551615 3 exp 115 2 115 5 83 2 -> 115 5 115 7 86 6 Accept 115 7 115 13 86 1 ( 115 13 115 14 86 1 & 115 14 115 15 18446744073709551615 6 viewer 115 15 115 21 85 1 ) 115 21 115 22 86 1 ; 115 22 115 23 18446744073709551615 5 wcout 116 2 116 7 15 2 << 116 8 116 10 17 4 endl 116 11 116 15 18 2 << 116 16 116 18 17 4 endl 116 19 116 23 18 1 ; 116 23 116 24 18446744073709551615 1 } 117 1 117 2 18446744073709551615 4 void 118 1 118 5 18446744073709551615 10 TestParser 118 6 118 16 58 2 :: 118 16 118 18 87 12 TestAddition 118 18 118 30 87 1 ( 118 30 118 31 87 1 ) 118 31 118 32 87 1 { 119 1 119 2 18446744073709551615 5 wcout 120 2 120 7 15 2 << 120 8 120 10 16 18 L"Test Function: " 120 11 120 29 18446744073709551615 2 << 120 30 120 32 16 12 __FUNCTION__ 120 33 120 45 18446744073709551615 2 << 120 46 120 48 17 4 endl 120 49 120 53 18 1 ; 120 53 120 54 18446744073709551615 6 string 121 2 121 8 41 4 path 121 9 121 13 88 1 = 121 14 121 15 18446744073709551615 34 "test_cases/addition_function.txt" 121 16 121 50 18446744073709551615 1 ; 121 50 121 51 18446744073709551615 5 Lexer 122 2 122 7 43 5 lexer 122 8 122 13 89 1 ( 122 13 122 14 43 4 path 122 14 122 18 88 1 ) 122 18 122 19 43 1 ; 122 19 122 20 18446744073709551615 3 try 123 2 123 5 18446744073709551615 1 { 124 2 124 3 18446744073709551615 6 Parser 125 3 125 9 90 6 parser 125 10 125 16 91 1 ( 125 16 125 17 90 4 path 125 17 125 21 88 1 , 125 21 125 22 90 5 lexer 125 23 125 28 89 1 . 125 28 125 29 18446744073709551615 6 tokens 125 29 125 35 45 1 ) 125 35 125 36 90 1 ; 125 36 125 37 18446744073709551615 15 NamespaceRecord 126 3 126 18 65 8 nsRecord 126 19 126 27 92 1 ; 126 27 126 28 18446744073709551615 8 CodeFile 127 3 127 11 93 4 file 127 12 127 16 94 1 = 127 17 127 18 18446744073709551615 6 parser 127 19 127 25 91 1 . 127 25 127 26 95 7 Program 127 26 127 33 95 1 ( 127 33 127 34 95 1 ) 127 34 127 35 95 1 ; 127 35 127 36 18446744073709551615 8 nsRecord 128 3 128 11 92 1 . 128 11 128 12 96 7 AddFile 128 12 128 19 96 1 ( 128 19 128 20 96 4 file 128 20 128 24 94 1 ) 128 24 128 25 96 1 ; 128 25 128 26 18446744073709551615 11 TypeChecker 129 3 129 14 97 7 checker 129 15 129 22 98 1 ( 129 22 129 23 97 8 nsRecord 129 23 129 31 92 1 ) 129 31 129 32 97 1 ; 129 32 129 33 18446744073709551615 19 ViewNamespaceRecord 130 3 130 22 64 1 ( 130 22 130 23 64 8 nsRecord 130 23 130 31 92 1 ) 130 31 130 32 64 1 ; 130 32 130 33 18446744073709551615 1 } 131 2 131 3 18446744073709551615 5 catch 132 2 132 7 18446744073709551615 1 ( 132 8 132 9 18446744073709551615 15 SyntaxException 132 9 132 24 60 1 & 132 24 132 25 18446744073709551615 2 ex 132 26 132 28 99 1 ) 132 28 132 29 18446744073709551615 1 { 133 2 133 3 18446744073709551615 15 ShowSyntaxError 134 3 134 18 59 1 ( 134 18 134 19 59 2 ex 134 19 134 21 99 1 ) 134 21 134 22 59 1 ; 134 22 134 23 18446744073709551615 1 } 135 2 135 3 18446744073709551615 5 wcout 136 2 136 7 15 2 << 136 8 136 10 17 4 endl 136 11 136 15 18 2 << 136 16 136 18 17 4 endl 136 19 136 23 18 1 ; 136 23 136 24 18446744073709551615 1 } 137 1 137 2 18446744073709551615 4 void 138 1 138 5 18446744073709551615 10 TestParser 138 6 138 16 58 2 :: 138 16 138 18 100 13 TestFactorial 138 18 138 31 100 1 ( 138 31 138 32 100 1 ) 138 32 138 33 100 1 { 139 1 139 2 18446744073709551615 5 wcout 140 2 140 7 15 2 << 140 8 140 10 16 18 L"Test Function: " 140 11 140 29 18446744073709551615 2 << 140 30 140 32 16 12 __FUNCTION__ 140 33 140 45 18446744073709551615 2 << 140 46 140 48 17 4 endl 140 49 140 53 18 1 ; 140 53 140 54 18446744073709551615 6 string 141 2 141 8 41 4 path 141 9 141 13 101 1 = 141 14 141 15 18446744073709551615 35 "test_cases/factorial_function.txt" 141 16 141 51 18446744073709551615 1 ; 141 51 141 52 18446744073709551615 5 Lexer 142 2 142 7 43 5 lexer 142 8 142 13 102 1 ( 142 13 142 14 43 4 path 142 14 142 18 101 1 ) 142 18 142 19 43 1 ; 142 19 142 20 18446744073709551615 3 try 143 2 143 5 18446744073709551615 1 { 144 2 144 3 18446744073709551615 6 Parser 145 3 145 9 90 6 parser 145 10 145 16 103 1 ( 145 16 145 17 90 4 path 145 17 145 21 101 1 , 145 21 145 22 90 5 lexer 145 23 145 28 102 1 . 145 28 145 29 18446744073709551615 6 tokens 145 29 145 35 45 1 ) 145 35 145 36 90 1 ; 145 36 145 37 18446744073709551615 15 NamespaceRecord 146 3 146 18 65 8 nsRecord 146 19 146 27 104 1 ; 146 27 146 28 18446744073709551615 8 CodeFile 147 3 147 11 93 4 file 147 12 147 16 105 1 = 147 17 147 18 18446744073709551615 6 parser 147 19 147 25 103 1 . 147 25 147 26 95 7 Program 147 26 147 33 95 1 ( 147 33 147 34 95 1 ) 147 34 147 35 95 1 ; 147 35 147 36 18446744073709551615 8 nsRecord 148 3 148 11 104 1 . 148 11 148 12 96 7 AddFile 148 12 148 19 96 1 ( 148 19 148 20 96 4 file 148 20 148 24 105 1 ) 148 24 148 25 96 1 ; 148 25 148 26 18446744073709551615 11 TypeChecker 149 3 149 14 97 7 checker 149 15 149 22 106 1 ( 149 22 149 23 97 8 nsRecord 149 23 149 31 104 1 ) 149 31 149 32 97 1 ; 149 32 149 33 18446744073709551615 19 ViewNamespaceRecord 150 3 150 22 64 1 ( 150 22 150 23 64 8 nsRecord 150 23 150 31 104 1 ) 150 31 150 32 64 1 ; 150 32 150 33 18446744073709551615 1 } 151 2 151 3 18446744073709551615 5 catch 152 2 152 7 18446744073709551615 1 ( 152 8 152 9 18446744073709551615 15 SyntaxException 152 9 152 24 60 1 & 152 24 152 25 18446744073709551615 2 ex 152 26 152 28 107 1 ) 152 28 152 29 18446744073709551615 1 { 153 2 153 3 18446744073709551615 15 ShowSyntaxError 154 3 154 18 59 1 ( 154 18 154 19 59 2 ex 154 19 154 21 107 1 ) 154 21 154 22 59 1 ; 154 22 154 23 18446744073709551615 1 } 155 2 155 3 18446744073709551615 5 catch 156 2 156 7 18446744073709551615 1 ( 156 8 156 9 18446744073709551615 13 TypeException 156 9 156 22 108 1 & 156 22 156 23 18446744073709551615 2 ex 156 24 156 26 109 1 ) 156 26 156 27 18446744073709551615 1 { 157 2 157 3 18446744073709551615 15 TestTypeChecker 158 3 158 18 110 2 :: 158 18 158 20 111 13 ShowTypeError 158 20 158 33 111 1 ( 158 33 158 34 111 2 ex 158 34 158 36 109 1 ) 158 36 158 37 111 1 ; 158 37 158 38 18446744073709551615 1 } 159 2 159 3 18446744073709551615 5 wcout 160 2 160 7 15 2 << 160 8 160 10 17 4 endl 160 11 160 15 18 2 << 160 16 160 18 17 4 endl 160 19 160 23 18 1 ; 160 23 160 24 18446744073709551615 1 } 161 1 161 2 18446744073709551615 4 void 162 1 162 5 18446744073709551615 10 TestParser 162 6 162 16 58 2 :: 162 16 162 18 112 18 TestMultiplication 162 18 162 36 112 1 ( 162 36 162 37 112 1 ) 162 37 162 38 112 1 { 163 1 163 2 18446744073709551615 5 wcout 164 2 164 7 15 2 << 164 8 164 10 16 21 L"TestMultiplication" 164 11 164 32 18446744073709551615 2 << 164 33 164 35 17 4 endl 164 36 164 40 18 1 ; 164 40 164 41 18446744073709551615 6 string 165 2 165 8 41 4 path 165 9 165 13 113 1 = 165 14 165 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 165 16 165 56 18446744073709551615 1 ; 165 56 165 57 18446744073709551615 5 Lexer 166 2 166 7 43 5 lexer 166 8 166 13 114 1 ( 166 13 166 14 43 4 path 166 14 166 18 113 1 ) 166 18 166 19 43 1 ; 166 19 166 20 18446744073709551615 3 try 167 2 167 5 18446744073709551615 1 { 168 2 168 3 18446744073709551615 6 Parser 169 3 169 9 90 6 parser 169 10 169 16 115 1 ( 169 16 169 17 90 4 path 169 17 169 21 113 1 , 169 21 169 22 90 5 lexer 169 23 169 28 114 1 . 169 28 169 29 18446744073709551615 6 tokens 169 29 169 35 45 1 ) 169 35 169 36 90 1 ; 169 36 169 37 18446744073709551615 8 CodeFile 170 3 170 11 93 4 file 170 12 170 16 116 1 = 170 17 170 18 18446744073709551615 6 parser 170 19 170 25 115 1 . 170 25 170 26 95 7 Program 170 26 170 33 95 1 ( 170 33 170 34 95 1 ) 170 34 170 35 95 1 ; 170 35 170 36 18446744073709551615 16 ExpressionViewer 171 3 171 19 67 6 viewer 171 20 171 26 117 1 ; 171 26 171 27 18446744073709551615 36 // for (auto& module : file.modules) 172 3 172 39 18446744073709551615 4 // { 173 3 173 7 18446744073709551615 28 // 	module->Accept(&viewer); 174 3 174 31 18446744073709551615 4 // } 175 3 175 7 18446744073709551615 36 // for (auto& _class : file.classes) 176 3 176 39 18446744073709551615 4 // { 177 3 177 7 18446744073709551615 28 // 	_class->Accept(&viewer); 178 3 178 31 18446744073709551615 4 // } 179 3 179 7 18446744073709551615 1 } 180 2 180 3 18446744073709551615 5 catch 181 2 181 7 18446744073709551615 1 ( 181 8 181 9 18446744073709551615 15 SyntaxException 181 9 181 24 60 1 & 181 24 181 25 18446744073709551615 2 ex 181 26 181 28 118 1 ) 181 28 181 29 18446744073709551615 1 { 182 2 182 3 18446744073709551615 5 wcout 183 3 183 8 15 2 << 183 9 183 11 16 4 L"(" 183 12 183 16 18446744073709551615 2 << 183 17 183 19 17 2 ex 183 20 183 22 118 1 . 183 22 183 23 18446744073709551615 4 line 183 23 183 27 62 2 << 183 28 183 30 16 5 L", " 183 31 183 36 18446744073709551615 2 << 183 37 183 39 17 2 ex 183 40 183 42 118 1 . 183 42 183 43 18446744073709551615 6 column 183 43 183 49 63 2 << 183 50 183 52 16 6 L"): " 183 53 183 59 18446744073709551615 1 ; 183 59 183 60 18446744073709551615 5 wcout 184 3 184 8 15 2 << 184 9 184 11 16 2 ex 184 12 184 14 118 1 . 184 14 184 15 18446744073709551615 7 message 184 15 184 22 39 2 << 184 23 184 25 17 4 endl 184 26 184 30 18 1 ; 184 30 184 31 18446744073709551615 1 } 185 2 185 3 18446744073709551615 5 wcout 186 2 186 7 15 2 << 186 8 186 10 17 4 endl 186 11 186 15 18 2 << 186 16 186 18 17 4 endl 186 19 186 23 18 1 ; 186 23 186 24 18446744073709551615 1 } 187 1 187 2 18446744073709551615 4 void 189 1 189 5 18446744073709551615 8 TestType 189 6 189 14 119 2 :: 189 14 189 16 120 14 TestBasicTypes 189 16 189 30 120 1 ( 189 30 189 31 120 1 ) 189 31 189 32 120 1 { 190 1 190 2 18446744073709551615 4 Type 191 2 191 6 121 7 intType 191 7 191 14 122 1 = 191 15 191 16 18446744073709551615 4 Type 191 17 191 21 121 2 :: 191 21 191 23 123 3 Int 191 23 191 26 123 1 ( 191 26 191 27 123 1 ) 191 27 191 28 123 1 ; 191 28 191 29 18446744073709551615 4 Type 192 2 192 6 121 9 arrayType 192 7 192 16 124 1 = 192 17 192 18 18446744073709551615 4 Type 192 19 192 23 121 2 :: 192 23 192 25 125 5 Array 192 25 192 30 125 1 ( 192 30 192 31 125 7 intType 192 31 192 38 122 1 ) 192 38 192 39 125 1 ; 192 39 192 40 18446744073709551615 2 if 193 2 193 4 18446744073709551615 1 ( 193 5 193 6 18446744073709551615 12 TypeToString 193 6 193 18 126 1 ( 193 18 193 19 126 7 intType 193 19 193 26 122 1 ) 193 26 193 27 126 2 != 193 28 193 30 14 6 L"Int" 193 31 193 37 18446744073709551615 1 ) 193 37 193 38 18446744073709551615 1 { 194 2 194 3 18446744073709551615 5 wcout 195 3 195 8 15 2 << 195 9 195 11 16 27 L"TestBasicTypes Int fails" 195 12 195 39 18446744073709551615 2 << 195 40 195 42 17 4 endl 195 43 195 47 18 1 ; 195 47 195 48 18446744073709551615 1 } 196 2 196 3 18446744073709551615 2 if 197 2 197 4 18446744073709551615 1 ( 197 5 197 6 18446744073709551615 12 TypeToString 197 6 197 18 126 1 ( 197 18 197 19 126 9 arrayType 197 19 197 28 124 1 ) 197 28 197 29 126 2 != 197 30 197 32 14 13 L"Array[Int]" 197 33 197 46 18446744073709551615 1 ) 197 46 197 47 18446744073709551615 1 { 198 2 198 3 18446744073709551615 5 wcout 199 3 199 8 15 2 << 199 9 199 11 16 27 L"TestBasicTypes Int fails" 199 12 199 39 18446744073709551615 2 << 199 40 199 42 17 4 endl 199 43 199 47 18 1 ; 199 47 199 48 18446744073709551615 1 } 200 2 200 3 18446744073709551615 1 } 201 1 201 2 18446744073709551615 4 void 202 1 202 5 18446744073709551615 15 TestTypeChecker 202 6 202 21 110 2 :: 202 21 202 23 111 13 ShowTypeError 202 23 202 36 111 1 ( 202 36 202 37 111 13 TypeException 202 37 202 50 108 1 & 202 50 202 51 18446744073709551615 2 ex 202 52 202 54 127 1 ) 202 54 202 55 111 1 { 203 1 203 2 18446744073709551615 5 wcout 204 2 204 7 15 2 << 204 8 204 10 16 4 L"(" 204 11 204 15 18446744073709551615 2 << 204 16 204 18 17 2 ex 204 19 204 21 127 1 . 204 21 204 22 18446744073709551615 4 line 204 22 204 26 128 2 << 204 27 204 29 16 5 L", " 204 30 204 35 18446744073709551615 2 << 204 36 204 38 17 2 ex 204 39 204 41 127 1 . 204 41 204 42 18446744073709551615 6 column 204 42 204 48 129 2 << 204 49 204 51 16 6 L"): " 204 52 204 58 18446744073709551615 1 ; 204 58 204 59 18446744073709551615 5 wcout 205 2 205 7 15 2 << 205 8 205 10 16 2 ex 205 11 205 13 127 1 . 205 13 205 14 18446744073709551615 7 message 205 14 205 21 39 2 << 205 22 205 24 17 4 endl 205 25 205 29 18 1 ; 205 29 205 30 18446744073709551615 1 } 206 1 206 2 18446744073709551615 73 // void TestTypeChecker::ViewExpressionTree(NamespaceList& namespaceList) 208 1 208 74 18446744073709551615 4 // { 209 1 209 5 18446744073709551615 28 // 	ExpressionViewer viewer; 210 1 210 29 18446744073709551615 52 // 	for (Namespace& _namespace : namespaceList.list) 211 1 211 53 18446744073709551615 5 // 	{ 212 1 212 6 18446744073709551615 44 // 		for (auto& codeFile : _namespace.files) 213 1 213 45 18446744073709551615 6 // 		{ 214 1 214 7 18446744073709551615 43 // 			for (auto& module : codeFile.modules) 215 1 215 44 18446744073709551615 7 // 			{ 216 1 216 8 18446744073709551615 31 // 				module->Accept(&viewer); 217 1 217 32 18446744073709551615 7 // 			} 218 1 218 8 18446744073709551615 43 // 			for (auto& _class : codeFile.classes) 219 1 219 44 18446744073709551615 7 // 			{ 220 1 220 8 18446744073709551615 31 // 				_class->Accept(&viewer); 221 1 221 32 18446744073709551615 7 // 			} 222 1 222 8 18446744073709551615 6 // 		} 223 1 223 7 18446744073709551615 5 // 	} 224 1 224 6 18446744073709551615 4 // } 225 1 225 5 18446744073709551615 4 void 226 1 226 5 18446744073709551615 15 TestTypeChecker 226 6 226 21 110 2 :: 226 21 226 23 130 18 TestMultiplication 226 23 226 41 130 1 ( 226 41 226 42 130 1 ) 226 42 226 43 130 1 { 227 1 227 2 18446744073709551615 5 wcout 228 2 228 7 15 2 << 228 8 228 10 16 21 L"TestMultiplication" 228 11 228 32 18446744073709551615 2 << 228 33 228 35 17 4 endl 228 36 228 40 18 1 ; 228 40 228 41 18446744073709551615 6 string 229 2 229 8 41 4 path 229 9 229 13 131 1 = 229 14 229 15 18446744073709551615 40 "test_cases/multiplication_function.txt" 229 16 229 56 18446744073709551615 1 ; 229 56 229 57 18446744073709551615 5 Lexer 230 2 230 7 43 5 lexer 230 8 230 13 132 1 ( 230 13 230 14 43 4 path 230 14 230 18 131 1 ) 230 18 230 19 43 1 ; 230 19 230 20 18446744073709551615 3 try 231 2 231 5 18446744073709551615 1 { 232 2 232 3 18446744073709551615 6 Parser 233 3 233 9 90 6 parser 233 10 233 16 133 1 ( 233 16 233 17 90 4 path 233 17 233 21 131 1 , 233 21 233 22 90 5 lexer 233 23 233 28 132 1 . 233 28 233 29 18446744073709551615 6 tokens 233 29 233 35 45 1 ) 233 35 233 36 90 1 ; 233 36 233 37 18446744073709551615 15 NamespaceRecord 234 3 234 18 65 8 nsRecord 234 19 234 27 134 1 ; 234 27 234 28 18446744073709551615 8 CodeFile 235 3 235 11 93 4 file 235 12 235 16 135 1 = 235 17 235 18 18446744073709551615 6 parser 235 19 235 25 133 1 . 235 25 235 26 95 7 Program 235 26 235 33 95 1 ( 235 33 235 34 95 1 ) 235 34 235 35 95 1 ; 235 35 235 36 18446744073709551615 8 nsRecord 236 3 236 11 134 1 . 236 11 236 12 96 7 AddFile 236 12 236 19 96 1 ( 236 19 236 20 96 4 file 236 20 236 24 135 1 ) 236 24 236 25 96 1 ; 236 25 236 26 18446744073709551615 11 TypeChecker 237 3 237 14 97 7 checker 237 15 237 22 136 1 ( 237 22 237 23 97 8 nsRecord 237 23 237 31 134 1 ) 237 31 237 32 97 1 ; 237 32 237 33 18446744073709551615 10 TestParser 238 3 238 13 58 2 :: 238 13 238 15 64 19 ViewNamespaceRecord 238 15 238 34 64 1 ( 238 34 238 35 64 8 nsRecord 238 35 238 43 134 1 ) 238 43 238 44 64 1 ; 238 44 238 45 18446744073709551615 1 } 239 2 239 3 18446744073709551615 5 catch 240 2 240 7 18446744073709551615 1 ( 240 8 240 9 18446744073709551615 15 SyntaxException 240 9 240 24 60 1 & 240 24 240 25 18446744073709551615 2 ex 240 26 240 28 137 1 ) 240 28 240 29 18446744073709551615 1 { 241 2 241 3 18446744073709551615 5 wcout 242 3 242 8 15 2 << 242 9 242 11 16 4 L"(" 242 12 242 16 18446744073709551615 2 << 242 17 242 19 17 2 ex 242 20 242 22 137 1 . 242 22 242 23 18446744073709551615 4 line 242 23 242 27 62 2 << 242 28 242 30 16 5 L", " 242 31 242 36 18446744073709551615 2 << 242 37 242 39 17 2 ex 242 40 242 42 137 1 . 242 42 242 43 18446744073709551615 6 column 242 43 242 49 63 2 << 242 50 242 52 16 6 L"): " 242 53 242 59 18446744073709551615 1 ; 242 59 242 60 18446744073709551615 5 wcout 243 3 243 8 15 2 << 243 9 243 11 16 2 ex 243 12 243 14 137 1 . 243 14 243 15 18446744073709551615 7 message 243 15 243 22 39 2 << 243 23 243 25 17 4 endl 243 26 243 30 18 1 ; 243 30 243 31 18446744073709551615 1 } 244 2 244 3 18446744073709551615 5 catch 245 2 245 7 18446744073709551615 1 ( 245 8 245 9 18446744073709551615 13 TypeException 245 9 245 22 108 1 & 245 22 245 23 18446744073709551615 2 ex 245 24 245 26 138 1 ) 245 26 245 27 18446744073709551615 1 { 246 2 246 3 18446744073709551615 5 wcout 247 3 247 8 15 2 << 247 9 247 11 16 4 L"(" 247 12 247 16 18446744073709551615 2 << 247 17 247 19 17 2 ex 247 20 247 22 138 1 . 247 22 247 23 18446744073709551615 4 line 247 23 247 27 128 2 << 247 28 247 30 16 5 L", " 247 31 247 36 18446744073709551615 2 << 247 37 247 39 17 2 ex 247 40 247 42 138 1 . 247 42 247 43 18446744073709551615 6 column 247 43 247 49 129 2 << 247 50 247 52 16 6 L"): " 247 53 247 59 18446744073709551615 1 ; 247 59 247 60 18446744073709551615 5 wcout 248 3 248 8 15 2 << 248 9 248 11 16 2 ex 248 12 248 14 138 1 . 248 14 248 15 18446744073709551615 7 message 248 15 248 22 39 2 << 248 23 248 25 17 4 endl 248 26 248 30 18 1 ; 248 30 248 31 18446744073709551615 1 } 249 2 249 3 18446744073709551615 5 wcout 250 2 250 7 15 2 << 250 8 250 10 17 4 endl 250 11 250 15 18 2 << 250 16 250 18 17 4 endl 250 19 250 23 18 1 ; 250 23 250 24 18446744073709551615 1 } 251 1 251 2 18446744073709551615 4 void 252 1 252 5 18446744073709551615 15 TestTypeChecker 252 6 252 21 110 2 :: 252 21 252 23 139 14 TestCircleArea 252 23 252 37 139 1 ( 252 37 252 38 139 1 ) 252 38 252 39 139 1 { 253 1 253 2 18446744073709551615 5 wcout 254 2 254 7 15 2 << 254 8 254 10 16 28 L"TestCircleAreaTypeChecker" 254 11 254 39 18446744073709551615 2 << 254 40 254 42 17 4 endl 254 43 254 47 18 1 ; 254 47 254 48 18446744073709551615 6 string 255 2 255 8 41 4 path 255 9 255 13 140 1 = 255 14 255 15 18446744073709551615 27 "test_cases/CircleArea.txt" 255 16 255 43 18446744073709551615 1 ; 255 43 255 44 18446744073709551615 5 Lexer 256 2 256 7 43 5 lexer 256 8 256 13 141 1 ( 256 13 256 14 43 4 path 256 14 256 18 140 1 ) 256 18 256 19 43 1 ; 256 19 256 20 18446744073709551615 3 try 257 2 257 5 18446744073709551615 1 { 258 2 258 3 18446744073709551615 6 Parser 259 3 259 9 90 6 parser 259 10 259 16 142 1 ( 259 16 259 17 90 4 path 259 17 259 21 140 1 , 259 21 259 22 90 5 lexer 259 23 259 28 141 1 . 259 28 259 29 18446744073709551615 6 tokens 259 29 259 35 45 1 ) 259 35 259 36 90 1 ; 259 36 259 37 18446744073709551615 15 NamespaceRecord 260 3 260 18 65 8 nsRecord 260 19 260 27 143 1 ; 260 27 260 28 18446744073709551615 8 CodeFile 261 3 261 11 93 4 file 261 12 261 16 144 1 = 261 17 261 18 18446744073709551615 6 parser 261 19 261 25 142 1 . 261 25 261 26 95 7 Program 261 26 261 33 95 1 ( 261 33 261 34 95 1 ) 261 34 261 35 95 1 ; 261 35 261 36 18446744073709551615 8 nsRecord 262 3 262 11 143 1 . 262 11 262 12 96 7 AddFile 262 12 262 19 96 1 ( 262 19 262 20 96 4 file 262 20 262 24 144 1 ) 262 24 262 25 96 1 ; 262 25 262 26 18446744073709551615 11 TypeChecker 263 3 263 14 97 7 checker 263 15 263 22 145 1 ( 263 22 263 23 97 8 nsRecord 263 23 263 31 143 1 ) 263 31 263 32 97 1 ; 263 32 263 33 18446744073709551615 10 TestParser 264 3 264 13 58 2 :: 264 13 264 15 64 19 ViewNamespaceRecord 264 15 264 34 64 1 ( 264 34 264 35 64 8 nsRecord 264 35 264 43 143 1 ) 264 43 264 44 64 1 ; 264 44 264 45 18446744073709551615 1 } 265 2 265 3 18446744073709551615 5 catch 266 2 266 7 18446744073709551615 1 ( 266 8 266 9 18446744073709551615 15 SyntaxException 266 9 266 24 60 1 & 266 24 266 25 18446744073709551615 2 ex 266 26 266 28 146 1 ) 266 28 266 29 18446744073709551615 1 { 267 2 267 3 18446744073709551615 5 wcout 268 3 268 8 15 2 << 268 9 268 11 16 4 L"(" 268 12 268 16 18446744073709551615 2 << 268 17 268 19 17 2 ex 268 20 268 22 146 1 . 268 22 268 23 18446744073709551615 4 line 268 23 268 27 62 2 << 268 28 268 30 16 5 L", " 268 31 268 36 18446744073709551615 2 << 268 37 268 39 17 2 ex 268 40 268 42 146 1 . 268 42 268 43 18446744073709551615 6 column 268 43 268 49 63 2 << 268 50 268 52 16 6 L"): " 268 53 268 59 18446744073709551615 1 ; 268 59 268 60 18446744073709551615 5 wcout 269 3 269 8 15 2 << 269 9 269 11 16 2 ex 269 12 269 14 146 1 . 269 14 269 15 18446744073709551615 7 message 269 15 269 22 39 2 << 269 23 269 25 17 4 endl 269 26 269 30 18 1 ; 269 30 269 31 18446744073709551615 1 } 270 2 270 3 18446744073709551615 5 catch 271 2 271 7 18446744073709551615 1 ( 271 8 271 9 18446744073709551615 13 TypeException 271 9 271 22 108 1 & 271 22 271 23 18446744073709551615 2 ex 271 24 271 26 147 1 ) 271 26 271 27 18446744073709551615 1 { 272 2 272 3 18446744073709551615 5 wcout 273 3 273 8 15 2 << 273 9 273 11 16 4 L"(" 273 12 273 16 18446744073709551615 2 << 273 17 273 19 17 2 ex 273 20 273 22 147 1 . 273 22 273 23 18446744073709551615 4 line 273 23 273 27 128 2 << 273 28 273 30 16 5 L", " 273 31 273 36 18446744073709551615 2 << 273 37 273 39 17 2 ex 273 40 273 42 147 1 . 273 42 273 43 18446744073709551615 6 column 273 43 273 49 129 2 << 273 50 273 52 16 6 L"): " 273 53 273 59 18446744073709551615 1 ; 273 59 273 60 18446744073709551615 5 wcout 274 3 274 8 15 2 << 274 9 274 11 16 2 ex 274 12 274 14 147 1 . 274 14 274 15 18446744073709551615 7 message 274 15 274 22 39 2 << 274 23 274 25 17 4 endl 274 26 274 30 18 1 ; 274 30 274 31 18446744073709551615 1 } 275 2 275 3 18446744073709551615 5 wcout 276 2 276 7 15 2 << 276 8 276 10 17 4 endl 276 11 276 15 18 2 << 276 16 276 18 17 4 endl 276 19 276 23 18 1 ; 276 23 276 24 18446744073709551615 1 } 277 1 277 2 18446744073709551615 4 void 278 1 278 5 18446744073709551615 15 TestTypeChecker 278 6 278 21 110 2 :: 278 21 278 23 148 13 TestSummation 278 23 278 36 148 1 ( 278 36 278 37 148 1 ) 278 37 278 38 148 1 { 279 1 279 2 18446744073709551615 5 wcout 280 2 280 7 15 2 << 280 8 280 10 16 16 L"TestSummation" 280 11 280 27 18446744073709551615 2 << 280 28 280 30 17 4 endl 280 31 280 35 18 1 ; 280 35 280 36 18446744073709551615 6 string 281 2 281 8 41 4 path 281 9 281 13 149 1 = 281 14 281 15 18446744073709551615 26 "test_cases/summation.txt" 281 16 281 42 18446744073709551615 1 ; 281 42 281 43 18446744073709551615 5 Lexer 282 2 282 7 43 5 lexer 282 8 282 13 150 1 ( 282 13 282 14 43 4 path 282 14 282 18 149 1 ) 282 18 282 19 43 1 ; 282 19 282 20 18446744073709551615 3 try 283 2 283 5 18446744073709551615 1 { 284 2 284 3 18446744073709551615 6 Parser 285 3 285 9 90 6 parser 285 10 285 16 151 1 ( 285 16 285 17 90 4 path 285 17 285 21 149 1 , 285 21 285 22 90 5 lexer 285 23 285 28 150 1 . 285 28 285 29 18446744073709551615 6 tokens 285 29 285 35 45 1 ) 285 35 285 36 90 1 ; 285 36 285 37 18446744073709551615 8 CodeFile 286 3 286 11 93 8 codeFile 286 12 286 20 152 1 = 286 21 286 22 18446744073709551615 6 parser 286 23 286 29 151 1 . 286 29 286 30 95 7 Program 286 30 286 37 95 1 ( 286 37 286 38 95 1 ) 286 38 286 39 95 1 ; 286 39 286 40 18446744073709551615 39 // Namespace _namespace(codeFile.name); 287 3 287 42 18446744073709551615 36 // _namespace.AddCodeFile(codeFile); 288 3 288 39 18446744073709551615 31 // NamespaceList nameSpaceList; 289 3 289 34 18446744073709551615 33 // nameSpaceList.Add(_namespace); 290 3 290 36 18446744073709551615 38 // TypeChecker checker(nameSpaceList); 291 3 291 41 18446744073709551615 37 // ViewExpressionTree(nameSpaceList); 292 3 292 40 18446744073709551615 1 } 293 2 293 3 18446744073709551615 5 catch 294 2 294 7 18446744073709551615 1 ( 294 8 294 9 18446744073709551615 15 SyntaxException 294 9 294 24 60 1 & 294 24 294 25 18446744073709551615 2 ex 294 26 294 28 153 1 ) 294 28 294 29 18446744073709551615 1 { 295 2 295 3 18446744073709551615 5 wcout 296 3 296 8 15 2 << 296 9 296 11 16 4 L"(" 296 12 296 16 18446744073709551615 2 << 296 17 296 19 17 2 ex 296 20 296 22 153 1 . 296 22 296 23 18446744073709551615 4 line 296 23 296 27 62 2 << 296 28 296 30 16 5 L", " 296 31 296 36 18446744073709551615 2 << 296 37 296 39 17 2 ex 296 40 296 42 153 1 . 296 42 296 43 18446744073709551615 6 column 296 43 296 49 63 2 << 296 50 296 52 16 6 L"): " 296 53 296 59 18446744073709551615 1 ; 296 59 296 60 18446744073709551615 5 wcout 297 3 297 8 15 2 << 297 9 297 11 16 2 ex 297 12 297 14 153 1 . 297 14 297 15 18446744073709551615 7 message 297 15 297 22 39 2 << 297 23 297 25 17 4 endl 297 26 297 30 18 1 ; 297 30 297 31 18446744073709551615 1 } 298 2 298 3 18446744073709551615 5 catch 299 2 299 7 18446744073709551615 1 ( 299 8 299 9 18446744073709551615 13 TypeException 299 9 299 22 108 1 & 299 22 299 23 18446744073709551615 2 ex 299 24 299 26 154 1 ) 299 26 299 27 18446744073709551615 1 { 300 2 300 3 18446744073709551615 5 wcout 301 3 301 8 15 2 << 301 9 301 11 16 4 L"(" 301 12 301 16 18446744073709551615 2 << 301 17 301 19 17 2 ex 301 20 301 22 154 1 . 301 22 301 23 18446744073709551615 4 line 301 23 301 27 128 2 << 301 28 301 30 16 5 L", " 301 31 301 36 18446744073709551615 2 << 301 37 301 39 17 2 ex 301 40 301 42 154 1 . 301 42 301 43 18446744073709551615 6 column 301 43 301 49 129 2 << 301 50 301 52 16 6 L"): " 301 53 301 59 18446744073709551615 1 ; 301 59 301 60 18446744073709551615 5 wcout 302 3 302 8 15 2 << 302 9 302 11 16 2 ex 302 12 302 14 154 1 . 302 14 302 15 18446744073709551615 7 message 302 15 302 22 39 2 << 302 23 302 25 17 4 endl 302 26 302 30 18 1 ; 302 30 302 31 18446744073709551615 1 } 303 2 303 3 18446744073709551615 5 wcout 304 2 304 7 15 2 << 304 8 304 10 17 4 endl 304 11 304 15 18 2 << 304 16 304 18 17 4 endl 304 19 304 23 18 1 ; 304 23 304 24 18446744073709551615 1 } 305 1 305 2 18446744073709551615 0 0 155 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 6 string 49 1 3 0 6 vector 49 1 3 0 5 wcout 22 1 3 0 9 TestLexer 8 1 3 0 21 AssertEqual:TestLexer 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 70 15:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 10 1 3 0 70 15:62:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 70 15:73:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 14 operator!=:std 9 1 3 0 9 wcout:std 8 1 3 0 12 operator:std 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 8 1 3 0 20 ShowTokens:TestLexer 10 1 3 0 70 22:43:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 24:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 8 1 3 0 16 TokenTagToString 6 1 3 0 9 tag:Token 6 1 3 0 11 value:Token 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 8 1 3 0 20 ShowErrors:TestLexer 4 1 3 0 16 LexicalException 10 1 3 0 70 56:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 58:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 21 line:LexicalException 6 1 3 0 23 column:LexicalException 6 1 3 0 17 message:Exception 8 1 3 0 20 TestNumber:TestLexer 20 1 3 0 18 string:__cxx11:std 9 1 3 0 69 66:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 5 Lexer 9 1 3 0 69 68:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 12 tokens:Lexer 9 1 3 0 70 70:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 5 1 3 0 3 Tag 7 1 3 0 7 Int:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 7 Eof:Tag 24 1 3 0 24 basic_string:__cxx11:std 8 1 3 0 24 TestHelloWorld:TestLexer 9 1 3 0 69 80:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 69 82:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 errorList:Lexer 22 1 3 0 10 TestParser 8 1 3 0 26 ShowSyntaxError:TestParser 4 1 3 0 15 SyntaxException 10 1 3 0 70 92:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 20 line:SyntaxException 6 1 3 0 22 column:SyntaxException 8 1 3 0 30 ViewNamespaceRecord:TestParser 4 1 3 0 15 NamespaceRecord 10 1 3 0 70 97:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 16 ExpressionViewer 9 1 3 0 70 99:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 100:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 70 102:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 30 ViewNamespace:ExpressionViewer 8 1 3 0 31 TestSimpleArithmetic:TestParser 36 1 3 0 6 ExpPtr 9 1 3 0 70 109:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 3 Ast 8 1 3 0 12 Multiply:Ast 8 1 3 0 12 Constant:Ast 9 1 3 0 70 111:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 10 Divide:Ast 9 1 3 0 70 113:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 7 Add:Ast 9 1 3 0 71 114:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 17 Accept:Expression 8 1 3 0 23 TestAddition:TestParser 9 1 3 0 70 121:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 122:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 6 Parser 9 1 3 0 71 125:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 126:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 8 CodeFile 9 1 3 0 71 127:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 14 Program:Parser 21 1 3 0 23 AddFile:NamespaceRecord 4 1 3 0 11 TypeChecker 9 1 3 0 71 129:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 132:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 24 TestFactorial:TestParser 9 1 3 0 70 141:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 142:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 145:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 146:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 147:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 149:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 152:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 4 1 3 0 13 TypeException 9 1 3 0 71 156:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 15 TestTypeChecker 8 1 3 0 29 ShowTypeError:TestTypeChecker 8 1 3 0 29 TestMultiplication:TestParser 9 1 3 0 70 165:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 166:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 169:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 170:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 171:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 181:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 22 1 3 0 8 TestType 8 1 3 0 23 TestBasicTypes:TestType 4 1 3 0 4 Type 9 1 3 0 70 191:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 8 Int:Type 9 1 3 0 70 192:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 21 1 3 0 10 Array:Type 8 1 3 0 12 TypeToString 10 1 3 0 71 202:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 6 1 3 0 18 line:TypeException 6 1 3 0 20 column:TypeException 8 1 3 0 34 TestMultiplication:TestTypeChecker 9 1 3 0 70 229:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 230:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 233:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 234:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 235:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 237:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 240:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 245:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 30 TestCircleArea:TestTypeChecker 9 1 3 0 70 255:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 256:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 259:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 260:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 261:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 263:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 266:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 271:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 8 1 3 0 29 TestSummation:TestTypeChecker 9 1 3 0 70 281:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 70 282:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 285:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 286:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 294:26:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 9 1 3 0 71 299:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 0 0 15 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1529755055 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530592503 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1530715740 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Lexer.hpp 1529140219 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530611193 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1530592110 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1530610473 72 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SourceReader.hpp 1529028689 73 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/StringBuilder.hpp 1529046370 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/SymbolTable.hpp 1529836059 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.cpp 1530719961 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Test.hpp 1530718680 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1530679194 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/TypeChecker.hpp 1530610574
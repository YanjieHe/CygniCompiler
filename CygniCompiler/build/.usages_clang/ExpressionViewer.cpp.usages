22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 1317 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 22 "ExpressionViewer.hpp" 1 10 1 32 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 5 using 3 1 3 6 18446744073709551615 3 std 3 7 3 10 0 2 :: 3 10 3 12 18446744073709551615 8 any_cast 3 12 3 20 1 1 ; 3 20 3 21 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 4 endl 4 12 4 16 2 1 ; 4 16 4 17 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 5 wcout 5 12 5 17 3 1 ; 5 17 5 18 18446744073709551615 16 ExpressionViewer 6 1 6 17 4 2 :: 6 17 6 19 4 16 ExpressionViewer 6 19 6 35 4 1 ( 6 35 6 36 4 1 ) 6 36 6 37 4 1 { 7 1 7 2 18446744073709551615 1 } 8 1 8 2 18446744073709551615 4 void 9 1 9 5 18446744073709551615 16 ExpressionViewer 9 6 9 22 4 2 :: 9 22 9 24 5 13 ViewNamespace 9 24 9 37 5 1 ( 9 37 9 38 5 10 shared_ptr 9 38 9 48 6 1 < 9 48 9 49 18446744073709551615 9 Namespace 9 49 9 58 7 1 > 9 58 9 59 18446744073709551615 5 nsPtr 9 60 9 65 8 1 ) 9 65 9 66 5 1 { 10 1 10 2 18446744073709551615 3 for 11 2 11 5 18446744073709551615 1 ( 11 6 11 7 18446744073709551615 4 auto 11 7 11 11 18446744073709551615 1 & 11 11 11 12 18446744073709551615 4 pair 11 13 11 17 9 1 : 11 18 11 19 10 5 nsPtr 11 20 11 25 8 2 -> 11 25 11 27 18446744073709551615 7 modules 11 27 11 34 11 1 ) 11 34 11 35 18446744073709551615 1 { 12 2 12 3 18446744073709551615 4 auto 13 3 13 7 18446744073709551615 1 & 13 7 13 8 18446744073709551615 10 moduleInfo 13 9 13 19 12 1 = 13 20 13 21 18446744073709551615 4 pair 13 22 13 26 9 1 . 13 26 13 27 18446744073709551615 6 second 13 27 13 33 13 1 ; 13 33 13 34 18446744073709551615 3 for 14 3 14 6 18446744073709551615 1 ( 14 7 14 8 18446744073709551615 4 auto 14 8 14 12 18446744073709551615 1 & 14 12 14 13 18446744073709551615 5 field 14 14 14 19 14 1 : 14 20 14 21 15 10 moduleInfo 14 22 14 32 12 1 . 14 32 14 33 18446744073709551615 6 fields 14 33 14 39 16 1 ) 14 39 14 40 18446744073709551615 1 { 15 3 15 4 18446744073709551615 5 wcout 16 4 16 9 17 2 << 16 10 16 12 18 8 L"(var " 16 13 16 21 18446744073709551615 1 ; 16 21 16 22 18446744073709551615 5 wcout 17 4 17 9 17 2 << 17 10 17 12 18 5 field 17 13 17 18 14 1 . 17 18 17 19 18446744073709551615 4 name 17 19 17 23 19 2 << 17 24 17 26 18 4 L" " 17 27 17 31 18446744073709551615 1 ; 17 31 17 32 18446744073709551615 5 field 18 4 18 9 14 1 . 18 9 18 10 18446744073709551615 5 value 18 10 18 15 20 2 -> 18 15 18 17 21 6 Accept 18 17 18 23 21 1 ( 18 23 18 24 21 4 this 18 24 18 28 18446744073709551615 1 ) 18 28 18 29 21 1 ; 18 29 18 30 18446744073709551615 5 wcout 19 4 19 9 17 2 << 19 10 19 12 18 4 L")" 19 13 19 17 18446744073709551615 1 ; 19 17 19 18 18446744073709551615 1 } 20 3 20 4 18446744073709551615 3 for 21 3 21 6 18446744073709551615 1 ( 21 7 21 8 18446744073709551615 4 auto 21 8 21 12 18446744073709551615 1 & 21 12 21 13 18446744073709551615 1 p 21 14 21 15 22 1 : 21 16 21 17 10 10 moduleInfo 21 18 21 28 12 1 . 21 28 21 29 18446744073709551615 9 functions 21 29 21 38 23 1 ) 21 38 21 39 18446744073709551615 1 { 22 3 22 4 18446744073709551615 4 auto 23 4 23 8 18446744073709551615 1 & 23 8 23 9 18446744073709551615 8 function 23 10 23 18 24 1 = 23 19 23 20 18446744073709551615 1 p 23 21 23 22 22 1 . 23 22 23 23 18446744073709551615 6 second 23 23 23 29 13 1 ; 23 29 23 30 18446744073709551615 5 wcout 24 4 24 9 17 2 << 24 10 24 12 18 8 L"(fun " 24 13 24 21 18446744073709551615 1 ; 24 21 24 22 18446744073709551615 5 wcout 25 4 25 9 17 2 << 25 10 25 12 18 8 function 25 13 25 21 24 1 . 25 21 25 22 18446744073709551615 4 name 25 22 25 26 25 2 << 25 27 25 29 18 4 L" " 25 30 25 34 18446744073709551615 1 ; 25 34 25 35 18446744073709551615 5 wcout 26 4 26 9 17 2 << 26 10 26 12 18 4 L"(" 26 13 26 17 18446744073709551615 1 ; 26 17 26 18 18446744073709551615 3 for 27 4 27 7 18446744073709551615 1 ( 27 8 27 9 18446744073709551615 4 auto 27 9 27 13 18446744073709551615 1 & 27 13 27 14 18446744073709551615 9 parameter 27 15 27 24 26 1 : 27 25 27 26 15 8 function 27 27 27 35 24 1 . 27 35 27 36 18446744073709551615 10 parameters 27 36 27 46 27 1 ) 27 46 27 47 18446744073709551615 1 { 28 4 28 5 18446744073709551615 5 wcout 29 5 29 10 17 2 << 29 11 29 13 18 9 parameter 29 14 29 23 26 1 . 29 23 29 24 18446744073709551615 4 name 29 24 29 28 28 2 << 29 29 29 31 18 4 L" " 29 32 29 36 18446744073709551615 1 ; 29 36 29 37 18446744073709551615 5 wcout 30 5 30 10 17 2 << 30 11 30 13 18 12 TypeToString 30 14 30 26 29 1 ( 30 26 30 27 29 9 parameter 30 27 30 36 26 1 . 30 36 30 37 18446744073709551615 4 type 30 37 30 41 30 1 ) 30 41 30 42 29 2 << 30 43 30 45 18 4 L" " 30 46 30 50 18446744073709551615 1 ; 30 50 30 51 18446744073709551615 1 } 31 4 31 5 18446744073709551615 5 wcout 32 4 32 9 17 2 << 32 10 32 12 18 4 L")" 32 13 32 17 18446744073709551615 2 << 32 18 32 20 31 4 endl 32 21 32 25 32 1 ; 32 25 32 26 18446744073709551615 3 for 33 4 33 7 18446744073709551615 1 ( 33 8 33 9 18446744073709551615 4 auto 33 9 33 13 18446744073709551615 1 & 33 13 33 14 18446744073709551615 8 variable 33 15 33 23 33 1 : 33 24 33 25 15 8 function 33 26 33 34 24 1 . 33 34 33 35 18446744073709551615 9 variables 33 35 33 44 34 1 ) 33 44 33 45 18446744073709551615 1 { 34 4 34 5 18446744073709551615 5 wcout 35 5 35 10 17 2 << 35 11 35 13 18 8 L"(var " 35 14 35 22 18446744073709551615 1 ; 35 22 35 23 18446744073709551615 5 wcout 36 5 36 10 17 2 << 36 11 36 13 18 8 variable 36 14 36 22 33 1 . 36 22 36 23 18446744073709551615 4 name 36 23 36 27 35 2 << 36 28 36 30 18 4 L" " 36 31 36 35 18446744073709551615 1 ; 36 35 36 36 18446744073709551615 8 variable 37 5 37 13 33 1 . 37 13 37 14 18446744073709551615 5 value 37 14 37 19 36 2 -> 37 19 37 21 21 6 Accept 37 21 37 27 21 1 ( 37 27 37 28 21 4 this 37 28 37 32 18446744073709551615 1 ) 37 32 37 33 21 1 ; 37 33 37 34 18446744073709551615 5 wcout 38 5 38 10 17 2 << 38 11 38 13 18 4 L")" 38 14 38 18 18446744073709551615 1 ; 38 18 38 19 18446744073709551615 1 } 39 4 39 5 18446744073709551615 3 for 40 4 40 7 18446744073709551615 1 ( 40 8 40 9 18446744073709551615 4 auto 40 9 40 13 18446744073709551615 1 & 40 13 40 14 18446744073709551615 1 e 40 15 40 16 37 1 : 40 17 40 18 15 8 function 40 19 40 27 24 1 . 40 27 40 28 18446744073709551615 11 expressions 40 28 40 39 38 1 ) 40 39 40 40 18446744073709551615 1 { 41 4 41 5 18446744073709551615 1 e 42 5 42 6 37 2 -> 42 6 42 8 21 6 Accept 42 8 42 14 21 1 ( 42 14 42 15 21 4 this 42 15 42 19 18446744073709551615 1 ) 42 19 42 20 21 1 ; 42 20 42 21 18446744073709551615 1 } 43 4 43 5 18446744073709551615 5 wcout 44 4 44 9 17 2 << 44 10 44 12 18 4 L")" 44 13 44 17 18446744073709551615 2 << 44 18 44 20 31 4 endl 44 21 44 25 32 1 ; 44 25 44 26 18446744073709551615 1 } 45 3 45 4 18446744073709551615 1 } 46 2 46 3 18446744073709551615 3 for 47 2 47 5 18446744073709551615 1 ( 47 6 47 7 18446744073709551615 4 auto 47 7 47 11 18446744073709551615 1 & 47 11 47 12 18446744073709551615 4 pair 47 13 47 17 39 1 : 47 18 47 19 10 5 nsPtr 47 20 47 25 8 2 -> 47 25 47 27 18446744073709551615 7 classes 47 27 47 34 40 1 ) 47 34 47 35 18446744073709551615 1 { 48 2 48 3 18446744073709551615 4 auto 49 3 49 7 18446744073709551615 1 & 49 7 49 8 18446744073709551615 9 classInfo 49 9 49 18 41 1 = 49 19 49 20 18446744073709551615 4 pair 49 21 49 25 39 1 . 49 25 49 26 18446744073709551615 6 second 49 26 49 32 13 1 ; 49 32 49 33 18446744073709551615 3 for 50 3 50 6 18446744073709551615 1 ( 50 7 50 8 18446744073709551615 4 auto 50 8 50 12 18446744073709551615 1 & 50 12 50 13 18446744073709551615 5 field 50 14 50 19 42 1 : 50 20 50 21 15 9 classInfo 50 22 50 31 41 1 . 50 31 50 32 18446744073709551615 6 fields 50 32 50 38 43 1 ) 50 38 50 39 18446744073709551615 1 { 51 3 51 4 18446744073709551615 5 wcout 52 4 52 9 17 2 << 52 10 52 12 18 8 L"(var " 52 13 52 21 18446744073709551615 1 ; 52 21 52 22 18446744073709551615 5 wcout 53 4 53 9 17 2 << 53 10 53 12 18 5 field 53 13 53 18 42 1 . 53 18 53 19 18446744073709551615 4 name 53 19 53 23 19 2 << 53 24 53 26 18 4 L" " 53 27 53 31 18446744073709551615 1 ; 53 31 53 32 18446744073709551615 5 field 54 4 54 9 42 1 . 54 9 54 10 18446744073709551615 5 value 54 10 54 15 20 2 -> 54 15 54 17 21 6 Accept 54 17 54 23 21 1 ( 54 23 54 24 21 4 this 54 24 54 28 18446744073709551615 1 ) 54 28 54 29 21 1 ; 54 29 54 30 18446744073709551615 5 wcout 55 4 55 9 17 2 << 55 10 55 12 18 4 L")" 55 13 55 17 18446744073709551615 1 ; 55 17 55 18 18446744073709551615 1 } 56 3 56 4 18446744073709551615 3 for 57 3 57 6 18446744073709551615 1 ( 57 7 57 8 18446744073709551615 4 auto 57 8 57 12 18446744073709551615 1 & 57 12 57 13 18446744073709551615 1 p 57 14 57 15 44 1 : 57 16 57 17 10 9 classInfo 57 18 57 27 41 1 . 57 27 57 28 18446744073709551615 9 functions 57 28 57 37 45 1 ) 57 37 57 38 18446744073709551615 1 { 58 3 58 4 18446744073709551615 4 auto 59 4 59 8 18446744073709551615 1 & 59 8 59 9 18446744073709551615 8 function 59 10 59 18 46 1 = 59 19 59 20 18446744073709551615 1 p 59 21 59 22 44 1 . 59 22 59 23 18446744073709551615 6 second 59 23 59 29 13 1 ; 59 29 59 30 18446744073709551615 3 for 60 4 60 7 18446744073709551615 1 ( 60 8 60 9 18446744073709551615 4 auto 60 9 60 13 18446744073709551615 1 & 60 13 60 14 18446744073709551615 1 e 60 15 60 16 47 1 : 60 17 60 18 15 8 function 60 19 60 27 46 1 . 60 27 60 28 18446744073709551615 11 expressions 60 28 60 39 38 1 ) 60 39 60 40 18446744073709551615 1 { 61 4 61 5 18446744073709551615 1 e 62 5 62 6 47 2 -> 62 6 62 8 21 6 Accept 62 8 62 14 21 1 ( 62 14 62 15 21 4 this 62 15 62 19 18446744073709551615 1 ) 62 19 62 20 21 1 ; 62 20 62 21 18446744073709551615 1 } 63 4 63 5 18446744073709551615 1 } 64 3 64 4 18446744073709551615 1 } 65 2 65 3 18446744073709551615 3 for 66 2 66 5 18446744073709551615 1 ( 66 6 66 7 18446744073709551615 4 auto 66 7 66 11 18446744073709551615 1 & 66 11 66 12 18446744073709551615 4 pair 66 13 66 17 48 1 : 66 18 66 19 10 5 nsPtr 66 20 66 25 8 2 -> 66 25 66 27 18446744073709551615 13 subNamespaces 66 27 66 40 49 1 ) 66 40 66 41 18446744073709551615 1 { 67 2 67 3 18446744073709551615 4 auto 68 3 68 7 18446744073709551615 1 & 68 7 68 8 18446744073709551615 8 subNsPtr 68 9 68 17 50 1 = 68 18 68 19 18446744073709551615 4 pair 68 20 68 24 48 1 . 68 24 68 25 18446744073709551615 6 second 68 25 68 31 13 1 ; 68 31 68 32 18446744073709551615 13 ViewNamespace 69 3 69 16 5 1 ( 69 16 69 17 5 8 subNsPtr 69 17 69 25 50 1 ) 69 25 69 26 5 1 ; 69 26 69 27 18446744073709551615 1 } 70 2 70 3 18446744073709551615 1 } 71 1 71 2 18446744073709551615 4 void 72 1 72 5 18446744073709551615 16 ExpressionViewer 72 6 72 22 4 2 :: 72 22 72 24 51 5 Visit 72 24 72 29 51 1 ( 72 29 72 30 51 18 ConstantExpression 72 30 72 48 52 1 * 72 48 72 49 18446744073709551615 4 node 72 50 72 54 53 1 ) 72 54 72 55 51 1 { 73 1 73 2 18446744073709551615 5 wcout 74 2 74 7 17 2 << 74 8 74 10 31 4 endl 74 11 74 15 32 2 << 74 16 74 18 18 13 L"(Constant " 74 19 74 32 18446744073709551615 1 ; 74 32 74 33 18446744073709551615 3 any 75 2 75 5 54 1 & 75 5 75 6 18446744073709551615 5 value 75 7 75 12 55 1 = 75 13 75 14 18446744073709551615 4 node 75 15 75 19 53 2 -> 75 19 75 21 18446744073709551615 5 value 75 21 75 26 56 1 ; 75 26 75 27 18446744073709551615 2 if 76 2 76 4 18446744073709551615 1 ( 76 5 76 6 18446744073709551615 5 value 76 6 76 11 55 1 . 76 11 76 12 57 4 type 76 12 76 16 57 1 ( 76 16 76 17 57 1 ) 76 17 76 18 57 2 == 76 19 76 21 58 6 typeid 76 22 76 28 18446744073709551615 1 ( 76 28 76 29 18446744073709551615 7 int32_t 76 29 76 36 59 1 ) 76 36 76 37 18446744073709551615 1 ) 76 37 76 38 18446744073709551615 1 { 77 2 77 3 18446744073709551615 5 wcout 78 3 78 8 17 2 << 78 9 78 11 18 7 L"Int " 78 12 78 19 18446744073709551615 1 ; 78 19 78 20 18446744073709551615 5 wcout 79 3 79 8 17 2 << 79 9 79 11 31 8 any_cast 79 12 79 20 60 1 < 79 20 79 21 60 7 int32_t 79 21 79 28 59 1 > 79 28 79 29 60 1 ( 79 29 79 30 60 5 value 79 30 79 35 55 1 ) 79 35 79 36 60 2 << 79 37 79 39 18 4 L")" 79 40 79 44 18446744073709551615 1 ; 79 44 79 45 18446744073709551615 1 } 80 2 80 3 18446744073709551615 4 else 81 2 81 6 18446744073709551615 2 if 81 7 81 9 18446744073709551615 1 ( 81 10 81 11 18446744073709551615 5 value 81 11 81 16 55 1 . 81 16 81 17 57 4 type 81 17 81 21 57 1 ( 81 21 81 22 57 1 ) 81 22 81 23 57 2 == 81 24 81 26 58 6 typeid 81 27 81 33 18446744073709551615 1 ( 81 33 81 34 18446744073709551615 7 int64_t 81 34 81 41 61 1 ) 81 41 81 42 18446744073709551615 1 ) 81 42 81 43 18446744073709551615 1 { 82 2 82 3 18446744073709551615 5 wcout 83 3 83 8 17 2 << 83 9 83 11 18 8 L"Long " 83 12 83 20 18446744073709551615 1 ; 83 20 83 21 18446744073709551615 5 wcout 84 3 84 8 17 2 << 84 9 84 11 31 8 any_cast 84 12 84 20 60 1 < 84 20 84 21 60 7 int64_t 84 21 84 28 61 1 > 84 28 84 29 60 1 ( 84 29 84 30 60 5 value 84 30 84 35 55 1 ) 84 35 84 36 60 2 << 84 37 84 39 18 4 L")" 84 40 84 44 18446744073709551615 1 ; 84 44 84 45 18446744073709551615 1 } 85 2 85 3 18446744073709551615 4 else 86 2 86 6 18446744073709551615 2 if 86 7 86 9 18446744073709551615 1 ( 86 10 86 11 18446744073709551615 5 value 86 11 86 16 55 1 . 86 16 86 17 57 4 type 86 17 86 21 57 1 ( 86 21 86 22 57 1 ) 86 22 86 23 57 2 == 86 24 86 26 58 6 typeid 86 27 86 33 18446744073709551615 1 ( 86 33 86 34 18446744073709551615 5 float 86 34 86 39 18446744073709551615 1 ) 86 39 86 40 18446744073709551615 1 ) 86 40 86 41 18446744073709551615 1 { 87 2 87 3 18446744073709551615 5 wcout 88 3 88 8 17 2 << 88 9 88 11 18 9 L"Float " 88 12 88 21 18446744073709551615 1 ; 88 21 88 22 18446744073709551615 5 wcout 89 3 89 8 17 2 << 89 9 89 11 31 8 any_cast 89 12 89 20 60 1 < 89 20 89 21 60 5 float 89 21 89 26 18446744073709551615 1 > 89 26 89 27 60 1 ( 89 27 89 28 60 5 value 89 28 89 33 55 1 ) 89 33 89 34 60 2 << 89 35 89 37 18 4 L")" 89 38 89 42 18446744073709551615 1 ; 89 42 89 43 18446744073709551615 1 } 90 2 90 3 18446744073709551615 4 else 91 2 91 6 18446744073709551615 2 if 91 7 91 9 18446744073709551615 1 ( 91 10 91 11 18446744073709551615 5 value 91 11 91 16 55 1 . 91 16 91 17 57 4 type 91 17 91 21 57 1 ( 91 21 91 22 57 1 ) 91 22 91 23 57 2 == 91 24 91 26 58 6 typeid 91 27 91 33 18446744073709551615 1 ( 91 33 91 34 18446744073709551615 6 double 91 34 91 40 18446744073709551615 1 ) 91 40 91 41 18446744073709551615 1 ) 91 41 91 42 18446744073709551615 1 { 92 2 92 3 18446744073709551615 5 wcout 93 3 93 8 17 2 << 93 9 93 11 18 10 L"Double " 93 12 93 22 18446744073709551615 1 ; 93 22 93 23 18446744073709551615 5 wcout 94 3 94 8 17 2 << 94 9 94 11 31 8 any_cast 94 12 94 20 60 1 < 94 20 94 21 60 6 double 94 21 94 27 18446744073709551615 1 > 94 27 94 28 60 1 ( 94 28 94 29 60 5 value 94 29 94 34 55 1 ) 94 34 94 35 60 2 << 94 36 94 38 18 4 L")" 94 39 94 43 18446744073709551615 1 ; 94 43 94 44 18446744073709551615 1 } 95 2 95 3 18446744073709551615 4 else 96 2 96 6 18446744073709551615 2 if 96 7 96 9 18446744073709551615 1 ( 96 10 96 11 18446744073709551615 5 value 96 11 96 16 55 1 . 96 16 96 17 57 4 type 96 17 96 21 57 1 ( 96 21 96 22 57 1 ) 96 22 96 23 57 2 == 96 24 96 26 58 6 typeid 96 27 96 33 18446744073709551615 1 ( 96 33 96 34 18446744073709551615 7 wchar_t 96 34 96 41 18446744073709551615 1 ) 96 41 96 42 18446744073709551615 1 ) 96 42 96 43 18446744073709551615 1 { 97 2 97 3 18446744073709551615 5 wcout 98 3 98 8 17 2 << 98 9 98 11 18 8 L"Char " 98 12 98 20 18446744073709551615 1 ; 98 20 98 21 18446744073709551615 5 wcout 99 3 99 8 17 2 << 99 9 99 11 18 8 any_cast 99 12 99 20 60 1 < 99 20 99 21 60 7 wchar_t 99 21 99 28 18446744073709551615 1 > 99 28 99 29 60 1 ( 99 29 99 30 60 5 value 99 30 99 35 55 1 ) 99 35 99 36 60 2 << 99 37 99 39 18 4 L")" 99 40 99 44 18446744073709551615 1 ; 99 44 99 45 18446744073709551615 1 } 100 2 100 3 18446744073709551615 4 else 101 2 101 6 18446744073709551615 2 if 101 7 101 9 18446744073709551615 1 ( 101 10 101 11 18446744073709551615 5 value 101 11 101 16 55 1 . 101 16 101 17 57 4 type 101 17 101 21 57 1 ( 101 21 101 22 57 1 ) 101 22 101 23 57 2 == 101 24 101 26 58 6 typeid 101 27 101 33 18446744073709551615 1 ( 101 33 101 34 18446744073709551615 4 bool 101 34 101 38 18446744073709551615 1 ) 101 38 101 39 18446744073709551615 1 ) 101 39 101 40 18446744073709551615 1 { 102 2 102 3 18446744073709551615 5 wcout 103 3 103 8 17 2 << 103 9 103 11 18 11 L"Boolean " 103 12 103 23 18446744073709551615 1 ; 103 23 103 24 18446744073709551615 5 wcout 104 3 104 8 17 2 << 104 9 104 11 31 8 any_cast 104 12 104 20 60 1 < 104 20 104 21 60 4 bool 104 21 104 25 18446744073709551615 1 > 104 25 104 26 60 1 ( 104 26 104 27 60 5 value 104 27 104 32 55 1 ) 104 32 104 33 60 2 << 104 34 104 36 18 4 L")" 104 37 104 41 18446744073709551615 1 ; 104 41 104 42 18446744073709551615 1 } 105 2 105 3 18446744073709551615 4 else 106 2 106 6 18446744073709551615 2 if 106 7 106 9 18446744073709551615 1 ( 106 10 106 11 18446744073709551615 5 value 106 11 106 16 55 1 . 106 16 106 17 57 4 type 106 17 106 21 57 1 ( 106 21 106 22 57 1 ) 106 22 106 23 57 2 == 106 24 106 26 58 6 typeid 106 27 106 33 18446744073709551615 1 ( 106 33 106 34 18446744073709551615 7 wstring 106 34 106 41 62 1 ) 106 41 106 42 18446744073709551615 1 ) 106 42 106 43 18446744073709551615 1 { 107 2 107 3 18446744073709551615 5 wcout 108 3 108 8 17 2 << 108 9 108 11 18 10 L"String " 108 12 108 22 18446744073709551615 1 ; 108 22 108 23 18446744073709551615 5 wcout 109 3 109 8 17 2 << 109 9 109 11 18 8 any_cast 109 12 109 20 60 1 < 109 20 109 21 60 7 wstring 109 21 109 28 62 1 > 109 28 109 29 60 1 ( 109 29 109 30 60 5 value 109 30 109 35 55 1 ) 109 35 109 36 60 2 << 109 37 109 39 18 4 L")" 109 40 109 44 18446744073709551615 1 ; 109 44 109 45 18446744073709551615 1 } 110 2 110 3 18446744073709551615 4 else 111 2 111 6 18446744073709551615 1 { 112 2 112 3 18446744073709551615 5 wcout 113 3 113 8 17 2 << 113 9 113 11 18 10 L"Error )" 113 12 113 22 18446744073709551615 1 ; 113 22 113 23 18446744073709551615 1 } 114 2 114 3 18446744073709551615 1 } 115 1 115 2 18446744073709551615 4 void 116 1 116 5 18446744073709551615 16 ExpressionViewer 116 6 116 22 4 2 :: 116 22 116 24 51 5 Visit 116 24 116 29 51 1 ( 116 29 116 30 51 15 UnaryExpression 116 30 116 45 63 1 * 116 45 116 46 18446744073709551615 4 node 116 47 116 51 64 1 ) 116 51 116 52 51 1 { 117 1 117 2 18446744073709551615 5 wcout 118 2 118 7 17 2 << 118 8 118 10 31 4 endl 118 11 118 15 32 2 << 118 16 118 18 18 4 L"(" 118 19 118 23 18446744073709551615 2 << 118 24 118 26 18 22 ExpressionKindToString 118 27 118 49 65 1 ( 118 49 118 50 65 4 node 118 50 118 54 64 2 -> 118 54 118 56 18446744073709551615 4 kind 118 56 118 60 66 1 ) 118 60 118 61 65 2 << 118 62 118 64 18 4 L" " 118 65 118 69 18446744073709551615 1 ; 118 69 118 70 18446744073709551615 5 wcout 119 2 119 7 17 2 << 119 8 119 10 18 12 TypeToString 119 11 119 23 29 1 ( 119 23 119 24 29 4 node 119 24 119 28 64 2 -> 119 28 119 30 18446744073709551615 4 type 119 30 119 34 67 1 ) 119 34 119 35 29 2 << 119 36 119 38 18 4 L" " 119 39 119 43 18446744073709551615 1 ; 119 43 119 44 18446744073709551615 4 node 120 2 120 6 64 2 -> 120 6 120 8 18446744073709551615 7 operand 120 8 120 15 68 2 -> 120 15 120 17 21 6 Accept 120 17 120 23 21 1 ( 120 23 120 24 21 4 this 120 24 120 28 18446744073709551615 1 ) 120 28 120 29 21 1 ; 120 29 120 30 18446744073709551615 5 wcout 121 2 121 7 17 2 << 121 8 121 10 18 4 L")" 121 11 121 15 18446744073709551615 1 ; 121 15 121 16 18446744073709551615 1 } 122 1 122 2 18446744073709551615 4 void 123 1 123 5 18446744073709551615 16 ExpressionViewer 123 6 123 22 4 2 :: 123 22 123 24 51 5 Visit 123 24 123 29 51 1 ( 123 29 123 30 51 16 BinaryExpression 123 30 123 46 69 1 * 123 46 123 47 18446744073709551615 4 node 123 48 123 52 70 1 ) 123 52 123 53 51 1 { 124 1 124 2 18446744073709551615 5 wcout 125 2 125 7 17 2 << 125 8 125 10 31 4 endl 125 11 125 15 32 2 << 125 16 125 18 18 4 L"(" 125 19 125 23 18446744073709551615 2 << 125 24 125 26 18 22 ExpressionKindToString 125 27 125 49 65 1 ( 125 49 125 50 65 4 node 125 50 125 54 70 2 -> 125 54 125 56 18446744073709551615 4 kind 125 56 125 60 66 1 ) 125 60 125 61 65 2 << 125 62 125 64 18 4 L" " 125 65 125 69 18446744073709551615 1 ; 125 69 125 70 18446744073709551615 5 wcout 126 2 126 7 17 2 << 126 8 126 10 18 12 TypeToString 126 11 126 23 29 1 ( 126 23 126 24 29 4 node 126 24 126 28 70 2 -> 126 28 126 30 18446744073709551615 4 type 126 30 126 34 67 1 ) 126 34 126 35 29 2 << 126 36 126 38 18 4 L" " 126 39 126 43 18446744073709551615 1 ; 126 43 126 44 18446744073709551615 4 node 127 2 127 6 70 2 -> 127 6 127 8 18446744073709551615 4 left 127 8 127 12 71 2 -> 127 12 127 14 21 6 Accept 127 14 127 20 21 1 ( 127 20 127 21 21 4 this 127 21 127 25 18446744073709551615 1 ) 127 25 127 26 21 1 ; 127 26 127 27 18446744073709551615 5 wcout 128 2 128 7 17 2 << 128 8 128 10 18 4 L" " 128 11 128 15 18446744073709551615 1 ; 128 15 128 16 18446744073709551615 4 node 129 2 129 6 70 2 -> 129 6 129 8 18446744073709551615 5 right 129 8 129 13 72 2 -> 129 13 129 15 21 6 Accept 129 15 129 21 21 1 ( 129 21 129 22 21 4 this 129 22 129 26 18446744073709551615 1 ) 129 26 129 27 21 1 ; 129 27 129 28 18446744073709551615 5 wcout 130 2 130 7 17 2 << 130 8 130 10 18 4 L")" 130 11 130 15 18446744073709551615 1 ; 130 15 130 16 18446744073709551615 1 } 131 1 131 2 18446744073709551615 4 void 132 1 132 5 18446744073709551615 16 ExpressionViewer 132 6 132 22 4 2 :: 132 22 132 24 51 5 Visit 132 24 132 29 51 1 ( 132 29 132 30 51 16 AssignExpression 132 30 132 46 73 1 * 132 46 132 47 18446744073709551615 4 node 132 48 132 52 74 1 ) 132 52 132 53 51 1 { 133 1 133 2 18446744073709551615 5 wcout 134 2 134 7 17 2 << 134 8 134 10 31 4 endl 134 11 134 15 32 2 << 134 16 134 18 18 4 L"(" 134 19 134 23 18446744073709551615 2 << 134 24 134 26 18 22 ExpressionKindToString 134 27 134 49 65 1 ( 134 49 134 50 65 4 node 134 50 134 54 74 2 -> 134 54 134 56 18446744073709551615 4 kind 134 56 134 60 66 1 ) 134 60 134 61 65 2 << 134 62 134 64 18 4 L" " 134 65 134 69 18446744073709551615 1 ; 134 69 134 70 18446744073709551615 5 wcout 135 2 135 7 17 2 << 135 8 135 10 18 12 TypeToString 135 11 135 23 29 1 ( 135 23 135 24 29 4 node 135 24 135 28 74 2 -> 135 28 135 30 18446744073709551615 4 type 135 30 135 34 67 1 ) 135 34 135 35 29 2 << 135 36 135 38 18 4 L" " 135 39 135 43 18446744073709551615 1 ; 135 43 135 44 18446744073709551615 5 wcout 136 2 136 7 17 2 << 136 8 136 10 18 4 node 136 11 136 15 74 2 -> 136 15 136 17 18446744073709551615 4 name 136 17 136 21 75 2 << 136 22 136 24 18 4 L" " 136 25 136 29 18446744073709551615 1 ; 136 29 136 30 18446744073709551615 4 node 137 2 137 6 74 2 -> 137 6 137 8 18446744073709551615 5 value 137 8 137 13 76 2 -> 137 13 137 15 21 6 Accept 137 15 137 21 21 1 ( 137 21 137 22 21 4 this 137 22 137 26 18446744073709551615 1 ) 137 26 137 27 21 1 ; 137 27 137 28 18446744073709551615 5 wcout 138 2 138 7 17 2 << 138 8 138 10 18 4 L")" 138 11 138 15 18446744073709551615 1 ; 138 15 138 16 18446744073709551615 1 } 139 1 139 2 18446744073709551615 4 void 140 1 140 5 18446744073709551615 16 ExpressionViewer 140 6 140 22 4 2 :: 140 22 140 24 51 5 Visit 140 24 140 29 51 1 ( 140 29 140 30 51 15 BlockExpression 140 30 140 45 77 1 * 140 45 140 46 18446744073709551615 4 node 140 47 140 51 78 1 ) 140 51 140 52 51 1 { 141 1 141 2 18446744073709551615 5 wcout 142 2 142 7 17 2 << 142 8 142 10 31 4 endl 142 11 142 15 32 2 << 142 16 142 18 18 4 L"(" 142 19 142 23 18446744073709551615 2 << 142 24 142 26 18 22 ExpressionKindToString 142 27 142 49 65 1 ( 142 49 142 50 65 4 node 142 50 142 54 78 2 -> 142 54 142 56 18446744073709551615 4 kind 142 56 142 60 66 1 ) 142 60 142 61 65 2 << 142 62 142 64 18 4 L" " 142 65 142 69 18446744073709551615 1 ; 142 69 142 70 18446744073709551615 5 wcout 143 2 143 7 17 2 << 143 8 143 10 18 12 TypeToString 143 11 143 23 29 1 ( 143 23 143 24 29 4 node 143 24 143 28 78 2 -> 143 28 143 30 18446744073709551615 4 type 143 30 143 34 67 1 ) 143 34 143 35 29 2 << 143 36 143 38 18 4 L" " 143 39 143 43 18446744073709551615 1 ; 143 43 143 44 18446744073709551615 3 for 144 2 144 5 18446744073709551615 1 ( 144 6 144 7 18446744073709551615 4 auto 144 7 144 11 18446744073709551615 1 & 144 11 144 12 18446744073709551615 1 e 144 13 144 14 79 1 : 144 15 144 16 15 4 node 144 17 144 21 78 2 -> 144 21 144 23 18446744073709551615 11 expressions 144 23 144 34 80 1 ) 144 34 144 35 18446744073709551615 1 { 145 2 145 3 18446744073709551615 1 e 146 3 146 4 79 2 -> 146 4 146 6 21 6 Accept 146 6 146 12 21 1 ( 146 12 146 13 21 4 this 146 13 146 17 18446744073709551615 1 ) 146 17 146 18 21 1 ; 146 18 146 19 18446744073709551615 1 } 147 2 147 3 18446744073709551615 5 wcout 148 2 148 7 17 2 << 148 8 148 10 18 4 L")" 148 11 148 15 18446744073709551615 1 ; 148 15 148 16 18446744073709551615 1 } 149 1 149 2 18446744073709551615 4 void 150 1 150 5 18446744073709551615 16 ExpressionViewer 150 6 150 22 4 2 :: 150 22 150 24 51 5 Visit 150 24 150 29 51 1 ( 150 29 150 30 51 16 IfThenExpression 150 30 150 46 81 1 * 150 46 150 47 18446744073709551615 4 node 150 48 150 52 82 1 ) 150 52 150 53 51 1 { 151 1 151 2 18446744073709551615 5 wcout 152 2 152 7 17 2 << 152 8 152 10 31 4 endl 152 11 152 15 32 2 << 152 16 152 18 18 4 L"(" 152 19 152 23 18446744073709551615 2 << 152 24 152 26 18 22 ExpressionKindToString 152 27 152 49 65 1 ( 152 49 152 50 65 4 node 152 50 152 54 82 2 -> 152 54 152 56 18446744073709551615 4 kind 152 56 152 60 66 1 ) 152 60 152 61 65 2 << 152 62 152 64 18 4 L" " 152 65 152 69 18446744073709551615 1 ; 152 69 152 70 18446744073709551615 5 wcout 153 2 153 7 17 2 << 153 8 153 10 18 12 TypeToString 153 11 153 23 29 1 ( 153 23 153 24 29 4 node 153 24 153 28 82 2 -> 153 28 153 30 18446744073709551615 4 type 153 30 153 34 67 1 ) 153 34 153 35 29 2 << 153 36 153 38 18 4 L" " 153 39 153 43 18446744073709551615 1 ; 153 43 153 44 18446744073709551615 4 node 154 2 154 6 82 2 -> 154 6 154 8 18446744073709551615 9 condition 154 8 154 17 83 2 -> 154 17 154 19 21 6 Accept 154 19 154 25 21 1 ( 154 25 154 26 21 4 this 154 26 154 30 18446744073709551615 1 ) 154 30 154 31 21 1 ; 154 31 154 32 18446744073709551615 5 wcout 155 2 155 7 17 2 << 155 8 155 10 18 4 L" " 155 11 155 15 18446744073709551615 1 ; 155 15 155 16 18446744073709551615 4 node 156 2 156 6 82 2 -> 156 6 156 8 18446744073709551615 6 ifTrue 156 8 156 14 84 2 -> 156 14 156 16 21 6 Accept 156 16 156 22 21 1 ( 156 22 156 23 21 4 this 156 23 156 27 18446744073709551615 1 ) 156 27 156 28 21 1 ; 156 28 156 29 18446744073709551615 5 wcout 157 2 157 7 17 2 << 157 8 157 10 18 4 L")" 157 11 157 15 18446744073709551615 1 ; 157 15 157 16 18446744073709551615 1 } 158 1 158 2 18446744073709551615 4 void 159 1 159 5 18446744073709551615 16 ExpressionViewer 159 6 159 22 4 2 :: 159 22 159 24 51 5 Visit 159 24 159 29 51 1 ( 159 29 159 30 51 20 IfThenElseExpression 159 30 159 50 85 1 * 159 50 159 51 18446744073709551615 4 node 159 52 159 56 86 1 ) 159 56 159 57 51 1 { 160 1 160 2 18446744073709551615 5 wcout 161 2 161 7 17 2 << 161 8 161 10 31 4 endl 161 11 161 15 32 2 << 161 16 161 18 18 4 L"(" 161 19 161 23 18446744073709551615 2 << 161 24 161 26 18 22 ExpressionKindToString 161 27 161 49 65 1 ( 161 49 161 50 65 4 node 161 50 161 54 86 2 -> 161 54 161 56 18446744073709551615 4 kind 161 56 161 60 66 1 ) 161 60 161 61 65 2 << 161 62 161 64 18 4 L" " 161 65 161 69 18446744073709551615 1 ; 161 69 161 70 18446744073709551615 5 wcout 162 2 162 7 17 2 << 162 8 162 10 18 12 TypeToString 162 11 162 23 29 1 ( 162 23 162 24 29 4 node 162 24 162 28 86 2 -> 162 28 162 30 18446744073709551615 4 type 162 30 162 34 67 1 ) 162 34 162 35 29 2 << 162 36 162 38 18 4 L" " 162 39 162 43 18446744073709551615 1 ; 162 43 162 44 18446744073709551615 4 node 163 2 163 6 86 2 -> 163 6 163 8 18446744073709551615 9 condition 163 8 163 17 87 2 -> 163 17 163 19 21 6 Accept 163 19 163 25 21 1 ( 163 25 163 26 21 4 this 163 26 163 30 18446744073709551615 1 ) 163 30 163 31 21 1 ; 163 31 163 32 18446744073709551615 5 wcout 164 2 164 7 17 2 << 164 8 164 10 18 4 L" " 164 11 164 15 18446744073709551615 1 ; 164 15 164 16 18446744073709551615 4 node 165 2 165 6 86 2 -> 165 6 165 8 18446744073709551615 6 ifTrue 165 8 165 14 88 2 -> 165 14 165 16 21 6 Accept 165 16 165 22 21 1 ( 165 22 165 23 21 4 this 165 23 165 27 18446744073709551615 1 ) 165 27 165 28 21 1 ; 165 28 165 29 18446744073709551615 5 wcout 166 2 166 7 17 2 << 166 8 166 10 18 4 L" " 166 11 166 15 18446744073709551615 1 ; 166 15 166 16 18446744073709551615 4 node 167 2 167 6 86 2 -> 167 6 167 8 18446744073709551615 7 ifFalse 167 8 167 15 89 2 -> 167 15 167 17 21 6 Accept 167 17 167 23 21 1 ( 167 23 167 24 21 4 this 167 24 167 28 18446744073709551615 1 ) 167 28 167 29 21 1 ; 167 29 167 30 18446744073709551615 5 wcout 168 2 168 7 17 2 << 168 8 168 10 18 4 L")" 168 11 168 15 18446744073709551615 1 ; 168 15 168 16 18446744073709551615 1 } 169 1 169 2 18446744073709551615 55 // void ExpressionViewer::Visit(DefVarExpression* node) 170 1 170 56 18446744073709551615 4 // { 171 1 171 5 18446744073709551615 72 // 	wcout << endl << L"(" << ExpressionKindToString(node->kind) << L" "; 172 1 172 73 18446744073709551615 46 // 	wcout << TypeToString(node->type) << L" "; 173 1 173 47 18446744073709551615 32 // 	wcout << node->name << L" "; 174 1 174 33 18446744073709551615 30 // 	node->value->Accept(this); 175 1 175 31 18446744073709551615 18 // 	wcout << L")"; 176 1 176 19 18446744073709551615 4 // } 177 1 177 5 18446744073709551615 55 // void ExpressionViewer::Visit(DefFunExpression* node) 178 1 178 56 18446744073709551615 4 // { 179 1 179 5 18446744073709551615 72 // 	wcout << endl << L"(" << ExpressionKindToString(node->kind) << L" "; 180 1 180 73 18446744073709551615 46 // 	wcout << TypeToString(node->type) << L" "; 181 1 181 47 18446744073709551615 32 // 	wcout << node->name << L" "; 182 1 182 33 18446744073709551615 36 // 	for (auto& p : node->parameters) 183 1 183 37 18446744073709551615 5 // 	{ 184 1 184 6 18446744073709551615 21 // 		p->Accept(this); 185 1 185 22 18446744073709551615 19 // 		wcout << L" "; 186 1 186 20 18446744073709551615 5 // 	} 187 1 187 6 18446744073709551615 29 // 	node->body->Accept(this); 188 1 188 30 18446744073709551615 18 // 	wcout << L")"; 189 1 189 19 18446744073709551615 4 // } 190 1 190 5 18446744073709551615 58 // void ExpressionViewer::Visit(ParameterExpression* node) 191 1 191 59 18446744073709551615 4 // { 192 1 192 5 18446744073709551615 72 // 	wcout << endl << L"(" << ExpressionKindToString(node->kind) << L" "; 193 1 193 73 18446744073709551615 46 // 	wcout << TypeToString(node->type) << L" "; 194 1 194 47 18446744073709551615 32 // 	wcout << node->name << L")"; 195 1 195 33 18446744073709551615 4 // } 196 1 196 5 18446744073709551615 4 void 197 1 197 5 18446744073709551615 16 ExpressionViewer 197 6 197 22 4 2 :: 197 22 197 24 51 5 Visit 197 24 197 29 51 1 ( 197 29 197 30 51 14 CallExpression 197 30 197 44 90 1 * 197 44 197 45 18446744073709551615 4 node 197 46 197 50 91 1 ) 197 50 197 51 51 1 { 198 1 198 2 18446744073709551615 5 wcout 199 2 199 7 17 2 << 199 8 199 10 31 4 endl 199 11 199 15 32 2 << 199 16 199 18 18 4 L"(" 199 19 199 23 18446744073709551615 2 << 199 24 199 26 18 22 ExpressionKindToString 199 27 199 49 65 1 ( 199 49 199 50 65 4 node 199 50 199 54 91 2 -> 199 54 199 56 18446744073709551615 4 kind 199 56 199 60 66 1 ) 199 60 199 61 65 2 << 199 62 199 64 18 4 L" " 199 65 199 69 18446744073709551615 1 ; 199 69 199 70 18446744073709551615 5 wcout 200 2 200 7 17 2 << 200 8 200 10 18 12 TypeToString 200 11 200 23 29 1 ( 200 23 200 24 29 4 node 200 24 200 28 91 2 -> 200 28 200 30 18446744073709551615 4 type 200 30 200 34 67 1 ) 200 34 200 35 29 2 << 200 36 200 38 18 4 L" " 200 39 200 43 18446744073709551615 1 ; 200 43 200 44 18446744073709551615 4 node 201 2 201 6 91 2 -> 201 6 201 8 18446744073709551615 8 function 201 8 201 16 92 2 -> 201 16 201 18 21 6 Accept 201 18 201 24 21 1 ( 201 24 201 25 21 4 this 201 25 201 29 18446744073709551615 1 ) 201 29 201 30 21 1 ; 201 30 201 31 18446744073709551615 5 wcout 202 2 202 7 17 2 << 202 8 202 10 18 4 L" " 202 11 202 15 18446744073709551615 1 ; 202 15 202 16 18446744073709551615 3 for 203 2 203 5 18446744073709551615 1 ( 203 6 203 7 18446744073709551615 4 auto 203 7 203 11 18446744073709551615 1 & 203 11 203 12 18446744073709551615 3 arg 203 13 203 16 93 1 : 203 17 203 18 15 4 node 203 19 203 23 91 2 -> 203 23 203 25 18446744073709551615 9 arguments 203 25 203 34 94 1 ) 203 34 203 35 18446744073709551615 1 { 204 2 204 3 18446744073709551615 3 arg 205 3 205 6 93 2 -> 205 6 205 8 21 6 Accept 205 8 205 14 21 1 ( 205 14 205 15 21 4 this 205 15 205 19 18446744073709551615 1 ) 205 19 205 20 21 1 ; 205 20 205 21 18446744073709551615 5 wcout 206 3 206 8 17 2 << 206 9 206 11 18 4 L" " 206 12 206 16 18446744073709551615 1 ; 206 16 206 17 18446744073709551615 1 } 207 2 207 3 18446744073709551615 5 wcout 208 2 208 7 17 2 << 208 8 208 10 18 4 L")" 208 11 208 15 18446744073709551615 1 ; 208 15 208 16 18446744073709551615 1 } 209 1 209 2 18446744073709551615 4 void 210 1 210 5 18446744073709551615 16 ExpressionViewer 210 6 210 22 4 2 :: 210 22 210 24 51 5 Visit 210 24 210 29 51 1 ( 210 29 210 30 51 18 VariableExpression 210 30 210 48 95 1 * 210 48 210 49 18446744073709551615 4 node 210 50 210 54 96 1 ) 210 54 210 55 51 1 { 211 1 211 2 18446744073709551615 5 wcout 212 2 212 7 17 2 << 212 8 212 10 31 4 endl 212 11 212 15 32 2 << 212 16 212 18 18 4 L"(" 212 19 212 23 18446744073709551615 2 << 212 24 212 26 18 22 ExpressionKindToString 212 27 212 49 65 1 ( 212 49 212 50 65 4 node 212 50 212 54 96 2 -> 212 54 212 56 18446744073709551615 4 kind 212 56 212 60 66 1 ) 212 60 212 61 65 2 << 212 62 212 64 18 4 L" " 212 65 212 69 18446744073709551615 1 ; 212 69 212 70 18446744073709551615 5 wcout 213 2 213 7 17 2 << 213 8 213 10 18 12 TypeToString 213 11 213 23 29 1 ( 213 23 213 24 29 4 node 213 24 213 28 96 2 -> 213 28 213 30 18446744073709551615 4 type 213 30 213 34 67 1 ) 213 34 213 35 29 2 << 213 36 213 38 18 4 L" " 213 39 213 43 18446744073709551615 1 ; 213 43 213 44 18446744073709551615 5 wcout 214 2 214 7 17 2 << 214 8 214 10 18 4 node 214 11 214 15 96 2 -> 214 15 214 17 18446744073709551615 4 name 214 17 214 21 97 2 << 214 22 214 24 18 4 L")" 214 25 214 29 18446744073709551615 1 ; 214 29 214 30 18446744073709551615 1 } 215 1 215 2 18446744073709551615 4 void 216 1 216 5 18446744073709551615 16 ExpressionViewer 216 6 216 22 4 2 :: 216 22 216 24 51 5 Visit 216 24 216 29 51 1 ( 216 29 216 30 51 16 ReturnExpression 216 30 216 46 98 1 * 216 46 216 47 18446744073709551615 4 node 216 48 216 52 99 1 ) 216 52 216 53 51 1 { 217 1 217 2 18446744073709551615 5 wcout 218 2 218 7 17 2 << 218 8 218 10 31 4 endl 218 11 218 15 32 2 << 218 16 218 18 18 4 L"(" 218 19 218 23 18446744073709551615 2 << 218 24 218 26 18 22 ExpressionKindToString 218 27 218 49 65 1 ( 218 49 218 50 65 4 node 218 50 218 54 99 2 -> 218 54 218 56 18446744073709551615 4 kind 218 56 218 60 66 1 ) 218 60 218 61 65 2 << 218 62 218 64 18 4 L" " 218 65 218 69 18446744073709551615 1 ; 218 69 218 70 18446744073709551615 5 wcout 219 2 219 7 17 2 << 219 8 219 10 18 12 TypeToString 219 11 219 23 29 1 ( 219 23 219 24 29 4 node 219 24 219 28 99 2 -> 219 28 219 30 18446744073709551615 4 type 219 30 219 34 67 1 ) 219 34 219 35 29 2 << 219 36 219 38 18 4 L" " 219 39 219 43 18446744073709551615 1 ; 219 43 219 44 18446744073709551615 4 node 220 2 220 6 99 2 -> 220 6 220 8 18446744073709551615 5 value 220 8 220 13 100 2 -> 220 13 220 15 21 6 Accept 220 15 220 21 21 1 ( 220 21 220 22 21 4 this 220 22 220 26 18446744073709551615 1 ) 220 26 220 27 21 1 ; 220 27 220 28 18446744073709551615 5 wcout 221 2 221 7 17 2 << 221 8 221 10 18 4 L")" 221 11 221 15 18446744073709551615 1 ; 221 15 221 16 18446744073709551615 1 } 222 1 222 2 18446744073709551615 4 void 223 1 223 5 18446744073709551615 16 ExpressionViewer 223 6 223 22 4 2 :: 223 22 223 24 51 5 Visit 223 24 223 29 51 1 ( 223 29 223 30 51 15 WhileExpression 223 30 223 45 101 1 * 223 45 223 46 18446744073709551615 4 node 223 47 223 51 102 1 ) 223 51 223 52 51 1 { 224 1 224 2 18446744073709551615 5 wcout 225 2 225 7 17 2 << 225 8 225 10 31 4 endl 225 11 225 15 32 2 << 225 16 225 18 18 4 L"(" 225 19 225 23 18446744073709551615 2 << 225 24 225 26 18 22 ExpressionKindToString 225 27 225 49 65 1 ( 225 49 225 50 65 4 node 225 50 225 54 102 2 -> 225 54 225 56 18446744073709551615 4 kind 225 56 225 60 66 1 ) 225 60 225 61 65 2 << 225 62 225 64 18 4 L" " 225 65 225 69 18446744073709551615 1 ; 225 69 225 70 18446744073709551615 5 wcout 226 2 226 7 17 2 << 226 8 226 10 18 12 TypeToString 226 11 226 23 29 1 ( 226 23 226 24 29 4 node 226 24 226 28 102 2 -> 226 28 226 30 18446744073709551615 4 type 226 30 226 34 67 1 ) 226 34 226 35 29 2 << 226 36 226 38 18 4 L" " 226 39 226 43 18446744073709551615 1 ; 226 43 226 44 18446744073709551615 4 node 227 2 227 6 102 2 -> 227 6 227 8 18446744073709551615 9 condition 227 8 227 17 103 2 -> 227 17 227 19 21 6 Accept 227 19 227 25 21 1 ( 227 25 227 26 21 4 this 227 26 227 30 18446744073709551615 1 ) 227 30 227 31 21 1 ; 227 31 227 32 18446744073709551615 5 wcout 228 2 228 7 17 2 << 228 8 228 10 18 4 L" " 228 11 228 15 18446744073709551615 1 ; 228 15 228 16 18446744073709551615 4 node 229 2 229 6 102 2 -> 229 6 229 8 18446744073709551615 4 body 229 8 229 12 104 2 -> 229 12 229 14 21 6 Accept 229 14 229 20 21 1 ( 229 20 229 21 21 4 this 229 21 229 25 18446744073709551615 1 ) 229 25 229 26 21 1 ; 229 26 229 27 18446744073709551615 5 wcout 230 2 230 7 17 2 << 230 8 230 10 18 4 L")" 230 11 230 15 18446744073709551615 1 ; 230 15 230 16 18446744073709551615 1 } 231 1 231 2 18446744073709551615 55 // void ExpressionViewer::Visit(ModuleExpression* node) 232 1 232 56 18446744073709551615 4 // { 233 1 233 5 18446744073709551615 72 // 	wcout << endl << L"(" << ExpressionKindToString(node->kind) << L" "; 234 1 234 73 18446744073709551615 32 // 	wcout << node->name << L" "; 235 1 235 33 18446744073709551615 37 // 	for (auto& var : node->variables) 236 1 236 38 18446744073709551615 5 // 	{ 237 1 237 6 18446744073709551615 23 // 		var->Accept(this); 238 1 238 24 18446744073709551615 5 // 	} 239 1 239 6 18446744073709551615 35 // 	for (auto& f : node->functions) 240 1 240 36 18446744073709551615 5 // 	{ 241 1 241 6 18446744073709551615 21 // 		f->Accept(this); 242 1 242 22 18446744073709551615 5 // 	} 243 1 243 6 18446744073709551615 18 // 	wcout << L")"; 244 1 244 19 18446744073709551615 4 // } 245 1 245 5 18446744073709551615 54 // void ExpressionViewer::Visit(ClassExpression* node) 246 1 246 55 18446744073709551615 4 // { 247 1 247 5 18446744073709551615 72 // 	wcout << endl << L"(" << ExpressionKindToString(node->kind) << L" "; 248 1 248 73 18446744073709551615 32 // 	wcout << node->name << L" "; 249 1 249 33 18446744073709551615 36 // 	for (auto& field : node->fields) 250 1 250 37 18446744073709551615 5 // 	{ 251 1 251 6 18446744073709551615 25 // 		field->Accept(this); 252 1 252 26 18446744073709551615 5 // 	} 253 1 253 6 18446744073709551615 38 // 	for (auto& method : node->methods) 254 1 254 39 18446744073709551615 5 // 	{ 255 1 255 6 18446744073709551615 26 // 		method->Accept(this); 256 1 256 27 18446744073709551615 5 // 	} 257 1 257 6 18446744073709551615 4 // } 258 1 258 5 18446744073709551615 4 void 259 1 259 5 18446744073709551615 16 ExpressionViewer 259 6 259 22 4 2 :: 259 22 259 24 51 5 Visit 259 24 259 29 51 1 ( 259 29 259 30 51 13 DotExpression 259 30 259 43 105 1 * 259 43 259 44 18446744073709551615 4 node 259 45 259 49 106 1 ) 259 49 259 50 51 1 { 260 1 260 2 18446744073709551615 5 wcout 261 2 261 7 17 2 << 261 8 261 10 31 4 endl 261 11 261 15 32 2 << 261 16 261 18 18 4 L"(" 261 19 261 23 18446744073709551615 2 << 261 24 261 26 18 22 ExpressionKindToString 261 27 261 49 65 1 ( 261 49 261 50 65 4 node 261 50 261 54 106 2 -> 261 54 261 56 18446744073709551615 4 kind 261 56 261 60 66 1 ) 261 60 261 61 65 2 << 261 62 261 64 18 4 L" " 261 65 261 69 18446744073709551615 1 ; 261 69 261 70 18446744073709551615 4 node 262 2 262 6 106 2 -> 262 6 262 8 18446744073709551615 6 object 262 8 262 14 107 2 -> 262 14 262 16 21 6 Accept 262 16 262 22 21 1 ( 262 22 262 23 21 4 this 262 23 262 27 18446744073709551615 1 ) 262 27 262 28 21 1 ; 262 28 262 29 18446744073709551615 5 wcout 263 2 263 7 17 2 << 263 8 263 10 18 4 L" " 263 11 263 15 18446744073709551615 1 ; 263 15 263 16 18446744073709551615 5 wcout 264 2 264 7 17 2 << 264 8 264 10 18 4 node 264 11 264 15 106 2 -> 264 15 264 17 18446744073709551615 4 name 264 17 264 21 108 2 << 264 22 264 24 18 4 L")" 264 25 264 29 18446744073709551615 1 ; 264 29 264 30 18446744073709551615 1 } 265 1 265 2 18446744073709551615 0 0 109 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 16 ExpressionViewer 21 1 3 0 30 ViewNamespace:ExpressionViewer 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 81 9:60:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 11:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 17 modules:Namespace 9 1 3 0 81 13:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 15 second:pair:std 9 1 3 0 82 14:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 9 1 3 0 9 wcout:std 8 1 3 0 12 operator:std 6 1 3 0 10 name:Field 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 9 1 3 0 82 21:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 16 functions:Module 9 1 3 0 82 23:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 13 name:Function 9 1 3 0 82 27:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 19 parameters:Function 6 1 3 0 14 name:Parameter 8 1 3 0 12 TypeToString 6 1 3 0 14 type:Parameter 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 9 1 3 0 82 33:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 18 variables:Function 6 1 3 0 18 name:LocalVariable 6 1 3 0 19 value:LocalVariable 9 1 3 0 82 40:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 20 expressions:Function 9 1 3 0 82 47:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 17 classes:Namespace 9 1 3 0 81 49:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 50:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 12 fields:Class 9 1 3 0 82 57:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 15 functions:Class 9 1 3 0 82 59:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 60:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 66:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 subNamespaces:Namespace 9 1 3 0 81 68:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 2 3 0 24 Visit:Visitor:Expression 22 Visit:ExpressionViewer 4 1 3 0 18 ConstantExpression 10 1 3 0 82 72:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 4 1 3 0 7 any:std 9 1 3 0 81 75:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 20 1 3 0 19 wstring:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 83 116:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 8 1 3 0 22 ExpressionKindToString 6 1 3 0 15 kind:Expression 6 1 3 0 15 type:Expression 6 1 3 0 23 operand:UnaryExpression 4 1 3 0 16 BinaryExpression 10 1 3 0 83 123:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 4 1 3 0 16 AssignExpression 10 1 3 0 83 132:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 name:AssignExpression 6 1 3 0 22 value:AssignExpression 4 1 3 0 15 BlockExpression 10 1 3 0 83 140:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 83 144:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 83 150:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 83 159:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 14 CallExpression 10 1 3 0 83 197:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 83 203:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 arguments:CallExpression 4 1 3 0 18 VariableExpression 10 1 3 0 83 210:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 name:VariableExpression 4 1 3 0 16 ReturnExpression 10 1 3 0 83 216:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 83 223:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 4 1 3 0 13 DotExpression 10 1 3 0 83 259:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 20 object:DotExpression 6 1 3 0 18 name:DotExpression 0 0 5 0 0 0 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530592503 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 1530716834 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1530715740 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530611193 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
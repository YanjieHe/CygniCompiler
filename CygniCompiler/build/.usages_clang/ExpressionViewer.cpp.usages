22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 1074 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 22 "ExpressionViewer.hpp" 1 10 1 32 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 5 using 3 1 3 6 18446744073709551615 3 std 3 7 3 10 0 2 :: 3 10 3 12 18446744073709551615 8 any_cast 3 12 3 20 1 1 ; 3 20 3 21 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 4 endl 4 12 4 16 2 1 ; 4 16 4 17 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 5 wcout 5 12 5 17 3 1 ; 5 17 5 18 18446744073709551615 16 ExpressionViewer 6 1 6 17 4 2 :: 6 17 6 19 4 16 ExpressionViewer 6 19 6 35 4 1 ( 6 35 6 36 4 1 ) 6 36 6 37 4 1 { 7 1 7 2 18446744073709551615 1 } 8 1 8 2 18446744073709551615 4 void 9 1 9 5 18446744073709551615 16 ExpressionViewer 9 6 9 22 4 2 :: 9 22 9 24 5 5 Visit 9 24 9 29 5 1 ( 9 29 9 30 5 18 ConstantExpression 9 30 9 48 6 1 * 9 48 9 49 18446744073709551615 4 node 9 50 9 54 7 1 ) 9 54 9 55 5 1 { 10 1 10 2 18446744073709551615 5 wcout 11 2 11 7 8 2 << 11 8 11 10 9 4 endl 11 11 11 15 10 2 << 11 16 11 18 11 13 L"(Constant " 11 19 11 32 18446744073709551615 1 ; 11 32 11 33 18446744073709551615 3 any 12 2 12 5 12 1 & 12 5 12 6 18446744073709551615 5 value 12 7 12 12 13 1 = 12 13 12 14 18446744073709551615 4 node 12 15 12 19 7 2 -> 12 19 12 21 18446744073709551615 5 value 12 21 12 26 14 1 ; 12 26 12 27 18446744073709551615 2 if 13 2 13 4 18446744073709551615 1 ( 13 5 13 6 18446744073709551615 5 value 13 6 13 11 13 1 . 13 11 13 12 15 4 type 13 12 13 16 15 1 ( 13 16 13 17 15 1 ) 13 17 13 18 15 2 == 13 19 13 21 16 6 typeid 13 22 13 28 18446744073709551615 1 ( 13 28 13 29 18446744073709551615 7 int32_t 13 29 13 36 17 1 ) 13 36 13 37 18446744073709551615 1 ) 13 37 13 38 18446744073709551615 1 { 14 2 14 3 18446744073709551615 5 wcout 15 3 15 8 8 2 << 15 9 15 11 11 7 L"Int " 15 12 15 19 18446744073709551615 1 ; 15 19 15 20 18446744073709551615 5 wcout 16 3 16 8 8 2 << 16 9 16 11 9 8 any_cast 16 12 16 20 18 1 < 16 20 16 21 18 7 int32_t 16 21 16 28 17 1 > 16 28 16 29 18 1 ( 16 29 16 30 18 5 value 16 30 16 35 13 1 ) 16 35 16 36 18 2 << 16 37 16 39 11 4 L")" 16 40 16 44 18446744073709551615 1 ; 16 44 16 45 18446744073709551615 1 } 17 2 17 3 18446744073709551615 4 else 18 2 18 6 18446744073709551615 2 if 18 7 18 9 18446744073709551615 1 ( 18 10 18 11 18446744073709551615 5 value 18 11 18 16 13 1 . 18 16 18 17 15 4 type 18 17 18 21 15 1 ( 18 21 18 22 15 1 ) 18 22 18 23 15 2 == 18 24 18 26 16 6 typeid 18 27 18 33 18446744073709551615 1 ( 18 33 18 34 18446744073709551615 7 int64_t 18 34 18 41 19 1 ) 18 41 18 42 18446744073709551615 1 ) 18 42 18 43 18446744073709551615 1 { 19 2 19 3 18446744073709551615 5 wcout 20 3 20 8 8 2 << 20 9 20 11 11 8 L"Long " 20 12 20 20 18446744073709551615 1 ; 20 20 20 21 18446744073709551615 5 wcout 21 3 21 8 8 2 << 21 9 21 11 9 8 any_cast 21 12 21 20 18 1 < 21 20 21 21 18 7 int64_t 21 21 21 28 19 1 > 21 28 21 29 18 1 ( 21 29 21 30 18 5 value 21 30 21 35 13 1 ) 21 35 21 36 18 2 << 21 37 21 39 11 4 L")" 21 40 21 44 18446744073709551615 1 ; 21 44 21 45 18446744073709551615 1 } 22 2 22 3 18446744073709551615 4 else 23 2 23 6 18446744073709551615 2 if 23 7 23 9 18446744073709551615 1 ( 23 10 23 11 18446744073709551615 5 value 23 11 23 16 13 1 . 23 16 23 17 15 4 type 23 17 23 21 15 1 ( 23 21 23 22 15 1 ) 23 22 23 23 15 2 == 23 24 23 26 16 6 typeid 23 27 23 33 18446744073709551615 1 ( 23 33 23 34 18446744073709551615 5 float 23 34 23 39 18446744073709551615 1 ) 23 39 23 40 18446744073709551615 1 ) 23 40 23 41 18446744073709551615 1 { 24 2 24 3 18446744073709551615 5 wcout 25 3 25 8 8 2 << 25 9 25 11 11 9 L"Float " 25 12 25 21 18446744073709551615 1 ; 25 21 25 22 18446744073709551615 5 wcout 26 3 26 8 8 2 << 26 9 26 11 9 8 any_cast 26 12 26 20 18 1 < 26 20 26 21 18 5 float 26 21 26 26 18446744073709551615 1 > 26 26 26 27 18 1 ( 26 27 26 28 18 5 value 26 28 26 33 13 1 ) 26 33 26 34 18 2 << 26 35 26 37 11 4 L")" 26 38 26 42 18446744073709551615 1 ; 26 42 26 43 18446744073709551615 1 } 27 2 27 3 18446744073709551615 4 else 28 2 28 6 18446744073709551615 2 if 28 7 28 9 18446744073709551615 1 ( 28 10 28 11 18446744073709551615 5 value 28 11 28 16 13 1 . 28 16 28 17 15 4 type 28 17 28 21 15 1 ( 28 21 28 22 15 1 ) 28 22 28 23 15 2 == 28 24 28 26 16 6 typeid 28 27 28 33 18446744073709551615 1 ( 28 33 28 34 18446744073709551615 6 double 28 34 28 40 18446744073709551615 1 ) 28 40 28 41 18446744073709551615 1 ) 28 41 28 42 18446744073709551615 1 { 29 2 29 3 18446744073709551615 5 wcout 30 3 30 8 8 2 << 30 9 30 11 11 10 L"Double " 30 12 30 22 18446744073709551615 1 ; 30 22 30 23 18446744073709551615 5 wcout 31 3 31 8 8 2 << 31 9 31 11 9 8 any_cast 31 12 31 20 18 1 < 31 20 31 21 18 6 double 31 21 31 27 18446744073709551615 1 > 31 27 31 28 18 1 ( 31 28 31 29 18 5 value 31 29 31 34 13 1 ) 31 34 31 35 18 2 << 31 36 31 38 11 4 L")" 31 39 31 43 18446744073709551615 1 ; 31 43 31 44 18446744073709551615 1 } 32 2 32 3 18446744073709551615 4 else 33 2 33 6 18446744073709551615 2 if 33 7 33 9 18446744073709551615 1 ( 33 10 33 11 18446744073709551615 5 value 33 11 33 16 13 1 . 33 16 33 17 15 4 type 33 17 33 21 15 1 ( 33 21 33 22 15 1 ) 33 22 33 23 15 2 == 33 24 33 26 16 6 typeid 33 27 33 33 18446744073709551615 1 ( 33 33 33 34 18446744073709551615 7 wchar_t 33 34 33 41 18446744073709551615 1 ) 33 41 33 42 18446744073709551615 1 ) 33 42 33 43 18446744073709551615 1 { 34 2 34 3 18446744073709551615 5 wcout 35 3 35 8 8 2 << 35 9 35 11 11 8 L"Char " 35 12 35 20 18446744073709551615 1 ; 35 20 35 21 18446744073709551615 5 wcout 36 3 36 8 8 2 << 36 9 36 11 11 8 any_cast 36 12 36 20 18 1 < 36 20 36 21 18 7 wchar_t 36 21 36 28 18446744073709551615 1 > 36 28 36 29 18 1 ( 36 29 36 30 18 5 value 36 30 36 35 13 1 ) 36 35 36 36 18 2 << 36 37 36 39 11 4 L")" 36 40 36 44 18446744073709551615 1 ; 36 44 36 45 18446744073709551615 1 } 37 2 37 3 18446744073709551615 4 else 38 2 38 6 18446744073709551615 2 if 38 7 38 9 18446744073709551615 1 ( 38 10 38 11 18446744073709551615 5 value 38 11 38 16 13 1 . 38 16 38 17 15 4 type 38 17 38 21 15 1 ( 38 21 38 22 15 1 ) 38 22 38 23 15 2 == 38 24 38 26 16 6 typeid 38 27 38 33 18446744073709551615 1 ( 38 33 38 34 18446744073709551615 4 bool 38 34 38 38 18446744073709551615 1 ) 38 38 38 39 18446744073709551615 1 ) 38 39 38 40 18446744073709551615 1 { 39 2 39 3 18446744073709551615 5 wcout 40 3 40 8 8 2 << 40 9 40 11 11 11 L"Boolean " 40 12 40 23 18446744073709551615 1 ; 40 23 40 24 18446744073709551615 5 wcout 41 3 41 8 8 2 << 41 9 41 11 9 8 any_cast 41 12 41 20 18 1 < 41 20 41 21 18 4 bool 41 21 41 25 18446744073709551615 1 > 41 25 41 26 18 1 ( 41 26 41 27 18 5 value 41 27 41 32 13 1 ) 41 32 41 33 18 2 << 41 34 41 36 11 4 L")" 41 37 41 41 18446744073709551615 1 ; 41 41 41 42 18446744073709551615 1 } 42 2 42 3 18446744073709551615 4 else 43 2 43 6 18446744073709551615 2 if 43 7 43 9 18446744073709551615 1 ( 43 10 43 11 18446744073709551615 5 value 43 11 43 16 13 1 . 43 16 43 17 15 4 type 43 17 43 21 15 1 ( 43 21 43 22 15 1 ) 43 22 43 23 15 2 == 43 24 43 26 16 6 typeid 43 27 43 33 18446744073709551615 1 ( 43 33 43 34 18446744073709551615 7 wstring 43 34 43 41 20 1 ) 43 41 43 42 18446744073709551615 1 ) 43 42 43 43 18446744073709551615 1 { 44 2 44 3 18446744073709551615 5 wcout 45 3 45 8 8 2 << 45 9 45 11 11 10 L"String " 45 12 45 22 18446744073709551615 1 ; 45 22 45 23 18446744073709551615 5 wcout 46 3 46 8 8 2 << 46 9 46 11 11 8 any_cast 46 12 46 20 18 1 < 46 20 46 21 18 7 wstring 46 21 46 28 20 1 > 46 28 46 29 18 1 ( 46 29 46 30 18 5 value 46 30 46 35 13 1 ) 46 35 46 36 18 2 << 46 37 46 39 11 4 L")" 46 40 46 44 18446744073709551615 1 ; 46 44 46 45 18446744073709551615 1 } 47 2 47 3 18446744073709551615 4 else 48 2 48 6 18446744073709551615 1 { 49 2 49 3 18446744073709551615 5 wcout 50 3 50 8 8 2 << 50 9 50 11 11 10 L"Error )" 50 12 50 22 18446744073709551615 1 ; 50 22 50 23 18446744073709551615 1 } 51 2 51 3 18446744073709551615 1 } 52 1 52 2 18446744073709551615 4 void 53 1 53 5 18446744073709551615 16 ExpressionViewer 53 6 53 22 4 2 :: 53 22 53 24 5 5 Visit 53 24 53 29 5 1 ( 53 29 53 30 5 15 UnaryExpression 53 30 53 45 21 1 * 53 45 53 46 18446744073709551615 4 node 53 47 53 51 22 1 ) 53 51 53 52 5 1 { 54 1 54 2 18446744073709551615 5 wcout 55 2 55 7 8 2 << 55 8 55 10 9 4 endl 55 11 55 15 10 2 << 55 16 55 18 11 4 L"(" 55 19 55 23 18446744073709551615 2 << 55 24 55 26 11 22 ExpressionKindToString 55 27 55 49 23 1 ( 55 49 55 50 23 4 node 55 50 55 54 22 2 -> 55 54 55 56 18446744073709551615 4 kind 55 56 55 60 24 1 ) 55 60 55 61 23 2 << 55 62 55 64 11 4 L" " 55 65 55 69 18446744073709551615 1 ; 55 69 55 70 18446744073709551615 5 wcout 56 2 56 7 8 2 << 56 8 56 10 11 12 TypeToString 56 11 56 23 25 1 ( 56 23 56 24 25 4 node 56 24 56 28 22 2 -> 56 28 56 30 18446744073709551615 4 type 56 30 56 34 26 1 ) 56 34 56 35 25 2 << 56 36 56 38 11 4 L" " 56 39 56 43 18446744073709551615 1 ; 56 43 56 44 18446744073709551615 4 node 57 2 57 6 22 2 -> 57 6 57 8 18446744073709551615 7 operand 57 8 57 15 27 2 -> 57 15 57 17 28 6 Accept 57 17 57 23 28 1 ( 57 23 57 24 28 4 this 57 24 57 28 18446744073709551615 1 ) 57 28 57 29 28 1 ; 57 29 57 30 18446744073709551615 5 wcout 58 2 58 7 8 2 << 58 8 58 10 11 4 L")" 58 11 58 15 18446744073709551615 1 ; 58 15 58 16 18446744073709551615 1 } 59 1 59 2 18446744073709551615 4 void 60 1 60 5 18446744073709551615 16 ExpressionViewer 60 6 60 22 4 2 :: 60 22 60 24 5 5 Visit 60 24 60 29 5 1 ( 60 29 60 30 5 16 BinaryExpression 60 30 60 46 29 1 * 60 46 60 47 18446744073709551615 4 node 60 48 60 52 30 1 ) 60 52 60 53 5 1 { 61 1 61 2 18446744073709551615 5 wcout 62 2 62 7 8 2 << 62 8 62 10 9 4 endl 62 11 62 15 10 2 << 62 16 62 18 11 4 L"(" 62 19 62 23 18446744073709551615 2 << 62 24 62 26 11 22 ExpressionKindToString 62 27 62 49 23 1 ( 62 49 62 50 23 4 node 62 50 62 54 30 2 -> 62 54 62 56 18446744073709551615 4 kind 62 56 62 60 24 1 ) 62 60 62 61 23 2 << 62 62 62 64 11 4 L" " 62 65 62 69 18446744073709551615 1 ; 62 69 62 70 18446744073709551615 5 wcout 63 2 63 7 8 2 << 63 8 63 10 11 12 TypeToString 63 11 63 23 25 1 ( 63 23 63 24 25 4 node 63 24 63 28 30 2 -> 63 28 63 30 18446744073709551615 4 type 63 30 63 34 26 1 ) 63 34 63 35 25 2 << 63 36 63 38 11 4 L" " 63 39 63 43 18446744073709551615 1 ; 63 43 63 44 18446744073709551615 4 node 64 2 64 6 30 2 -> 64 6 64 8 18446744073709551615 4 left 64 8 64 12 31 2 -> 64 12 64 14 28 6 Accept 64 14 64 20 28 1 ( 64 20 64 21 28 4 this 64 21 64 25 18446744073709551615 1 ) 64 25 64 26 28 1 ; 64 26 64 27 18446744073709551615 5 wcout 65 2 65 7 8 2 << 65 8 65 10 11 4 L" " 65 11 65 15 18446744073709551615 1 ; 65 15 65 16 18446744073709551615 4 node 66 2 66 6 30 2 -> 66 6 66 8 18446744073709551615 5 right 66 8 66 13 32 2 -> 66 13 66 15 28 6 Accept 66 15 66 21 28 1 ( 66 21 66 22 28 4 this 66 22 66 26 18446744073709551615 1 ) 66 26 66 27 28 1 ; 66 27 66 28 18446744073709551615 5 wcout 67 2 67 7 8 2 << 67 8 67 10 11 4 L")" 67 11 67 15 18446744073709551615 1 ; 67 15 67 16 18446744073709551615 1 } 68 1 68 2 18446744073709551615 4 void 69 1 69 5 18446744073709551615 16 ExpressionViewer 69 6 69 22 4 2 :: 69 22 69 24 5 5 Visit 69 24 69 29 5 1 ( 69 29 69 30 5 16 AssignExpression 69 30 69 46 33 1 * 69 46 69 47 18446744073709551615 4 node 69 48 69 52 34 1 ) 69 52 69 53 5 1 { 70 1 70 2 18446744073709551615 5 wcout 71 2 71 7 8 2 << 71 8 71 10 9 4 endl 71 11 71 15 10 2 << 71 16 71 18 11 4 L"(" 71 19 71 23 18446744073709551615 2 << 71 24 71 26 11 22 ExpressionKindToString 71 27 71 49 23 1 ( 71 49 71 50 23 4 node 71 50 71 54 34 2 -> 71 54 71 56 18446744073709551615 4 kind 71 56 71 60 24 1 ) 71 60 71 61 23 2 << 71 62 71 64 11 4 L" " 71 65 71 69 18446744073709551615 1 ; 71 69 71 70 18446744073709551615 5 wcout 72 2 72 7 8 2 << 72 8 72 10 11 12 TypeToString 72 11 72 23 25 1 ( 72 23 72 24 25 4 node 72 24 72 28 34 2 -> 72 28 72 30 18446744073709551615 4 type 72 30 72 34 26 1 ) 72 34 72 35 25 2 << 72 36 72 38 11 4 L" " 72 39 72 43 18446744073709551615 1 ; 72 43 72 44 18446744073709551615 5 wcout 73 2 73 7 8 2 << 73 8 73 10 11 4 node 73 11 73 15 34 2 -> 73 15 73 17 18446744073709551615 4 name 73 17 73 21 35 2 << 73 22 73 24 11 4 L" " 73 25 73 29 18446744073709551615 1 ; 73 29 73 30 18446744073709551615 4 node 74 2 74 6 34 2 -> 74 6 74 8 18446744073709551615 5 value 74 8 74 13 36 2 -> 74 13 74 15 28 6 Accept 74 15 74 21 28 1 ( 74 21 74 22 28 4 this 74 22 74 26 18446744073709551615 1 ) 74 26 74 27 28 1 ; 74 27 74 28 18446744073709551615 5 wcout 75 2 75 7 8 2 << 75 8 75 10 11 4 L")" 75 11 75 15 18446744073709551615 1 ; 75 15 75 16 18446744073709551615 1 } 76 1 76 2 18446744073709551615 4 void 77 1 77 5 18446744073709551615 16 ExpressionViewer 77 6 77 22 4 2 :: 77 22 77 24 5 5 Visit 77 24 77 29 5 1 ( 77 29 77 30 5 15 BlockExpression 77 30 77 45 37 1 * 77 45 77 46 18446744073709551615 4 node 77 47 77 51 38 1 ) 77 51 77 52 5 1 { 78 1 78 2 18446744073709551615 5 wcout 79 2 79 7 8 2 << 79 8 79 10 9 4 endl 79 11 79 15 10 2 << 79 16 79 18 11 4 L"(" 79 19 79 23 18446744073709551615 2 << 79 24 79 26 11 22 ExpressionKindToString 79 27 79 49 23 1 ( 79 49 79 50 23 4 node 79 50 79 54 38 2 -> 79 54 79 56 18446744073709551615 4 kind 79 56 79 60 24 1 ) 79 60 79 61 23 2 << 79 62 79 64 11 4 L" " 79 65 79 69 18446744073709551615 1 ; 79 69 79 70 18446744073709551615 5 wcout 80 2 80 7 8 2 << 80 8 80 10 11 12 TypeToString 80 11 80 23 25 1 ( 80 23 80 24 25 4 node 80 24 80 28 38 2 -> 80 28 80 30 18446744073709551615 4 type 80 30 80 34 26 1 ) 80 34 80 35 25 2 << 80 36 80 38 11 4 L" " 80 39 80 43 18446744073709551615 1 ; 80 43 80 44 18446744073709551615 3 for 81 2 81 5 18446744073709551615 1 ( 81 6 81 7 18446744073709551615 4 auto 81 7 81 11 18446744073709551615 1 & 81 11 81 12 18446744073709551615 1 e 81 13 81 14 39 1 : 81 15 81 16 40 4 node 81 17 81 21 38 2 -> 81 21 81 23 18446744073709551615 11 expressions 81 23 81 34 41 1 ) 81 34 81 35 18446744073709551615 1 { 82 2 82 3 18446744073709551615 1 e 83 3 83 4 39 2 -> 83 4 83 6 28 6 Accept 83 6 83 12 28 1 ( 83 12 83 13 28 4 this 83 13 83 17 18446744073709551615 1 ) 83 17 83 18 28 1 ; 83 18 83 19 18446744073709551615 1 } 84 2 84 3 18446744073709551615 5 wcout 85 2 85 7 8 2 << 85 8 85 10 11 4 L")" 85 11 85 15 18446744073709551615 1 ; 85 15 85 16 18446744073709551615 1 } 86 1 86 2 18446744073709551615 4 void 87 1 87 5 18446744073709551615 16 ExpressionViewer 87 6 87 22 4 2 :: 87 22 87 24 5 5 Visit 87 24 87 29 5 1 ( 87 29 87 30 5 16 IfThenExpression 87 30 87 46 42 1 * 87 46 87 47 18446744073709551615 4 node 87 48 87 52 43 1 ) 87 52 87 53 5 1 { 88 1 88 2 18446744073709551615 5 wcout 89 2 89 7 8 2 << 89 8 89 10 9 4 endl 89 11 89 15 10 2 << 89 16 89 18 11 4 L"(" 89 19 89 23 18446744073709551615 2 << 89 24 89 26 11 22 ExpressionKindToString 89 27 89 49 23 1 ( 89 49 89 50 23 4 node 89 50 89 54 43 2 -> 89 54 89 56 18446744073709551615 4 kind 89 56 89 60 24 1 ) 89 60 89 61 23 2 << 89 62 89 64 11 4 L" " 89 65 89 69 18446744073709551615 1 ; 89 69 89 70 18446744073709551615 5 wcout 90 2 90 7 8 2 << 90 8 90 10 11 12 TypeToString 90 11 90 23 25 1 ( 90 23 90 24 25 4 node 90 24 90 28 43 2 -> 90 28 90 30 18446744073709551615 4 type 90 30 90 34 26 1 ) 90 34 90 35 25 2 << 90 36 90 38 11 4 L" " 90 39 90 43 18446744073709551615 1 ; 90 43 90 44 18446744073709551615 4 node 91 2 91 6 43 2 -> 91 6 91 8 18446744073709551615 9 condition 91 8 91 17 44 2 -> 91 17 91 19 28 6 Accept 91 19 91 25 28 1 ( 91 25 91 26 28 4 this 91 26 91 30 18446744073709551615 1 ) 91 30 91 31 28 1 ; 91 31 91 32 18446744073709551615 5 wcout 92 2 92 7 8 2 << 92 8 92 10 11 4 L" " 92 11 92 15 18446744073709551615 1 ; 92 15 92 16 18446744073709551615 4 node 93 2 93 6 43 2 -> 93 6 93 8 18446744073709551615 6 ifTrue 93 8 93 14 45 2 -> 93 14 93 16 28 6 Accept 93 16 93 22 28 1 ( 93 22 93 23 28 4 this 93 23 93 27 18446744073709551615 1 ) 93 27 93 28 28 1 ; 93 28 93 29 18446744073709551615 5 wcout 94 2 94 7 8 2 << 94 8 94 10 11 4 L")" 94 11 94 15 18446744073709551615 1 ; 94 15 94 16 18446744073709551615 1 } 95 1 95 2 18446744073709551615 4 void 96 1 96 5 18446744073709551615 16 ExpressionViewer 96 6 96 22 4 2 :: 96 22 96 24 5 5 Visit 96 24 96 29 5 1 ( 96 29 96 30 5 20 IfThenElseExpression 96 30 96 50 46 1 * 96 50 96 51 18446744073709551615 4 node 96 52 96 56 47 1 ) 96 56 96 57 5 1 { 97 1 97 2 18446744073709551615 5 wcout 98 2 98 7 8 2 << 98 8 98 10 9 4 endl 98 11 98 15 10 2 << 98 16 98 18 11 4 L"(" 98 19 98 23 18446744073709551615 2 << 98 24 98 26 11 22 ExpressionKindToString 98 27 98 49 23 1 ( 98 49 98 50 23 4 node 98 50 98 54 47 2 -> 98 54 98 56 18446744073709551615 4 kind 98 56 98 60 24 1 ) 98 60 98 61 23 2 << 98 62 98 64 11 4 L" " 98 65 98 69 18446744073709551615 1 ; 98 69 98 70 18446744073709551615 5 wcout 99 2 99 7 8 2 << 99 8 99 10 11 12 TypeToString 99 11 99 23 25 1 ( 99 23 99 24 25 4 node 99 24 99 28 47 2 -> 99 28 99 30 18446744073709551615 4 type 99 30 99 34 26 1 ) 99 34 99 35 25 2 << 99 36 99 38 11 4 L" " 99 39 99 43 18446744073709551615 1 ; 99 43 99 44 18446744073709551615 4 node 100 2 100 6 47 2 -> 100 6 100 8 18446744073709551615 9 condition 100 8 100 17 48 2 -> 100 17 100 19 28 6 Accept 100 19 100 25 28 1 ( 100 25 100 26 28 4 this 100 26 100 30 18446744073709551615 1 ) 100 30 100 31 28 1 ; 100 31 100 32 18446744073709551615 5 wcout 101 2 101 7 8 2 << 101 8 101 10 11 4 L" " 101 11 101 15 18446744073709551615 1 ; 101 15 101 16 18446744073709551615 4 node 102 2 102 6 47 2 -> 102 6 102 8 18446744073709551615 6 ifTrue 102 8 102 14 49 2 -> 102 14 102 16 28 6 Accept 102 16 102 22 28 1 ( 102 22 102 23 28 4 this 102 23 102 27 18446744073709551615 1 ) 102 27 102 28 28 1 ; 102 28 102 29 18446744073709551615 5 wcout 103 2 103 7 8 2 << 103 8 103 10 11 4 L" " 103 11 103 15 18446744073709551615 1 ; 103 15 103 16 18446744073709551615 4 node 104 2 104 6 47 2 -> 104 6 104 8 18446744073709551615 7 ifFalse 104 8 104 15 50 2 -> 104 15 104 17 28 6 Accept 104 17 104 23 28 1 ( 104 23 104 24 28 4 this 104 24 104 28 18446744073709551615 1 ) 104 28 104 29 28 1 ; 104 29 104 30 18446744073709551615 5 wcout 105 2 105 7 8 2 << 105 8 105 10 11 4 L")" 105 11 105 15 18446744073709551615 1 ; 105 15 105 16 18446744073709551615 1 } 106 1 106 2 18446744073709551615 4 void 107 1 107 5 18446744073709551615 16 ExpressionViewer 107 6 107 22 4 2 :: 107 22 107 24 5 5 Visit 107 24 107 29 5 1 ( 107 29 107 30 5 16 DefVarExpression 107 30 107 46 51 1 * 107 46 107 47 18446744073709551615 4 node 107 48 107 52 52 1 ) 107 52 107 53 5 1 { 108 1 108 2 18446744073709551615 5 wcout 109 2 109 7 8 2 << 109 8 109 10 9 4 endl 109 11 109 15 10 2 << 109 16 109 18 11 4 L"(" 109 19 109 23 18446744073709551615 2 << 109 24 109 26 11 22 ExpressionKindToString 109 27 109 49 23 1 ( 109 49 109 50 23 4 node 109 50 109 54 52 2 -> 109 54 109 56 18446744073709551615 4 kind 109 56 109 60 24 1 ) 109 60 109 61 23 2 << 109 62 109 64 11 4 L" " 109 65 109 69 18446744073709551615 1 ; 109 69 109 70 18446744073709551615 5 wcout 110 2 110 7 8 2 << 110 8 110 10 11 12 TypeToString 110 11 110 23 25 1 ( 110 23 110 24 25 4 node 110 24 110 28 52 2 -> 110 28 110 30 18446744073709551615 4 type 110 30 110 34 26 1 ) 110 34 110 35 25 2 << 110 36 110 38 11 4 L" " 110 39 110 43 18446744073709551615 1 ; 110 43 110 44 18446744073709551615 5 wcout 111 2 111 7 8 2 << 111 8 111 10 11 4 node 111 11 111 15 52 2 -> 111 15 111 17 18446744073709551615 4 name 111 17 111 21 53 2 << 111 22 111 24 11 4 L" " 111 25 111 29 18446744073709551615 1 ; 111 29 111 30 18446744073709551615 4 node 112 2 112 6 52 2 -> 112 6 112 8 18446744073709551615 5 value 112 8 112 13 54 2 -> 112 13 112 15 28 6 Accept 112 15 112 21 28 1 ( 112 21 112 22 28 4 this 112 22 112 26 18446744073709551615 1 ) 112 26 112 27 28 1 ; 112 27 112 28 18446744073709551615 5 wcout 113 2 113 7 8 2 << 113 8 113 10 11 4 L")" 113 11 113 15 18446744073709551615 1 ; 113 15 113 16 18446744073709551615 1 } 114 1 114 2 18446744073709551615 4 void 115 1 115 5 18446744073709551615 16 ExpressionViewer 115 6 115 22 4 2 :: 115 22 115 24 5 5 Visit 115 24 115 29 5 1 ( 115 29 115 30 5 16 DefFunExpression 115 30 115 46 55 1 * 115 46 115 47 18446744073709551615 4 node 115 48 115 52 56 1 ) 115 52 115 53 5 1 { 116 1 116 2 18446744073709551615 5 wcout 117 2 117 7 8 2 << 117 8 117 10 9 4 endl 117 11 117 15 10 2 << 117 16 117 18 11 4 L"(" 117 19 117 23 18446744073709551615 2 << 117 24 117 26 11 22 ExpressionKindToString 117 27 117 49 23 1 ( 117 49 117 50 23 4 node 117 50 117 54 56 2 -> 117 54 117 56 18446744073709551615 4 kind 117 56 117 60 24 1 ) 117 60 117 61 23 2 << 117 62 117 64 11 4 L" " 117 65 117 69 18446744073709551615 1 ; 117 69 117 70 18446744073709551615 5 wcout 118 2 118 7 8 2 << 118 8 118 10 11 12 TypeToString 118 11 118 23 25 1 ( 118 23 118 24 25 4 node 118 24 118 28 56 2 -> 118 28 118 30 18446744073709551615 4 type 118 30 118 34 26 1 ) 118 34 118 35 25 2 << 118 36 118 38 11 4 L" " 118 39 118 43 18446744073709551615 1 ; 118 43 118 44 18446744073709551615 5 wcout 119 2 119 7 8 2 << 119 8 119 10 11 4 node 119 11 119 15 56 2 -> 119 15 119 17 18446744073709551615 4 name 119 17 119 21 57 2 << 119 22 119 24 11 4 L" " 119 25 119 29 18446744073709551615 1 ; 119 29 119 30 18446744073709551615 3 for 120 2 120 5 18446744073709551615 1 ( 120 6 120 7 18446744073709551615 4 auto 120 7 120 11 18446744073709551615 1 & 120 11 120 12 18446744073709551615 1 p 120 13 120 14 58 1 : 120 15 120 16 40 4 node 120 17 120 21 56 2 -> 120 21 120 23 18446744073709551615 10 parameters 120 23 120 33 59 1 ) 120 33 120 34 18446744073709551615 1 { 121 2 121 3 18446744073709551615 1 p 122 3 122 4 58 2 -> 122 4 122 6 28 6 Accept 122 6 122 12 28 1 ( 122 12 122 13 28 4 this 122 13 122 17 18446744073709551615 1 ) 122 17 122 18 28 1 ; 122 18 122 19 18446744073709551615 5 wcout 123 3 123 8 8 2 << 123 9 123 11 11 4 L" " 123 12 123 16 18446744073709551615 1 ; 123 16 123 17 18446744073709551615 1 } 124 2 124 3 18446744073709551615 4 node 125 2 125 6 56 2 -> 125 6 125 8 18446744073709551615 4 body 125 8 125 12 60 2 -> 125 12 125 14 28 6 Accept 125 14 125 20 28 1 ( 125 20 125 21 28 4 this 125 21 125 25 18446744073709551615 1 ) 125 25 125 26 28 1 ; 125 26 125 27 18446744073709551615 5 wcout 126 2 126 7 8 2 << 126 8 126 10 11 4 L")" 126 11 126 15 18446744073709551615 1 ; 126 15 126 16 18446744073709551615 1 } 127 1 127 2 18446744073709551615 4 void 128 1 128 5 18446744073709551615 16 ExpressionViewer 128 6 128 22 4 2 :: 128 22 128 24 5 5 Visit 128 24 128 29 5 1 ( 128 29 128 30 5 19 ParameterExpression 128 30 128 49 61 1 * 128 49 128 50 18446744073709551615 4 node 128 51 128 55 62 1 ) 128 55 128 56 5 1 { 129 1 129 2 18446744073709551615 5 wcout 130 2 130 7 8 2 << 130 8 130 10 9 4 endl 130 11 130 15 10 2 << 130 16 130 18 11 4 L"(" 130 19 130 23 18446744073709551615 2 << 130 24 130 26 11 22 ExpressionKindToString 130 27 130 49 23 1 ( 130 49 130 50 23 4 node 130 50 130 54 62 2 -> 130 54 130 56 18446744073709551615 4 kind 130 56 130 60 24 1 ) 130 60 130 61 23 2 << 130 62 130 64 11 4 L" " 130 65 130 69 18446744073709551615 1 ; 130 69 130 70 18446744073709551615 5 wcout 131 2 131 7 8 2 << 131 8 131 10 11 12 TypeToString 131 11 131 23 25 1 ( 131 23 131 24 25 4 node 131 24 131 28 62 2 -> 131 28 131 30 18446744073709551615 4 type 131 30 131 34 26 1 ) 131 34 131 35 25 2 << 131 36 131 38 11 4 L" " 131 39 131 43 18446744073709551615 1 ; 131 43 131 44 18446744073709551615 5 wcout 132 2 132 7 8 2 << 132 8 132 10 11 4 node 132 11 132 15 62 2 -> 132 15 132 17 18446744073709551615 4 name 132 17 132 21 63 2 << 132 22 132 24 11 4 L")" 132 25 132 29 18446744073709551615 1 ; 132 29 132 30 18446744073709551615 1 } 133 1 133 2 18446744073709551615 4 void 134 1 134 5 18446744073709551615 16 ExpressionViewer 134 6 134 22 4 2 :: 134 22 134 24 5 5 Visit 134 24 134 29 5 1 ( 134 29 134 30 5 14 CallExpression 134 30 134 44 64 1 * 134 44 134 45 18446744073709551615 4 node 134 46 134 50 65 1 ) 134 50 134 51 5 1 { 135 1 135 2 18446744073709551615 5 wcout 136 2 136 7 8 2 << 136 8 136 10 9 4 endl 136 11 136 15 10 2 << 136 16 136 18 11 4 L"(" 136 19 136 23 18446744073709551615 2 << 136 24 136 26 11 22 ExpressionKindToString 136 27 136 49 23 1 ( 136 49 136 50 23 4 node 136 50 136 54 65 2 -> 136 54 136 56 18446744073709551615 4 kind 136 56 136 60 24 1 ) 136 60 136 61 23 2 << 136 62 136 64 11 4 L" " 136 65 136 69 18446744073709551615 1 ; 136 69 136 70 18446744073709551615 5 wcout 137 2 137 7 8 2 << 137 8 137 10 11 12 TypeToString 137 11 137 23 25 1 ( 137 23 137 24 25 4 node 137 24 137 28 65 2 -> 137 28 137 30 18446744073709551615 4 type 137 30 137 34 26 1 ) 137 34 137 35 25 2 << 137 36 137 38 11 4 L" " 137 39 137 43 18446744073709551615 1 ; 137 43 137 44 18446744073709551615 4 node 138 2 138 6 65 2 -> 138 6 138 8 18446744073709551615 8 function 138 8 138 16 66 2 -> 138 16 138 18 28 6 Accept 138 18 138 24 28 1 ( 138 24 138 25 28 4 this 138 25 138 29 18446744073709551615 1 ) 138 29 138 30 28 1 ; 138 30 138 31 18446744073709551615 5 wcout 139 2 139 7 8 2 << 139 8 139 10 11 4 L" " 139 11 139 15 18446744073709551615 1 ; 139 15 139 16 18446744073709551615 3 for 140 2 140 5 18446744073709551615 1 ( 140 6 140 7 18446744073709551615 4 auto 140 7 140 11 18446744073709551615 1 & 140 11 140 12 18446744073709551615 3 arg 140 13 140 16 67 1 : 140 17 140 18 40 4 node 140 19 140 23 65 2 -> 140 23 140 25 18446744073709551615 9 arguments 140 25 140 34 68 1 ) 140 34 140 35 18446744073709551615 1 { 141 2 141 3 18446744073709551615 3 arg 142 3 142 6 67 2 -> 142 6 142 8 28 6 Accept 142 8 142 14 28 1 ( 142 14 142 15 28 4 this 142 15 142 19 18446744073709551615 1 ) 142 19 142 20 28 1 ; 142 20 142 21 18446744073709551615 5 wcout 143 3 143 8 8 2 << 143 9 143 11 11 4 L" " 143 12 143 16 18446744073709551615 1 ; 143 16 143 17 18446744073709551615 1 } 144 2 144 3 18446744073709551615 5 wcout 145 2 145 7 8 2 << 145 8 145 10 11 4 L")" 145 11 145 15 18446744073709551615 1 ; 145 15 145 16 18446744073709551615 1 } 146 1 146 2 18446744073709551615 4 void 147 1 147 5 18446744073709551615 16 ExpressionViewer 147 6 147 22 4 2 :: 147 22 147 24 5 5 Visit 147 24 147 29 5 1 ( 147 29 147 30 5 18 VariableExpression 147 30 147 48 69 1 * 147 48 147 49 18446744073709551615 4 node 147 50 147 54 70 1 ) 147 54 147 55 5 1 { 148 1 148 2 18446744073709551615 5 wcout 149 2 149 7 8 2 << 149 8 149 10 9 4 endl 149 11 149 15 10 2 << 149 16 149 18 11 4 L"(" 149 19 149 23 18446744073709551615 2 << 149 24 149 26 11 22 ExpressionKindToString 149 27 149 49 23 1 ( 149 49 149 50 23 4 node 149 50 149 54 70 2 -> 149 54 149 56 18446744073709551615 4 kind 149 56 149 60 24 1 ) 149 60 149 61 23 2 << 149 62 149 64 11 4 L" " 149 65 149 69 18446744073709551615 1 ; 149 69 149 70 18446744073709551615 5 wcout 150 2 150 7 8 2 << 150 8 150 10 11 12 TypeToString 150 11 150 23 25 1 ( 150 23 150 24 25 4 node 150 24 150 28 70 2 -> 150 28 150 30 18446744073709551615 4 type 150 30 150 34 26 1 ) 150 34 150 35 25 2 << 150 36 150 38 11 4 L" " 150 39 150 43 18446744073709551615 1 ; 150 43 150 44 18446744073709551615 5 wcout 151 2 151 7 8 2 << 151 8 151 10 11 4 node 151 11 151 15 70 2 -> 151 15 151 17 18446744073709551615 4 name 151 17 151 21 71 2 << 151 22 151 24 11 4 L")" 151 25 151 29 18446744073709551615 1 ; 151 29 151 30 18446744073709551615 1 } 152 1 152 2 18446744073709551615 4 void 153 1 153 5 18446744073709551615 16 ExpressionViewer 153 6 153 22 4 2 :: 153 22 153 24 5 5 Visit 153 24 153 29 5 1 ( 153 29 153 30 5 16 ReturnExpression 153 30 153 46 72 1 * 153 46 153 47 18446744073709551615 4 node 153 48 153 52 73 1 ) 153 52 153 53 5 1 { 154 1 154 2 18446744073709551615 5 wcout 155 2 155 7 8 2 << 155 8 155 10 9 4 endl 155 11 155 15 10 2 << 155 16 155 18 11 4 L"(" 155 19 155 23 18446744073709551615 2 << 155 24 155 26 11 22 ExpressionKindToString 155 27 155 49 23 1 ( 155 49 155 50 23 4 node 155 50 155 54 73 2 -> 155 54 155 56 18446744073709551615 4 kind 155 56 155 60 24 1 ) 155 60 155 61 23 2 << 155 62 155 64 11 4 L" " 155 65 155 69 18446744073709551615 1 ; 155 69 155 70 18446744073709551615 5 wcout 156 2 156 7 8 2 << 156 8 156 10 11 12 TypeToString 156 11 156 23 25 1 ( 156 23 156 24 25 4 node 156 24 156 28 73 2 -> 156 28 156 30 18446744073709551615 4 type 156 30 156 34 26 1 ) 156 34 156 35 25 2 << 156 36 156 38 11 4 L" " 156 39 156 43 18446744073709551615 1 ; 156 43 156 44 18446744073709551615 4 node 157 2 157 6 73 2 -> 157 6 157 8 18446744073709551615 5 value 157 8 157 13 74 2 -> 157 13 157 15 28 6 Accept 157 15 157 21 28 1 ( 157 21 157 22 28 4 this 157 22 157 26 18446744073709551615 1 ) 157 26 157 27 28 1 ; 157 27 157 28 18446744073709551615 5 wcout 158 2 158 7 8 2 << 158 8 158 10 11 4 L")" 158 11 158 15 18446744073709551615 1 ; 158 15 158 16 18446744073709551615 1 } 159 1 159 2 18446744073709551615 4 void 160 1 160 5 18446744073709551615 16 ExpressionViewer 160 6 160 22 4 2 :: 160 22 160 24 5 5 Visit 160 24 160 29 5 1 ( 160 29 160 30 5 15 WhileExpression 160 30 160 45 75 1 * 160 45 160 46 18446744073709551615 4 node 160 47 160 51 76 1 ) 160 51 160 52 5 1 { 161 1 161 2 18446744073709551615 5 wcout 162 2 162 7 8 2 << 162 8 162 10 9 4 endl 162 11 162 15 10 2 << 162 16 162 18 11 4 L"(" 162 19 162 23 18446744073709551615 2 << 162 24 162 26 11 22 ExpressionKindToString 162 27 162 49 23 1 ( 162 49 162 50 23 4 node 162 50 162 54 76 2 -> 162 54 162 56 18446744073709551615 4 kind 162 56 162 60 24 1 ) 162 60 162 61 23 2 << 162 62 162 64 11 4 L" " 162 65 162 69 18446744073709551615 1 ; 162 69 162 70 18446744073709551615 5 wcout 163 2 163 7 8 2 << 163 8 163 10 11 12 TypeToString 163 11 163 23 25 1 ( 163 23 163 24 25 4 node 163 24 163 28 76 2 -> 163 28 163 30 18446744073709551615 4 type 163 30 163 34 26 1 ) 163 34 163 35 25 2 << 163 36 163 38 11 4 L" " 163 39 163 43 18446744073709551615 1 ; 163 43 163 44 18446744073709551615 4 node 164 2 164 6 76 2 -> 164 6 164 8 18446744073709551615 9 condition 164 8 164 17 77 2 -> 164 17 164 19 28 6 Accept 164 19 164 25 28 1 ( 164 25 164 26 28 4 this 164 26 164 30 18446744073709551615 1 ) 164 30 164 31 28 1 ; 164 31 164 32 18446744073709551615 5 wcout 165 2 165 7 8 2 << 165 8 165 10 11 4 L" " 165 11 165 15 18446744073709551615 1 ; 165 15 165 16 18446744073709551615 4 node 166 2 166 6 76 2 -> 166 6 166 8 18446744073709551615 4 body 166 8 166 12 78 2 -> 166 12 166 14 28 6 Accept 166 14 166 20 28 1 ( 166 20 166 21 28 4 this 166 21 166 25 18446744073709551615 1 ) 166 25 166 26 28 1 ; 166 26 166 27 18446744073709551615 5 wcout 167 2 167 7 8 2 << 167 8 167 10 11 4 L")" 167 11 167 15 18446744073709551615 1 ; 167 15 167 16 18446744073709551615 1 } 168 1 168 2 18446744073709551615 0 0 79 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 16 ExpressionViewer 21 2 3 0 24 Visit:Visitor:Expression 22 Visit:ExpressionViewer 4 1 3 0 18 ConstantExpression 10 1 3 0 81 9:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 9 wcout:std 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 8 1 3 0 12 operator:std 4 1 3 0 7 any:std 9 1 3 0 81 12:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 20 1 3 0 19 wstring:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 82 53:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 8 1 3 0 22 ExpressionKindToString 6 1 3 0 15 kind:Expression 8 1 3 0 12 TypeToString 6 1 3 0 15 type:Expression 6 1 3 0 23 operand:UnaryExpression 21 1 3 0 17 Accept:Expression 4 1 3 0 16 BinaryExpression 10 1 3 0 82 60:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 4 1 3 0 16 AssignExpression 10 1 3 0 82 69:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 name:AssignExpression 6 1 3 0 22 value:AssignExpression 4 1 3 0 15 BlockExpression 10 1 3 0 82 77:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 81:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 82 87:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 82 96:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 16 DefVarExpression 10 1 3 0 83 107:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 name:DefVarExpression 6 1 3 0 22 value:DefVarExpression 4 1 3 0 16 DefFunExpression 10 1 3 0 83 115:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 name:DefFunExpression 9 1 3 0 83 120:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 27 parameters:DefFunExpression 6 1 3 0 21 body:DefFunExpression 4 1 3 0 19 ParameterExpression 10 1 3 0 83 128:51:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 name:ParameterExpression 4 1 3 0 14 CallExpression 10 1 3 0 83 134:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 83 140:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 arguments:CallExpression 4 1 3 0 18 VariableExpression 10 1 3 0 83 147:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 name:VariableExpression 4 1 3 0 16 ReturnExpression 10 1 3 0 83 153:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 83 160:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 0 0 4 0 0 0 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1529891544 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 1529891604 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1529891566 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1529762159
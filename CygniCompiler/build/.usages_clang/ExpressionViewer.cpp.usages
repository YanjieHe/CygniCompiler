22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 1247 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 22 "ExpressionViewer.hpp" 1 10 1 32 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 1 < 2 10 2 11 18446744073709551615 8 iostream 2 11 2 19 18446744073709551615 1 > 2 19 2 20 18446744073709551615 5 using 3 1 3 6 18446744073709551615 3 std 3 7 3 10 0 2 :: 3 10 3 12 18446744073709551615 8 any_cast 3 12 3 20 1 1 ; 3 20 3 21 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 4 endl 4 12 4 16 2 1 ; 4 16 4 17 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 5 wcout 5 12 5 17 3 1 ; 5 17 5 18 18446744073709551615 16 ExpressionViewer 6 1 6 17 4 2 :: 6 17 6 19 4 16 ExpressionViewer 6 19 6 35 4 1 ( 6 35 6 36 4 1 ) 6 36 6 37 4 1 { 7 1 7 2 18446744073709551615 1 } 8 1 8 2 18446744073709551615 4 void 9 1 9 5 18446744073709551615 16 ExpressionViewer 9 6 9 22 4 2 :: 9 22 9 24 5 13 ViewNamespace 9 24 9 37 5 1 ( 9 37 9 38 5 10 shared_ptr 9 38 9 48 6 1 < 9 48 9 49 18446744073709551615 9 Namespace 9 49 9 58 7 1 > 9 58 9 59 18446744073709551615 5 nsPtr 9 60 9 65 8 1 ) 9 65 9 66 5 1 { 10 1 10 2 18446744073709551615 3 for 11 2 11 5 18446744073709551615 1 ( 11 6 11 7 18446744073709551615 4 auto 11 7 11 11 18446744073709551615 1 & 11 11 11 12 18446744073709551615 4 pair 11 13 11 17 9 1 : 11 18 11 19 10 5 nsPtr 11 20 11 25 8 2 -> 11 25 11 27 18446744073709551615 7 modules 11 27 11 34 11 1 ) 11 34 11 35 18446744073709551615 1 { 12 2 12 3 18446744073709551615 4 auto 13 3 13 7 18446744073709551615 1 & 13 7 13 8 18446744073709551615 10 moduleInfo 13 9 13 19 12 1 = 13 20 13 21 18446744073709551615 4 pair 13 22 13 26 9 1 . 13 26 13 27 18446744073709551615 6 second 13 27 13 33 13 1 ; 13 33 13 34 18446744073709551615 3 for 14 3 14 6 18446744073709551615 1 ( 14 7 14 8 18446744073709551615 4 auto 14 8 14 12 18446744073709551615 1 & 14 12 14 13 18446744073709551615 5 field 14 14 14 19 14 1 : 14 20 14 21 15 10 moduleInfo 14 22 14 32 12 1 . 14 32 14 33 18446744073709551615 6 fields 14 33 14 39 16 1 ) 14 39 14 40 18446744073709551615 1 { 15 3 15 4 18446744073709551615 5 wcout 16 4 16 9 17 2 << 16 10 16 12 18 8 L"(var " 16 13 16 21 18446744073709551615 1 ; 16 21 16 22 18446744073709551615 5 wcout 17 4 17 9 17 2 << 17 10 17 12 18 5 field 17 13 17 18 14 1 . 17 18 17 19 18446744073709551615 4 name 17 19 17 23 19 2 << 17 24 17 26 18 4 L" " 17 27 17 31 18446744073709551615 1 ; 17 31 17 32 18446744073709551615 5 field 18 4 18 9 14 1 . 18 9 18 10 18446744073709551615 5 value 18 10 18 15 20 2 -> 18 15 18 17 21 6 Accept 18 17 18 23 21 1 ( 18 23 18 24 21 4 this 18 24 18 28 18446744073709551615 1 ) 18 28 18 29 21 1 ; 18 29 18 30 18446744073709551615 5 wcout 19 4 19 9 17 2 << 19 10 19 12 18 4 L")" 19 13 19 17 18446744073709551615 1 ; 19 17 19 18 18446744073709551615 1 } 20 3 20 4 18446744073709551615 3 for 21 3 21 6 18446744073709551615 1 ( 21 7 21 8 18446744073709551615 4 auto 21 8 21 12 18446744073709551615 1 & 21 12 21 13 18446744073709551615 8 function 21 14 21 22 22 1 : 21 23 21 24 15 10 moduleInfo 21 25 21 35 12 1 . 21 35 21 36 18446744073709551615 9 functions 21 36 21 45 23 1 ) 21 45 21 46 18446744073709551615 1 { 22 3 22 4 18446744073709551615 5 wcout 23 4 23 9 17 2 << 23 10 23 12 18 11 L"(DefFun " 23 13 23 24 18446744073709551615 1 ; 23 24 23 25 18446744073709551615 5 wcout 24 4 24 9 17 2 << 24 10 24 12 18 8 function 24 13 24 21 22 1 . 24 21 24 22 18446744073709551615 4 name 24 22 24 26 24 2 << 24 27 24 29 18 4 L" " 24 30 24 34 18446744073709551615 1 ; 24 34 24 35 18446744073709551615 5 wcout 25 4 25 9 17 2 << 25 10 25 12 18 4 L"(" 25 13 25 17 18446744073709551615 1 ; 25 17 25 18 18446744073709551615 3 for 26 4 26 7 18446744073709551615 1 ( 26 8 26 9 18446744073709551615 4 auto 26 9 26 13 18446744073709551615 1 & 26 13 26 14 18446744073709551615 9 parameter 26 15 26 24 25 1 : 26 25 26 26 15 8 function 26 27 26 35 22 1 . 26 35 26 36 18446744073709551615 10 parameters 26 36 26 46 26 1 ) 26 46 26 47 18446744073709551615 1 { 27 4 27 5 18446744073709551615 5 wcout 28 5 28 10 17 2 << 28 11 28 13 18 9 parameter 28 14 28 23 25 1 . 28 23 28 24 18446744073709551615 4 name 28 24 28 28 27 2 << 28 29 28 31 18 4 L" " 28 32 28 36 18446744073709551615 1 ; 28 36 28 37 18446744073709551615 5 wcout 29 5 29 10 17 2 << 29 11 29 13 18 12 TypeToString 29 14 29 26 28 1 ( 29 26 29 27 28 9 parameter 29 27 29 36 25 1 . 29 36 29 37 18446744073709551615 4 type 29 37 29 41 29 1 ) 29 41 29 42 28 2 << 29 43 29 45 18 4 L" " 29 46 29 50 18446744073709551615 1 ; 29 50 29 51 18446744073709551615 1 } 30 4 30 5 18446744073709551615 5 wcout 31 4 31 9 17 2 << 31 10 31 12 18 4 L")" 31 13 31 17 18446744073709551615 2 << 31 18 31 20 30 4 endl 31 21 31 25 31 1 ; 31 25 31 26 18446744073709551615 3 for 32 4 32 7 18446744073709551615 1 ( 32 8 32 9 18446744073709551615 4 auto 32 9 32 13 18446744073709551615 1 & 32 13 32 14 18446744073709551615 8 variable 32 15 32 23 32 1 : 32 24 32 25 15 8 function 32 26 32 34 22 1 . 32 34 32 35 18446744073709551615 9 variables 32 35 32 44 33 1 ) 32 44 32 45 18446744073709551615 1 { 33 4 33 5 18446744073709551615 5 wcout 34 5 34 10 17 2 << 34 11 34 13 18 11 L"(DefVar " 34 14 34 25 18446744073709551615 1 ; 34 25 34 26 18446744073709551615 5 wcout 35 5 35 10 17 2 << 35 11 35 13 18 8 variable 35 14 35 22 32 1 . 35 22 35 23 18446744073709551615 4 name 35 23 35 27 34 2 << 35 28 35 30 18 4 L" " 35 31 35 35 18446744073709551615 1 ; 35 35 35 36 18446744073709551615 8 variable 36 5 36 13 32 1 . 36 13 36 14 18446744073709551615 5 value 36 14 36 19 35 2 -> 36 19 36 21 21 6 Accept 36 21 36 27 21 1 ( 36 27 36 28 21 4 this 36 28 36 32 18446744073709551615 1 ) 36 32 36 33 21 1 ; 36 33 36 34 18446744073709551615 5 wcout 37 5 37 10 17 2 << 37 11 37 13 18 4 L")" 37 14 37 18 18446744073709551615 1 ; 37 18 37 19 18446744073709551615 1 } 38 4 38 5 18446744073709551615 3 for 39 4 39 7 18446744073709551615 1 ( 39 8 39 9 18446744073709551615 4 auto 39 9 39 13 18446744073709551615 1 & 39 13 39 14 18446744073709551615 1 e 39 15 39 16 36 1 : 39 17 39 18 15 8 function 39 19 39 27 22 1 . 39 27 39 28 18446744073709551615 11 expressions 39 28 39 39 37 1 ) 39 39 39 40 18446744073709551615 1 { 40 4 40 5 18446744073709551615 1 e 41 5 41 6 36 2 -> 41 6 41 8 21 6 Accept 41 8 41 14 21 1 ( 41 14 41 15 21 4 this 41 15 41 19 18446744073709551615 1 ) 41 19 41 20 21 1 ; 41 20 41 21 18446744073709551615 1 } 42 4 42 5 18446744073709551615 5 wcout 43 4 43 9 17 2 << 43 10 43 12 18 4 L")" 43 13 43 17 18446744073709551615 2 << 43 18 43 20 30 4 endl 43 21 43 25 31 1 ; 43 25 43 26 18446744073709551615 1 } 44 3 44 4 18446744073709551615 1 } 45 2 45 3 18446744073709551615 3 for 46 2 46 5 18446744073709551615 1 ( 46 6 46 7 18446744073709551615 4 auto 46 7 46 11 18446744073709551615 1 & 46 11 46 12 18446744073709551615 4 pair 46 13 46 17 38 1 : 46 18 46 19 10 5 nsPtr 46 20 46 25 8 2 -> 46 25 46 27 18446744073709551615 7 classes 46 27 46 34 39 1 ) 46 34 46 35 18446744073709551615 1 { 47 2 47 3 18446744073709551615 4 auto 48 3 48 7 18446744073709551615 1 & 48 7 48 8 18446744073709551615 9 classInfo 48 9 48 18 40 1 = 48 19 48 20 18446744073709551615 4 pair 48 21 48 25 38 1 . 48 25 48 26 18446744073709551615 6 second 48 26 48 32 13 1 ; 48 32 48 33 18446744073709551615 3 for 49 3 49 6 18446744073709551615 1 ( 49 7 49 8 18446744073709551615 4 auto 49 8 49 12 18446744073709551615 1 & 49 12 49 13 18446744073709551615 5 field 49 14 49 19 41 1 : 49 20 49 21 15 9 classInfo 49 22 49 31 40 1 . 49 31 49 32 18446744073709551615 6 fields 49 32 49 38 42 1 ) 49 38 49 39 18446744073709551615 1 { 50 3 50 4 18446744073709551615 5 wcout 51 4 51 9 17 2 << 51 10 51 12 18 8 L"(var " 51 13 51 21 18446744073709551615 1 ; 51 21 51 22 18446744073709551615 5 wcout 52 4 52 9 17 2 << 52 10 52 12 18 5 field 52 13 52 18 41 1 . 52 18 52 19 18446744073709551615 4 name 52 19 52 23 19 2 << 52 24 52 26 18 4 L" " 52 27 52 31 18446744073709551615 1 ; 52 31 52 32 18446744073709551615 5 field 53 4 53 9 41 1 . 53 9 53 10 18446744073709551615 5 value 53 10 53 15 20 2 -> 53 15 53 17 21 6 Accept 53 17 53 23 21 1 ( 53 23 53 24 21 4 this 53 24 53 28 18446744073709551615 1 ) 53 28 53 29 21 1 ; 53 29 53 30 18446744073709551615 5 wcout 54 4 54 9 17 2 << 54 10 54 12 18 4 L")" 54 13 54 17 18446744073709551615 1 ; 54 17 54 18 18446744073709551615 1 } 55 3 55 4 18446744073709551615 3 for 56 3 56 6 18446744073709551615 1 ( 56 7 56 8 18446744073709551615 4 auto 56 8 56 12 18446744073709551615 1 & 56 12 56 13 18446744073709551615 8 function 56 14 56 22 43 1 : 56 23 56 24 15 9 classInfo 56 25 56 34 40 1 . 56 34 56 35 18446744073709551615 9 functions 56 35 56 44 44 1 ) 56 44 56 45 18446744073709551615 1 { 57 3 57 4 18446744073709551615 3 for 58 4 58 7 18446744073709551615 1 ( 58 8 58 9 18446744073709551615 4 auto 58 9 58 13 18446744073709551615 1 & 58 13 58 14 18446744073709551615 1 e 58 15 58 16 45 1 : 58 17 58 18 15 8 function 58 19 58 27 43 1 . 58 27 58 28 18446744073709551615 11 expressions 58 28 58 39 37 1 ) 58 39 58 40 18446744073709551615 1 { 59 4 59 5 18446744073709551615 1 e 60 5 60 6 45 2 -> 60 6 60 8 21 6 Accept 60 8 60 14 21 1 ( 60 14 60 15 21 4 this 60 15 60 19 18446744073709551615 1 ) 60 19 60 20 21 1 ; 60 20 60 21 18446744073709551615 1 } 61 4 61 5 18446744073709551615 1 } 62 3 62 4 18446744073709551615 1 } 63 2 63 3 18446744073709551615 3 for 64 2 64 5 18446744073709551615 1 ( 64 6 64 7 18446744073709551615 4 auto 64 7 64 11 18446744073709551615 1 & 64 11 64 12 18446744073709551615 4 pair 64 13 64 17 46 1 : 64 18 64 19 10 5 nsPtr 64 20 64 25 8 2 -> 64 25 64 27 18446744073709551615 13 subNamespaces 64 27 64 40 47 1 ) 64 40 64 41 18446744073709551615 1 { 65 2 65 3 18446744073709551615 4 auto 66 3 66 7 18446744073709551615 1 & 66 7 66 8 18446744073709551615 8 subNsPtr 66 9 66 17 48 1 = 66 18 66 19 18446744073709551615 4 pair 66 20 66 24 46 1 . 66 24 66 25 18446744073709551615 6 second 66 25 66 31 13 1 ; 66 31 66 32 18446744073709551615 13 ViewNamespace 67 3 67 16 5 1 ( 67 16 67 17 5 8 subNsPtr 67 17 67 25 48 1 ) 67 25 67 26 5 1 ; 67 26 67 27 18446744073709551615 1 } 68 2 68 3 18446744073709551615 1 } 69 1 69 2 18446744073709551615 4 void 70 1 70 5 18446744073709551615 16 ExpressionViewer 70 6 70 22 4 2 :: 70 22 70 24 49 5 Visit 70 24 70 29 49 1 ( 70 29 70 30 49 18 ConstantExpression 70 30 70 48 50 1 * 70 48 70 49 18446744073709551615 4 node 70 50 70 54 51 1 ) 70 54 70 55 49 1 { 71 1 71 2 18446744073709551615 5 wcout 72 2 72 7 17 2 << 72 8 72 10 30 4 endl 72 11 72 15 31 2 << 72 16 72 18 18 13 L"(Constant " 72 19 72 32 18446744073709551615 1 ; 72 32 72 33 18446744073709551615 3 any 73 2 73 5 52 1 & 73 5 73 6 18446744073709551615 5 value 73 7 73 12 53 1 = 73 13 73 14 18446744073709551615 4 node 73 15 73 19 51 2 -> 73 19 73 21 18446744073709551615 5 value 73 21 73 26 54 1 ; 73 26 73 27 18446744073709551615 2 if 74 2 74 4 18446744073709551615 1 ( 74 5 74 6 18446744073709551615 5 value 74 6 74 11 53 1 . 74 11 74 12 55 4 type 74 12 74 16 55 1 ( 74 16 74 17 55 1 ) 74 17 74 18 55 2 == 74 19 74 21 56 6 typeid 74 22 74 28 18446744073709551615 1 ( 74 28 74 29 18446744073709551615 7 int32_t 74 29 74 36 57 1 ) 74 36 74 37 18446744073709551615 1 ) 74 37 74 38 18446744073709551615 1 { 75 2 75 3 18446744073709551615 5 wcout 76 3 76 8 17 2 << 76 9 76 11 18 7 L"Int " 76 12 76 19 18446744073709551615 1 ; 76 19 76 20 18446744073709551615 5 wcout 77 3 77 8 17 2 << 77 9 77 11 30 8 any_cast 77 12 77 20 58 1 < 77 20 77 21 58 7 int32_t 77 21 77 28 57 1 > 77 28 77 29 58 1 ( 77 29 77 30 58 5 value 77 30 77 35 53 1 ) 77 35 77 36 58 2 << 77 37 77 39 18 4 L")" 77 40 77 44 18446744073709551615 1 ; 77 44 77 45 18446744073709551615 1 } 78 2 78 3 18446744073709551615 4 else 79 2 79 6 18446744073709551615 2 if 79 7 79 9 18446744073709551615 1 ( 79 10 79 11 18446744073709551615 5 value 79 11 79 16 53 1 . 79 16 79 17 55 4 type 79 17 79 21 55 1 ( 79 21 79 22 55 1 ) 79 22 79 23 55 2 == 79 24 79 26 56 6 typeid 79 27 79 33 18446744073709551615 1 ( 79 33 79 34 18446744073709551615 7 int64_t 79 34 79 41 59 1 ) 79 41 79 42 18446744073709551615 1 ) 79 42 79 43 18446744073709551615 1 { 80 2 80 3 18446744073709551615 5 wcout 81 3 81 8 17 2 << 81 9 81 11 18 8 L"Long " 81 12 81 20 18446744073709551615 1 ; 81 20 81 21 18446744073709551615 5 wcout 82 3 82 8 17 2 << 82 9 82 11 30 8 any_cast 82 12 82 20 58 1 < 82 20 82 21 58 7 int64_t 82 21 82 28 59 1 > 82 28 82 29 58 1 ( 82 29 82 30 58 5 value 82 30 82 35 53 1 ) 82 35 82 36 58 2 << 82 37 82 39 18 4 L")" 82 40 82 44 18446744073709551615 1 ; 82 44 82 45 18446744073709551615 1 } 83 2 83 3 18446744073709551615 4 else 84 2 84 6 18446744073709551615 2 if 84 7 84 9 18446744073709551615 1 ( 84 10 84 11 18446744073709551615 5 value 84 11 84 16 53 1 . 84 16 84 17 55 4 type 84 17 84 21 55 1 ( 84 21 84 22 55 1 ) 84 22 84 23 55 2 == 84 24 84 26 56 6 typeid 84 27 84 33 18446744073709551615 1 ( 84 33 84 34 18446744073709551615 5 float 84 34 84 39 18446744073709551615 1 ) 84 39 84 40 18446744073709551615 1 ) 84 40 84 41 18446744073709551615 1 { 85 2 85 3 18446744073709551615 5 wcout 86 3 86 8 17 2 << 86 9 86 11 18 9 L"Float " 86 12 86 21 18446744073709551615 1 ; 86 21 86 22 18446744073709551615 5 wcout 87 3 87 8 17 2 << 87 9 87 11 30 8 any_cast 87 12 87 20 58 1 < 87 20 87 21 58 5 float 87 21 87 26 18446744073709551615 1 > 87 26 87 27 58 1 ( 87 27 87 28 58 5 value 87 28 87 33 53 1 ) 87 33 87 34 58 2 << 87 35 87 37 18 4 L")" 87 38 87 42 18446744073709551615 1 ; 87 42 87 43 18446744073709551615 1 } 88 2 88 3 18446744073709551615 4 else 89 2 89 6 18446744073709551615 2 if 89 7 89 9 18446744073709551615 1 ( 89 10 89 11 18446744073709551615 5 value 89 11 89 16 53 1 . 89 16 89 17 55 4 type 89 17 89 21 55 1 ( 89 21 89 22 55 1 ) 89 22 89 23 55 2 == 89 24 89 26 56 6 typeid 89 27 89 33 18446744073709551615 1 ( 89 33 89 34 18446744073709551615 6 double 89 34 89 40 18446744073709551615 1 ) 89 40 89 41 18446744073709551615 1 ) 89 41 89 42 18446744073709551615 1 { 90 2 90 3 18446744073709551615 5 wcout 91 3 91 8 17 2 << 91 9 91 11 18 10 L"Double " 91 12 91 22 18446744073709551615 1 ; 91 22 91 23 18446744073709551615 5 wcout 92 3 92 8 17 2 << 92 9 92 11 30 8 any_cast 92 12 92 20 58 1 < 92 20 92 21 58 6 double 92 21 92 27 18446744073709551615 1 > 92 27 92 28 58 1 ( 92 28 92 29 58 5 value 92 29 92 34 53 1 ) 92 34 92 35 58 2 << 92 36 92 38 18 4 L")" 92 39 92 43 18446744073709551615 1 ; 92 43 92 44 18446744073709551615 1 } 93 2 93 3 18446744073709551615 4 else 94 2 94 6 18446744073709551615 2 if 94 7 94 9 18446744073709551615 1 ( 94 10 94 11 18446744073709551615 5 value 94 11 94 16 53 1 . 94 16 94 17 55 4 type 94 17 94 21 55 1 ( 94 21 94 22 55 1 ) 94 22 94 23 55 2 == 94 24 94 26 56 6 typeid 94 27 94 33 18446744073709551615 1 ( 94 33 94 34 18446744073709551615 7 wchar_t 94 34 94 41 18446744073709551615 1 ) 94 41 94 42 18446744073709551615 1 ) 94 42 94 43 18446744073709551615 1 { 95 2 95 3 18446744073709551615 5 wcout 96 3 96 8 17 2 << 96 9 96 11 18 8 L"Char " 96 12 96 20 18446744073709551615 1 ; 96 20 96 21 18446744073709551615 5 wcout 97 3 97 8 17 2 << 97 9 97 11 18 8 any_cast 97 12 97 20 58 1 < 97 20 97 21 58 7 wchar_t 97 21 97 28 18446744073709551615 1 > 97 28 97 29 58 1 ( 97 29 97 30 58 5 value 97 30 97 35 53 1 ) 97 35 97 36 58 2 << 97 37 97 39 18 4 L")" 97 40 97 44 18446744073709551615 1 ; 97 44 97 45 18446744073709551615 1 } 98 2 98 3 18446744073709551615 4 else 99 2 99 6 18446744073709551615 2 if 99 7 99 9 18446744073709551615 1 ( 99 10 99 11 18446744073709551615 5 value 99 11 99 16 53 1 . 99 16 99 17 55 4 type 99 17 99 21 55 1 ( 99 21 99 22 55 1 ) 99 22 99 23 55 2 == 99 24 99 26 56 6 typeid 99 27 99 33 18446744073709551615 1 ( 99 33 99 34 18446744073709551615 4 bool 99 34 99 38 18446744073709551615 1 ) 99 38 99 39 18446744073709551615 1 ) 99 39 99 40 18446744073709551615 1 { 100 2 100 3 18446744073709551615 5 wcout 101 3 101 8 17 2 << 101 9 101 11 18 11 L"Boolean " 101 12 101 23 18446744073709551615 1 ; 101 23 101 24 18446744073709551615 5 wcout 102 3 102 8 17 2 << 102 9 102 11 30 8 any_cast 102 12 102 20 58 1 < 102 20 102 21 58 4 bool 102 21 102 25 18446744073709551615 1 > 102 25 102 26 58 1 ( 102 26 102 27 58 5 value 102 27 102 32 53 1 ) 102 32 102 33 58 2 << 102 34 102 36 18 4 L")" 102 37 102 41 18446744073709551615 1 ; 102 41 102 42 18446744073709551615 1 } 103 2 103 3 18446744073709551615 4 else 104 2 104 6 18446744073709551615 2 if 104 7 104 9 18446744073709551615 1 ( 104 10 104 11 18446744073709551615 5 value 104 11 104 16 53 1 . 104 16 104 17 55 4 type 104 17 104 21 55 1 ( 104 21 104 22 55 1 ) 104 22 104 23 55 2 == 104 24 104 26 56 6 typeid 104 27 104 33 18446744073709551615 1 ( 104 33 104 34 18446744073709551615 7 wstring 104 34 104 41 60 1 ) 104 41 104 42 18446744073709551615 1 ) 104 42 104 43 18446744073709551615 1 { 105 2 105 3 18446744073709551615 5 wcout 106 3 106 8 17 2 << 106 9 106 11 18 10 L"String " 106 12 106 22 18446744073709551615 1 ; 106 22 106 23 18446744073709551615 5 wcout 107 3 107 8 17 2 << 107 9 107 11 18 8 any_cast 107 12 107 20 58 1 < 107 20 107 21 58 7 wstring 107 21 107 28 60 1 > 107 28 107 29 58 1 ( 107 29 107 30 58 5 value 107 30 107 35 53 1 ) 107 35 107 36 58 2 << 107 37 107 39 18 4 L")" 107 40 107 44 18446744073709551615 1 ; 107 44 107 45 18446744073709551615 1 } 108 2 108 3 18446744073709551615 4 else 109 2 109 6 18446744073709551615 1 { 110 2 110 3 18446744073709551615 5 wcout 111 3 111 8 17 2 << 111 9 111 11 18 10 L"Error )" 111 12 111 22 18446744073709551615 1 ; 111 22 111 23 18446744073709551615 1 } 112 2 112 3 18446744073709551615 1 } 113 1 113 2 18446744073709551615 4 void 114 1 114 5 18446744073709551615 16 ExpressionViewer 114 6 114 22 4 2 :: 114 22 114 24 49 5 Visit 114 24 114 29 49 1 ( 114 29 114 30 49 15 UnaryExpression 114 30 114 45 61 1 * 114 45 114 46 18446744073709551615 4 node 114 47 114 51 62 1 ) 114 51 114 52 49 1 { 115 1 115 2 18446744073709551615 5 wcout 116 2 116 7 17 2 << 116 8 116 10 30 4 endl 116 11 116 15 31 2 << 116 16 116 18 18 4 L"(" 116 19 116 23 18446744073709551615 2 << 116 24 116 26 18 22 ExpressionKindToString 116 27 116 49 63 1 ( 116 49 116 50 63 4 node 116 50 116 54 62 2 -> 116 54 116 56 18446744073709551615 4 kind 116 56 116 60 64 1 ) 116 60 116 61 63 2 << 116 62 116 64 18 4 L" " 116 65 116 69 18446744073709551615 1 ; 116 69 116 70 18446744073709551615 5 wcout 117 2 117 7 17 2 << 117 8 117 10 18 12 TypeToString 117 11 117 23 28 1 ( 117 23 117 24 28 4 node 117 24 117 28 62 2 -> 117 28 117 30 18446744073709551615 4 type 117 30 117 34 65 1 ) 117 34 117 35 28 2 << 117 36 117 38 18 4 L" " 117 39 117 43 18446744073709551615 1 ; 117 43 117 44 18446744073709551615 4 node 118 2 118 6 62 2 -> 118 6 118 8 18446744073709551615 7 operand 118 8 118 15 66 2 -> 118 15 118 17 21 6 Accept 118 17 118 23 21 1 ( 118 23 118 24 21 4 this 118 24 118 28 18446744073709551615 1 ) 118 28 118 29 21 1 ; 118 29 118 30 18446744073709551615 5 wcout 119 2 119 7 17 2 << 119 8 119 10 18 4 L")" 119 11 119 15 18446744073709551615 1 ; 119 15 119 16 18446744073709551615 1 } 120 1 120 2 18446744073709551615 4 void 121 1 121 5 18446744073709551615 16 ExpressionViewer 121 6 121 22 4 2 :: 121 22 121 24 49 5 Visit 121 24 121 29 49 1 ( 121 29 121 30 49 16 BinaryExpression 121 30 121 46 67 1 * 121 46 121 47 18446744073709551615 4 node 121 48 121 52 68 1 ) 121 52 121 53 49 1 { 122 1 122 2 18446744073709551615 5 wcout 123 2 123 7 17 2 << 123 8 123 10 30 4 endl 123 11 123 15 31 2 << 123 16 123 18 18 4 L"(" 123 19 123 23 18446744073709551615 2 << 123 24 123 26 18 22 ExpressionKindToString 123 27 123 49 63 1 ( 123 49 123 50 63 4 node 123 50 123 54 68 2 -> 123 54 123 56 18446744073709551615 4 kind 123 56 123 60 64 1 ) 123 60 123 61 63 2 << 123 62 123 64 18 4 L" " 123 65 123 69 18446744073709551615 1 ; 123 69 123 70 18446744073709551615 5 wcout 124 2 124 7 17 2 << 124 8 124 10 18 12 TypeToString 124 11 124 23 28 1 ( 124 23 124 24 28 4 node 124 24 124 28 68 2 -> 124 28 124 30 18446744073709551615 4 type 124 30 124 34 65 1 ) 124 34 124 35 28 2 << 124 36 124 38 18 4 L" " 124 39 124 43 18446744073709551615 1 ; 124 43 124 44 18446744073709551615 4 node 125 2 125 6 68 2 -> 125 6 125 8 18446744073709551615 4 left 125 8 125 12 69 2 -> 125 12 125 14 21 6 Accept 125 14 125 20 21 1 ( 125 20 125 21 21 4 this 125 21 125 25 18446744073709551615 1 ) 125 25 125 26 21 1 ; 125 26 125 27 18446744073709551615 5 wcout 126 2 126 7 17 2 << 126 8 126 10 18 4 L" " 126 11 126 15 18446744073709551615 1 ; 126 15 126 16 18446744073709551615 4 node 127 2 127 6 68 2 -> 127 6 127 8 18446744073709551615 5 right 127 8 127 13 70 2 -> 127 13 127 15 21 6 Accept 127 15 127 21 21 1 ( 127 21 127 22 21 4 this 127 22 127 26 18446744073709551615 1 ) 127 26 127 27 21 1 ; 127 27 127 28 18446744073709551615 5 wcout 128 2 128 7 17 2 << 128 8 128 10 18 4 L")" 128 11 128 15 18446744073709551615 1 ; 128 15 128 16 18446744073709551615 1 } 129 1 129 2 18446744073709551615 4 void 130 1 130 5 18446744073709551615 16 ExpressionViewer 130 6 130 22 4 2 :: 130 22 130 24 49 5 Visit 130 24 130 29 49 1 ( 130 29 130 30 49 16 AssignExpression 130 30 130 46 71 1 * 130 46 130 47 18446744073709551615 4 node 130 48 130 52 72 1 ) 130 52 130 53 49 1 { 131 1 131 2 18446744073709551615 5 wcout 132 2 132 7 17 2 << 132 8 132 10 30 4 endl 132 11 132 15 31 2 << 132 16 132 18 18 4 L"(" 132 19 132 23 18446744073709551615 2 << 132 24 132 26 18 22 ExpressionKindToString 132 27 132 49 63 1 ( 132 49 132 50 63 4 node 132 50 132 54 72 2 -> 132 54 132 56 18446744073709551615 4 kind 132 56 132 60 64 1 ) 132 60 132 61 63 2 << 132 62 132 64 18 4 L" " 132 65 132 69 18446744073709551615 1 ; 132 69 132 70 18446744073709551615 5 wcout 133 2 133 7 17 2 << 133 8 133 10 18 12 TypeToString 133 11 133 23 28 1 ( 133 23 133 24 28 4 node 133 24 133 28 72 2 -> 133 28 133 30 18446744073709551615 4 type 133 30 133 34 65 1 ) 133 34 133 35 28 2 << 133 36 133 38 18 4 L" " 133 39 133 43 18446744073709551615 1 ; 133 43 133 44 18446744073709551615 5 wcout 134 2 134 7 17 2 << 134 8 134 10 18 4 node 134 11 134 15 72 2 -> 134 15 134 17 18446744073709551615 4 name 134 17 134 21 73 2 << 134 22 134 24 18 4 L" " 134 25 134 29 18446744073709551615 1 ; 134 29 134 30 18446744073709551615 4 node 135 2 135 6 72 2 -> 135 6 135 8 18446744073709551615 5 value 135 8 135 13 74 2 -> 135 13 135 15 21 6 Accept 135 15 135 21 21 1 ( 135 21 135 22 21 4 this 135 22 135 26 18446744073709551615 1 ) 135 26 135 27 21 1 ; 135 27 135 28 18446744073709551615 5 wcout 136 2 136 7 17 2 << 136 8 136 10 18 4 L")" 136 11 136 15 18446744073709551615 1 ; 136 15 136 16 18446744073709551615 1 } 137 1 137 2 18446744073709551615 4 void 138 1 138 5 18446744073709551615 16 ExpressionViewer 138 6 138 22 4 2 :: 138 22 138 24 49 5 Visit 138 24 138 29 49 1 ( 138 29 138 30 49 15 BlockExpression 138 30 138 45 75 1 * 138 45 138 46 18446744073709551615 4 node 138 47 138 51 76 1 ) 138 51 138 52 49 1 { 139 1 139 2 18446744073709551615 5 wcout 140 2 140 7 17 2 << 140 8 140 10 30 4 endl 140 11 140 15 31 2 << 140 16 140 18 18 4 L"(" 140 19 140 23 18446744073709551615 2 << 140 24 140 26 18 22 ExpressionKindToString 140 27 140 49 63 1 ( 140 49 140 50 63 4 node 140 50 140 54 76 2 -> 140 54 140 56 18446744073709551615 4 kind 140 56 140 60 64 1 ) 140 60 140 61 63 2 << 140 62 140 64 18 4 L" " 140 65 140 69 18446744073709551615 1 ; 140 69 140 70 18446744073709551615 5 wcout 141 2 141 7 17 2 << 141 8 141 10 18 12 TypeToString 141 11 141 23 28 1 ( 141 23 141 24 28 4 node 141 24 141 28 76 2 -> 141 28 141 30 18446744073709551615 4 type 141 30 141 34 65 1 ) 141 34 141 35 28 2 << 141 36 141 38 18 4 L" " 141 39 141 43 18446744073709551615 1 ; 141 43 141 44 18446744073709551615 3 for 142 2 142 5 18446744073709551615 1 ( 142 6 142 7 18446744073709551615 4 auto 142 7 142 11 18446744073709551615 1 & 142 11 142 12 18446744073709551615 1 e 142 13 142 14 77 1 : 142 15 142 16 15 4 node 142 17 142 21 76 2 -> 142 21 142 23 18446744073709551615 11 expressions 142 23 142 34 78 1 ) 142 34 142 35 18446744073709551615 1 { 143 2 143 3 18446744073709551615 1 e 144 3 144 4 77 2 -> 144 4 144 6 21 6 Accept 144 6 144 12 21 1 ( 144 12 144 13 21 4 this 144 13 144 17 18446744073709551615 1 ) 144 17 144 18 21 1 ; 144 18 144 19 18446744073709551615 1 } 145 2 145 3 18446744073709551615 5 wcout 146 2 146 7 17 2 << 146 8 146 10 18 4 L")" 146 11 146 15 18446744073709551615 1 ; 146 15 146 16 18446744073709551615 1 } 147 1 147 2 18446744073709551615 4 void 148 1 148 5 18446744073709551615 16 ExpressionViewer 148 6 148 22 4 2 :: 148 22 148 24 49 5 Visit 148 24 148 29 49 1 ( 148 29 148 30 49 16 IfThenExpression 148 30 148 46 79 1 * 148 46 148 47 18446744073709551615 4 node 148 48 148 52 80 1 ) 148 52 148 53 49 1 { 149 1 149 2 18446744073709551615 5 wcout 150 2 150 7 17 2 << 150 8 150 10 30 4 endl 150 11 150 15 31 2 << 150 16 150 18 18 4 L"(" 150 19 150 23 18446744073709551615 2 << 150 24 150 26 18 22 ExpressionKindToString 150 27 150 49 63 1 ( 150 49 150 50 63 4 node 150 50 150 54 80 2 -> 150 54 150 56 18446744073709551615 4 kind 150 56 150 60 64 1 ) 150 60 150 61 63 2 << 150 62 150 64 18 4 L" " 150 65 150 69 18446744073709551615 1 ; 150 69 150 70 18446744073709551615 5 wcout 151 2 151 7 17 2 << 151 8 151 10 18 12 TypeToString 151 11 151 23 28 1 ( 151 23 151 24 28 4 node 151 24 151 28 80 2 -> 151 28 151 30 18446744073709551615 4 type 151 30 151 34 65 1 ) 151 34 151 35 28 2 << 151 36 151 38 18 4 L" " 151 39 151 43 18446744073709551615 1 ; 151 43 151 44 18446744073709551615 4 node 152 2 152 6 80 2 -> 152 6 152 8 18446744073709551615 9 condition 152 8 152 17 81 2 -> 152 17 152 19 21 6 Accept 152 19 152 25 21 1 ( 152 25 152 26 21 4 this 152 26 152 30 18446744073709551615 1 ) 152 30 152 31 21 1 ; 152 31 152 32 18446744073709551615 5 wcout 153 2 153 7 17 2 << 153 8 153 10 18 4 L" " 153 11 153 15 18446744073709551615 1 ; 153 15 153 16 18446744073709551615 4 node 154 2 154 6 80 2 -> 154 6 154 8 18446744073709551615 6 ifTrue 154 8 154 14 82 2 -> 154 14 154 16 21 6 Accept 154 16 154 22 21 1 ( 154 22 154 23 21 4 this 154 23 154 27 18446744073709551615 1 ) 154 27 154 28 21 1 ; 154 28 154 29 18446744073709551615 5 wcout 155 2 155 7 17 2 << 155 8 155 10 18 4 L")" 155 11 155 15 18446744073709551615 1 ; 155 15 155 16 18446744073709551615 1 } 156 1 156 2 18446744073709551615 4 void 157 1 157 5 18446744073709551615 16 ExpressionViewer 157 6 157 22 4 2 :: 157 22 157 24 49 5 Visit 157 24 157 29 49 1 ( 157 29 157 30 49 20 IfThenElseExpression 157 30 157 50 83 1 * 157 50 157 51 18446744073709551615 4 node 157 52 157 56 84 1 ) 157 56 157 57 49 1 { 158 1 158 2 18446744073709551615 5 wcout 159 2 159 7 17 2 << 159 8 159 10 30 4 endl 159 11 159 15 31 2 << 159 16 159 18 18 4 L"(" 159 19 159 23 18446744073709551615 2 << 159 24 159 26 18 22 ExpressionKindToString 159 27 159 49 63 1 ( 159 49 159 50 63 4 node 159 50 159 54 84 2 -> 159 54 159 56 18446744073709551615 4 kind 159 56 159 60 64 1 ) 159 60 159 61 63 2 << 159 62 159 64 18 4 L" " 159 65 159 69 18446744073709551615 1 ; 159 69 159 70 18446744073709551615 5 wcout 160 2 160 7 17 2 << 160 8 160 10 18 12 TypeToString 160 11 160 23 28 1 ( 160 23 160 24 28 4 node 160 24 160 28 84 2 -> 160 28 160 30 18446744073709551615 4 type 160 30 160 34 65 1 ) 160 34 160 35 28 2 << 160 36 160 38 18 4 L" " 160 39 160 43 18446744073709551615 1 ; 160 43 160 44 18446744073709551615 4 node 161 2 161 6 84 2 -> 161 6 161 8 18446744073709551615 9 condition 161 8 161 17 85 2 -> 161 17 161 19 21 6 Accept 161 19 161 25 21 1 ( 161 25 161 26 21 4 this 161 26 161 30 18446744073709551615 1 ) 161 30 161 31 21 1 ; 161 31 161 32 18446744073709551615 5 wcout 162 2 162 7 17 2 << 162 8 162 10 18 4 L" " 162 11 162 15 18446744073709551615 1 ; 162 15 162 16 18446744073709551615 4 node 163 2 163 6 84 2 -> 163 6 163 8 18446744073709551615 6 ifTrue 163 8 163 14 86 2 -> 163 14 163 16 21 6 Accept 163 16 163 22 21 1 ( 163 22 163 23 21 4 this 163 23 163 27 18446744073709551615 1 ) 163 27 163 28 21 1 ; 163 28 163 29 18446744073709551615 5 wcout 164 2 164 7 17 2 << 164 8 164 10 18 4 L" " 164 11 164 15 18446744073709551615 1 ; 164 15 164 16 18446744073709551615 4 node 165 2 165 6 84 2 -> 165 6 165 8 18446744073709551615 7 ifFalse 165 8 165 15 87 2 -> 165 15 165 17 21 6 Accept 165 17 165 23 21 1 ( 165 23 165 24 21 4 this 165 24 165 28 18446744073709551615 1 ) 165 28 165 29 21 1 ; 165 29 165 30 18446744073709551615 5 wcout 166 2 166 7 17 2 << 166 8 166 10 18 4 L")" 166 11 166 15 18446744073709551615 1 ; 166 15 166 16 18446744073709551615 1 } 167 1 167 2 18446744073709551615 4 void 168 1 168 5 18446744073709551615 16 ExpressionViewer 168 6 168 22 4 2 :: 168 22 168 24 49 5 Visit 168 24 168 29 49 1 ( 168 29 168 30 49 14 CallExpression 168 30 168 44 88 1 * 168 44 168 45 18446744073709551615 4 node 168 46 168 50 89 1 ) 168 50 168 51 49 1 { 169 1 169 2 18446744073709551615 5 wcout 170 2 170 7 17 2 << 170 8 170 10 30 4 endl 170 11 170 15 31 2 << 170 16 170 18 18 4 L"(" 170 19 170 23 18446744073709551615 2 << 170 24 170 26 18 22 ExpressionKindToString 170 27 170 49 63 1 ( 170 49 170 50 63 4 node 170 50 170 54 89 2 -> 170 54 170 56 18446744073709551615 4 kind 170 56 170 60 64 1 ) 170 60 170 61 63 2 << 170 62 170 64 18 4 L" " 170 65 170 69 18446744073709551615 1 ; 170 69 170 70 18446744073709551615 5 wcout 171 2 171 7 17 2 << 171 8 171 10 18 12 TypeToString 171 11 171 23 28 1 ( 171 23 171 24 28 4 node 171 24 171 28 89 2 -> 171 28 171 30 18446744073709551615 4 type 171 30 171 34 65 1 ) 171 34 171 35 28 2 << 171 36 171 38 18 4 L" " 171 39 171 43 18446744073709551615 1 ; 171 43 171 44 18446744073709551615 4 node 172 2 172 6 89 2 -> 172 6 172 8 18446744073709551615 8 function 172 8 172 16 90 2 -> 172 16 172 18 21 6 Accept 172 18 172 24 21 1 ( 172 24 172 25 21 4 this 172 25 172 29 18446744073709551615 1 ) 172 29 172 30 21 1 ; 172 30 172 31 18446744073709551615 5 wcout 173 2 173 7 17 2 << 173 8 173 10 18 4 L" " 173 11 173 15 18446744073709551615 1 ; 173 15 173 16 18446744073709551615 3 for 174 2 174 5 18446744073709551615 1 ( 174 6 174 7 18446744073709551615 4 auto 174 7 174 11 18446744073709551615 1 & 174 11 174 12 18446744073709551615 3 arg 174 13 174 16 91 1 : 174 17 174 18 15 4 node 174 19 174 23 89 2 -> 174 23 174 25 18446744073709551615 9 arguments 174 25 174 34 92 1 ) 174 34 174 35 18446744073709551615 1 { 175 2 175 3 18446744073709551615 3 arg 176 3 176 6 91 2 -> 176 6 176 8 21 6 Accept 176 8 176 14 21 1 ( 176 14 176 15 21 4 this 176 15 176 19 18446744073709551615 1 ) 176 19 176 20 21 1 ; 176 20 176 21 18446744073709551615 5 wcout 177 3 177 8 17 2 << 177 9 177 11 18 4 L" " 177 12 177 16 18446744073709551615 1 ; 177 16 177 17 18446744073709551615 1 } 178 2 178 3 18446744073709551615 5 wcout 179 2 179 7 17 2 << 179 8 179 10 18 4 L")" 179 11 179 15 18446744073709551615 1 ; 179 15 179 16 18446744073709551615 1 } 180 1 180 2 18446744073709551615 4 void 181 1 181 5 18446744073709551615 16 ExpressionViewer 181 6 181 22 4 2 :: 181 22 181 24 49 5 Visit 181 24 181 29 49 1 ( 181 29 181 30 49 18 VariableExpression 181 30 181 48 93 1 * 181 48 181 49 18446744073709551615 4 node 181 50 181 54 94 1 ) 181 54 181 55 49 1 { 182 1 182 2 18446744073709551615 5 wcout 183 2 183 7 17 2 << 183 8 183 10 30 4 endl 183 11 183 15 31 2 << 183 16 183 18 18 4 L"(" 183 19 183 23 18446744073709551615 2 << 183 24 183 26 18 22 ExpressionKindToString 183 27 183 49 63 1 ( 183 49 183 50 63 4 node 183 50 183 54 94 2 -> 183 54 183 56 18446744073709551615 4 kind 183 56 183 60 64 1 ) 183 60 183 61 63 2 << 183 62 183 64 18 4 L" " 183 65 183 69 18446744073709551615 1 ; 183 69 183 70 18446744073709551615 5 wcout 184 2 184 7 17 2 << 184 8 184 10 18 12 TypeToString 184 11 184 23 28 1 ( 184 23 184 24 28 4 node 184 24 184 28 94 2 -> 184 28 184 30 18446744073709551615 4 type 184 30 184 34 65 1 ) 184 34 184 35 28 2 << 184 36 184 38 18 4 L" " 184 39 184 43 18446744073709551615 1 ; 184 43 184 44 18446744073709551615 5 wcout 185 2 185 7 17 2 << 185 8 185 10 18 4 node 185 11 185 15 94 2 -> 185 15 185 17 18446744073709551615 4 name 185 17 185 21 95 2 << 185 22 185 24 18 4 L")" 185 25 185 29 18446744073709551615 1 ; 185 29 185 30 18446744073709551615 1 } 186 1 186 2 18446744073709551615 4 void 187 1 187 5 18446744073709551615 16 ExpressionViewer 187 6 187 22 4 2 :: 187 22 187 24 49 5 Visit 187 24 187 29 49 1 ( 187 29 187 30 49 16 ReturnExpression 187 30 187 46 96 1 * 187 46 187 47 18446744073709551615 4 node 187 48 187 52 97 1 ) 187 52 187 53 49 1 { 188 1 188 2 18446744073709551615 5 wcout 189 2 189 7 17 2 << 189 8 189 10 30 4 endl 189 11 189 15 31 2 << 189 16 189 18 18 4 L"(" 189 19 189 23 18446744073709551615 2 << 189 24 189 26 18 22 ExpressionKindToString 189 27 189 49 63 1 ( 189 49 189 50 63 4 node 189 50 189 54 97 2 -> 189 54 189 56 18446744073709551615 4 kind 189 56 189 60 64 1 ) 189 60 189 61 63 2 << 189 62 189 64 18 4 L" " 189 65 189 69 18446744073709551615 1 ; 189 69 189 70 18446744073709551615 5 wcout 190 2 190 7 17 2 << 190 8 190 10 18 12 TypeToString 190 11 190 23 28 1 ( 190 23 190 24 28 4 node 190 24 190 28 97 2 -> 190 28 190 30 18446744073709551615 4 type 190 30 190 34 65 1 ) 190 34 190 35 28 2 << 190 36 190 38 18 4 L" " 190 39 190 43 18446744073709551615 1 ; 190 43 190 44 18446744073709551615 4 node 191 2 191 6 97 2 -> 191 6 191 8 18446744073709551615 5 value 191 8 191 13 98 2 -> 191 13 191 15 21 6 Accept 191 15 191 21 21 1 ( 191 21 191 22 21 4 this 191 22 191 26 18446744073709551615 1 ) 191 26 191 27 21 1 ; 191 27 191 28 18446744073709551615 5 wcout 192 2 192 7 17 2 << 192 8 192 10 18 4 L")" 192 11 192 15 18446744073709551615 1 ; 192 15 192 16 18446744073709551615 1 } 193 1 193 2 18446744073709551615 4 void 194 1 194 5 18446744073709551615 16 ExpressionViewer 194 6 194 22 4 2 :: 194 22 194 24 49 5 Visit 194 24 194 29 49 1 ( 194 29 194 30 49 15 WhileExpression 194 30 194 45 99 1 * 194 45 194 46 18446744073709551615 4 node 194 47 194 51 100 1 ) 194 51 194 52 49 1 { 195 1 195 2 18446744073709551615 5 wcout 196 2 196 7 17 2 << 196 8 196 10 30 4 endl 196 11 196 15 31 2 << 196 16 196 18 18 4 L"(" 196 19 196 23 18446744073709551615 2 << 196 24 196 26 18 22 ExpressionKindToString 196 27 196 49 63 1 ( 196 49 196 50 63 4 node 196 50 196 54 100 2 -> 196 54 196 56 18446744073709551615 4 kind 196 56 196 60 64 1 ) 196 60 196 61 63 2 << 196 62 196 64 18 4 L" " 196 65 196 69 18446744073709551615 1 ; 196 69 196 70 18446744073709551615 5 wcout 197 2 197 7 17 2 << 197 8 197 10 18 12 TypeToString 197 11 197 23 28 1 ( 197 23 197 24 28 4 node 197 24 197 28 100 2 -> 197 28 197 30 18446744073709551615 4 type 197 30 197 34 65 1 ) 197 34 197 35 28 2 << 197 36 197 38 18 4 L" " 197 39 197 43 18446744073709551615 1 ; 197 43 197 44 18446744073709551615 4 node 198 2 198 6 100 2 -> 198 6 198 8 18446744073709551615 9 condition 198 8 198 17 101 2 -> 198 17 198 19 21 6 Accept 198 19 198 25 21 1 ( 198 25 198 26 21 4 this 198 26 198 30 18446744073709551615 1 ) 198 30 198 31 21 1 ; 198 31 198 32 18446744073709551615 5 wcout 199 2 199 7 17 2 << 199 8 199 10 18 4 L" " 199 11 199 15 18446744073709551615 1 ; 199 15 199 16 18446744073709551615 4 node 200 2 200 6 100 2 -> 200 6 200 8 18446744073709551615 4 body 200 8 200 12 102 2 -> 200 12 200 14 21 6 Accept 200 14 200 20 21 1 ( 200 20 200 21 21 4 this 200 21 200 25 18446744073709551615 1 ) 200 25 200 26 21 1 ; 200 26 200 27 18446744073709551615 5 wcout 201 2 201 7 17 2 << 201 8 201 10 18 4 L")" 201 11 201 15 18446744073709551615 1 ; 201 15 201 16 18446744073709551615 1 } 202 1 202 2 18446744073709551615 4 void 203 1 203 5 18446744073709551615 16 ExpressionViewer 203 6 203 22 4 2 :: 203 22 203 24 49 5 Visit 203 24 203 29 49 1 ( 203 29 203 30 49 13 DotExpression 203 30 203 43 103 1 * 203 43 203 44 18446744073709551615 4 node 203 45 203 49 104 1 ) 203 49 203 50 49 1 { 204 1 204 2 18446744073709551615 5 wcout 205 2 205 7 17 2 << 205 8 205 10 30 4 endl 205 11 205 15 31 2 << 205 16 205 18 18 4 L"(" 205 19 205 23 18446744073709551615 2 << 205 24 205 26 18 22 ExpressionKindToString 205 27 205 49 63 1 ( 205 49 205 50 63 4 node 205 50 205 54 104 2 -> 205 54 205 56 18446744073709551615 4 kind 205 56 205 60 64 1 ) 205 60 205 61 63 2 << 205 62 205 64 18 4 L" " 205 65 205 69 18446744073709551615 1 ; 205 69 205 70 18446744073709551615 4 node 206 2 206 6 104 2 -> 206 6 206 8 18446744073709551615 6 object 206 8 206 14 105 2 -> 206 14 206 16 21 6 Accept 206 16 206 22 21 1 ( 206 22 206 23 21 4 this 206 23 206 27 18446744073709551615 1 ) 206 27 206 28 21 1 ; 206 28 206 29 18446744073709551615 5 wcout 207 2 207 7 17 2 << 207 8 207 10 18 4 L" " 207 11 207 15 18446744073709551615 1 ; 207 15 207 16 18446744073709551615 5 wcout 208 2 208 7 17 2 << 208 8 208 10 18 4 node 208 11 208 15 104 2 -> 208 15 208 17 18446744073709551615 4 name 208 17 208 21 106 2 << 208 22 208 24 18 4 L")" 208 25 208 29 18446744073709551615 1 ; 208 29 208 30 18446744073709551615 1 } 209 1 209 2 18446744073709551615 0 0 107 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 16 ExpressionViewer 21 1 3 0 30 ViewNamespace:ExpressionViewer 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 81 9:60:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 11:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 17 modules:Namespace 9 1 3 0 81 13:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 15 second:pair:std 9 1 3 0 82 14:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 9 1 3 0 9 wcout:std 8 1 3 0 12 operator:std 6 1 3 0 10 name:Field 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 9 1 3 0 82 21:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 16 functions:Module 6 1 3 0 13 name:Function 9 1 3 0 82 26:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 19 parameters:Function 6 1 3 0 14 name:Parameter 8 1 3 0 12 TypeToString 6 1 3 0 14 type:Parameter 21 1 3 0 26 operator:basic_ostream:std 8 1 3 0 8 endl:std 9 1 3 0 82 32:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 18 variables:Function 6 1 3 0 18 name:LocalVariable 6 1 3 0 19 value:LocalVariable 9 1 3 0 82 39:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 20 expressions:Function 9 1 3 0 82 46:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 17 classes:Namespace 9 1 3 0 81 48:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 49:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 12 fields:Class 9 1 3 0 82 56:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 15 functions:Class 9 1 3 0 82 58:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 82 64:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 subNamespaces:Namespace 9 1 3 0 81 66:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 21 2 3 0 24 Visit:Visitor:Expression 22 Visit:ExpressionViewer 4 1 3 0 18 ConstantExpression 10 1 3 0 82 70:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 4 1 3 0 7 any:std 9 1 3 0 81 73:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 20 1 3 0 7 int32_t 8 1 3 0 12 any_cast:std 20 1 3 0 7 int64_t 20 1 3 0 19 wstring:__cxx11:std 4 1 3 0 15 UnaryExpression 10 1 3 0 83 114:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 8 1 3 0 22 ExpressionKindToString 6 1 3 0 15 kind:Expression 6 1 3 0 15 type:Expression 6 1 3 0 23 operand:UnaryExpression 4 1 3 0 16 BinaryExpression 10 1 3 0 83 121:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 4 1 3 0 16 AssignExpression 10 1 3 0 83 130:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 21 name:AssignExpression 6 1 3 0 22 value:AssignExpression 4 1 3 0 15 BlockExpression 10 1 3 0 83 138:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 9 1 3 0 83 142:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 83 148:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 26 condition:IfThenExpression 6 1 3 0 23 ifTrue:IfThenExpression 4 1 3 0 20 IfThenElseExpression 10 1 3 0 83 157:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 30 condition:IfThenElseExpression 6 1 3 0 27 ifTrue:IfThenElseExpression 6 1 3 0 28 ifFalse:IfThenElseExpression 4 1 3 0 14 CallExpression 10 1 3 0 83 168:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 function:CallExpression 9 1 3 0 83 174:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 24 arguments:CallExpression 4 1 3 0 18 VariableExpression 10 1 3 0 83 181:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 23 name:VariableExpression 4 1 3 0 16 ReturnExpression 10 1 3 0 83 187:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 22 value:ReturnExpression 4 1 3 0 15 WhileExpression 10 1 3 0 83 194:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 25 condition:WhileExpression 6 1 3 0 20 body:WhileExpression 4 1 3 0 13 DotExpression 10 1 3 0 83 203:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 6 1 3 0 20 object:DotExpression 6 1 3 0 18 name:DotExpression 0 0 6 0 0 0 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1531290788 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.cpp 1531672148 76 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/ExpressionViewer.hpp 1531672110 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1531671918 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1531484829 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
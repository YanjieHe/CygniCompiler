22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 322 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 11 "Scope.hpp" 1 10 1 21 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 5 Scope 3 1 3 6 0 2 :: 3 6 3 8 0 5 Scope 3 8 3 13 0 1 ( 3 13 3 14 0 1 ) 3 14 3 15 0 1 { 4 1 4 2 18446744073709551615 1 } 5 1 5 2 18446744073709551615 37 // bool Scope::Contains(wstring name) 6 1 6 38 18446744073709551615 4 // { 7 1 7 5 18446744073709551615 45 // 	bool found = map.find(name) != map.end(); 8 1 8 46 18446744073709551615 14 // 	if (found) 9 1 9 15 18446744073709551615 5 // 	{ 10 1 10 6 18446744073709551615 17 // 		return true; 11 1 11 18 18446744073709551615 5 // 	} 12 1 12 6 18446744073709551615 31 // 	else if (parent != nullptr) 13 1 13 32 18446744073709551615 5 // 	{ 14 1 14 6 18446744073709551615 35 // 		return parent->Contains(name); 15 1 15 36 18446744073709551615 5 // 	} 16 1 16 6 18446744073709551615 8 // 	else 17 1 17 9 18446744073709551615 5 // 	{ 18 1 18 6 18446744073709551615 18 // 		return false; 19 1 19 19 18446744073709551615 5 // 	} 20 1 20 6 18446744073709551615 4 // } 21 1 21 5 18446744073709551615 31 // any Scope::Get(wstring name) 22 1 22 32 18446744073709551615 4 // { 23 1 23 5 18446744073709551615 45 // 	bool found = map.find(name) != map.end(); 24 1 24 46 18446744073709551615 14 // 	if (found) 25 1 25 15 18446744073709551615 5 // 	{ 26 1 26 6 18446744073709551615 22 // 		return map[name]; 27 1 27 23 18446744073709551615 5 // 	} 28 1 28 6 18446744073709551615 31 // 	else if (parent != nullptr) 29 1 29 32 18446744073709551615 5 // 	{ 30 1 30 6 18446744073709551615 30 // 		return parent->Get(name); 31 1 31 31 18446744073709551615 5 // 	} 32 1 32 6 18446744073709551615 8 // 	else 33 1 33 9 18446744073709551615 5 // 	{ 34 1 34 6 18446744073709551615 35 // 		throw wstring(L"not defined"); 35 1 35 36 18446744073709551615 5 // 	} 36 1 36 6 18446744073709551615 4 // } 37 1 37 5 18446744073709551615 4 void 38 1 38 5 18446744073709551615 5 Scope 38 6 38 11 0 2 :: 38 11 38 13 1 3 Put 38 13 38 16 1 1 ( 38 16 38 17 1 7 wstring 38 17 38 24 2 4 name 38 25 38 29 3 1 , 38 29 38 30 1 3 any 38 31 38 34 4 5 value 38 35 38 40 5 1 ) 38 40 38 41 1 1 { 39 1 39 2 18446744073709551615 4 bool 40 2 40 6 18446744073709551615 5 found 40 7 40 12 6 1 = 40 13 40 14 18446744073709551615 3 map 40 15 40 18 7 1 . 40 18 40 19 8 4 find 40 19 40 23 8 1 ( 40 23 40 24 8 4 name 40 24 40 28 3 1 ) 40 28 40 29 8 2 != 40 30 40 32 9 3 map 40 33 40 36 7 1 . 40 36 40 37 10 3 end 40 37 40 40 10 1 ( 40 40 40 41 10 1 ) 40 41 40 42 10 1 ; 40 42 40 43 18446744073709551615 2 if 41 2 41 4 18446744073709551615 1 ( 41 5 41 6 18446744073709551615 5 found 41 6 41 11 6 1 ) 41 11 41 12 18446744073709551615 1 { 42 2 42 3 18446744073709551615 5 throw 43 3 43 8 18446744073709551615 21 DuplicateKeyException 43 9 43 30 11 1 ( 43 30 43 31 11 4 name 43 31 43 35 3 1 ) 43 35 43 36 11 1 ; 43 36 43 37 18446744073709551615 1 } 44 2 44 3 18446744073709551615 4 else 45 2 45 6 18446744073709551615 1 { 46 2 46 3 18446744073709551615 3 map 47 3 47 6 7 1 . 47 6 47 7 12 6 insert 47 7 47 13 12 1 ( 47 13 47 14 12 1 { 47 14 47 15 13 4 name 47 15 47 19 3 1 , 47 19 47 20 13 5 value 47 21 47 26 5 1 } 47 26 47 27 13 1 ) 47 27 47 28 12 1 ; 47 28 47 29 18446744073709551615 1 } 48 2 48 3 18446744073709551615 1 } 49 1 49 2 18446744073709551615 10 ScopeStack 50 1 50 11 14 2 :: 50 11 50 13 14 10 ScopeStack 50 13 50 23 14 1 ( 50 23 50 24 14 1 ) 50 24 50 25 14 1 { 51 1 51 2 18446744073709551615 1 } 52 1 52 2 18446744073709551615 4 void 53 1 53 5 18446744073709551615 10 ScopeStack 53 6 53 16 14 2 :: 53 16 53 18 15 4 Push 53 18 53 22 15 1 ( 53 22 53 23 15 5 Scope 53 23 53 28 0 5 scope 53 29 53 34 16 1 ) 53 34 53 35 15 1 { 54 1 54 2 18446744073709551615 6 scopes 55 2 55 8 17 1 . 55 8 55 9 18 9 push_back 55 9 55 18 18 1 ( 55 18 55 19 18 5 scope 55 19 55 24 16 1 ) 55 24 55 25 18 1 ; 55 25 55 26 18446744073709551615 1 } 56 1 56 2 18446744073709551615 4 void 57 1 57 5 18446744073709551615 10 ScopeStack 57 6 57 16 14 2 :: 57 16 57 18 19 3 Pop 57 18 57 21 19 1 ( 57 21 57 22 19 1 ) 57 22 57 23 19 1 { 58 1 58 2 18446744073709551615 6 scopes 59 2 59 8 17 1 . 59 8 59 9 20 8 pop_back 59 9 59 17 20 1 ( 59 17 59 18 20 1 ) 59 18 59 19 20 1 ; 59 19 59 20 18446744073709551615 1 } 60 1 60 2 18446744073709551615 3 any 61 1 61 4 4 10 ScopeStack 61 5 61 15 14 2 :: 61 15 61 17 21 4 Find 61 17 61 21 21 1 ( 61 21 61 22 21 7 wstring 61 22 61 29 2 4 name 61 30 61 34 22 1 ) 61 34 61 35 21 1 { 62 1 62 2 18446744073709551615 7 int32_t 63 2 63 9 23 1 n 63 10 63 11 24 1 = 63 12 63 13 18446744073709551615 6 scopes 63 14 63 20 17 1 . 63 20 63 21 25 4 size 63 21 63 25 25 1 ( 63 25 63 26 25 1 ) 63 26 63 27 25 1 ; 63 27 63 28 18446744073709551615 3 for 64 2 64 5 18446744073709551615 1 ( 64 6 64 7 18446744073709551615 3 int 64 7 64 10 18446744073709551615 1 i 64 11 64 12 26 1 = 64 13 64 14 18446744073709551615 1 n 64 15 64 16 24 1 - 64 17 64 18 18446744073709551615 1 1 64 19 64 20 18446744073709551615 1 ; 64 20 64 21 18446744073709551615 1 i 64 22 64 23 26 2 >= 64 24 64 26 18446744073709551615 1 0 64 27 64 28 18446744073709551615 1 ; 64 28 64 29 18446744073709551615 1 i 64 30 64 31 26 2 -- 64 31 64 33 18446744073709551615 1 ) 64 33 64 34 18446744073709551615 1 { 65 2 65 3 18446744073709551615 5 Scope 66 3 66 8 0 1 & 66 8 66 9 18446744073709551615 5 scope 66 10 66 15 27 1 = 66 16 66 17 18446744073709551615 6 scopes 66 18 66 24 17 1 . 66 24 66 25 28 2 at 66 25 66 27 28 1 ( 66 27 66 28 28 1 i 66 28 66 29 26 1 ) 66 29 66 30 28 1 ; 66 30 66 31 18446744073709551615 4 bool 67 3 67 7 18446744073709551615 5 found 67 8 67 13 29 1 = 67 14 67 15 18446744073709551615 5 scope 67 16 67 21 27 1 . 67 21 67 22 18446744073709551615 3 map 67 22 67 25 7 1 . 67 25 67 26 8 4 find 67 26 67 30 8 1 ( 67 30 67 31 8 4 name 67 31 67 35 22 1 ) 67 35 67 36 8 2 != 67 37 67 39 9 5 scope 67 40 67 45 27 1 . 67 45 67 46 18446744073709551615 3 map 67 46 67 49 7 1 . 67 49 67 50 10 3 end 67 50 67 53 10 1 ( 67 53 67 54 10 1 ) 67 54 67 55 10 1 ; 67 55 67 56 18446744073709551615 2 if 68 3 68 5 18446744073709551615 1 ( 68 6 68 7 18446744073709551615 5 found 68 7 68 12 29 1 ) 68 12 68 13 18446744073709551615 1 { 69 3 69 4 18446744073709551615 6 return 70 4 70 10 18446744073709551615 5 scope 70 11 70 16 27 1 . 70 16 70 17 18446744073709551615 3 map 70 17 70 20 7 1 [ 70 20 70 21 30 4 name 70 21 70 25 22 1 ] 70 25 70 26 30 1 ; 70 26 70 27 18446744073709551615 1 } 71 3 71 4 18446744073709551615 1 } 72 2 72 3 18446744073709551615 5 throw 73 2 73 7 18446744073709551615 24 UndefinedSymbolException 73 8 73 32 31 1 ( 73 32 73 33 31 4 name 73 33 73 37 22 1 ) 73 37 73 38 31 1 ; 73 38 73 39 18446744073709551615 1 } 74 1 74 2 18446744073709551615 4 bool 75 1 75 5 18446744073709551615 10 ScopeStack 75 6 75 16 14 2 :: 75 16 75 18 32 8 Contains 75 18 75 26 32 1 ( 75 26 75 27 32 7 wstring 75 27 75 34 2 4 name 75 35 75 39 33 1 ) 75 39 75 40 32 1 { 76 1 76 2 18446744073709551615 7 int32_t 77 2 77 9 23 1 n 77 10 77 11 34 1 = 77 12 77 13 18446744073709551615 6 scopes 77 14 77 20 17 1 . 77 20 77 21 25 4 size 77 21 77 25 25 1 ( 77 25 77 26 25 1 ) 77 26 77 27 25 1 ; 77 27 77 28 18446744073709551615 3 for 78 2 78 5 18446744073709551615 1 ( 78 6 78 7 18446744073709551615 3 int 78 7 78 10 18446744073709551615 1 i 78 11 78 12 35 1 = 78 13 78 14 18446744073709551615 1 n 78 15 78 16 34 1 - 78 17 78 18 18446744073709551615 1 1 78 19 78 20 18446744073709551615 1 ; 78 20 78 21 18446744073709551615 1 i 78 22 78 23 35 2 >= 78 24 78 26 18446744073709551615 1 0 78 27 78 28 18446744073709551615 1 ; 78 28 78 29 18446744073709551615 1 i 78 30 78 31 35 2 -- 78 31 78 33 18446744073709551615 1 ) 78 33 78 34 18446744073709551615 1 { 79 2 79 3 18446744073709551615 5 Scope 80 3 80 8 0 1 & 80 8 80 9 18446744073709551615 5 scope 80 10 80 15 36 1 = 80 16 80 17 18446744073709551615 6 scopes 80 18 80 24 17 1 . 80 24 80 25 28 2 at 80 25 80 27 28 1 ( 80 27 80 28 28 1 i 80 28 80 29 35 1 ) 80 29 80 30 28 1 ; 80 30 80 31 18446744073709551615 4 bool 81 3 81 7 18446744073709551615 5 found 81 8 81 13 37 1 = 81 14 81 15 18446744073709551615 5 scope 81 16 81 21 36 1 . 81 21 81 22 18446744073709551615 3 map 81 22 81 25 7 1 . 81 25 81 26 8 4 find 81 26 81 30 8 1 ( 81 30 81 31 8 4 name 81 31 81 35 33 1 ) 81 35 81 36 8 2 != 81 37 81 39 9 5 scope 81 40 81 45 36 1 . 81 45 81 46 18446744073709551615 3 map 81 46 81 49 7 1 . 81 49 81 50 10 3 end 81 50 81 53 10 1 ( 81 53 81 54 10 1 ) 81 54 81 55 10 1 ; 81 55 81 56 18446744073709551615 2 if 82 3 82 5 18446744073709551615 1 ( 82 6 82 7 18446744073709551615 5 found 82 7 82 12 37 1 ) 82 12 82 13 18446744073709551615 1 { 83 3 83 4 18446744073709551615 6 return 84 4 84 10 18446744073709551615 4 true 84 11 84 15 18446744073709551615 1 ; 84 15 84 16 18446744073709551615 1 } 85 3 85 4 18446744073709551615 1 } 86 2 86 3 18446744073709551615 6 return 87 2 87 8 18446744073709551615 5 false 87 9 87 14 18446744073709551615 1 ; 87 14 87 15 18446744073709551615 1 } 88 1 88 2 18446744073709551615 5 Scope 89 1 89 6 0 1 & 89 6 89 7 38 10 ScopeStack 89 8 89 18 14 2 :: 89 18 89 20 38 4 Peek 89 20 89 24 38 1 ( 89 24 89 25 38 1 ) 89 25 89 26 38 1 { 90 1 90 2 18446744073709551615 6 return 91 2 91 8 18446744073709551615 6 scopes 91 9 91 15 17 1 . 91 15 91 16 39 4 back 91 16 91 20 39 1 ( 91 20 91 21 39 1 ) 91 21 91 22 39 1 ; 91 22 91 23 18446744073709551615 1 } 92 1 92 2 18446744073709551615 0 0 40 0 0 0 4 0 0 1 3 0 5 Scope 21 1 3 0 9 Put:Scope 20 1 3 0 19 wstring:__cxx11:std 10 1 3 0 71 38:25:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 4 1 3 0 7 any:std 10 1 3 0 71 38:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 70 40:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 6 1 3 0 9 map:Scope 21 1 3 0 22 find:unordered_map:std 8 1 3 0 23 operator!=:__detail:std 21 1 3 0 21 end:unordered_map:std 4 1 3 0 21 DuplicateKeyException 21 1 3 0 24 insert:unordered_map:std 24 1 3 0 8 pair:std 4 1 3 0 10 ScopeStack 21 1 3 0 15 Push:ScopeStack 10 1 3 0 71 53:29:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 6 1 3 0 17 scopes:ScopeStack 21 1 3 0 20 push_back:vector:std 21 1 3 0 14 Pop:ScopeStack 21 1 3 0 19 pop_back:vector:std 21 1 3 0 15 Find:ScopeStack 10 1 3 0 71 61:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 20 1 3 0 7 int32_t 9 1 3 0 71 63:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 21 1 3 0 15 size:vector:std 9 1 3 0 71 64:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 71 66:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 21 1 3 0 13 at:vector:std 9 1 3 0 70 67:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 21 1 3 0 28 operator[]:unordered_map:std 4 1 3 0 24 UndefinedSymbolException 21 1 3 0 19 Contains:ScopeStack 10 1 3 0 71 75:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 71 77:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 71 78:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 71 80:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 9 1 3 0 70 81:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 21 1 3 0 15 Peek:ScopeStack 21 1 3 0 15 back:vector:std 0 0 4 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1531709425 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.cpp 1531709563 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Scope.hpp 1531709676 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
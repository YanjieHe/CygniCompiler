22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3646 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "Compiler.hpp" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 17 "Instruction.hpp" 3 10 3 27 18446744073709551615 5 using 4 1 4 6 18446744073709551615 3 std 4 7 4 10 0 2 :: 4 10 4 12 18446744073709551615 8 any_cast 4 12 4 20 1 1 ; 4 20 4 21 18446744073709551615 8 Compiler 5 1 5 9 2 2 :: 5 9 5 11 2 8 Compiler 5 11 5 19 2 1 ( 5 19 5 20 2 1 ) 5 20 5 21 2 1 { 6 1 6 2 18446744073709551615 1 } 7 1 7 2 18446744073709551615 15 CompiledProgram 8 1 8 16 3 8 Compiler 8 17 8 25 2 2 :: 8 25 8 27 4 7 Compile 8 27 8 34 4 1 ( 8 34 8 35 4 15 NamespaceRecord 8 35 8 50 5 1 & 8 50 8 51 18446744073709551615 8 nsRecord 8 52 8 60 6 1 ) 8 60 8 61 4 1 { 9 1 9 2 18446744073709551615 3 for 10 2 10 5 18446744073709551615 1 ( 10 6 10 7 18446744073709551615 4 auto 10 7 10 11 18446744073709551615 1 & 10 11 10 12 18446744073709551615 1 p 10 13 10 14 7 1 : 10 15 10 16 8 8 nsRecord 10 17 10 25 6 1 . 10 25 10 26 18446744073709551615 6 record 10 26 10 32 9 1 ) 10 32 10 33 18446744073709551615 1 { 11 2 11 3 18446744073709551615 4 auto 12 3 12 7 18446744073709551615 1 & 12 7 12 8 18446744073709551615 5 nsPtr 12 9 12 14 10 1 = 12 15 12 16 18446744073709551615 1 p 12 17 12 18 7 1 . 12 18 12 19 18446744073709551615 6 second 12 19 12 25 11 1 ; 12 25 12 26 18446744073709551615 16 CompileNamespace 13 3 13 19 12 1 ( 13 19 13 20 12 5 nsPtr 13 20 13 25 10 1 ) 13 25 13 26 12 1 ; 13 26 13 27 18446744073709551615 1 } 14 2 14 3 18446744073709551615 6 return 15 2 15 8 18446744073709551615 15 CompiledProgram 15 9 15 24 3 1 ( 15 24 15 25 3 7 modules 15 25 15 32 13 1 , 15 32 15 33 3 7 classes 15 34 15 41 14 1 ) 15 41 15 42 3 1 ; 15 42 15 43 18446744073709551615 1 } 16 1 16 2 18446744073709551615 4 void 17 1 17 5 18446744073709551615 8 Compiler 17 6 17 14 2 2 :: 17 14 17 16 12 16 CompileNamespace 17 16 17 32 12 1 ( 17 32 17 33 12 10 shared_ptr 17 33 17 43 15 1 < 17 43 17 44 18446744073709551615 9 Namespace 17 44 17 53 16 1 > 17 53 17 54 18446744073709551615 1 & 17 54 17 55 18446744073709551615 5 nsPtr 17 56 17 61 17 1 ) 17 61 17 62 12 1 { 18 1 18 2 18446744073709551615 3 for 19 2 19 5 18446744073709551615 1 ( 19 6 19 7 18446744073709551615 4 auto 19 7 19 11 18446744073709551615 1 & 19 11 19 12 18446744073709551615 1 p 19 13 19 14 18 1 : 19 15 19 16 8 5 nsPtr 19 17 19 22 17 2 -> 19 22 19 24 18446744073709551615 7 modules 19 24 19 31 19 1 ) 19 31 19 32 18446744073709551615 1 { 20 2 20 3 18446744073709551615 6 Module 21 3 21 9 20 1 & 21 9 21 10 18446744073709551615 10 moduleInfo 21 11 21 21 21 1 = 21 22 21 23 18446744073709551615 1 p 21 24 21 25 18 1 . 21 25 21 26 18446744073709551615 6 second 21 26 21 32 11 1 ; 21 32 21 33 18446744073709551615 6 vector 22 3 22 9 22 1 < 22 9 22 10 18446744073709551615 16 CompiledFunction 22 10 22 26 23 1 > 22 26 22 27 18446744073709551615 5 cfVec 22 28 22 33 24 1 ; 22 33 22 34 18446744073709551615 3 for 23 3 23 6 18446744073709551615 1 ( 23 7 23 8 18446744073709551615 4 auto 23 8 23 12 18446744073709551615 1 & 23 12 23 13 18446744073709551615 5 field 23 14 23 19 25 1 : 23 20 23 21 26 10 moduleInfo 23 22 23 32 21 1 . 23 32 23 33 18446744073709551615 6 fields 23 33 23 39 27 1 ) 23 39 23 40 18446744073709551615 1 { 24 3 24 4 18446744073709551615 5 field 25 4 25 9 25 1 . 25 9 25 10 18446744073709551615 5 value 25 10 25 15 28 2 -> 25 15 25 17 29 6 Accept 25 17 25 23 29 1 ( 25 23 25 24 29 4 this 25 24 25 28 18446744073709551615 1 ) 25 28 25 29 29 1 ; 25 29 25 30 18446744073709551615 1 } 26 3 26 4 18446744073709551615 3 for 27 3 27 6 18446744073709551615 1 ( 27 7 27 8 18446744073709551615 4 auto 27 8 27 12 18446744073709551615 1 & 27 12 27 13 18446744073709551615 8 function 27 14 27 22 30 1 : 27 23 27 24 26 10 moduleInfo 27 25 27 35 21 1 . 27 35 27 36 18446744073709551615 9 functions 27 36 27 45 31 1 ) 27 45 27 46 18446744073709551615 1 { 28 3 28 4 18446744073709551615 16 CompiledFunction 29 4 29 20 23 2 cf 29 21 29 23 32 1 = 29 24 29 25 18446744073709551615 15 CompileFunction 29 26 29 41 33 1 ( 29 41 29 42 33 8 function 29 42 29 50 30 1 ) 29 50 29 51 33 1 ; 29 51 29 52 18446744073709551615 5 cfVec 30 4 30 9 24 1 . 30 9 30 10 34 9 push_back 30 10 30 19 34 1 ( 30 19 30 20 34 2 cf 30 20 30 22 32 1 ) 30 22 30 23 34 1 ; 30 23 30 24 18446744073709551615 1 } 31 3 31 4 18446744073709551615 7 modules 32 3 32 10 13 1 . 32 10 32 11 34 9 push_back 32 11 32 20 34 1 ( 32 20 32 21 34 14 CompiledModule 33 4 33 18 35 1 ( 33 18 33 19 35 10 moduleInfo 33 19 33 29 21 1 . 33 29 33 30 18446744073709551615 5 index 33 30 33 35 36 1 , 33 35 33 36 35 10 moduleInfo 33 37 33 47 21 1 . 33 47 33 48 18446744073709551615 6 fields 33 48 33 54 27 1 . 33 54 33 55 37 4 size 33 55 33 59 37 1 ( 33 59 33 60 37 1 ) 33 60 33 61 37 1 , 33 61 33 62 35 5 cfVec 33 63 33 68 24 1 ) 33 68 33 69 35 1 ) 33 69 33 70 34 1 ; 33 70 33 71 18446744073709551615 1 } 34 2 34 3 18446744073709551615 3 for 35 2 35 5 18446744073709551615 1 ( 35 6 35 7 18446744073709551615 4 auto 35 7 35 11 18446744073709551615 1 & 35 11 35 12 18446744073709551615 1 p 35 13 35 14 38 1 : 35 15 35 16 8 5 nsPtr 35 17 35 22 17 2 -> 35 22 35 24 18446744073709551615 7 classes 35 24 35 31 39 1 ) 35 31 35 32 18446744073709551615 1 { 36 2 36 3 18446744073709551615 5 Class 37 3 37 8 40 1 & 37 8 37 9 18446744073709551615 9 classInfo 37 10 37 19 41 1 = 37 20 37 21 18446744073709551615 1 p 37 22 37 23 38 1 . 37 23 37 24 18446744073709551615 6 second 37 24 37 30 11 1 ; 37 30 37 31 18446744073709551615 6 vector 38 3 38 9 22 1 < 38 9 38 10 18446744073709551615 16 CompiledFunction 38 10 38 26 23 1 > 38 26 38 27 18446744073709551615 5 cfVec 38 28 38 33 42 1 ; 38 33 38 34 18446744073709551615 3 for 39 3 39 6 18446744073709551615 1 ( 39 7 39 8 18446744073709551615 4 auto 39 8 39 12 18446744073709551615 1 & 39 12 39 13 18446744073709551615 5 field 39 14 39 19 43 1 : 39 20 39 21 26 9 classInfo 39 22 39 31 41 1 . 39 31 39 32 18446744073709551615 6 fields 39 32 39 38 44 1 ) 39 38 39 39 18446744073709551615 1 { 40 3 40 4 18446744073709551615 5 field 41 4 41 9 43 1 . 41 9 41 10 18446744073709551615 5 value 41 10 41 15 28 2 -> 41 15 41 17 29 6 Accept 41 17 41 23 29 1 ( 41 23 41 24 29 4 this 41 24 41 28 18446744073709551615 1 ) 41 28 41 29 29 1 ; 41 29 41 30 18446744073709551615 1 } 42 3 42 4 18446744073709551615 3 for 43 3 43 6 18446744073709551615 1 ( 43 7 43 8 18446744073709551615 4 auto 43 8 43 12 18446744073709551615 1 & 43 12 43 13 18446744073709551615 8 function 43 14 43 22 45 1 : 43 23 43 24 26 9 classInfo 43 25 43 34 41 1 . 43 34 43 35 18446744073709551615 9 functions 43 35 43 44 46 1 ) 43 44 43 45 18446744073709551615 1 { 44 3 44 4 18446744073709551615 16 CompiledFunction 45 4 45 20 23 2 cf 45 21 45 23 47 1 = 45 24 45 25 18446744073709551615 15 CompileFunction 45 26 45 41 33 1 ( 45 41 45 42 33 8 function 45 42 45 50 45 1 ) 45 50 45 51 33 1 ; 45 51 45 52 18446744073709551615 5 cfVec 46 4 46 9 42 1 . 46 9 46 10 34 9 push_back 46 10 46 19 34 1 ( 46 19 46 20 34 2 cf 46 20 46 22 47 1 ) 46 22 46 23 34 1 ; 46 23 46 24 18446744073709551615 1 } 47 3 47 4 18446744073709551615 7 classes 48 3 48 10 14 1 . 48 10 48 11 34 9 push_back 48 11 48 20 34 1 ( 48 20 48 21 34 13 CompiledClass 49 4 49 17 48 1 ( 49 17 49 18 48 9 classInfo 49 18 49 27 41 1 . 49 27 49 28 18446744073709551615 5 index 49 28 49 33 49 1 , 49 33 49 34 48 9 classInfo 49 35 49 44 41 1 . 49 44 49 45 18446744073709551615 6 fields 49 45 49 51 44 1 . 49 51 49 52 37 4 size 49 52 49 56 37 1 ( 49 56 49 57 37 1 ) 49 57 49 58 37 1 , 49 58 49 59 48 5 cfVec 49 60 49 65 42 1 ) 49 65 49 66 48 1 ) 49 66 49 67 34 1 ; 49 67 49 68 18446744073709551615 1 } 50 2 50 3 18446744073709551615 3 for 51 2 51 5 18446744073709551615 1 ( 51 6 51 7 18446744073709551615 4 auto 51 7 51 11 18446744073709551615 1 & 51 11 51 12 18446744073709551615 1 p 51 13 51 14 50 1 : 51 15 51 16 8 5 nsPtr 51 17 51 22 17 2 -> 51 22 51 24 18446744073709551615 13 subNamespaces 51 24 51 37 51 1 ) 51 37 51 38 18446744073709551615 1 { 52 2 52 3 18446744073709551615 4 auto 53 3 53 7 18446744073709551615 1 & 53 7 53 8 18446744073709551615 8 subNsPtr 53 9 53 17 52 1 = 53 18 53 19 18446744073709551615 1 p 53 20 53 21 50 1 . 53 21 53 22 18446744073709551615 6 second 53 22 53 28 11 1 ; 53 28 53 29 18446744073709551615 16 CompileNamespace 54 3 54 19 12 1 ( 54 19 54 20 12 8 subNsPtr 54 20 54 28 52 1 ) 54 28 54 29 12 1 ; 54 29 54 30 18446744073709551615 1 } 55 2 55 3 18446744073709551615 1 } 56 1 56 2 18446744073709551615 16 CompiledFunction 57 1 57 17 23 8 Compiler 57 18 57 26 2 2 :: 57 26 57 28 33 15 CompileFunction 57 28 57 43 33 1 ( 57 43 57 44 33 8 Function 57 44 57 52 53 1 & 57 52 57 53 18446744073709551615 8 function 57 54 57 62 54 1 ) 57 62 57 63 33 1 { 58 1 58 2 18446744073709551615 8 byteCode 59 2 59 10 55 1 = 59 11 59 12 56 8 ByteCode 59 13 59 21 57 1 ( 59 21 59 22 22 1 ) 59 22 59 23 22 1 ; 59 23 59 24 18446744073709551615 12 constantPool 60 2 60 14 58 1 = 60 15 60 16 56 8 ByteCode 60 17 60 25 57 1 ( 60 25 60 26 22 1 ) 60 26 60 27 22 1 ; 60 27 60 28 18446744073709551615 14 constantsCount 61 2 61 16 59 1 = 61 17 61 18 18446744073709551615 1 0 61 19 61 20 18446744073709551615 1 ; 61 20 61 21 18446744073709551615 3 for 62 2 62 5 18446744073709551615 1 ( 62 6 62 7 18446744073709551615 13 LocalVariable 62 7 62 20 60 1 & 62 20 62 21 18446744073709551615 8 variable 62 22 62 30 61 1 : 62 31 62 32 26 8 function 62 33 62 41 54 1 . 62 41 62 42 18446744073709551615 9 variables 62 42 62 51 62 1 ) 62 51 62 52 18446744073709551615 1 { 63 2 63 3 18446744073709551615 8 variable 64 3 64 11 61 1 . 64 11 64 12 18446744073709551615 5 value 64 12 64 17 63 2 -> 64 17 64 19 29 6 Accept 64 19 64 25 29 1 ( 64 25 64 26 29 4 this 64 26 64 30 18446744073709551615 1 ) 64 30 64 31 29 1 ; 64 31 64 32 18446744073709551615 7 int32_t 65 3 65 10 64 6 offset 65 11 65 17 65 1 = 65 18 65 19 18446744073709551615 8 variable 65 20 65 28 61 1 . 65 28 65 29 18446744073709551615 8 location 65 29 65 37 66 1 . 65 37 65 38 18446744073709551615 6 offset 65 38 65 44 67 1 ; 65 44 65 45 18446744073709551615 2 if 66 3 66 5 18446744073709551615 1 ( 66 6 66 7 18446744073709551615 8 variable 66 7 66 15 61 1 . 66 15 66 16 18446744073709551615 4 type 66 16 66 20 68 1 . 66 20 66 21 69 5 IsInt 66 21 66 26 69 1 ( 66 26 66 27 69 1 ) 66 27 66 28 69 1 ) 66 28 66 29 18446744073709551615 1 { 67 3 67 4 18446744073709551615 8 byteCode 68 4 68 12 55 1 . 68 12 68 13 34 9 push_back 68 13 68 22 34 1 ( 68 22 68 23 34 13 pop_local_int 68 23 68 36 70 1 ) 68 36 68 37 34 1 ; 68 37 68 38 18446744073709551615 1 } 69 3 69 4 18446744073709551615 4 else 70 3 70 7 18446744073709551615 2 if 70 8 70 10 18446744073709551615 1 ( 70 11 70 12 18446744073709551615 8 variable 70 12 70 20 61 1 . 70 20 70 21 18446744073709551615 4 type 70 21 70 25 68 1 . 70 25 70 26 71 6 IsLong 70 26 70 32 71 1 ( 70 32 70 33 71 1 ) 70 33 70 34 71 1 ) 70 34 70 35 18446744073709551615 1 { 71 3 71 4 18446744073709551615 8 byteCode 72 4 72 12 55 1 . 72 12 72 13 34 9 push_back 72 13 72 22 34 1 ( 72 22 72 23 34 14 pop_local_long 72 23 72 37 72 1 ) 72 37 72 38 34 1 ; 72 38 72 39 18446744073709551615 1 } 73 3 73 4 18446744073709551615 4 else 74 3 74 7 18446744073709551615 2 if 74 8 74 10 18446744073709551615 1 ( 74 11 74 12 18446744073709551615 8 variable 74 12 74 20 61 1 . 74 20 74 21 18446744073709551615 4 type 74 21 74 25 68 1 . 74 25 74 26 73 7 IsFloat 74 26 74 33 73 1 ( 74 33 74 34 73 1 ) 74 34 74 35 73 1 ) 74 35 74 36 18446744073709551615 1 { 75 3 75 4 18446744073709551615 8 byteCode 76 4 76 12 55 1 . 76 12 76 13 34 9 push_back 76 13 76 22 34 1 ( 76 22 76 23 34 15 pop_local_float 76 23 76 38 74 1 ) 76 38 76 39 34 1 ; 76 39 76 40 18446744073709551615 1 } 77 3 77 4 18446744073709551615 4 else 78 3 78 7 18446744073709551615 2 if 78 8 78 10 18446744073709551615 1 ( 78 11 78 12 18446744073709551615 8 variable 78 12 78 20 61 1 . 78 20 78 21 18446744073709551615 4 type 78 21 78 25 68 1 . 78 25 78 26 75 8 IsDouble 78 26 78 34 75 1 ( 78 34 78 35 75 1 ) 78 35 78 36 75 1 ) 78 36 78 37 18446744073709551615 1 { 79 3 79 4 18446744073709551615 8 byteCode 80 4 80 12 55 1 . 80 12 80 13 34 9 push_back 80 13 80 22 34 1 ( 80 22 80 23 34 16 pop_local_double 80 23 80 39 76 1 ) 80 39 80 40 34 1 ; 80 40 80 41 18446744073709551615 1 } 81 3 81 4 18446744073709551615 4 else 82 3 82 7 18446744073709551615 2 if 82 8 82 10 18446744073709551615 1 ( 82 11 82 12 18446744073709551615 8 variable 82 12 82 20 61 1 . 82 20 82 21 18446744073709551615 4 type 82 21 82 25 68 1 . 82 25 82 26 77 8 IsString 82 26 82 34 77 1 ( 82 34 82 35 77 1 ) 82 35 82 36 77 1 ) 82 36 82 37 18446744073709551615 1 { 83 3 83 4 18446744073709551615 8 byteCode 84 4 84 12 55 1 . 84 12 84 13 34 9 push_back 84 13 84 22 34 1 ( 84 22 84 23 34 16 pop_local_string 84 23 84 39 78 1 ) 84 39 84 40 34 1 ; 84 40 84 41 18446744073709551615 1 } 85 3 85 4 18446744073709551615 4 else 86 3 86 7 18446744073709551615 1 { 87 3 87 4 18446744073709551615 5 throw 88 4 88 9 18446744073709551615 7 wstring 88 10 88 17 79 1 ( 88 17 88 18 80 30 L"not supported variable type" 88 18 88 48 18446744073709551615 1 ) 88 48 88 49 80 1 ; 88 49 88 50 18446744073709551615 1 } 89 3 89 4 18446744073709551615 8 byteCode 90 3 90 11 55 1 . 90 11 90 12 34 9 push_back 90 12 90 21 34 1 ( 90 21 90 22 34 6 offset 90 22 90 28 65 1 ) 90 28 90 29 34 1 ; 90 29 90 30 18446744073709551615 1 } 91 2 91 3 18446744073709551615 3 for 92 2 92 5 18446744073709551615 1 ( 92 6 92 7 18446744073709551615 4 auto 92 7 92 11 18446744073709551615 1 & 92 11 92 12 18446744073709551615 1 e 92 13 92 14 81 1 : 92 15 92 16 26 8 function 92 17 92 25 54 1 . 92 25 92 26 18446744073709551615 11 expressions 92 26 92 37 82 1 ) 92 37 92 38 18446744073709551615 1 { 93 2 93 3 18446744073709551615 1 e 94 3 94 4 81 2 -> 94 4 94 6 29 6 Accept 94 6 94 12 29 1 ( 94 12 94 13 29 4 this 94 13 94 17 18446744073709551615 1 ) 94 17 94 18 29 1 ; 94 18 94 19 18446744073709551615 1 } 95 2 95 3 18446744073709551615 7 int32_t 96 2 96 9 64 6 offset 96 10 96 16 83 1 = 96 17 96 18 18446744073709551615 8 function 96 19 96 27 54 1 . 96 27 96 28 18446744073709551615 8 location 96 28 96 36 84 1 . 96 36 96 37 18446744073709551615 6 offset 96 37 96 43 67 1 ; 96 43 96 44 18446744073709551615 7 int32_t 97 2 97 9 64 9 stackSize 97 10 97 19 85 1 = 97 20 97 21 18446744073709551615 1 0 97 22 97 23 18446744073709551615 1 ; 97 23 97 24 18446744073709551615 7 int32_t 98 2 98 9 64 9 argsCount 98 10 98 19 86 1 = 98 20 98 21 18446744073709551615 8 function 98 22 98 30 54 1 . 98 30 98 31 18446744073709551615 10 parameters 98 31 98 41 87 1 . 98 41 98 42 37 4 size 98 42 98 46 37 1 ( 98 46 98 47 37 1 ) 98 47 98 48 37 1 ; 98 48 98 49 18446744073709551615 7 int32_t 99 2 99 9 64 11 localsCount 99 10 99 21 88 1 = 99 22 99 23 18446744073709551615 8 function 99 24 99 32 54 1 . 99 32 99 33 18446744073709551615 9 variables 99 33 99 42 62 1 . 99 42 99 43 37 4 size 99 43 99 47 37 1 ( 99 47 99 48 37 1 ) 99 48 99 49 37 1 ; 99 49 99 50 18446744073709551615 6 return 100 2 100 8 18446744073709551615 16 CompiledFunction 100 9 100 25 23 1 ( 100 25 100 26 23 6 offset 100 26 100 32 83 1 , 100 32 100 33 23 9 stackSize 100 34 100 43 85 1 , 100 43 100 44 23 9 argsCount 100 45 100 54 86 1 , 100 54 100 55 23 11 localsCount 100 56 100 67 88 1 , 100 67 100 68 23 14 constantsCount 101 8 101 22 59 1 , 101 22 101 23 23 12 constantPool 101 24 101 36 58 1 , 101 36 101 37 23 8 byteCode 101 38 101 46 55 1 ) 101 46 101 47 23 1 ; 101 47 101 48 18446744073709551615 1 } 102 1 102 2 18446744073709551615 4 void 103 1 103 5 18446744073709551615 8 Compiler 103 6 103 14 2 2 :: 103 14 103 16 89 5 Visit 103 16 103 21 89 1 ( 103 21 103 22 89 18 ConstantExpression 103 22 103 40 90 1 * 103 40 103 41 18446744073709551615 4 node 103 42 103 46 91 1 ) 103 46 103 47 89 1 { 104 1 104 2 18446744073709551615 3 any 105 2 105 5 92 5 value 105 6 105 11 93 1 = 105 12 105 13 18446744073709551615 4 node 105 14 105 18 91 2 -> 105 18 105 20 18446744073709551615 5 value 105 20 105 25 94 1 ; 105 25 105 26 18446744073709551615 2 if 106 2 106 4 18446744073709551615 1 ( 106 5 106 6 18446744073709551615 5 value 106 6 106 11 93 1 . 106 11 106 12 95 4 type 106 12 106 16 95 1 ( 106 16 106 17 95 1 ) 106 17 106 18 95 2 == 106 19 106 21 96 6 typeid 106 22 106 28 18446744073709551615 1 ( 106 28 106 29 18446744073709551615 7 int32_t 106 29 106 36 64 1 ) 106 36 106 37 18446744073709551615 1 ) 106 37 106 38 18446744073709551615 1 { 107 2 107 3 18446744073709551615 12 constantPool 108 3 108 15 58 1 . 108 15 108 16 34 9 push_back 108 16 108 25 34 1 ( 108 25 108 26 34 12 constant_int 108 26 108 38 97 1 ) 108 38 108 39 34 1 ; 108 39 108 40 18446744073709551615 10 ConvertInt 109 3 109 13 98 1 ( 109 13 109 14 98 12 constantPool 109 14 109 26 58 1 , 109 26 109 27 98 8 any_cast 109 28 109 36 99 1 < 109 36 109 37 99 7 int32_t 109 37 109 44 64 1 > 109 44 109 45 99 1 ( 109 45 109 46 99 5 value 109 46 109 51 93 1 ) 109 51 109 52 99 1 ) 109 52 109 53 98 1 ; 109 53 109 54 18446744073709551615 8 byteCode 110 3 110 11 55 1 . 110 11 110 12 34 9 push_back 110 12 110 21 34 1 ( 110 21 110 22 34 17 push_constant_int 110 22 110 39 100 1 ) 110 39 110 40 34 1 ; 110 40 110 41 18446744073709551615 1 } 111 2 111 3 18446744073709551615 4 else 112 2 112 6 18446744073709551615 2 if 112 7 112 9 18446744073709551615 1 ( 112 10 112 11 18446744073709551615 5 value 112 11 112 16 93 1 . 112 16 112 17 95 4 type 112 17 112 21 95 1 ( 112 21 112 22 95 1 ) 112 22 112 23 95 2 == 112 24 112 26 96 6 typeid 112 27 112 33 18446744073709551615 1 ( 112 33 112 34 18446744073709551615 7 int64_t 112 34 112 41 101 1 ) 112 41 112 42 18446744073709551615 1 ) 112 42 112 43 18446744073709551615 1 { 113 2 113 3 18446744073709551615 12 constantPool 114 3 114 15 58 1 . 114 15 114 16 34 9 push_back 114 16 114 25 34 1 ( 114 25 114 26 34 12 constant_int 114 26 114 38 97 1 ) 114 38 114 39 34 1 ; 114 39 114 40 18446744073709551615 11 ConvertLong 115 3 115 14 102 1 ( 115 14 115 15 102 12 constantPool 115 15 115 27 58 1 , 115 27 115 28 102 8 any_cast 115 29 115 37 99 1 < 115 37 115 38 99 7 int64_t 115 38 115 45 101 1 > 115 45 115 46 99 1 ( 115 46 115 47 99 5 value 115 47 115 52 93 1 ) 115 52 115 53 99 1 ) 115 53 115 54 102 1 ; 115 54 115 55 18446744073709551615 8 byteCode 116 3 116 11 55 1 . 116 11 116 12 34 9 push_back 116 12 116 21 34 1 ( 116 21 116 22 34 18 push_constant_long 116 22 116 40 103 1 ) 116 40 116 41 34 1 ; 116 41 116 42 18446744073709551615 1 } 117 2 117 3 18446744073709551615 4 else 118 2 118 6 18446744073709551615 2 if 118 7 118 9 18446744073709551615 1 ( 118 10 118 11 18446744073709551615 5 value 118 11 118 16 93 1 . 118 16 118 17 95 4 type 118 17 118 21 95 1 ( 118 21 118 22 95 1 ) 118 22 118 23 95 2 == 118 24 118 26 96 6 typeid 118 27 118 33 18446744073709551615 1 ( 118 33 118 34 18446744073709551615 5 float 118 34 118 39 18446744073709551615 1 ) 118 39 118 40 18446744073709551615 1 ) 118 40 118 41 18446744073709551615 1 { 119 2 119 3 18446744073709551615 12 constantPool 120 3 120 15 58 1 . 120 15 120 16 34 9 push_back 120 16 120 25 34 1 ( 120 25 120 26 34 12 constant_int 120 26 120 38 97 1 ) 120 38 120 39 34 1 ; 120 39 120 40 18446744073709551615 12 ConvertFloat 121 3 121 15 104 1 ( 121 15 121 16 104 12 constantPool 121 16 121 28 58 1 , 121 28 121 29 104 8 any_cast 121 30 121 38 99 1 < 121 38 121 39 99 5 float 121 39 121 44 18446744073709551615 1 > 121 44 121 45 99 1 ( 121 45 121 46 99 5 value 121 46 121 51 93 1 ) 121 51 121 52 99 1 ) 121 52 121 53 104 1 ; 121 53 121 54 18446744073709551615 8 byteCode 122 3 122 11 55 1 . 122 11 122 12 34 9 push_back 122 12 122 21 34 1 ( 122 21 122 22 34 19 push_constant_float 122 22 122 41 105 1 ) 122 41 122 42 34 1 ; 122 42 122 43 18446744073709551615 1 } 123 2 123 3 18446744073709551615 4 else 124 2 124 6 18446744073709551615 2 if 124 7 124 9 18446744073709551615 1 ( 124 10 124 11 18446744073709551615 5 value 124 11 124 16 93 1 . 124 16 124 17 95 4 type 124 17 124 21 95 1 ( 124 21 124 22 95 1 ) 124 22 124 23 95 2 == 124 24 124 26 96 6 typeid 124 27 124 33 18446744073709551615 1 ( 124 33 124 34 18446744073709551615 6 double 124 34 124 40 18446744073709551615 1 ) 124 40 124 41 18446744073709551615 1 ) 124 41 124 42 18446744073709551615 1 { 125 2 125 3 18446744073709551615 12 constantPool 126 3 126 15 58 1 . 126 15 126 16 34 9 push_back 126 16 126 25 34 1 ( 126 25 126 26 34 12 constant_int 126 26 126 38 97 1 ) 126 38 126 39 34 1 ; 126 39 126 40 18446744073709551615 13 ConvertDouble 127 3 127 16 106 1 ( 127 16 127 17 106 12 constantPool 127 17 127 29 58 1 , 127 29 127 30 106 8 any_cast 127 31 127 39 99 1 < 127 39 127 40 99 6 double 127 40 127 46 18446744073709551615 1 > 127 46 127 47 99 1 ( 127 47 127 48 99 5 value 127 48 127 53 93 1 ) 127 53 127 54 99 1 ) 127 54 127 55 106 1 ; 127 55 127 56 18446744073709551615 8 byteCode 128 3 128 11 55 1 . 128 11 128 12 34 9 push_back 128 12 128 21 34 1 ( 128 21 128 22 34 20 push_constant_double 128 22 128 42 107 1 ) 128 42 128 43 34 1 ; 128 43 128 44 18446744073709551615 1 } 129 2 129 3 18446744073709551615 4 else 130 2 130 6 18446744073709551615 2 if 130 7 130 9 18446744073709551615 1 ( 130 10 130 11 18446744073709551615 5 value 130 11 130 16 93 1 . 130 16 130 17 95 4 type 130 17 130 21 95 1 ( 130 21 130 22 95 1 ) 130 22 130 23 95 2 == 130 24 130 26 96 6 typeid 130 27 130 33 18446744073709551615 1 ( 130 33 130 34 18446744073709551615 7 wchar_t 130 34 130 41 18446744073709551615 1 ) 130 41 130 42 18446744073709551615 1 ) 130 42 130 43 18446744073709551615 1 { 131 2 131 3 18446744073709551615 12 constantPool 132 3 132 15 58 1 . 132 15 132 16 34 9 push_back 132 16 132 25 34 1 ( 132 25 132 26 34 12 constant_int 132 26 132 38 97 1 ) 132 38 132 39 34 1 ; 132 39 132 40 18446744073709551615 10 ConvertInt 133 3 133 13 98 1 ( 133 13 133 14 98 12 constantPool 133 14 133 26 58 1 , 133 26 133 27 98 8 any_cast 133 28 133 36 99 1 < 133 36 133 37 99 7 int32_t 133 37 133 44 64 1 > 133 44 133 45 99 1 ( 133 45 133 46 99 5 value 133 46 133 51 93 1 ) 133 51 133 52 99 1 ) 133 52 133 53 98 1 ; 133 53 133 54 18446744073709551615 8 byteCode 134 3 134 11 55 1 . 134 11 134 12 34 9 push_back 134 12 134 21 34 1 ( 134 21 134 22 34 17 push_constant_int 134 22 134 39 100 1 ) 134 39 134 40 34 1 ; 134 40 134 41 18446744073709551615 1 } 135 2 135 3 18446744073709551615 4 else 136 2 136 6 18446744073709551615 2 if 136 7 136 9 18446744073709551615 1 ( 136 10 136 11 18446744073709551615 5 value 136 11 136 16 93 1 . 136 16 136 17 95 4 type 136 17 136 21 95 1 ( 136 21 136 22 95 1 ) 136 22 136 23 95 2 == 136 24 136 26 96 6 typeid 136 27 136 33 18446744073709551615 1 ( 136 33 136 34 18446744073709551615 7 wstring 136 34 136 41 79 1 ) 136 41 136 42 18446744073709551615 1 ) 136 42 136 43 18446744073709551615 1 { 137 2 137 3 18446744073709551615 12 constantPool 138 3 138 15 58 1 . 138 15 138 16 34 9 push_back 138 16 138 25 34 1 ( 138 25 138 26 34 12 constant_int 138 26 138 38 97 1 ) 138 38 138 39 34 1 ; 138 39 138 40 18446744073709551615 13 ConvertString 139 3 139 16 108 1 ( 139 16 139 17 108 12 constantPool 139 17 139 29 58 1 , 139 29 139 30 108 8 any_cast 139 31 139 39 99 1 < 139 39 139 40 99 7 wstring 139 40 139 47 79 1 > 139 47 139 48 99 1 ( 139 48 139 49 99 5 value 139 49 139 54 93 1 ) 139 54 139 55 99 1 ) 139 55 139 56 108 1 ; 139 56 139 57 18446744073709551615 8 byteCode 140 3 140 11 55 1 . 140 11 140 12 34 9 push_back 140 12 140 21 34 1 ( 140 21 140 22 34 20 push_constant_string 140 22 140 42 109 1 ) 140 42 140 43 34 1 ; 140 43 140 44 18446744073709551615 1 } 141 2 141 3 18446744073709551615 4 else 142 2 142 6 18446744073709551615 1 { 143 2 143 3 18446744073709551615 5 throw 144 3 144 8 18446744073709551615 7 wstring 144 9 144 16 79 1 ( 144 16 144 17 80 17 L"wrong constant" 144 17 144 34 18446744073709551615 1 ) 144 34 144 35 80 1 ; 144 35 144 36 18446744073709551615 1 } 145 2 145 3 18446744073709551615 8 byteCode 146 2 146 10 55 1 . 146 10 146 11 34 9 push_back 146 11 146 20 34 1 ( 146 20 146 21 34 14 constantsCount 146 21 146 35 59 1 ) 146 35 146 36 34 1 ; 146 36 146 37 18446744073709551615 14 constantsCount 147 2 147 16 59 2 ++ 147 16 147 18 18446744073709551615 1 ; 147 18 147 19 18446744073709551615 1 } 148 1 148 2 18446744073709551615 4 void 149 1 149 5 18446744073709551615 8 Compiler 149 6 149 14 2 2 :: 149 14 149 16 89 5 Visit 149 16 149 21 89 1 ( 149 21 149 22 89 15 UnaryExpression 149 22 149 37 110 1 * 149 37 149 38 18446744073709551615 4 node 149 39 149 43 111 1 ) 149 43 149 44 89 1 { 150 1 150 2 18446744073709551615 4 node 151 2 151 6 111 2 -> 151 6 151 8 18446744073709551615 7 operand 151 8 151 15 112 2 -> 151 15 151 17 29 6 Accept 151 17 151 23 29 1 ( 151 23 151 24 29 4 this 151 24 151 28 18446744073709551615 1 ) 151 28 151 29 29 1 ; 151 29 151 30 18446744073709551615 2 if 152 2 152 4 18446744073709551615 1 ( 152 5 152 6 18446744073709551615 4 node 152 6 152 10 111 2 -> 152 10 152 12 18446744073709551615 4 type 152 12 152 16 113 1 . 152 16 152 17 69 5 IsInt 152 17 152 22 69 1 ( 152 22 152 23 69 1 ) 152 23 152 24 69 1 ) 152 24 152 25 18446744073709551615 1 { 153 2 153 3 18446744073709551615 2 if 154 3 154 5 18446744073709551615 1 ( 154 6 154 7 18446744073709551615 4 node 154 7 154 11 111 2 -> 154 11 154 13 18446744073709551615 4 kind 154 13 154 17 114 2 == 154 18 154 20 18446744073709551615 14 ExpressionKind 154 21 154 35 115 2 :: 154 35 154 37 18446744073709551615 9 UnaryPlus 154 37 154 46 116 1 ) 154 46 154 47 18446744073709551615 1 { 155 3 155 4 18446744073709551615 1 } 156 3 156 4 18446744073709551615 4 else 157 3 157 7 18446744073709551615 2 if 157 8 157 10 18446744073709551615 1 ( 157 11 157 12 18446744073709551615 4 node 157 12 157 16 111 2 -> 157 16 157 18 18446744073709551615 4 kind 157 18 157 22 114 2 == 157 23 157 25 18446744073709551615 14 ExpressionKind 157 26 157 40 115 2 :: 157 40 157 42 18446744073709551615 10 UnaryMinus 157 42 157 52 117 1 ) 157 52 157 53 18446744073709551615 1 { 158 3 158 4 18446744073709551615 8 byteCode 159 4 159 12 55 1 . 159 12 159 13 34 9 push_back 159 13 159 22 34 1 ( 159 22 159 23 34 9 minus_int 159 23 159 32 118 1 ) 159 32 159 33 34 1 ; 159 33 159 34 18446744073709551615 1 } 160 3 160 4 18446744073709551615 4 else 161 3 161 7 18446744073709551615 1 { 162 3 162 4 18446744073709551615 5 throw 163 4 163 9 18446744073709551615 7 wstring 163 10 163 17 79 1 ( 163 17 163 18 80 46 L"wrong unary operation, where operand is int" 163 18 163 64 18446744073709551615 1 ) 163 64 163 65 80 1 ; 163 65 163 66 18446744073709551615 1 } 164 3 164 4 18446744073709551615 1 } 165 2 165 3 18446744073709551615 4 else 166 2 166 6 18446744073709551615 2 if 166 7 166 9 18446744073709551615 1 ( 166 10 166 11 18446744073709551615 4 node 166 11 166 15 111 2 -> 166 15 166 17 18446744073709551615 4 type 166 17 166 21 113 1 . 166 21 166 22 71 6 IsLong 166 22 166 28 71 1 ( 166 28 166 29 71 1 ) 166 29 166 30 71 1 ) 166 30 166 31 18446744073709551615 1 { 167 2 167 3 18446744073709551615 2 if 168 3 168 5 18446744073709551615 1 ( 168 6 168 7 18446744073709551615 4 node 168 7 168 11 111 2 -> 168 11 168 13 18446744073709551615 4 kind 168 13 168 17 114 2 == 168 18 168 20 18446744073709551615 14 ExpressionKind 168 21 168 35 115 2 :: 168 35 168 37 18446744073709551615 9 UnaryPlus 168 37 168 46 116 1 ) 168 46 168 47 18446744073709551615 1 { 169 3 169 4 18446744073709551615 1 } 170 3 170 4 18446744073709551615 4 else 171 3 171 7 18446744073709551615 2 if 171 8 171 10 18446744073709551615 1 ( 171 11 171 12 18446744073709551615 4 node 171 12 171 16 111 2 -> 171 16 171 18 18446744073709551615 4 kind 171 18 171 22 114 2 == 171 23 171 25 18446744073709551615 14 ExpressionKind 171 26 171 40 115 2 :: 171 40 171 42 18446744073709551615 10 UnaryMinus 171 42 171 52 117 1 ) 171 52 171 53 18446744073709551615 1 { 172 3 172 4 18446744073709551615 8 byteCode 173 4 173 12 55 1 . 173 12 173 13 34 9 push_back 173 13 173 22 34 1 ( 173 22 173 23 34 10 minus_long 173 23 173 33 119 1 ) 173 33 173 34 34 1 ; 173 34 173 35 18446744073709551615 1 } 174 3 174 4 18446744073709551615 4 else 175 3 175 7 18446744073709551615 1 { 176 3 176 4 18446744073709551615 5 throw 177 4 177 9 18446744073709551615 7 wstring 177 10 177 17 79 1 ( 177 17 177 18 80 47 L"wrong unary operation, where operand is long" 177 18 177 65 18446744073709551615 1 ) 177 65 177 66 80 1 ; 177 66 177 67 18446744073709551615 1 } 178 3 178 4 18446744073709551615 1 } 179 2 179 3 18446744073709551615 4 else 180 2 180 6 18446744073709551615 2 if 180 7 180 9 18446744073709551615 1 ( 180 10 180 11 18446744073709551615 4 node 180 11 180 15 111 2 -> 180 15 180 17 18446744073709551615 4 type 180 17 180 21 113 1 . 180 21 180 22 73 7 IsFloat 180 22 180 29 73 1 ( 180 29 180 30 73 1 ) 180 30 180 31 73 1 ) 180 31 180 32 18446744073709551615 1 { 181 2 181 3 18446744073709551615 2 if 182 3 182 5 18446744073709551615 1 ( 182 6 182 7 18446744073709551615 4 node 182 7 182 11 111 2 -> 182 11 182 13 18446744073709551615 4 kind 182 13 182 17 114 2 == 182 18 182 20 18446744073709551615 14 ExpressionKind 182 21 182 35 115 2 :: 182 35 182 37 18446744073709551615 9 UnaryPlus 182 37 182 46 116 1 ) 182 46 182 47 18446744073709551615 1 { 183 3 183 4 18446744073709551615 1 } 184 3 184 4 18446744073709551615 4 else 185 3 185 7 18446744073709551615 2 if 185 8 185 10 18446744073709551615 1 ( 185 11 185 12 18446744073709551615 4 node 185 12 185 16 111 2 -> 185 16 185 18 18446744073709551615 4 kind 185 18 185 22 114 2 == 185 23 185 25 18446744073709551615 14 ExpressionKind 185 26 185 40 115 2 :: 185 40 185 42 18446744073709551615 10 UnaryMinus 185 42 185 52 117 1 ) 185 52 185 53 18446744073709551615 1 { 186 3 186 4 18446744073709551615 8 byteCode 187 4 187 12 55 1 . 187 12 187 13 34 9 push_back 187 13 187 22 34 1 ( 187 22 187 23 34 11 minus_float 187 23 187 34 120 1 ) 187 34 187 35 34 1 ; 187 35 187 36 18446744073709551615 1 } 188 3 188 4 18446744073709551615 4 else 189 3 189 7 18446744073709551615 1 { 190 3 190 4 18446744073709551615 5 throw 191 4 191 9 18446744073709551615 7 wstring 191 10 191 17 79 1 ( 191 17 191 18 80 48 L"wrong unary operation, where operand is float" 191 18 191 66 18446744073709551615 1 ) 191 66 191 67 80 1 ; 191 67 191 68 18446744073709551615 1 } 192 3 192 4 18446744073709551615 1 } 193 2 193 3 18446744073709551615 4 else 194 2 194 6 18446744073709551615 2 if 194 7 194 9 18446744073709551615 1 ( 194 10 194 11 18446744073709551615 4 node 194 11 194 15 111 2 -> 194 15 194 17 18446744073709551615 4 type 194 17 194 21 113 1 . 194 21 194 22 75 8 IsDouble 194 22 194 30 75 1 ( 194 30 194 31 75 1 ) 194 31 194 32 75 1 ) 194 32 194 33 18446744073709551615 1 { 195 2 195 3 18446744073709551615 2 if 196 3 196 5 18446744073709551615 1 ( 196 6 196 7 18446744073709551615 4 node 196 7 196 11 111 2 -> 196 11 196 13 18446744073709551615 4 kind 196 13 196 17 114 2 == 196 18 196 20 18446744073709551615 14 ExpressionKind 196 21 196 35 115 2 :: 196 35 196 37 18446744073709551615 9 UnaryPlus 196 37 196 46 116 1 ) 196 46 196 47 18446744073709551615 1 { 197 3 197 4 18446744073709551615 1 } 198 3 198 4 18446744073709551615 4 else 199 3 199 7 18446744073709551615 2 if 199 8 199 10 18446744073709551615 1 ( 199 11 199 12 18446744073709551615 4 node 199 12 199 16 111 2 -> 199 16 199 18 18446744073709551615 4 kind 199 18 199 22 114 2 == 199 23 199 25 18446744073709551615 14 ExpressionKind 199 26 199 40 115 2 :: 199 40 199 42 18446744073709551615 10 UnaryMinus 199 42 199 52 117 1 ) 199 52 199 53 18446744073709551615 1 { 200 3 200 4 18446744073709551615 8 byteCode 201 4 201 12 55 1 . 201 12 201 13 34 9 push_back 201 13 201 22 34 1 ( 201 22 201 23 34 12 minus_double 201 23 201 35 121 1 ) 201 35 201 36 34 1 ; 201 36 201 37 18446744073709551615 1 } 202 3 202 4 18446744073709551615 4 else 203 3 203 7 18446744073709551615 1 { 204 3 204 4 18446744073709551615 5 throw 205 4 205 9 18446744073709551615 7 wstring 205 10 205 17 79 1 ( 205 17 205 18 80 49 L"wrong unary operation, where operand is double" 205 18 205 67 18446744073709551615 1 ) 205 67 205 68 80 1 ; 205 68 205 69 18446744073709551615 1 } 206 3 206 4 18446744073709551615 1 } 207 2 207 3 18446744073709551615 4 else 208 2 208 6 18446744073709551615 2 if 208 7 208 9 18446744073709551615 1 ( 208 10 208 11 18446744073709551615 4 node 208 11 208 15 111 2 -> 208 15 208 17 18446744073709551615 4 type 208 17 208 21 113 1 . 208 21 208 22 122 9 IsBoolean 208 22 208 31 122 1 ( 208 31 208 32 122 1 ) 208 32 208 33 122 2 && 208 34 208 36 18446744073709551615 4 node 208 37 208 41 111 2 -> 208 41 208 43 18446744073709551615 4 kind 208 43 208 47 114 2 == 208 48 208 50 18446744073709551615 14 ExpressionKind 208 51 208 65 115 2 :: 208 65 208 67 18446744073709551615 3 Not 208 67 208 70 123 1 ) 208 70 208 71 18446744073709551615 1 { 209 2 209 3 18446744073709551615 8 byteCode 210 3 210 11 55 1 . 210 11 210 12 34 9 push_back 210 12 210 21 34 1 ( 210 21 210 22 34 11 logical_not 210 22 210 33 124 1 ) 210 33 210 34 34 1 ; 210 34 210 35 18446744073709551615 1 } 211 2 211 3 18446744073709551615 4 else 212 2 212 6 18446744073709551615 1 { 213 2 213 3 18446744073709551615 5 throw 214 3 214 8 18446744073709551615 7 wstring 214 9 214 16 79 1 ( 214 16 214 17 80 24 L"wrong unary operation" 214 17 214 41 18446744073709551615 1 ) 214 41 214 42 80 1 ; 214 42 214 43 18446744073709551615 1 } 215 2 215 3 18446744073709551615 1 } 216 1 216 2 18446744073709551615 4 void 217 1 217 5 18446744073709551615 8 Compiler 217 6 217 14 2 2 :: 217 14 217 16 89 5 Visit 217 16 217 21 89 1 ( 217 21 217 22 89 16 BinaryExpression 217 22 217 38 125 1 * 217 38 217 39 18446744073709551615 4 node 217 40 217 44 126 1 ) 217 44 217 45 89 1 { 218 1 218 2 18446744073709551615 4 node 219 2 219 6 126 2 -> 219 6 219 8 18446744073709551615 4 left 219 8 219 12 127 2 -> 219 12 219 14 29 6 Accept 219 14 219 20 29 1 ( 219 20 219 21 29 4 this 219 21 219 25 18446744073709551615 1 ) 219 25 219 26 29 1 ; 219 26 219 27 18446744073709551615 4 node 220 2 220 6 126 2 -> 220 6 220 8 18446744073709551615 5 right 220 8 220 13 128 2 -> 220 13 220 15 29 6 Accept 220 15 220 21 29 1 ( 220 21 220 22 29 4 this 220 22 220 26 18446744073709551615 1 ) 220 26 220 27 29 1 ; 220 27 220 28 18446744073709551615 2 if 221 2 221 4 18446744073709551615 1 ( 221 5 221 6 18446744073709551615 4 node 221 6 221 10 126 2 -> 221 10 221 12 18446744073709551615 4 type 221 12 221 16 113 1 . 221 16 221 17 69 5 IsInt 221 17 221 22 69 1 ( 221 22 221 23 69 1 ) 221 23 221 24 69 1 ) 221 24 221 25 18446744073709551615 1 { 222 2 222 3 18446744073709551615 2 if 223 3 223 5 18446744073709551615 1 ( 223 6 223 7 18446744073709551615 4 node 223 7 223 11 126 2 -> 223 11 223 13 18446744073709551615 4 kind 223 13 223 17 114 2 == 223 18 223 20 18446744073709551615 14 ExpressionKind 223 21 223 35 115 2 :: 223 35 223 37 18446744073709551615 3 Add 223 37 223 40 129 1 ) 223 40 223 41 18446744073709551615 1 { 224 3 224 4 18446744073709551615 8 byteCode 225 4 225 12 55 1 . 225 12 225 13 34 9 push_back 225 13 225 22 34 1 ( 225 22 225 23 34 7 add_int 225 23 225 30 130 1 ) 225 30 225 31 34 1 ; 225 31 225 32 18446744073709551615 1 } 226 3 226 4 18446744073709551615 4 else 227 3 227 7 18446744073709551615 2 if 227 8 227 10 18446744073709551615 1 ( 227 11 227 12 18446744073709551615 4 node 227 12 227 16 126 2 -> 227 16 227 18 18446744073709551615 4 kind 227 18 227 22 114 2 == 227 23 227 25 18446744073709551615 14 ExpressionKind 227 26 227 40 115 2 :: 227 40 227 42 18446744073709551615 8 Subtract 227 42 227 50 131 1 ) 227 50 227 51 18446744073709551615 1 { 228 3 228 4 18446744073709551615 8 byteCode 229 4 229 12 55 1 . 229 12 229 13 34 9 push_back 229 13 229 22 34 1 ( 229 22 229 23 34 7 sub_int 229 23 229 30 132 1 ) 229 30 229 31 34 1 ; 229 31 229 32 18446744073709551615 1 } 230 3 230 4 18446744073709551615 4 else 231 3 231 7 18446744073709551615 2 if 231 8 231 10 18446744073709551615 1 ( 231 11 231 12 18446744073709551615 4 node 231 12 231 16 126 2 -> 231 16 231 18 18446744073709551615 4 kind 231 18 231 22 114 2 == 231 23 231 25 18446744073709551615 14 ExpressionKind 231 26 231 40 115 2 :: 231 40 231 42 18446744073709551615 8 Multiply 231 42 231 50 133 1 ) 231 50 231 51 18446744073709551615 1 { 232 3 232 4 18446744073709551615 8 byteCode 233 4 233 12 55 1 . 233 12 233 13 34 9 push_back 233 13 233 22 34 1 ( 233 22 233 23 34 7 mul_int 233 23 233 30 134 1 ) 233 30 233 31 34 1 ; 233 31 233 32 18446744073709551615 1 } 234 3 234 4 18446744073709551615 4 else 235 3 235 7 18446744073709551615 2 if 235 8 235 10 18446744073709551615 1 ( 235 11 235 12 18446744073709551615 4 node 235 12 235 16 126 2 -> 235 16 235 18 18446744073709551615 4 kind 235 18 235 22 114 2 == 235 23 235 25 18446744073709551615 14 ExpressionKind 235 26 235 40 115 2 :: 235 40 235 42 18446744073709551615 6 Divide 235 42 235 48 135 1 ) 235 48 235 49 18446744073709551615 1 { 236 3 236 4 18446744073709551615 8 byteCode 237 4 237 12 55 1 . 237 12 237 13 34 9 push_back 237 13 237 22 34 1 ( 237 22 237 23 34 7 div_int 237 23 237 30 136 1 ) 237 30 237 31 34 1 ; 237 31 237 32 18446744073709551615 1 } 238 3 238 4 18446744073709551615 4 else 239 3 239 7 18446744073709551615 2 if 239 8 239 10 18446744073709551615 1 ( 239 11 239 12 18446744073709551615 4 node 239 12 239 16 126 2 -> 239 16 239 18 18446744073709551615 4 kind 239 18 239 22 114 2 == 239 23 239 25 18446744073709551615 14 ExpressionKind 239 26 239 40 115 2 :: 239 40 239 42 18446744073709551615 6 Modulo 239 42 239 48 137 1 ) 239 48 239 49 18446744073709551615 1 { 240 3 240 4 18446744073709551615 8 byteCode 241 4 241 12 55 1 . 241 12 241 13 34 9 push_back 241 13 241 22 34 1 ( 241 22 241 23 34 7 mod_int 241 23 241 30 138 1 ) 241 30 241 31 34 1 ; 241 31 241 32 18446744073709551615 1 } 242 3 242 4 18446744073709551615 4 else 243 3 243 7 18446744073709551615 2 if 243 8 243 10 18446744073709551615 1 ( 243 11 243 12 18446744073709551615 4 node 243 12 243 16 126 2 -> 243 16 243 18 18446744073709551615 4 kind 243 18 243 22 114 2 == 243 23 243 25 18446744073709551615 14 ExpressionKind 243 26 243 40 115 2 :: 243 40 243 42 18446744073709551615 11 GreaterThan 243 42 243 53 139 1 ) 243 53 243 54 18446744073709551615 1 { 244 3 244 4 18446744073709551615 8 byteCode 245 4 245 12 55 1 . 245 12 245 13 34 9 push_back 245 13 245 22 34 1 ( 245 22 245 23 34 6 gt_int 245 23 245 29 140 1 ) 245 29 245 30 34 1 ; 245 30 245 31 18446744073709551615 1 } 246 3 246 4 18446744073709551615 4 else 247 3 247 7 18446744073709551615 2 if 247 8 247 10 18446744073709551615 1 ( 247 11 247 12 18446744073709551615 4 node 247 12 247 16 126 2 -> 247 16 247 18 18446744073709551615 4 kind 247 18 247 22 114 2 == 247 23 247 25 18446744073709551615 14 ExpressionKind 247 26 247 40 115 2 :: 247 40 247 42 18446744073709551615 8 LessThan 247 42 247 50 141 1 ) 247 50 247 51 18446744073709551615 1 { 248 3 248 4 18446744073709551615 8 byteCode 249 4 249 12 55 1 . 249 12 249 13 34 9 push_back 249 13 249 22 34 1 ( 249 22 249 23 34 6 lt_int 249 23 249 29 142 1 ) 249 29 249 30 34 1 ; 249 30 249 31 18446744073709551615 1 } 250 3 250 4 18446744073709551615 4 else 251 3 251 7 18446744073709551615 2 if 251 8 251 10 18446744073709551615 1 ( 251 11 251 12 18446744073709551615 4 node 251 12 251 16 126 2 -> 251 16 251 18 18446744073709551615 4 kind 251 18 251 22 114 2 == 251 23 251 25 18446744073709551615 14 ExpressionKind 251 26 251 40 115 2 :: 251 40 251 42 18446744073709551615 18 GreaterThanOrEqual 251 42 251 60 143 1 ) 251 60 251 61 18446744073709551615 1 { 252 3 252 4 18446744073709551615 8 byteCode 253 4 253 12 55 1 . 253 12 253 13 34 9 push_back 253 13 253 22 34 1 ( 253 22 253 23 34 6 ge_int 253 23 253 29 144 1 ) 253 29 253 30 34 1 ; 253 30 253 31 18446744073709551615 1 } 254 3 254 4 18446744073709551615 4 else 255 3 255 7 18446744073709551615 2 if 255 8 255 10 18446744073709551615 1 ( 255 11 255 12 18446744073709551615 4 node 255 12 255 16 126 2 -> 255 16 255 18 18446744073709551615 4 kind 255 18 255 22 114 2 == 255 23 255 25 18446744073709551615 14 ExpressionKind 255 26 255 40 115 2 :: 255 40 255 42 18446744073709551615 15 LessThanOrEqual 255 42 255 57 145 1 ) 255 57 255 58 18446744073709551615 1 { 256 3 256 4 18446744073709551615 8 byteCode 257 4 257 12 55 1 . 257 12 257 13 34 9 push_back 257 13 257 22 34 1 ( 257 22 257 23 34 6 le_int 257 23 257 29 146 1 ) 257 29 257 30 34 1 ; 257 30 257 31 18446744073709551615 1 } 258 3 258 4 18446744073709551615 4 else 259 3 259 7 18446744073709551615 2 if 259 8 259 10 18446744073709551615 1 ( 259 11 259 12 18446744073709551615 4 node 259 12 259 16 126 2 -> 259 16 259 18 18446744073709551615 4 kind 259 18 259 22 114 2 == 259 23 259 25 18446744073709551615 14 ExpressionKind 259 26 259 40 115 2 :: 259 40 259 42 18446744073709551615 5 Equal 259 42 259 47 147 1 ) 259 47 259 48 18446744073709551615 1 { 260 3 260 4 18446744073709551615 8 byteCode 261 4 261 12 55 1 . 261 12 261 13 34 9 push_back 261 13 261 22 34 1 ( 261 22 261 23 34 6 eq_int 261 23 261 29 148 1 ) 261 29 261 30 34 1 ; 261 30 261 31 18446744073709551615 1 } 262 3 262 4 18446744073709551615 4 else 263 3 263 7 18446744073709551615 2 if 263 8 263 10 18446744073709551615 1 ( 263 11 263 12 18446744073709551615 4 node 263 12 263 16 126 2 -> 263 16 263 18 18446744073709551615 4 kind 263 18 263 22 114 2 == 263 23 263 25 18446744073709551615 14 ExpressionKind 263 26 263 40 115 2 :: 263 40 263 42 18446744073709551615 8 NotEqual 263 42 263 50 149 1 ) 263 50 263 51 18446744073709551615 1 { 264 3 264 4 18446744073709551615 8 byteCode 265 4 265 12 55 1 . 265 12 265 13 34 9 push_back 265 13 265 22 34 1 ( 265 22 265 23 34 6 ne_int 265 23 265 29 150 1 ) 265 29 265 30 34 1 ; 265 30 265 31 18446744073709551615 1 } 266 3 266 4 18446744073709551615 4 else 267 3 267 7 18446744073709551615 1 { 268 3 268 4 18446744073709551615 5 throw 269 4 269 9 18446744073709551615 7 wstring 269 10 269 17 79 1 ( 269 17 269 18 80 33 L"wrong binary operation for int" 269 18 269 51 18446744073709551615 1 ) 269 51 269 52 80 1 ; 269 52 269 53 18446744073709551615 1 } 270 3 270 4 18446744073709551615 1 } 271 2 271 3 18446744073709551615 4 else 272 2 272 6 18446744073709551615 2 if 272 7 272 9 18446744073709551615 1 ( 272 10 272 11 18446744073709551615 4 node 272 11 272 15 126 2 -> 272 15 272 17 18446744073709551615 4 type 272 17 272 21 113 1 . 272 21 272 22 71 6 IsLong 272 22 272 28 71 1 ( 272 28 272 29 71 1 ) 272 29 272 30 71 1 ) 272 30 272 31 18446744073709551615 1 { 273 2 273 3 18446744073709551615 2 if 274 3 274 5 18446744073709551615 1 ( 274 6 274 7 18446744073709551615 4 node 274 7 274 11 126 2 -> 274 11 274 13 18446744073709551615 4 kind 274 13 274 17 114 2 == 274 18 274 20 18446744073709551615 14 ExpressionKind 274 21 274 35 115 2 :: 274 35 274 37 18446744073709551615 3 Add 274 37 274 40 129 1 ) 274 40 274 41 18446744073709551615 1 { 275 3 275 4 18446744073709551615 8 byteCode 276 4 276 12 55 1 . 276 12 276 13 34 9 push_back 276 13 276 22 34 1 ( 276 22 276 23 34 8 add_long 276 23 276 31 151 1 ) 276 31 276 32 34 1 ; 276 32 276 33 18446744073709551615 1 } 277 3 277 4 18446744073709551615 4 else 278 3 278 7 18446744073709551615 2 if 278 8 278 10 18446744073709551615 1 ( 278 11 278 12 18446744073709551615 4 node 278 12 278 16 126 2 -> 278 16 278 18 18446744073709551615 4 kind 278 18 278 22 114 2 == 278 23 278 25 18446744073709551615 14 ExpressionKind 278 26 278 40 115 2 :: 278 40 278 42 18446744073709551615 8 Subtract 278 42 278 50 131 1 ) 278 50 278 51 18446744073709551615 1 { 279 3 279 4 18446744073709551615 8 byteCode 280 4 280 12 55 1 . 280 12 280 13 34 9 push_back 280 13 280 22 34 1 ( 280 22 280 23 34 8 sub_long 280 23 280 31 152 1 ) 280 31 280 32 34 1 ; 280 32 280 33 18446744073709551615 1 } 281 3 281 4 18446744073709551615 4 else 282 3 282 7 18446744073709551615 2 if 282 8 282 10 18446744073709551615 1 ( 282 11 282 12 18446744073709551615 4 node 282 12 282 16 126 2 -> 282 16 282 18 18446744073709551615 4 kind 282 18 282 22 114 2 == 282 23 282 25 18446744073709551615 14 ExpressionKind 282 26 282 40 115 2 :: 282 40 282 42 18446744073709551615 8 Multiply 282 42 282 50 133 1 ) 282 50 282 51 18446744073709551615 1 { 283 3 283 4 18446744073709551615 8 byteCode 284 4 284 12 55 1 . 284 12 284 13 34 9 push_back 284 13 284 22 34 1 ( 284 22 284 23 34 8 mul_long 284 23 284 31 153 1 ) 284 31 284 32 34 1 ; 284 32 284 33 18446744073709551615 1 } 285 3 285 4 18446744073709551615 4 else 286 3 286 7 18446744073709551615 2 if 286 8 286 10 18446744073709551615 1 ( 286 11 286 12 18446744073709551615 4 node 286 12 286 16 126 2 -> 286 16 286 18 18446744073709551615 4 kind 286 18 286 22 114 2 == 286 23 286 25 18446744073709551615 14 ExpressionKind 286 26 286 40 115 2 :: 286 40 286 42 18446744073709551615 6 Divide 286 42 286 48 135 1 ) 286 48 286 49 18446744073709551615 1 { 287 3 287 4 18446744073709551615 8 byteCode 288 4 288 12 55 1 . 288 12 288 13 34 9 push_back 288 13 288 22 34 1 ( 288 22 288 23 34 8 div_long 288 23 288 31 154 1 ) 288 31 288 32 34 1 ; 288 32 288 33 18446744073709551615 1 } 289 3 289 4 18446744073709551615 4 else 290 3 290 7 18446744073709551615 2 if 290 8 290 10 18446744073709551615 1 ( 290 11 290 12 18446744073709551615 4 node 290 12 290 16 126 2 -> 290 16 290 18 18446744073709551615 4 kind 290 18 290 22 114 2 == 290 23 290 25 18446744073709551615 14 ExpressionKind 290 26 290 40 115 2 :: 290 40 290 42 18446744073709551615 6 Modulo 290 42 290 48 137 1 ) 290 48 290 49 18446744073709551615 1 { 291 3 291 4 18446744073709551615 8 byteCode 292 4 292 12 55 1 . 292 12 292 13 34 9 push_back 292 13 292 22 34 1 ( 292 22 292 23 34 8 mod_long 292 23 292 31 155 1 ) 292 31 292 32 34 1 ; 292 32 292 33 18446744073709551615 1 } 293 3 293 4 18446744073709551615 4 else 294 3 294 7 18446744073709551615 2 if 294 8 294 10 18446744073709551615 1 ( 294 11 294 12 18446744073709551615 4 node 294 12 294 16 126 2 -> 294 16 294 18 18446744073709551615 4 kind 294 18 294 22 114 2 == 294 23 294 25 18446744073709551615 14 ExpressionKind 294 26 294 40 115 2 :: 294 40 294 42 18446744073709551615 11 GreaterThan 294 42 294 53 139 1 ) 294 53 294 54 18446744073709551615 1 { 295 3 295 4 18446744073709551615 8 byteCode 296 4 296 12 55 1 . 296 12 296 13 34 9 push_back 296 13 296 22 34 1 ( 296 22 296 23 34 7 gt_long 296 23 296 30 156 1 ) 296 30 296 31 34 1 ; 296 31 296 32 18446744073709551615 1 } 297 3 297 4 18446744073709551615 4 else 298 3 298 7 18446744073709551615 2 if 298 8 298 10 18446744073709551615 1 ( 298 11 298 12 18446744073709551615 4 node 298 12 298 16 126 2 -> 298 16 298 18 18446744073709551615 4 kind 298 18 298 22 114 2 == 298 23 298 25 18446744073709551615 14 ExpressionKind 298 26 298 40 115 2 :: 298 40 298 42 18446744073709551615 8 LessThan 298 42 298 50 141 1 ) 298 50 298 51 18446744073709551615 1 { 299 3 299 4 18446744073709551615 8 byteCode 300 4 300 12 55 1 . 300 12 300 13 34 9 push_back 300 13 300 22 34 1 ( 300 22 300 23 34 7 lt_long 300 23 300 30 157 1 ) 300 30 300 31 34 1 ; 300 31 300 32 18446744073709551615 1 } 301 3 301 4 18446744073709551615 4 else 302 3 302 7 18446744073709551615 2 if 302 8 302 10 18446744073709551615 1 ( 302 11 302 12 18446744073709551615 4 node 302 12 302 16 126 2 -> 302 16 302 18 18446744073709551615 4 kind 302 18 302 22 114 2 == 302 23 302 25 18446744073709551615 14 ExpressionKind 302 26 302 40 115 2 :: 302 40 302 42 18446744073709551615 18 GreaterThanOrEqual 302 42 302 60 143 1 ) 302 60 302 61 18446744073709551615 1 { 303 3 303 4 18446744073709551615 8 byteCode 304 4 304 12 55 1 . 304 12 304 13 34 9 push_back 304 13 304 22 34 1 ( 304 22 304 23 34 7 ge_long 304 23 304 30 158 1 ) 304 30 304 31 34 1 ; 304 31 304 32 18446744073709551615 1 } 305 3 305 4 18446744073709551615 4 else 306 3 306 7 18446744073709551615 2 if 306 8 306 10 18446744073709551615 1 ( 306 11 306 12 18446744073709551615 4 node 306 12 306 16 126 2 -> 306 16 306 18 18446744073709551615 4 kind 306 18 306 22 114 2 == 306 23 306 25 18446744073709551615 14 ExpressionKind 306 26 306 40 115 2 :: 306 40 306 42 18446744073709551615 15 LessThanOrEqual 306 42 306 57 145 1 ) 306 57 306 58 18446744073709551615 1 { 307 3 307 4 18446744073709551615 8 byteCode 308 4 308 12 55 1 . 308 12 308 13 34 9 push_back 308 13 308 22 34 1 ( 308 22 308 23 34 7 le_long 308 23 308 30 159 1 ) 308 30 308 31 34 1 ; 308 31 308 32 18446744073709551615 1 } 309 3 309 4 18446744073709551615 4 else 310 3 310 7 18446744073709551615 2 if 310 8 310 10 18446744073709551615 1 ( 310 11 310 12 18446744073709551615 4 node 310 12 310 16 126 2 -> 310 16 310 18 18446744073709551615 4 kind 310 18 310 22 114 2 == 310 23 310 25 18446744073709551615 14 ExpressionKind 310 26 310 40 115 2 :: 310 40 310 42 18446744073709551615 5 Equal 310 42 310 47 147 1 ) 310 47 310 48 18446744073709551615 1 { 311 3 311 4 18446744073709551615 8 byteCode 312 4 312 12 55 1 . 312 12 312 13 34 9 push_back 312 13 312 22 34 1 ( 312 22 312 23 34 7 eq_long 312 23 312 30 160 1 ) 312 30 312 31 34 1 ; 312 31 312 32 18446744073709551615 1 } 313 3 313 4 18446744073709551615 4 else 314 3 314 7 18446744073709551615 2 if 314 8 314 10 18446744073709551615 1 ( 314 11 314 12 18446744073709551615 4 node 314 12 314 16 126 2 -> 314 16 314 18 18446744073709551615 4 kind 314 18 314 22 114 2 == 314 23 314 25 18446744073709551615 14 ExpressionKind 314 26 314 40 115 2 :: 314 40 314 42 18446744073709551615 8 NotEqual 314 42 314 50 149 1 ) 314 50 314 51 18446744073709551615 1 { 315 3 315 4 18446744073709551615 8 byteCode 316 4 316 12 55 1 . 316 12 316 13 34 9 push_back 316 13 316 22 34 1 ( 316 22 316 23 34 7 ne_long 316 23 316 30 161 1 ) 316 30 316 31 34 1 ; 316 31 316 32 18446744073709551615 1 } 317 3 317 4 18446744073709551615 4 else 318 3 318 7 18446744073709551615 1 { 319 3 319 4 18446744073709551615 5 throw 320 4 320 9 18446744073709551615 7 wstring 320 10 320 17 79 1 ( 320 17 320 18 80 34 L"wrong binary operation for long" 320 18 320 52 18446744073709551615 1 ) 320 52 320 53 80 1 ; 320 53 320 54 18446744073709551615 1 } 321 3 321 4 18446744073709551615 1 } 322 2 322 3 18446744073709551615 4 else 323 2 323 6 18446744073709551615 2 if 323 7 323 9 18446744073709551615 1 ( 323 10 323 11 18446744073709551615 4 node 323 11 323 15 126 2 -> 323 15 323 17 18446744073709551615 4 type 323 17 323 21 113 1 . 323 21 323 22 73 7 IsFloat 323 22 323 29 73 1 ( 323 29 323 30 73 1 ) 323 30 323 31 73 1 ) 323 31 323 32 18446744073709551615 1 { 324 2 324 3 18446744073709551615 2 if 325 3 325 5 18446744073709551615 1 ( 325 6 325 7 18446744073709551615 4 node 325 7 325 11 126 2 -> 325 11 325 13 18446744073709551615 4 kind 325 13 325 17 114 2 == 325 18 325 20 18446744073709551615 14 ExpressionKind 325 21 325 35 115 2 :: 325 35 325 37 18446744073709551615 3 Add 325 37 325 40 129 1 ) 325 40 325 41 18446744073709551615 1 { 326 3 326 4 18446744073709551615 8 byteCode 327 4 327 12 55 1 . 327 12 327 13 34 9 push_back 327 13 327 22 34 1 ( 327 22 327 23 34 9 add_float 327 23 327 32 162 1 ) 327 32 327 33 34 1 ; 327 33 327 34 18446744073709551615 1 } 328 3 328 4 18446744073709551615 4 else 329 3 329 7 18446744073709551615 2 if 329 8 329 10 18446744073709551615 1 ( 329 11 329 12 18446744073709551615 4 node 329 12 329 16 126 2 -> 329 16 329 18 18446744073709551615 4 kind 329 18 329 22 114 2 == 329 23 329 25 18446744073709551615 14 ExpressionKind 329 26 329 40 115 2 :: 329 40 329 42 18446744073709551615 8 Subtract 329 42 329 50 131 1 ) 329 50 329 51 18446744073709551615 1 { 330 3 330 4 18446744073709551615 8 byteCode 331 4 331 12 55 1 . 331 12 331 13 34 9 push_back 331 13 331 22 34 1 ( 331 22 331 23 34 9 sub_float 331 23 331 32 163 1 ) 331 32 331 33 34 1 ; 331 33 331 34 18446744073709551615 1 } 332 3 332 4 18446744073709551615 4 else 333 3 333 7 18446744073709551615 2 if 333 8 333 10 18446744073709551615 1 ( 333 11 333 12 18446744073709551615 4 node 333 12 333 16 126 2 -> 333 16 333 18 18446744073709551615 4 kind 333 18 333 22 114 2 == 333 23 333 25 18446744073709551615 14 ExpressionKind 333 26 333 40 115 2 :: 333 40 333 42 18446744073709551615 8 Multiply 333 42 333 50 133 1 ) 333 50 333 51 18446744073709551615 1 { 334 3 334 4 18446744073709551615 8 byteCode 335 4 335 12 55 1 . 335 12 335 13 34 9 push_back 335 13 335 22 34 1 ( 335 22 335 23 34 9 mul_float 335 23 335 32 164 1 ) 335 32 335 33 34 1 ; 335 33 335 34 18446744073709551615 1 } 336 3 336 4 18446744073709551615 4 else 337 3 337 7 18446744073709551615 2 if 337 8 337 10 18446744073709551615 1 ( 337 11 337 12 18446744073709551615 4 node 337 12 337 16 126 2 -> 337 16 337 18 18446744073709551615 4 kind 337 18 337 22 114 2 == 337 23 337 25 18446744073709551615 14 ExpressionKind 337 26 337 40 115 2 :: 337 40 337 42 18446744073709551615 6 Divide 337 42 337 48 135 1 ) 337 48 337 49 18446744073709551615 1 { 338 3 338 4 18446744073709551615 8 byteCode 339 4 339 12 55 1 . 339 12 339 13 34 9 push_back 339 13 339 22 34 1 ( 339 22 339 23 34 9 div_float 339 23 339 32 165 1 ) 339 32 339 33 34 1 ; 339 33 339 34 18446744073709551615 1 } 340 3 340 4 18446744073709551615 4 else 341 3 341 7 18446744073709551615 2 if 341 8 341 10 18446744073709551615 1 ( 341 11 341 12 18446744073709551615 4 node 341 12 341 16 126 2 -> 341 16 341 18 18446744073709551615 4 kind 341 18 341 22 114 2 == 341 23 341 25 18446744073709551615 14 ExpressionKind 341 26 341 40 115 2 :: 341 40 341 42 18446744073709551615 11 GreaterThan 341 42 341 53 139 1 ) 341 53 341 54 18446744073709551615 1 { 342 3 342 4 18446744073709551615 8 byteCode 343 4 343 12 55 1 . 343 12 343 13 34 9 push_back 343 13 343 22 34 1 ( 343 22 343 23 34 8 gt_float 343 23 343 31 166 1 ) 343 31 343 32 34 1 ; 343 32 343 33 18446744073709551615 1 } 344 3 344 4 18446744073709551615 4 else 345 3 345 7 18446744073709551615 2 if 345 8 345 10 18446744073709551615 1 ( 345 11 345 12 18446744073709551615 4 node 345 12 345 16 126 2 -> 345 16 345 18 18446744073709551615 4 kind 345 18 345 22 114 2 == 345 23 345 25 18446744073709551615 14 ExpressionKind 345 26 345 40 115 2 :: 345 40 345 42 18446744073709551615 8 LessThan 345 42 345 50 141 1 ) 345 50 345 51 18446744073709551615 1 { 346 3 346 4 18446744073709551615 8 byteCode 347 4 347 12 55 1 . 347 12 347 13 34 9 push_back 347 13 347 22 34 1 ( 347 22 347 23 34 8 lt_float 347 23 347 31 167 1 ) 347 31 347 32 34 1 ; 347 32 347 33 18446744073709551615 1 } 348 3 348 4 18446744073709551615 4 else 349 3 349 7 18446744073709551615 2 if 349 8 349 10 18446744073709551615 1 ( 349 11 349 12 18446744073709551615 4 node 349 12 349 16 126 2 -> 349 16 349 18 18446744073709551615 4 kind 349 18 349 22 114 2 == 349 23 349 25 18446744073709551615 14 ExpressionKind 349 26 349 40 115 2 :: 349 40 349 42 18446744073709551615 18 GreaterThanOrEqual 349 42 349 60 143 1 ) 349 60 349 61 18446744073709551615 1 { 350 3 350 4 18446744073709551615 8 byteCode 351 4 351 12 55 1 . 351 12 351 13 34 9 push_back 351 13 351 22 34 1 ( 351 22 351 23 34 8 ge_float 351 23 351 31 168 1 ) 351 31 351 32 34 1 ; 351 32 351 33 18446744073709551615 1 } 352 3 352 4 18446744073709551615 4 else 353 3 353 7 18446744073709551615 2 if 353 8 353 10 18446744073709551615 1 ( 353 11 353 12 18446744073709551615 4 node 353 12 353 16 126 2 -> 353 16 353 18 18446744073709551615 4 kind 353 18 353 22 114 2 == 353 23 353 25 18446744073709551615 14 ExpressionKind 353 26 353 40 115 2 :: 353 40 353 42 18446744073709551615 15 LessThanOrEqual 353 42 353 57 145 1 ) 353 57 353 58 18446744073709551615 1 { 354 3 354 4 18446744073709551615 8 byteCode 355 4 355 12 55 1 . 355 12 355 13 34 9 push_back 355 13 355 22 34 1 ( 355 22 355 23 34 8 le_float 355 23 355 31 169 1 ) 355 31 355 32 34 1 ; 355 32 355 33 18446744073709551615 1 } 356 3 356 4 18446744073709551615 4 else 357 3 357 7 18446744073709551615 2 if 357 8 357 10 18446744073709551615 1 ( 357 11 357 12 18446744073709551615 4 node 357 12 357 16 126 2 -> 357 16 357 18 18446744073709551615 4 kind 357 18 357 22 114 2 == 357 23 357 25 18446744073709551615 14 ExpressionKind 357 26 357 40 115 2 :: 357 40 357 42 18446744073709551615 5 Equal 357 42 357 47 147 1 ) 357 47 357 48 18446744073709551615 1 { 358 3 358 4 18446744073709551615 8 byteCode 359 4 359 12 55 1 . 359 12 359 13 34 9 push_back 359 13 359 22 34 1 ( 359 22 359 23 34 8 eq_float 359 23 359 31 170 1 ) 359 31 359 32 34 1 ; 359 32 359 33 18446744073709551615 1 } 360 3 360 4 18446744073709551615 4 else 361 3 361 7 18446744073709551615 2 if 361 8 361 10 18446744073709551615 1 ( 361 11 361 12 18446744073709551615 4 node 361 12 361 16 126 2 -> 361 16 361 18 18446744073709551615 4 kind 361 18 361 22 114 2 == 361 23 361 25 18446744073709551615 14 ExpressionKind 361 26 361 40 115 2 :: 361 40 361 42 18446744073709551615 8 NotEqual 361 42 361 50 149 1 ) 361 50 361 51 18446744073709551615 1 { 362 3 362 4 18446744073709551615 8 byteCode 363 4 363 12 55 1 . 363 12 363 13 34 9 push_back 363 13 363 22 34 1 ( 363 22 363 23 34 8 ne_float 363 23 363 31 171 1 ) 363 31 363 32 34 1 ; 363 32 363 33 18446744073709551615 1 } 364 3 364 4 18446744073709551615 4 else 365 3 365 7 18446744073709551615 1 { 366 3 366 4 18446744073709551615 5 throw 367 4 367 9 18446744073709551615 7 wstring 367 10 367 17 79 1 ( 367 17 367 18 80 35 L"wrong binary operation for float" 367 18 367 53 18446744073709551615 1 ) 367 53 367 54 80 1 ; 367 54 367 55 18446744073709551615 1 } 368 3 368 4 18446744073709551615 1 } 369 2 369 3 18446744073709551615 4 else 370 2 370 6 18446744073709551615 2 if 370 7 370 9 18446744073709551615 1 ( 370 10 370 11 18446744073709551615 4 node 370 11 370 15 126 2 -> 370 15 370 17 18446744073709551615 4 type 370 17 370 21 113 1 . 370 21 370 22 75 8 IsDouble 370 22 370 30 75 1 ( 370 30 370 31 75 1 ) 370 31 370 32 75 1 ) 370 32 370 33 18446744073709551615 1 { 371 2 371 3 18446744073709551615 2 if 372 3 372 5 18446744073709551615 1 ( 372 6 372 7 18446744073709551615 4 node 372 7 372 11 126 2 -> 372 11 372 13 18446744073709551615 4 kind 372 13 372 17 114 2 == 372 18 372 20 18446744073709551615 14 ExpressionKind 372 21 372 35 115 2 :: 372 35 372 37 18446744073709551615 3 Add 372 37 372 40 129 1 ) 372 40 372 41 18446744073709551615 1 { 373 3 373 4 18446744073709551615 8 byteCode 374 4 374 12 55 1 . 374 12 374 13 34 9 push_back 374 13 374 22 34 1 ( 374 22 374 23 34 10 add_double 374 23 374 33 172 1 ) 374 33 374 34 34 1 ; 374 34 374 35 18446744073709551615 1 } 375 3 375 4 18446744073709551615 4 else 376 3 376 7 18446744073709551615 2 if 376 8 376 10 18446744073709551615 1 ( 376 11 376 12 18446744073709551615 4 node 376 12 376 16 126 2 -> 376 16 376 18 18446744073709551615 4 kind 376 18 376 22 114 2 == 376 23 376 25 18446744073709551615 14 ExpressionKind 376 26 376 40 115 2 :: 376 40 376 42 18446744073709551615 8 Subtract 376 42 376 50 131 1 ) 376 50 376 51 18446744073709551615 1 { 377 3 377 4 18446744073709551615 8 byteCode 378 4 378 12 55 1 . 378 12 378 13 34 9 push_back 378 13 378 22 34 1 ( 378 22 378 23 34 10 sub_double 378 23 378 33 173 1 ) 378 33 378 34 34 1 ; 378 34 378 35 18446744073709551615 1 } 379 3 379 4 18446744073709551615 4 else 380 3 380 7 18446744073709551615 2 if 380 8 380 10 18446744073709551615 1 ( 380 11 380 12 18446744073709551615 4 node 380 12 380 16 126 2 -> 380 16 380 18 18446744073709551615 4 kind 380 18 380 22 114 2 == 380 23 380 25 18446744073709551615 14 ExpressionKind 380 26 380 40 115 2 :: 380 40 380 42 18446744073709551615 8 Multiply 380 42 380 50 133 1 ) 380 50 380 51 18446744073709551615 1 { 381 3 381 4 18446744073709551615 8 byteCode 382 4 382 12 55 1 . 382 12 382 13 34 9 push_back 382 13 382 22 34 1 ( 382 22 382 23 34 10 mul_double 382 23 382 33 174 1 ) 382 33 382 34 34 1 ; 382 34 382 35 18446744073709551615 1 } 383 3 383 4 18446744073709551615 4 else 384 3 384 7 18446744073709551615 2 if 384 8 384 10 18446744073709551615 1 ( 384 11 384 12 18446744073709551615 4 node 384 12 384 16 126 2 -> 384 16 384 18 18446744073709551615 4 kind 384 18 384 22 114 2 == 384 23 384 25 18446744073709551615 14 ExpressionKind 384 26 384 40 115 2 :: 384 40 384 42 18446744073709551615 6 Divide 384 42 384 48 135 1 ) 384 48 384 49 18446744073709551615 1 { 385 3 385 4 18446744073709551615 8 byteCode 386 4 386 12 55 1 . 386 12 386 13 34 9 push_back 386 13 386 22 34 1 ( 386 22 386 23 34 10 div_double 386 23 386 33 175 1 ) 386 33 386 34 34 1 ; 386 34 386 35 18446744073709551615 1 } 387 3 387 4 18446744073709551615 4 else 388 3 388 7 18446744073709551615 2 if 388 8 388 10 18446744073709551615 1 ( 388 11 388 12 18446744073709551615 4 node 388 12 388 16 126 2 -> 388 16 388 18 18446744073709551615 4 kind 388 18 388 22 114 2 == 388 23 388 25 18446744073709551615 14 ExpressionKind 388 26 388 40 115 2 :: 388 40 388 42 18446744073709551615 11 GreaterThan 388 42 388 53 139 1 ) 388 53 388 54 18446744073709551615 1 { 389 3 389 4 18446744073709551615 8 byteCode 390 4 390 12 55 1 . 390 12 390 13 34 9 push_back 390 13 390 22 34 1 ( 390 22 390 23 34 9 gt_double 390 23 390 32 176 1 ) 390 32 390 33 34 1 ; 390 33 390 34 18446744073709551615 1 } 391 3 391 4 18446744073709551615 4 else 392 3 392 7 18446744073709551615 2 if 392 8 392 10 18446744073709551615 1 ( 392 11 392 12 18446744073709551615 4 node 392 12 392 16 126 2 -> 392 16 392 18 18446744073709551615 4 kind 392 18 392 22 114 2 == 392 23 392 25 18446744073709551615 14 ExpressionKind 392 26 392 40 115 2 :: 392 40 392 42 18446744073709551615 8 LessThan 392 42 392 50 141 1 ) 392 50 392 51 18446744073709551615 1 { 393 3 393 4 18446744073709551615 8 byteCode 394 4 394 12 55 1 . 394 12 394 13 34 9 push_back 394 13 394 22 34 1 ( 394 22 394 23 34 9 lt_double 394 23 394 32 177 1 ) 394 32 394 33 34 1 ; 394 33 394 34 18446744073709551615 1 } 395 3 395 4 18446744073709551615 4 else 396 3 396 7 18446744073709551615 2 if 396 8 396 10 18446744073709551615 1 ( 396 11 396 12 18446744073709551615 4 node 396 12 396 16 126 2 -> 396 16 396 18 18446744073709551615 4 kind 396 18 396 22 114 2 == 396 23 396 25 18446744073709551615 14 ExpressionKind 396 26 396 40 115 2 :: 396 40 396 42 18446744073709551615 18 GreaterThanOrEqual 396 42 396 60 143 1 ) 396 60 396 61 18446744073709551615 1 { 397 3 397 4 18446744073709551615 8 byteCode 398 4 398 12 55 1 . 398 12 398 13 34 9 push_back 398 13 398 22 34 1 ( 398 22 398 23 34 9 ge_double 398 23 398 32 178 1 ) 398 32 398 33 34 1 ; 398 33 398 34 18446744073709551615 1 } 399 3 399 4 18446744073709551615 4 else 400 3 400 7 18446744073709551615 2 if 400 8 400 10 18446744073709551615 1 ( 400 11 400 12 18446744073709551615 4 node 400 12 400 16 126 2 -> 400 16 400 18 18446744073709551615 4 kind 400 18 400 22 114 2 == 400 23 400 25 18446744073709551615 14 ExpressionKind 400 26 400 40 115 2 :: 400 40 400 42 18446744073709551615 15 LessThanOrEqual 400 42 400 57 145 1 ) 400 57 400 58 18446744073709551615 1 { 401 3 401 4 18446744073709551615 8 byteCode 402 4 402 12 55 1 . 402 12 402 13 34 9 push_back 402 13 402 22 34 1 ( 402 22 402 23 34 9 le_double 402 23 402 32 179 1 ) 402 32 402 33 34 1 ; 402 33 402 34 18446744073709551615 1 } 403 3 403 4 18446744073709551615 4 else 404 3 404 7 18446744073709551615 2 if 404 8 404 10 18446744073709551615 1 ( 404 11 404 12 18446744073709551615 4 node 404 12 404 16 126 2 -> 404 16 404 18 18446744073709551615 4 kind 404 18 404 22 114 2 == 404 23 404 25 18446744073709551615 14 ExpressionKind 404 26 404 40 115 2 :: 404 40 404 42 18446744073709551615 5 Equal 404 42 404 47 147 1 ) 404 47 404 48 18446744073709551615 1 { 405 3 405 4 18446744073709551615 8 byteCode 406 4 406 12 55 1 . 406 12 406 13 34 9 push_back 406 13 406 22 34 1 ( 406 22 406 23 34 9 eq_double 406 23 406 32 180 1 ) 406 32 406 33 34 1 ; 406 33 406 34 18446744073709551615 1 } 407 3 407 4 18446744073709551615 4 else 408 3 408 7 18446744073709551615 2 if 408 8 408 10 18446744073709551615 1 ( 408 11 408 12 18446744073709551615 4 node 408 12 408 16 126 2 -> 408 16 408 18 18446744073709551615 4 kind 408 18 408 22 114 2 == 408 23 408 25 18446744073709551615 14 ExpressionKind 408 26 408 40 115 2 :: 408 40 408 42 18446744073709551615 8 NotEqual 408 42 408 50 149 1 ) 408 50 408 51 18446744073709551615 1 { 409 3 409 4 18446744073709551615 8 byteCode 410 4 410 12 55 1 . 410 12 410 13 34 9 push_back 410 13 410 22 34 1 ( 410 22 410 23 34 9 ne_double 410 23 410 32 181 1 ) 410 32 410 33 34 1 ; 410 33 410 34 18446744073709551615 1 } 411 3 411 4 18446744073709551615 4 else 412 3 412 7 18446744073709551615 1 { 413 3 413 4 18446744073709551615 5 throw 414 4 414 9 18446744073709551615 7 wstring 414 10 414 17 79 1 ( 414 17 414 18 80 36 L"wrong binary operation for double" 414 18 414 54 18446744073709551615 1 ) 414 54 414 55 80 1 ; 414 55 414 56 18446744073709551615 1 } 415 3 415 4 18446744073709551615 1 } 416 2 416 3 18446744073709551615 4 else 417 2 417 6 18446744073709551615 2 if 417 7 417 9 18446744073709551615 1 ( 417 10 417 11 18446744073709551615 4 node 417 11 417 15 126 2 -> 417 15 417 17 18446744073709551615 4 type 417 17 417 21 113 1 . 417 21 417 22 122 9 IsBoolean 417 22 417 31 122 1 ( 417 31 417 32 122 1 ) 417 32 417 33 122 1 ) 417 33 417 34 18446744073709551615 1 { 418 2 418 3 18446744073709551615 2 if 419 3 419 5 18446744073709551615 1 ( 419 6 419 7 18446744073709551615 4 node 419 7 419 11 126 2 -> 419 11 419 13 18446744073709551615 4 kind 419 13 419 17 114 2 == 419 18 419 20 18446744073709551615 14 ExpressionKind 419 21 419 35 115 2 :: 419 35 419 37 18446744073709551615 3 And 419 37 419 40 182 1 ) 419 40 419 41 18446744073709551615 1 { 420 3 420 4 18446744073709551615 8 byteCode 421 4 421 12 55 1 . 421 12 421 13 34 9 push_back 421 13 421 22 34 1 ( 421 22 421 23 34 11 logical_and 421 23 421 34 183 1 ) 421 34 421 35 34 1 ; 421 35 421 36 18446744073709551615 1 } 422 3 422 4 18446744073709551615 4 else 423 3 423 7 18446744073709551615 2 if 423 8 423 10 18446744073709551615 1 ( 423 11 423 12 18446744073709551615 4 node 423 12 423 16 126 2 -> 423 16 423 18 18446744073709551615 4 kind 423 18 423 22 114 2 == 423 23 423 25 18446744073709551615 14 ExpressionKind 423 26 423 40 115 2 :: 423 40 423 42 18446744073709551615 2 Or 423 42 423 44 184 1 ) 423 44 423 45 18446744073709551615 1 { 424 3 424 4 18446744073709551615 8 byteCode 425 4 425 12 55 1 . 425 12 425 13 34 9 push_back 425 13 425 22 34 1 ( 425 22 425 23 34 10 logical_or 425 23 425 33 185 1 ) 425 33 425 34 34 1 ; 425 34 425 35 18446744073709551615 1 } 426 3 426 4 18446744073709551615 4 else 427 3 427 7 18446744073709551615 2 if 427 8 427 10 18446744073709551615 1 ( 427 11 427 12 18446744073709551615 4 node 427 12 427 16 126 2 -> 427 16 427 18 18446744073709551615 4 kind 427 18 427 22 114 2 == 427 23 427 25 18446744073709551615 14 ExpressionKind 427 26 427 40 115 2 :: 427 40 427 42 18446744073709551615 5 Equal 427 42 427 47 147 1 ) 427 47 427 48 18446744073709551615 1 { 428 3 428 4 18446744073709551615 8 byteCode 429 4 429 12 55 1 . 429 12 429 13 34 9 push_back 429 13 429 22 34 1 ( 429 22 429 23 34 6 eq_int 429 23 429 29 148 1 ) 429 29 429 30 34 1 ; 429 30 429 31 18446744073709551615 1 } 430 3 430 4 18446744073709551615 4 else 431 3 431 7 18446744073709551615 2 if 431 8 431 10 18446744073709551615 1 ( 431 11 431 12 18446744073709551615 4 node 431 12 431 16 126 2 -> 431 16 431 18 18446744073709551615 4 kind 431 18 431 22 114 2 == 431 23 431 25 18446744073709551615 14 ExpressionKind 431 26 431 40 115 2 :: 431 40 431 42 18446744073709551615 8 NotEqual 431 42 431 50 149 1 ) 431 50 431 51 18446744073709551615 1 { 432 3 432 4 18446744073709551615 8 byteCode 433 4 433 12 55 1 . 433 12 433 13 34 9 push_back 433 13 433 22 34 1 ( 433 22 433 23 34 6 ne_int 433 23 433 29 150 1 ) 433 29 433 30 34 1 ; 433 30 433 31 18446744073709551615 1 } 434 3 434 4 18446744073709551615 4 else 435 3 435 7 18446744073709551615 1 { 436 3 436 4 18446744073709551615 5 throw 437 4 437 9 18446744073709551615 7 wstring 437 10 437 17 79 1 ( 437 17 437 18 80 37 L"wrong binary operation for boolean" 437 18 437 55 18446744073709551615 1 ) 437 55 437 56 80 1 ; 437 56 437 57 18446744073709551615 1 } 438 3 438 4 18446744073709551615 1 } 439 2 439 3 18446744073709551615 4 else 440 2 440 6 18446744073709551615 1 { 441 2 441 3 18446744073709551615 5 throw 442 3 442 8 18446744073709551615 7 wstring 442 9 442 16 79 1 ( 442 16 442 17 80 21 L"not supported type" 442 17 442 38 18446744073709551615 1 ) 442 38 442 39 80 1 ; 442 39 442 40 18446744073709551615 1 } 443 2 443 3 18446744073709551615 1 } 444 1 444 2 18446744073709551615 4 void 445 1 445 5 18446744073709551615 8 Compiler 445 6 445 14 2 2 :: 445 14 445 16 89 5 Visit 445 16 445 21 89 1 ( 445 21 445 22 89 16 AssignExpression 445 22 445 38 186 1 * 445 38 445 39 18446744073709551615 4 node 445 40 445 44 187 1 ) 445 44 445 45 89 1 { 446 1 446 2 18446744073709551615 4 node 447 2 447 6 187 2 -> 447 6 447 8 18446744073709551615 5 value 447 8 447 13 188 2 -> 447 13 447 15 29 6 Accept 447 15 447 21 29 1 ( 447 21 447 22 29 4 this 447 22 447 26 18446744073709551615 1 ) 447 26 447 27 29 1 ; 447 27 447 28 18446744073709551615 2 if 448 2 448 4 18446744073709551615 1 ( 448 5 448 6 18446744073709551615 4 node 448 6 448 10 187 2 -> 448 10 448 12 18446744073709551615 4 type 448 12 448 16 113 1 . 448 16 448 17 69 5 IsInt 448 17 448 22 69 1 ( 448 22 448 23 69 1 ) 448 23 448 24 69 1 ) 448 24 448 25 18446744073709551615 1 { 449 2 449 3 18446744073709551615 2 if 450 3 450 5 18446744073709551615 1 ( 450 6 450 7 18446744073709551615 4 node 450 7 450 11 187 2 -> 450 11 450 13 18446744073709551615 8 location 450 13 450 21 189 1 . 450 21 450 22 190 7 IsLocal 450 22 450 29 190 1 ( 450 29 450 30 190 1 ) 450 30 450 31 190 1 ) 450 31 450 32 18446744073709551615 1 { 451 3 451 4 18446744073709551615 17 // local variable 452 4 452 21 18446744073709551615 8 byteCode 453 4 453 12 55 1 . 453 12 453 13 34 9 push_back 453 13 453 22 34 1 ( 453 22 453 23 34 13 pop_local_int 453 23 453 36 70 1 ) 453 36 453 37 34 1 ; 453 37 453 38 18446744073709551615 8 byteCode 454 4 454 12 55 1 . 454 12 454 13 34 9 push_back 454 13 454 22 34 1 ( 454 22 454 23 34 4 node 454 23 454 27 187 2 -> 454 27 454 29 18446744073709551615 8 location 454 29 454 37 189 1 . 454 37 454 38 18446744073709551615 6 offset 454 38 454 44 67 1 ) 454 44 454 45 34 1 ; 454 45 454 46 18446744073709551615 1 } 455 3 455 4 18446744073709551615 4 else 456 3 456 7 18446744073709551615 1 { 457 3 457 4 18446744073709551615 8 byteCode 458 4 458 12 55 1 . 458 12 458 13 34 9 push_back 458 13 458 22 34 1 ( 458 22 458 23 34 13 pop_field_int 458 23 458 36 191 1 ) 458 36 458 37 34 1 ; 458 37 458 38 18446744073709551615 12 constantPool 459 4 459 16 58 1 . 459 16 459 17 34 9 push_back 459 17 459 26 34 1 ( 459 26 459 27 34 12 constant_int 459 27 459 39 97 1 ) 459 39 459 40 34 1 ; 459 40 459 41 18446744073709551615 10 ConvertInt 460 4 460 14 98 1 ( 460 14 460 15 98 12 constantPool 460 15 460 27 58 1 , 460 27 460 28 98 4 node 460 29 460 33 187 2 -> 460 33 460 35 18446744073709551615 8 location 460 35 460 43 189 1 . 460 43 460 44 18446744073709551615 5 index 460 44 460 49 192 1 ) 460 49 460 50 98 1 ; 460 50 460 51 18446744073709551615 8 byteCode 461 4 461 12 55 1 . 461 12 461 13 34 9 push_back 461 13 461 22 34 1 ( 461 22 461 23 34 14 constantsCount 461 23 461 37 59 1 ) 461 37 461 38 34 1 ; 461 38 461 39 18446744073709551615 14 constantsCount 462 4 462 18 59 2 ++ 462 18 462 20 18446744073709551615 1 ; 462 20 462 21 18446744073709551615 8 byteCode 463 4 463 12 55 1 . 463 12 463 13 34 9 push_back 463 13 463 22 34 1 ( 463 22 463 23 34 4 node 463 23 463 27 187 2 -> 463 27 463 29 18446744073709551615 8 location 463 29 463 37 189 1 . 463 37 463 38 18446744073709551615 6 offset 463 38 463 44 67 1 ) 463 44 463 45 34 1 ; 463 45 463 46 18446744073709551615 1 } 464 3 464 4 18446744073709551615 1 } 465 2 465 3 18446744073709551615 4 else 466 2 466 6 18446744073709551615 2 if 466 7 466 9 18446744073709551615 1 ( 466 10 466 11 18446744073709551615 4 node 466 11 466 15 187 2 -> 466 15 466 17 18446744073709551615 4 type 466 17 466 21 113 1 . 466 21 466 22 71 6 IsLong 466 22 466 28 71 1 ( 466 28 466 29 71 1 ) 466 29 466 30 71 1 ) 466 30 466 31 18446744073709551615 1 { 467 2 467 3 18446744073709551615 8 // To DO 468 3 468 11 18446744073709551615 1 } 469 2 469 3 18446744073709551615 1 } 470 1 470 2 18446744073709551615 4 void 471 1 471 5 18446744073709551615 8 Compiler 471 6 471 14 2 2 :: 471 14 471 16 89 5 Visit 471 16 471 21 89 1 ( 471 21 471 22 89 15 BlockExpression 471 22 471 37 193 1 * 471 37 471 38 18446744073709551615 4 node 471 39 471 43 194 1 ) 471 43 471 44 89 1 { 472 1 472 2 18446744073709551615 3 for 473 2 473 5 18446744073709551615 1 ( 473 6 473 7 18446744073709551615 4 auto 473 7 473 11 18446744073709551615 1 & 473 11 473 12 18446744073709551615 1 e 473 13 473 14 195 1 : 473 15 473 16 26 4 node 473 17 473 21 194 2 -> 473 21 473 23 18446744073709551615 11 expressions 473 23 473 34 196 1 ) 473 34 473 35 18446744073709551615 1 { 474 2 474 3 18446744073709551615 1 e 475 3 475 4 195 2 -> 475 4 475 6 29 6 Accept 475 6 475 12 29 1 ( 475 12 475 13 29 4 this 475 13 475 17 18446744073709551615 1 ) 475 17 475 18 29 1 ; 475 18 475 19 18446744073709551615 1 } 476 2 476 3 18446744073709551615 1 } 477 1 477 2 18446744073709551615 4 void 478 1 478 5 18446744073709551615 8 Compiler 478 6 478 14 2 2 :: 478 14 478 16 89 5 Visit 478 16 478 21 89 1 ( 478 21 478 22 89 16 IfThenExpression 478 22 478 38 197 1 * 478 38 478 39 18446744073709551615 4 node 478 40 478 44 198 1 ) 478 44 478 45 89 1 { 479 1 479 2 18446744073709551615 4 node 480 2 480 6 198 2 -> 480 6 480 8 18446744073709551615 9 condition 480 8 480 17 199 2 -> 480 17 480 19 29 6 Accept 480 19 480 25 29 1 ( 480 25 480 26 29 4 this 480 26 480 30 18446744073709551615 1 ) 480 30 480 31 29 1 ; 480 31 480 32 18446744073709551615 8 byteCode 481 2 481 10 55 1 . 481 10 481 11 34 9 push_back 481 11 481 20 34 1 ( 481 20 481 21 34 13 jump_if_false 481 21 481 34 200 1 ) 481 34 481 35 34 1 ; 481 35 481 36 18446744073709551615 7 int32_t 482 2 482 9 64 5 index 482 10 482 15 201 1 = 482 16 482 17 18446744073709551615 8 byteCode 482 18 482 26 55 1 . 482 26 482 27 37 4 size 482 27 482 31 37 1 ( 482 31 482 32 37 1 ) 482 32 482 33 37 1 ; 482 33 482 34 18446744073709551615 13 ConvertUShort 483 2 483 15 202 1 ( 483 15 483 16 202 8 byteCode 483 16 483 24 55 1 , 483 24 483 25 202 1 0 483 26 483 27 18446744073709551615 1 ) 483 27 483 28 202 1 ; 483 28 483 29 18446744073709551615 4 node 484 2 484 6 198 2 -> 484 6 484 8 18446744073709551615 6 ifTrue 484 8 484 14 203 2 -> 484 14 484 16 29 6 Accept 484 16 484 22 29 1 ( 484 22 484 23 29 4 this 484 23 484 27 18446744073709551615 1 ) 484 27 484 28 29 1 ; 484 28 484 29 18446744073709551615 7 int32_t 485 2 485 9 64 6 target 485 10 485 16 204 1 = 485 17 485 18 18446744073709551615 8 byteCode 485 19 485 27 55 1 . 485 27 485 28 37 4 size 485 28 485 32 37 1 ( 485 32 485 33 37 1 ) 485 33 485 34 37 1 ; 485 34 485 35 18446744073709551615 8 byteCode 486 2 486 10 55 1 . 486 10 486 11 205 2 at 486 11 486 13 205 1 ( 486 13 486 14 205 5 index 486 14 486 19 201 1 ) 486 19 486 20 205 1 = 486 21 486 22 18446744073709551615 6 target 486 23 486 29 204 1 % 486 30 486 31 18446744073709551615 3 256 486 32 486 35 18446744073709551615 1 ; 486 35 486 36 18446744073709551615 8 byteCode 487 2 487 10 55 1 . 487 10 487 11 205 2 at 487 11 487 13 205 1 ( 487 13 487 14 205 5 index 487 14 487 19 201 1 + 487 20 487 21 18446744073709551615 1 1 487 22 487 23 18446744073709551615 1 ) 487 23 487 24 205 1 = 487 25 487 26 18446744073709551615 6 target 487 27 487 33 204 1 / 487 34 487 35 18446744073709551615 3 256 487 36 487 39 18446744073709551615 1 ; 487 39 487 40 18446744073709551615 1 } 488 1 488 2 18446744073709551615 4 void 489 1 489 5 18446744073709551615 8 Compiler 489 6 489 14 2 2 :: 489 14 489 16 89 5 Visit 489 16 489 21 89 1 ( 489 21 489 22 89 20 IfThenElseExpression 489 22 489 42 206 1 * 489 42 489 43 18446744073709551615 4 node 489 44 489 48 207 1 ) 489 48 489 49 89 1 { 490 1 490 2 18446744073709551615 4 node 491 2 491 6 207 2 -> 491 6 491 8 18446744073709551615 9 condition 491 8 491 17 208 2 -> 491 17 491 19 29 6 Accept 491 19 491 25 29 1 ( 491 25 491 26 29 4 this 491 26 491 30 18446744073709551615 1 ) 491 30 491 31 29 1 ; 491 31 491 32 18446744073709551615 8 byteCode 492 2 492 10 55 1 . 492 10 492 11 34 9 push_back 492 11 492 20 34 1 ( 492 20 492 21 34 13 jump_if_false 492 21 492 34 200 1 ) 492 34 492 35 34 1 ; 492 35 492 36 18446744073709551615 7 int32_t 493 2 493 9 64 6 index1 493 10 493 16 209 1 = 493 17 493 18 18446744073709551615 8 byteCode 493 19 493 27 55 1 . 493 27 493 28 37 4 size 493 28 493 32 37 1 ( 493 32 493 33 37 1 ) 493 33 493 34 37 1 ; 493 34 493 35 18446744073709551615 13 ConvertUShort 494 2 494 15 202 1 ( 494 15 494 16 202 8 byteCode 494 16 494 24 55 1 , 494 24 494 25 202 1 0 494 26 494 27 18446744073709551615 1 ) 494 27 494 28 202 1 ; 494 28 494 29 18446744073709551615 4 node 496 2 496 6 207 2 -> 496 6 496 8 18446744073709551615 6 ifTrue 496 8 496 14 210 2 -> 496 14 496 16 29 6 Accept 496 16 496 22 29 1 ( 496 22 496 23 29 4 this 496 23 496 27 18446744073709551615 1 ) 496 27 496 28 29 1 ; 496 28 496 29 18446744073709551615 8 byteCode 497 2 497 10 55 1 . 497 10 497 11 34 9 push_back 497 11 497 20 34 1 ( 497 20 497 21 34 4 jump 497 21 497 25 211 1 ) 497 25 497 26 34 1 ; 497 26 497 27 18446744073709551615 7 int32_t 498 2 498 9 64 6 index2 498 10 498 16 212 1 = 498 17 498 18 18446744073709551615 8 byteCode 498 19 498 27 55 1 . 498 27 498 28 37 4 size 498 28 498 32 37 1 ( 498 32 498 33 37 1 ) 498 33 498 34 37 1 ; 498 34 498 35 18446744073709551615 13 ConvertUShort 499 2 499 15 202 1 ( 499 15 499 16 202 8 byteCode 499 16 499 24 55 1 , 499 24 499 25 202 1 0 499 26 499 27 18446744073709551615 1 ) 499 27 499 28 202 1 ; 499 28 499 29 18446744073709551615 7 int32_t 501 2 501 9 64 6 target 501 10 501 16 213 1 = 501 17 501 18 18446744073709551615 8 byteCode 501 19 501 27 55 1 . 501 27 501 28 37 4 size 501 28 501 32 37 1 ( 501 32 501 33 37 1 ) 501 33 501 34 37 1 ; 501 34 501 35 18446744073709551615 8 byteCode 502 2 502 10 55 1 . 502 10 502 11 205 2 at 502 11 502 13 205 1 ( 502 13 502 14 205 6 index1 502 14 502 20 209 1 ) 502 20 502 21 205 1 = 502 22 502 23 18446744073709551615 6 target 502 24 502 30 213 1 % 502 31 502 32 18446744073709551615 3 256 502 33 502 36 18446744073709551615 1 ; 502 36 502 37 18446744073709551615 8 byteCode 503 2 503 10 55 1 . 503 10 503 11 205 2 at 503 11 503 13 205 1 ( 503 13 503 14 205 6 index1 503 14 503 20 209 1 + 503 21 503 22 18446744073709551615 1 1 503 23 503 24 18446744073709551615 1 ) 503 24 503 25 205 1 = 503 26 503 27 18446744073709551615 6 target 503 28 503 34 213 1 / 503 35 503 36 18446744073709551615 3 256 503 37 503 40 18446744073709551615 1 ; 503 40 503 41 18446744073709551615 4 node 504 2 504 6 207 2 -> 504 6 504 8 18446744073709551615 7 ifFalse 504 8 504 15 214 2 -> 504 15 504 17 29 6 Accept 504 17 504 23 29 1 ( 504 23 504 24 29 4 this 504 24 504 28 18446744073709551615 1 ) 504 28 504 29 29 1 ; 504 29 504 30 18446744073709551615 7 int32_t 505 2 505 9 64 7 target2 505 10 505 17 215 1 = 505 18 505 19 18446744073709551615 8 byteCode 505 20 505 28 55 1 . 505 28 505 29 37 4 size 505 29 505 33 37 1 ( 505 33 505 34 37 1 ) 505 34 505 35 37 1 ; 505 35 505 36 18446744073709551615 8 byteCode 506 2 506 10 55 1 . 506 10 506 11 205 2 at 506 11 506 13 205 1 ( 506 13 506 14 205 6 index2 506 14 506 20 212 1 ) 506 20 506 21 205 1 = 506 22 506 23 18446744073709551615 7 target2 506 24 506 31 215 1 % 506 32 506 33 18446744073709551615 3 256 506 34 506 37 18446744073709551615 1 ; 506 37 506 38 18446744073709551615 8 byteCode 507 2 507 10 55 1 . 507 10 507 11 205 2 at 507 11 507 13 205 1 ( 507 13 507 14 205 6 index2 507 14 507 20 212 1 + 507 21 507 22 18446744073709551615 1 1 507 23 507 24 18446744073709551615 1 ) 507 24 507 25 205 1 = 507 26 507 27 18446744073709551615 6 target 507 28 507 34 213 1 / 507 35 507 36 18446744073709551615 3 256 507 37 507 40 18446744073709551615 1 ; 507 40 507 41 18446744073709551615 1 } 508 1 508 2 18446744073709551615 4 void 509 1 509 5 18446744073709551615 8 Compiler 509 6 509 14 2 2 :: 509 14 509 16 89 5 Visit 509 16 509 21 89 1 ( 509 21 509 22 89 14 CallExpression 509 22 509 36 216 1 * 509 36 509 37 18446744073709551615 4 node 509 38 509 42 217 1 ) 509 42 509 43 89 1 { 510 1 510 2 18446744073709551615 3 for 511 2 511 5 18446744073709551615 1 ( 511 6 511 7 18446744073709551615 4 auto 511 7 511 11 18446744073709551615 1 & 511 11 511 12 18446744073709551615 3 arg 511 13 511 16 218 1 : 511 17 511 18 26 4 node 511 19 511 23 217 2 -> 511 23 511 25 18446744073709551615 9 arguments 511 25 511 34 219 1 ) 511 34 511 35 18446744073709551615 1 { 512 2 512 3 18446744073709551615 3 arg 513 3 513 6 218 2 -> 513 6 513 8 29 6 Accept 513 8 513 14 29 1 ( 513 14 513 15 29 4 this 513 15 513 19 18446744073709551615 1 ) 513 19 513 20 29 1 ; 513 20 513 21 18446744073709551615 1 } 514 2 514 3 18446744073709551615 32 // node->function->Accept(this); 515 2 515 34 18446744073709551615 8 byteCode 516 2 516 10 55 1 . 516 10 516 11 34 9 push_back 516 11 516 20 34 1 ( 516 20 516 21 34 6 invoke 516 21 516 27 220 1 ) 516 27 516 28 34 1 ; 516 28 516 29 18446744073709551615 8 // TO DO 517 2 517 10 18446744073709551615 5 throw 518 2 518 7 18446744073709551615 23 NotImplementedException 518 8 518 31 221 1 ( 518 31 518 32 221 1 ) 518 32 518 33 221 1 ; 518 33 518 34 18446744073709551615 1 } 519 1 519 2 18446744073709551615 4 void 520 1 520 5 18446744073709551615 8 Compiler 520 6 520 14 2 2 :: 520 14 520 16 89 5 Visit 520 16 520 21 89 1 ( 520 21 520 22 89 18 VariableExpression 520 22 520 40 222 1 * 520 40 520 41 18446744073709551615 4 node 520 42 520 46 223 1 ) 520 46 520 47 89 1 { 521 1 521 2 18446744073709551615 2 if 522 2 522 4 18446744073709551615 1 ( 522 5 522 6 18446744073709551615 4 node 522 6 522 10 223 2 -> 522 10 522 12 18446744073709551615 8 location 522 12 522 20 224 1 . 522 20 522 21 190 7 IsLocal 522 21 522 28 190 1 ( 522 28 522 29 190 1 ) 522 29 522 30 190 1 ) 522 30 522 31 18446744073709551615 1 { 523 2 523 3 18446744073709551615 2 if 524 3 524 5 18446744073709551615 1 ( 524 6 524 7 18446744073709551615 4 node 524 7 524 11 223 2 -> 524 11 524 13 18446744073709551615 4 type 524 13 524 17 113 1 . 524 17 524 18 69 5 IsInt 524 18 524 23 69 1 ( 524 23 524 24 69 1 ) 524 24 524 25 69 1 ) 524 25 524 26 18446744073709551615 1 { 525 3 525 4 18446744073709551615 8 byteCode 526 4 526 12 55 1 . 526 12 526 13 34 9 push_back 526 13 526 22 34 1 ( 526 22 526 23 34 14 push_local_int 526 23 526 37 225 1 ) 526 37 526 38 34 1 ; 526 38 526 39 18446744073709551615 8 byteCode 527 4 527 12 55 1 . 527 12 527 13 34 9 push_back 527 13 527 22 34 1 ( 527 22 527 23 34 4 node 527 23 527 27 223 2 -> 527 27 527 29 18446744073709551615 8 location 527 29 527 37 224 1 . 527 37 527 38 18446744073709551615 6 offset 527 38 527 44 67 1 ) 527 44 527 45 34 1 ; 527 45 527 46 18446744073709551615 1 } 528 3 528 4 18446744073709551615 4 else 529 3 529 7 18446744073709551615 2 if 529 8 529 10 18446744073709551615 1 ( 529 11 529 12 18446744073709551615 4 node 529 12 529 16 223 2 -> 529 16 529 18 18446744073709551615 4 type 529 18 529 22 113 1 . 529 22 529 23 71 6 IsLong 529 23 529 29 71 1 ( 529 29 529 30 71 1 ) 529 30 529 31 71 1 ) 529 31 529 32 18446744073709551615 1 { 530 3 530 4 18446744073709551615 8 byteCode 531 4 531 12 55 1 . 531 12 531 13 34 9 push_back 531 13 531 22 34 1 ( 531 22 531 23 34 15 push_local_long 531 23 531 38 226 1 ) 531 38 531 39 34 1 ; 531 39 531 40 18446744073709551615 8 byteCode 532 4 532 12 55 1 . 532 12 532 13 34 9 push_back 532 13 532 22 34 1 ( 532 22 532 23 34 4 node 532 23 532 27 223 2 -> 532 27 532 29 18446744073709551615 8 location 532 29 532 37 224 1 . 532 37 532 38 18446744073709551615 6 offset 532 38 532 44 67 1 ) 532 44 532 45 34 1 ; 532 45 532 46 18446744073709551615 1 } 533 3 533 4 18446744073709551615 4 else 534 3 534 7 18446744073709551615 2 if 534 8 534 10 18446744073709551615 1 ( 534 11 534 12 18446744073709551615 4 node 534 12 534 16 223 2 -> 534 16 534 18 18446744073709551615 4 type 534 18 534 22 113 1 . 534 22 534 23 73 7 IsFloat 534 23 534 30 73 1 ( 534 30 534 31 73 1 ) 534 31 534 32 73 1 ) 534 32 534 33 18446744073709551615 1 { 535 3 535 4 18446744073709551615 8 byteCode 536 4 536 12 55 1 . 536 12 536 13 34 9 push_back 536 13 536 22 34 1 ( 536 22 536 23 34 16 push_local_float 536 23 536 39 227 1 ) 536 39 536 40 34 1 ; 536 40 536 41 18446744073709551615 8 byteCode 537 4 537 12 55 1 . 537 12 537 13 34 9 push_back 537 13 537 22 34 1 ( 537 22 537 23 34 4 node 537 23 537 27 223 2 -> 537 27 537 29 18446744073709551615 8 location 537 29 537 37 224 1 . 537 37 537 38 18446744073709551615 6 offset 537 38 537 44 67 1 ) 537 44 537 45 34 1 ; 537 45 537 46 18446744073709551615 1 } 538 3 538 4 18446744073709551615 4 else 539 3 539 7 18446744073709551615 2 if 539 8 539 10 18446744073709551615 1 ( 539 11 539 12 18446744073709551615 4 node 539 12 539 16 223 2 -> 539 16 539 18 18446744073709551615 4 type 539 18 539 22 113 1 . 539 22 539 23 75 8 IsDouble 539 23 539 31 75 1 ( 539 31 539 32 75 1 ) 539 32 539 33 75 1 ) 539 33 539 34 18446744073709551615 1 { 540 3 540 4 18446744073709551615 8 byteCode 541 4 541 12 55 1 . 541 12 541 13 34 9 push_back 541 13 541 22 34 1 ( 541 22 541 23 34 14 push_local_int 541 23 541 37 225 1 ) 541 37 541 38 34 1 ; 541 38 541 39 18446744073709551615 8 byteCode 542 4 542 12 55 1 . 542 12 542 13 34 9 push_back 542 13 542 22 34 1 ( 542 22 542 23 34 4 node 542 23 542 27 223 2 -> 542 27 542 29 18446744073709551615 8 location 542 29 542 37 224 1 . 542 37 542 38 18446744073709551615 6 offset 542 38 542 44 67 1 ) 542 44 542 45 34 1 ; 542 45 542 46 18446744073709551615 1 } 543 3 543 4 18446744073709551615 4 else 544 3 544 7 18446744073709551615 1 { 545 3 545 4 18446744073709551615 5 throw 546 4 546 9 18446744073709551615 23 NotImplementedException 546 10 546 33 221 1 ( 546 33 546 34 221 1 ) 546 34 546 35 221 1 ; 546 35 546 36 18446744073709551615 1 } 547 3 547 4 18446744073709551615 1 } 548 2 548 3 18446744073709551615 4 else 549 2 549 6 18446744073709551615 1 { 550 2 550 3 18446744073709551615 5 throw 551 3 551 8 18446744073709551615 23 NotImplementedException 551 9 551 32 221 1 ( 551 32 551 33 221 1 ) 551 33 551 34 221 1 ; 551 34 551 35 18446744073709551615 1 } 552 2 552 3 18446744073709551615 1 } 553 1 553 2 18446744073709551615 4 void 554 1 554 5 18446744073709551615 8 Compiler 554 6 554 14 2 2 :: 554 14 554 16 89 5 Visit 554 16 554 21 89 1 ( 554 21 554 22 89 16 ReturnExpression 554 22 554 38 228 1 * 554 38 554 39 18446744073709551615 4 node 554 40 554 44 229 1 ) 554 44 554 45 89 1 { 555 1 555 2 18446744073709551615 4 node 556 2 556 6 229 2 -> 556 6 556 8 18446744073709551615 5 value 556 8 556 13 230 2 -> 556 13 556 15 29 6 Accept 556 15 556 21 29 1 ( 556 21 556 22 29 4 this 556 22 556 26 18446744073709551615 1 ) 556 26 556 27 29 1 ; 556 27 556 28 18446744073709551615 2 if 557 2 557 4 18446744073709551615 1 ( 557 5 557 6 18446744073709551615 4 node 557 6 557 10 229 2 -> 557 10 557 12 18446744073709551615 4 type 557 12 557 16 113 1 . 557 16 557 17 69 5 IsInt 557 17 557 22 69 1 ( 557 22 557 23 69 1 ) 557 23 557 24 69 1 ) 557 24 557 25 18446744073709551615 1 { 558 2 558 3 18446744073709551615 8 byteCode 559 3 559 11 55 1 . 559 11 559 12 34 9 push_back 559 12 559 21 34 1 ( 559 21 559 22 34 10 return_int 559 22 559 32 231 1 ) 559 32 559 33 34 1 ; 559 33 559 34 18446744073709551615 1 } 560 2 560 3 18446744073709551615 4 else 561 2 561 6 18446744073709551615 2 if 561 7 561 9 18446744073709551615 1 ( 561 10 561 11 18446744073709551615 4 node 561 11 561 15 229 2 -> 561 15 561 17 18446744073709551615 4 type 561 17 561 21 113 1 . 561 21 561 22 71 6 IsLong 561 22 561 28 71 1 ( 561 28 561 29 71 1 ) 561 29 561 30 71 1 ) 561 30 561 31 18446744073709551615 1 { 562 2 562 3 18446744073709551615 8 byteCode 563 3 563 11 55 1 . 563 11 563 12 34 9 push_back 563 12 563 21 34 1 ( 563 21 563 22 34 11 return_long 563 22 563 33 232 1 ) 563 33 563 34 34 1 ; 563 34 563 35 18446744073709551615 1 } 564 2 564 3 18446744073709551615 4 else 565 2 565 6 18446744073709551615 2 if 565 7 565 9 18446744073709551615 1 ( 565 10 565 11 18446744073709551615 4 node 565 11 565 15 229 2 -> 565 15 565 17 18446744073709551615 4 type 565 17 565 21 113 1 . 565 21 565 22 73 7 IsFloat 565 22 565 29 73 1 ( 565 29 565 30 73 1 ) 565 30 565 31 73 1 ) 565 31 565 32 18446744073709551615 1 { 566 2 566 3 18446744073709551615 8 byteCode 567 3 567 11 55 1 . 567 11 567 12 34 9 push_back 567 12 567 21 34 1 ( 567 21 567 22 34 12 return_float 567 22 567 34 233 1 ) 567 34 567 35 34 1 ; 567 35 567 36 18446744073709551615 1 } 568 2 568 3 18446744073709551615 4 else 569 2 569 6 18446744073709551615 2 if 569 7 569 9 18446744073709551615 1 ( 569 10 569 11 18446744073709551615 4 node 569 11 569 15 229 2 -> 569 15 569 17 18446744073709551615 4 type 569 17 569 21 113 1 . 569 21 569 22 75 8 IsDouble 569 22 569 30 75 1 ( 569 30 569 31 75 1 ) 569 31 569 32 75 1 ) 569 32 569 33 18446744073709551615 1 { 570 2 570 3 18446744073709551615 8 byteCode 571 3 571 11 55 1 . 571 11 571 12 34 9 push_back 571 12 571 21 34 1 ( 571 21 571 22 34 13 return_double 571 22 571 35 234 1 ) 571 35 571 36 34 1 ; 571 36 571 37 18446744073709551615 1 } 572 2 572 3 18446744073709551615 4 else 573 2 573 6 18446744073709551615 1 { 574 2 574 3 18446744073709551615 5 throw 575 3 575 8 18446744073709551615 7 wstring 575 9 575 16 79 1 ( 575 16 575 17 80 28 L"not supported return type" 575 17 575 45 18446744073709551615 1 ) 575 45 575 46 80 1 ; 575 46 575 47 18446744073709551615 1 } 576 2 576 3 18446744073709551615 1 } 577 1 577 2 18446744073709551615 4 void 578 1 578 5 18446744073709551615 8 Compiler 578 6 578 14 2 2 :: 578 14 578 16 89 5 Visit 578 16 578 21 89 1 ( 578 21 578 22 89 15 WhileExpression 578 22 578 37 235 1 * 578 37 578 38 18446744073709551615 4 node 578 39 578 43 236 1 ) 578 43 578 44 89 1 { 579 1 579 2 18446744073709551615 1 } 580 1 580 2 18446744073709551615 4 void 581 1 581 5 18446744073709551615 8 Compiler 581 6 581 14 2 2 :: 581 14 581 16 89 5 Visit 581 16 581 21 89 1 ( 581 21 581 22 89 13 DotExpression 581 22 581 35 237 1 * 581 35 581 36 18446744073709551615 4 node 581 37 581 41 238 1 ) 581 41 581 42 89 1 { 582 1 582 2 18446744073709551615 1 } 583 1 583 2 18446744073709551615 14 CompiledModule 584 1 584 15 35 2 :: 584 15 584 17 35 14 CompiledModule 584 17 584 31 35 1 ( 584 31 584 32 35 1 ) 584 32 584 33 35 1 { 585 1 585 2 18446744073709551615 1 } 586 1 586 2 18446744073709551615 14 CompiledModule 587 1 587 15 35 2 :: 587 15 587 17 35 14 CompiledModule 587 17 587 31 35 1 ( 587 31 587 32 35 7 int32_t 587 32 587 39 64 5 index 587 40 587 45 239 1 , 587 45 587 46 35 7 int32_t 587 47 587 54 64 10 fieldCount 587 55 587 65 240 1 , 587 65 587 66 35 6 vector 588 11 588 17 22 1 < 588 17 588 18 18446744073709551615 16 CompiledFunction 588 18 588 34 23 1 > 588 34 588 35 18446744073709551615 9 functions 588 36 588 45 241 1 ) 588 45 588 46 35 1 : 589 2 589 3 35 5 index 589 4 589 9 242 1 { 589 9 589 10 18446744073709551615 5 index 589 10 589 15 239 1 } 589 15 589 16 18446744073709551615 1 , 590 2 590 3 35 10 fieldCount 590 4 590 14 243 1 { 590 14 590 15 18446744073709551615 10 fieldCount 590 15 590 25 240 1 } 590 25 590 26 18446744073709551615 1 , 591 2 591 3 35 9 functions 591 4 591 13 244 1 { 591 13 591 14 22 9 functions 591 14 591 23 241 1 } 591 23 591 24 22 1 { 592 1 592 2 18446744073709551615 1 } 593 1 593 2 18446744073709551615 8 ByteCode 594 1 594 9 57 14 CompiledModule 594 10 594 24 35 2 :: 594 24 594 26 245 12 EmitByteCode 594 26 594 38 245 1 ( 594 38 594 39 245 1 ) 594 39 594 40 245 1 { 595 1 595 2 18446744073709551615 8 ByteCode 596 2 596 10 57 4 code 596 11 596 15 246 1 ; 596 15 596 16 18446744073709551615 10 ConvertInt 597 2 597 12 98 1 ( 597 12 597 13 98 4 code 597 13 597 17 246 1 , 597 17 597 18 98 5 index 597 19 597 24 242 1 ) 597 24 597 25 98 1 ; 597 25 597 26 18446744073709551615 4 code 598 2 598 6 246 1 . 598 6 598 7 34 9 push_back 598 7 598 16 34 1 ( 598 16 598 17 34 10 fieldCount 598 17 598 27 243 1 ) 598 27 598 28 34 1 ; 598 28 598 29 18446744073709551615 4 code 599 2 599 6 246 1 . 599 6 599 7 34 9 push_back 599 7 599 16 34 1 ( 599 16 599 17 34 9 functions 599 17 599 26 244 1 . 599 26 599 27 37 4 size 599 27 599 31 37 1 ( 599 31 599 32 37 1 ) 599 32 599 33 37 1 ) 599 33 599 34 34 1 ; 599 34 599 35 18446744073709551615 3 for 600 2 600 5 18446744073709551615 1 ( 600 6 600 7 18446744073709551615 4 auto 600 7 600 11 18446744073709551615 1 & 600 11 600 12 18446744073709551615 8 function 600 13 600 21 247 1 : 600 22 600 23 26 9 functions 600 24 600 33 244 1 ) 600 33 600 34 18446744073709551615 1 { 601 2 601 3 18446744073709551615 3 for 602 3 602 6 18446744073709551615 1 ( 602 7 602 8 18446744073709551615 4 auto 602 8 602 12 18446744073709551615 1 b 602 13 602 14 248 1 : 602 15 602 16 26 8 function 602 17 602 25 247 1 . 602 25 602 26 249 12 EmitByteCode 602 26 602 38 249 1 ( 602 38 602 39 249 1 ) 602 39 602 40 249 1 ) 602 40 602 41 18446744073709551615 1 { 603 3 603 4 18446744073709551615 4 code 604 4 604 8 246 1 . 604 8 604 9 34 9 push_back 604 9 604 18 34 1 ( 604 18 604 19 34 1 b 604 19 604 20 248 1 ) 604 20 604 21 34 1 ; 604 21 604 22 18446744073709551615 1 } 605 3 605 4 18446744073709551615 1 } 606 2 606 3 18446744073709551615 6 return 607 2 607 8 18446744073709551615 4 code 607 9 607 13 246 1 ; 607 13 607 14 18446744073709551615 1 } 608 1 608 2 18446744073709551615 13 CompiledClass 609 1 609 14 48 2 :: 609 14 609 16 48 13 CompiledClass 609 16 609 29 48 1 ( 609 29 609 30 48 1 ) 609 30 609 31 48 1 { 610 1 610 2 18446744073709551615 1 } 611 1 611 2 18446744073709551615 13 CompiledClass 612 1 612 14 48 2 :: 612 14 612 16 48 13 CompiledClass 612 16 612 29 48 1 ( 612 29 612 30 48 7 int32_t 612 30 612 37 64 5 index 612 38 612 43 250 1 , 612 43 612 44 48 7 int32_t 612 45 612 52 64 10 fieldCount 612 53 612 63 251 1 , 612 63 612 64 48 6 vector 613 9 613 15 22 1 < 613 15 613 16 18446744073709551615 16 CompiledFunction 613 16 613 32 23 1 > 613 32 613 33 18446744073709551615 7 methods 613 34 613 41 252 1 ) 613 41 613 42 48 1 : 614 2 614 3 48 5 index 614 4 614 9 253 1 { 614 9 614 10 18446744073709551615 5 index 614 10 614 15 250 1 } 614 15 614 16 18446744073709551615 1 , 615 2 615 3 48 10 fieldCount 615 4 615 14 254 1 { 615 14 615 15 18446744073709551615 10 fieldCount 615 15 615 25 251 1 } 615 25 615 26 18446744073709551615 1 , 616 2 616 3 48 7 methods 616 4 616 11 255 1 { 616 11 616 12 22 7 methods 616 12 616 19 252 1 } 616 19 616 20 22 1 { 617 1 617 2 18446744073709551615 1 } 618 1 618 2 18446744073709551615 8 ByteCode 619 1 619 9 57 13 CompiledClass 619 10 619 23 48 2 :: 619 23 619 25 256 12 EmitByteCode 619 25 619 37 256 1 ( 619 37 619 38 256 1 ) 619 38 619 39 256 1 { 620 1 620 2 18446744073709551615 8 ByteCode 621 2 621 10 57 4 code 621 11 621 15 257 1 ; 621 15 621 16 18446744073709551615 4 code 622 2 622 6 257 1 . 622 6 622 7 34 9 push_back 622 7 622 16 34 1 ( 622 16 622 17 34 5 index 622 17 622 22 253 1 ) 622 22 622 23 34 1 ; 622 23 622 24 18446744073709551615 4 code 623 2 623 6 257 1 . 623 6 623 7 34 9 push_back 623 7 623 16 34 1 ( 623 16 623 17 34 10 fieldCount 623 17 623 27 254 1 ) 623 27 623 28 34 1 ; 623 28 623 29 18446744073709551615 4 code 624 2 624 6 257 1 . 624 6 624 7 34 9 push_back 624 7 624 16 34 1 ( 624 16 624 17 34 7 methods 624 17 624 24 255 1 . 624 24 624 25 37 4 size 624 25 624 29 37 1 ( 624 29 624 30 37 1 ) 624 30 624 31 37 1 ) 624 31 624 32 34 1 ; 624 32 624 33 18446744073709551615 3 for 625 2 625 5 18446744073709551615 1 ( 625 6 625 7 18446744073709551615 4 auto 625 7 625 11 18446744073709551615 1 & 625 11 625 12 18446744073709551615 6 method 625 13 625 19 258 1 : 625 20 625 21 26 7 methods 625 22 625 29 255 1 ) 625 29 625 30 18446744073709551615 1 { 626 2 626 3 18446744073709551615 3 for 627 3 627 6 18446744073709551615 1 ( 627 7 627 8 18446744073709551615 4 auto 627 8 627 12 18446744073709551615 1 b 627 13 627 14 259 1 : 627 15 627 16 26 6 method 627 17 627 23 258 1 . 627 23 627 24 249 12 EmitByteCode 627 24 627 36 249 1 ( 627 36 627 37 249 1 ) 627 37 627 38 249 1 ) 627 38 627 39 18446744073709551615 1 { 628 3 628 4 18446744073709551615 4 code 629 4 629 8 257 1 . 629 8 629 9 34 9 push_back 629 9 629 18 34 1 ( 629 18 629 19 34 1 b 629 19 629 20 259 1 ) 629 20 629 21 34 1 ; 629 21 629 22 18446744073709551615 1 } 630 3 630 4 18446744073709551615 1 } 631 2 631 3 18446744073709551615 6 return 632 2 632 8 18446744073709551615 4 code 632 9 632 13 257 1 ; 632 13 632 14 18446744073709551615 1 } 633 1 633 2 18446744073709551615 16 CompiledFunction 634 1 634 17 23 2 :: 634 17 634 19 23 16 CompiledFunction 634 19 634 35 23 1 ( 634 35 634 36 23 1 ) 634 36 634 37 23 1 { 635 1 635 2 18446744073709551615 1 } 636 1 636 2 18446744073709551615 16 CompiledFunction 637 1 637 17 23 2 :: 637 17 637 19 23 16 CompiledFunction 637 19 637 35 23 1 ( 637 35 637 36 23 7 int32_t 637 36 637 43 64 5 index 637 44 637 49 260 1 , 637 49 637 50 23 7 int32_t 637 51 637 58 64 9 stackSize 637 59 637 68 261 1 , 637 68 637 69 23 7 int32_t 638 12 638 19 64 9 argsCount 638 20 638 29 262 1 , 638 29 638 30 23 7 int32_t 638 31 638 38 64 11 localsCount 638 39 638 50 263 1 , 638 50 638 51 23 7 int32_t 639 12 639 19 64 13 constantCount 639 20 639 33 264 1 , 639 33 639 34 23 8 ByteCode 639 35 639 43 57 12 constantPool 639 44 639 56 265 1 , 639 56 639 57 23 8 ByteCode 640 12 640 20 57 8 byteCode 640 21 640 29 266 1 ) 640 29 640 30 23 1 : 641 2 641 3 23 5 index 641 4 641 9 267 1 { 641 9 641 10 18446744073709551615 5 index 641 10 641 15 260 1 } 641 15 641 16 18446744073709551615 1 , 642 2 642 3 23 9 stackSize 642 4 642 13 268 1 { 642 13 642 14 18446744073709551615 9 stackSize 642 14 642 23 261 1 } 642 23 642 24 18446744073709551615 1 , 643 2 643 3 23 9 argsCount 643 4 643 13 269 1 { 643 13 643 14 18446744073709551615 9 argsCount 643 14 643 23 262 1 } 643 23 643 24 18446744073709551615 1 , 644 2 644 3 23 11 localsCount 644 4 644 15 270 1 { 644 15 644 16 18446744073709551615 11 localsCount 644 16 644 27 263 1 } 644 27 644 28 18446744073709551615 1 , 645 2 645 3 23 13 constantCount 645 4 645 17 271 1 { 645 17 645 18 18446744073709551615 13 constantCount 645 18 645 31 264 1 } 645 31 645 32 18446744073709551615 1 , 646 2 646 3 23 12 constantPool 646 4 646 16 272 1 { 646 16 646 17 22 12 constantPool 646 17 646 29 265 1 } 646 29 646 30 22 1 , 647 2 647 3 23 8 byteCode 647 4 647 12 273 1 { 647 12 647 13 22 8 byteCode 647 13 647 21 266 1 } 647 21 647 22 22 1 { 648 1 648 2 18446744073709551615 1 } 649 1 649 2 18446744073709551615 8 ByteCode 650 1 650 9 57 16 CompiledFunction 650 10 650 26 23 2 :: 650 26 650 28 249 12 EmitByteCode 650 28 650 40 249 1 ( 650 40 650 41 249 1 ) 650 41 650 42 249 1 { 651 1 651 2 18446744073709551615 8 ByteCode 652 2 652 10 57 4 code 652 11 652 15 274 1 ; 652 15 652 16 18446744073709551615 4 code 653 2 653 6 274 1 . 653 6 653 7 34 9 push_back 653 7 653 16 34 1 ( 653 16 653 17 34 5 index 653 17 653 22 267 1 ) 653 22 653 23 34 1 ; 653 23 653 24 18446744073709551615 10 ConvertInt 654 2 654 12 98 1 ( 654 12 654 13 98 4 code 654 13 654 17 274 1 , 654 17 654 18 98 9 stackSize 654 19 654 28 268 1 ) 654 28 654 29 98 1 ; 654 29 654 30 18446744073709551615 4 code 655 2 655 6 274 1 . 655 6 655 7 34 9 push_back 655 7 655 16 34 1 ( 655 16 655 17 34 9 argsCount 655 17 655 26 269 1 ) 655 26 655 27 34 1 ; 655 27 655 28 18446744073709551615 4 code 656 2 656 6 274 1 . 656 6 656 7 34 9 push_back 656 7 656 16 34 1 ( 656 16 656 17 34 11 localsCount 656 17 656 28 270 1 ) 656 28 656 29 34 1 ; 656 29 656 30 18446744073709551615 4 code 657 2 657 6 274 1 . 657 6 657 7 34 9 push_back 657 7 657 16 34 1 ( 657 16 657 17 34 13 constantCount 657 17 657 30 271 1 ) 657 30 657 31 34 1 ; 657 31 657 32 18446744073709551615 13 ConvertUShort 658 2 658 15 202 1 ( 658 15 658 16 202 4 code 658 16 658 20 274 1 , 658 20 658 21 202 8 byteCode 658 22 658 30 273 1 . 658 30 658 31 37 4 size 658 31 658 35 37 1 ( 658 35 658 36 37 1 ) 658 36 658 37 37 1 ) 658 37 658 38 202 1 ; 658 38 658 39 18446744073709551615 3 for 659 2 659 5 18446744073709551615 1 ( 659 6 659 7 18446744073709551615 4 auto 659 7 659 11 18446744073709551615 1 & 659 11 659 12 18446744073709551615 1 b 659 13 659 14 275 1 : 659 15 659 16 26 12 constantPool 659 17 659 29 272 1 ) 659 29 659 30 18446744073709551615 1 { 660 2 660 3 18446744073709551615 4 code 661 3 661 7 274 1 . 661 7 661 8 34 9 push_back 661 8 661 17 34 1 ( 661 17 661 18 34 1 b 661 18 661 19 275 1 ) 661 19 661 20 34 1 ; 661 20 661 21 18446744073709551615 1 } 662 2 662 3 18446744073709551615 3 for 663 2 663 5 18446744073709551615 1 ( 663 6 663 7 18446744073709551615 4 auto 663 7 663 11 18446744073709551615 1 & 663 11 663 12 18446744073709551615 1 b 663 13 663 14 276 1 : 663 15 663 16 26 8 byteCode 663 17 663 25 273 1 ) 663 25 663 26 18446744073709551615 1 { 664 2 664 3 18446744073709551615 4 code 665 3 665 7 274 1 . 665 7 665 8 34 9 push_back 665 8 665 17 34 1 ( 665 17 665 18 34 1 b 665 18 665 19 276 1 ) 665 19 665 20 34 1 ; 665 20 665 21 18446744073709551615 1 } 666 2 666 3 18446744073709551615 6 return 667 2 667 8 18446744073709551615 4 code 667 9 667 13 274 1 ; 667 13 667 14 18446744073709551615 1 } 668 1 668 2 18446744073709551615 15 CompiledProgram 669 1 669 16 3 2 :: 669 16 669 18 3 15 CompiledProgram 669 18 669 33 3 1 ( 669 33 669 34 3 1 ) 669 34 669 35 3 1 { 670 1 670 2 18446744073709551615 1 } 671 1 671 2 18446744073709551615 15 CompiledProgram 672 1 672 16 3 2 :: 672 16 672 18 3 15 CompiledProgram 672 18 672 33 3 1 ( 672 33 672 34 3 6 vector 672 34 672 40 22 1 < 672 40 672 41 18446744073709551615 14 CompiledModule 672 41 672 55 35 1 > 672 55 672 56 18446744073709551615 7 modules 672 57 672 64 277 1 , 672 64 672 65 3 6 vector 673 10 673 16 22 1 < 673 16 673 17 18446744073709551615 13 CompiledClass 673 17 673 30 48 1 > 673 30 673 31 18446744073709551615 7 classes 673 32 673 39 278 1 ) 673 39 673 40 3 1 : 674 2 674 3 3 7 modules 674 4 674 11 279 1 { 674 11 674 12 22 7 modules 674 12 674 19 277 1 } 674 19 674 20 22 1 , 675 2 675 3 3 7 classes 675 4 675 11 280 1 { 675 11 675 12 22 7 classes 675 12 675 19 278 1 } 675 19 675 20 22 1 { 676 1 676 2 18446744073709551615 1 } 677 1 677 2 18446744073709551615 8 ByteCode 678 1 678 9 57 15 CompiledProgram 678 10 678 25 3 2 :: 678 25 678 27 281 12 EmitByteCode 678 27 678 39 281 1 ( 678 39 678 40 281 1 ) 678 40 678 41 281 1 { 679 1 679 2 18446744073709551615 8 ByteCode 680 2 680 10 57 4 code 680 11 680 15 282 1 ; 680 15 680 16 18446744073709551615 3 for 681 2 681 5 18446744073709551615 1 ( 681 6 681 7 18446744073709551615 4 auto 681 7 681 11 18446744073709551615 1 & 681 11 681 12 18446744073709551615 6 module 681 13 681 19 283 1 : 681 20 681 21 26 7 modules 681 22 681 29 279 1 ) 681 29 681 30 18446744073709551615 1 { 682 2 682 3 18446744073709551615 4 code 683 3 683 7 282 1 . 683 7 683 8 34 9 push_back 683 8 683 17 34 1 ( 683 17 683 18 34 1 0 683 18 683 19 18446744073709551615 1 ) 683 19 683 20 34 1 ; 683 20 683 21 18446744073709551615 3 for 684 3 684 6 18446744073709551615 1 ( 684 7 684 8 18446744073709551615 4 auto 684 8 684 12 18446744073709551615 1 b 684 13 684 14 284 1 : 684 15 684 16 26 6 module 684 17 684 23 283 1 . 684 23 684 24 245 12 EmitByteCode 684 24 684 36 245 1 ( 684 36 684 37 245 1 ) 684 37 684 38 245 1 ) 684 38 684 39 18446744073709551615 1 { 685 3 685 4 18446744073709551615 4 code 686 4 686 8 282 1 . 686 8 686 9 34 9 push_back 686 9 686 18 34 1 ( 686 18 686 19 34 1 b 686 19 686 20 284 1 ) 686 20 686 21 34 1 ; 686 21 686 22 18446744073709551615 1 } 687 3 687 4 18446744073709551615 1 } 688 2 688 3 18446744073709551615 3 for 689 2 689 5 18446744073709551615 1 ( 689 6 689 7 18446744073709551615 4 auto 689 7 689 11 18446744073709551615 1 & 689 11 689 12 18446744073709551615 6 _class 689 13 689 19 285 1 : 689 20 689 21 26 7 classes 689 22 689 29 280 1 ) 689 29 689 30 18446744073709551615 1 { 690 2 690 3 18446744073709551615 4 code 691 3 691 7 282 1 . 691 7 691 8 34 9 push_back 691 8 691 17 34 1 ( 691 17 691 18 34 1 1 691 18 691 19 18446744073709551615 1 ) 691 19 691 20 34 1 ; 691 20 691 21 18446744073709551615 3 for 692 3 692 6 18446744073709551615 1 ( 692 7 692 8 18446744073709551615 4 auto 692 8 692 12 18446744073709551615 1 b 692 13 692 14 286 1 : 692 15 692 16 26 6 _class 692 17 692 23 285 1 . 692 23 692 24 256 12 EmitByteCode 692 24 692 36 256 1 ( 692 36 692 37 256 1 ) 692 37 692 38 256 1 ) 692 38 692 39 18446744073709551615 1 { 693 3 693 4 18446744073709551615 4 code 694 4 694 8 282 1 . 694 8 694 9 34 9 push_back 694 9 694 18 34 1 ( 694 18 694 19 34 1 b 694 19 694 20 286 1 ) 694 20 694 21 34 1 ; 694 21 694 22 18446744073709551615 1 } 695 3 695 4 18446744073709551615 1 } 696 2 696 3 18446744073709551615 6 return 697 2 697 8 18446744073709551615 4 code 697 9 697 13 282 1 ; 697 13 697 14 18446744073709551615 1 } 698 1 698 2 18446744073709551615 4 void 699 1 699 5 18446744073709551615 12 ConvertValue 699 6 699 18 287 1 ( 699 18 699 19 287 8 ByteCode 699 19 699 27 57 1 & 699 27 699 28 18446744073709551615 8 byteCode 699 29 699 37 288 1 , 699 37 699 38 287 4 byte 699 39 699 43 289 1 * 699 43 699 44 18446744073709551615 5 bytes 699 45 699 50 290 1 , 699 50 699 51 287 7 int32_t 699 52 699 59 64 6 length 699 60 699 66 291 1 ) 699 66 699 67 287 1 { 700 1 700 2 18446744073709551615 3 for 701 2 701 5 18446744073709551615 1 ( 701 6 701 7 18446744073709551615 7 int32_t 701 7 701 14 64 1 i 701 15 701 16 292 1 = 701 17 701 18 18446744073709551615 1 0 701 19 701 20 18446744073709551615 1 ; 701 20 701 21 18446744073709551615 1 i 701 22 701 23 292 1 < 701 24 701 25 18446744073709551615 6 length 701 26 701 32 291 1 ; 701 32 701 33 18446744073709551615 1 i 701 34 701 35 292 2 ++ 701 35 701 37 18446744073709551615 1 ) 701 37 701 38 18446744073709551615 1 { 702 2 702 3 18446744073709551615 8 byteCode 703 3 703 11 288 1 . 703 11 703 12 34 9 push_back 703 12 703 21 34 1 ( 703 21 703 22 34 5 bytes 703 22 703 27 290 1 [ 703 27 703 28 18446744073709551615 1 i 703 28 703 29 292 1 ] 703 29 703 30 18446744073709551615 1 ) 703 30 703 31 34 1 ; 703 31 703 32 18446744073709551615 1 } 704 2 704 3 18446744073709551615 1 } 705 1 705 2 18446744073709551615 4 void 706 1 706 5 18446744073709551615 13 ConvertUShort 706 6 706 19 202 1 ( 706 19 706 20 202 8 ByteCode 706 20 706 28 57 1 & 706 28 706 29 18446744073709551615 8 byteCode 706 30 706 38 293 1 , 706 38 706 39 202 8 uint16_t 706 40 706 48 294 5 value 706 49 706 54 295 1 ) 706 54 706 55 202 1 { 707 1 707 2 18446744073709551615 12 ConvertValue 708 2 708 14 287 1 ( 708 14 708 15 287 8 byteCode 708 15 708 23 293 1 , 708 23 708 24 287 1 ( 708 25 708 26 18446744073709551615 4 byte 708 26 708 30 289 1 * 708 30 708 31 18446744073709551615 1 ) 708 31 708 32 18446744073709551615 1 & 708 33 708 34 18446744073709551615 5 value 708 34 708 39 295 1 , 708 39 708 40 287 6 sizeof 708 41 708 47 18446744073709551615 1 ( 708 47 708 48 18446744073709551615 8 uint16_t 708 48 708 56 294 1 ) 708 56 708 57 18446744073709551615 1 ) 708 57 708 58 287 1 ; 708 58 708 59 18446744073709551615 1 } 709 1 709 2 18446744073709551615 4 void 710 1 710 5 18446744073709551615 10 ConvertInt 710 6 710 16 98 1 ( 710 16 710 17 98 8 ByteCode 710 17 710 25 57 1 & 710 25 710 26 18446744073709551615 8 byteCode 710 27 710 35 296 1 , 710 35 710 36 98 7 int32_t 710 37 710 44 64 5 value 710 45 710 50 297 1 ) 710 50 710 51 98 1 { 711 1 711 2 18446744073709551615 12 ConvertValue 712 2 712 14 287 1 ( 712 14 712 15 287 8 byteCode 712 15 712 23 296 1 , 712 23 712 24 287 1 ( 712 25 712 26 18446744073709551615 4 byte 712 26 712 30 289 1 * 712 30 712 31 18446744073709551615 1 ) 712 31 712 32 18446744073709551615 1 & 712 33 712 34 18446744073709551615 5 value 712 34 712 39 297 1 , 712 39 712 40 287 6 sizeof 712 41 712 47 18446744073709551615 1 ( 712 47 712 48 18446744073709551615 7 int32_t 712 48 712 55 64 1 ) 712 55 712 56 18446744073709551615 1 ) 712 56 712 57 287 1 ; 712 57 712 58 18446744073709551615 1 } 713 1 713 2 18446744073709551615 4 void 714 1 714 5 18446744073709551615 11 ConvertLong 714 6 714 17 102 1 ( 714 17 714 18 102 8 ByteCode 714 18 714 26 57 1 & 714 26 714 27 18446744073709551615 8 byteCode 714 28 714 36 298 1 , 714 36 714 37 102 7 int64_t 714 38 714 45 101 5 value 714 46 714 51 299 1 ) 714 51 714 52 102 1 { 715 1 715 2 18446744073709551615 12 ConvertValue 716 2 716 14 287 1 ( 716 14 716 15 287 8 byteCode 716 15 716 23 298 1 , 716 23 716 24 287 1 ( 716 25 716 26 18446744073709551615 4 byte 716 26 716 30 289 1 * 716 30 716 31 18446744073709551615 1 ) 716 31 716 32 18446744073709551615 1 & 716 33 716 34 18446744073709551615 5 value 716 34 716 39 299 1 , 716 39 716 40 287 6 sizeof 716 41 716 47 18446744073709551615 1 ( 716 47 716 48 18446744073709551615 7 int64_t 716 48 716 55 101 1 ) 716 55 716 56 18446744073709551615 1 ) 716 56 716 57 287 1 ; 716 57 716 58 18446744073709551615 1 } 717 1 717 2 18446744073709551615 4 void 718 1 718 5 18446744073709551615 12 ConvertFloat 718 6 718 18 104 1 ( 718 18 718 19 104 8 ByteCode 718 19 718 27 57 1 & 718 27 718 28 18446744073709551615 8 byteCode 718 29 718 37 300 1 , 718 37 718 38 104 5 float 718 39 718 44 18446744073709551615 5 value 718 45 718 50 301 1 ) 718 50 718 51 104 1 { 719 1 719 2 18446744073709551615 12 ConvertValue 720 2 720 14 287 1 ( 720 14 720 15 287 8 byteCode 720 15 720 23 300 1 , 720 23 720 24 287 1 ( 720 25 720 26 18446744073709551615 4 byte 720 26 720 30 289 1 * 720 30 720 31 18446744073709551615 1 ) 720 31 720 32 18446744073709551615 1 & 720 33 720 34 18446744073709551615 5 value 720 34 720 39 301 1 , 720 39 720 40 287 6 sizeof 720 41 720 47 18446744073709551615 1 ( 720 47 720 48 18446744073709551615 5 float 720 48 720 53 18446744073709551615 1 ) 720 53 720 54 18446744073709551615 1 ) 720 54 720 55 287 1 ; 720 55 720 56 18446744073709551615 1 } 721 1 721 2 18446744073709551615 4 void 722 1 722 5 18446744073709551615 13 ConvertDouble 722 6 722 19 106 1 ( 722 19 722 20 106 8 ByteCode 722 20 722 28 57 1 & 722 28 722 29 18446744073709551615 8 byteCode 722 30 722 38 302 1 , 722 38 722 39 106 6 double 722 40 722 46 18446744073709551615 5 value 722 47 722 52 303 1 ) 722 52 722 53 106 1 { 723 1 723 2 18446744073709551615 12 ConvertValue 724 2 724 14 287 1 ( 724 14 724 15 287 8 byteCode 724 15 724 23 302 1 , 724 23 724 24 287 1 ( 724 25 724 26 18446744073709551615 4 byte 724 26 724 30 289 1 * 724 30 724 31 18446744073709551615 1 ) 724 31 724 32 18446744073709551615 1 & 724 33 724 34 18446744073709551615 5 value 724 34 724 39 303 1 , 724 39 724 40 287 6 sizeof 724 41 724 47 18446744073709551615 1 ( 724 47 724 48 18446744073709551615 6 double 724 48 724 54 18446744073709551615 1 ) 724 54 724 55 18446744073709551615 1 ) 724 55 724 56 287 1 ; 724 56 724 57 18446744073709551615 1 } 725 1 725 2 18446744073709551615 4 void 726 1 726 5 18446744073709551615 13 ConvertString 726 6 726 19 108 1 ( 726 19 726 20 108 8 ByteCode 726 20 726 28 57 1 & 726 28 726 29 18446744073709551615 8 byteCode 726 30 726 38 304 1 , 726 38 726 39 108 7 wstring 726 40 726 47 79 4 text 726 48 726 52 305 1 ) 726 52 726 53 108 1 { 727 1 727 2 18446744073709551615 7 int32_t 728 2 728 9 64 6 length 728 10 728 16 306 1 = 728 17 728 18 18446744073709551615 4 text 728 19 728 23 305 1 . 728 23 728 24 307 4 size 728 24 728 28 307 1 ( 728 28 728 29 307 1 ) 728 29 728 30 307 1 ; 728 30 728 31 18446744073709551615 10 ConvertInt 729 2 729 12 98 1 ( 729 12 729 13 98 8 byteCode 729 13 729 21 304 1 , 729 21 729 22 98 6 length 729 23 729 29 306 1 ) 729 29 729 30 98 1 ; 729 30 729 31 18446744073709551615 3 for 730 2 730 5 18446744073709551615 1 ( 730 6 730 7 18446744073709551615 7 int32_t 730 7 730 14 64 1 i 730 15 730 16 308 1 = 730 17 730 18 18446744073709551615 1 0 730 19 730 20 18446744073709551615 1 ; 730 20 730 21 18446744073709551615 1 i 730 22 730 23 308 1 < 730 24 730 25 18446744073709551615 6 length 730 26 730 32 306 1 ; 730 32 730 33 18446744073709551615 1 i 730 34 730 35 308 2 ++ 730 35 730 37 18446744073709551615 1 ) 730 37 730 38 18446744073709551615 1 { 731 2 731 3 18446744073709551615 7 int32_t 732 3 732 10 64 9 character 732 11 732 20 309 1 = 732 21 732 22 18446744073709551615 4 text 732 23 732 27 305 1 [ 732 27 732 28 310 1 i 732 28 732 29 308 1 ] 732 29 732 30 310 1 ; 732 30 732 31 18446744073709551615 10 ConvertInt 733 3 733 13 98 1 ( 733 13 733 14 98 8 byteCode 733 14 733 22 304 1 , 733 22 733 23 98 9 character 733 24 733 33 309 1 ) 733 33 733 34 98 1 ; 733 34 733 35 18446744073709551615 1 } 734 2 734 3 18446744073709551615 1 } 735 1 735 2 18446744073709551615 0 0 311 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 4 1 3 0 8 Compiler 4 1 3 0 15 CompiledProgram 21 1 3 0 16 Compile:Compiler 4 1 3 0 15 NamespaceRecord 10 1 3 0 73 8:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 10:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 73 12:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 25 CompileNamespace:Compiler 6 1 3 0 16 modules:Compiler 6 1 3 0 16 classes:Compiler 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 74 17:56:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 19:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 74 21:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 31 1 3 0 10 vector:std 4 1 3 0 16 CompiledFunction 9 1 3 0 74 22:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 23:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 9 1 3 0 74 27:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 16 functions:Module 9 1 3 0 74 29:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 24 CompileFunction:Compiler 21 1 3 0 20 push_back:vector:std 4 1 3 0 14 CompiledModule 6 1 3 0 12 index:Module 21 1 3 0 15 size:vector:std 9 1 3 0 74 35:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 74 37:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 38:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 39:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 12 fields:Class 9 1 3 0 74 43:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 functions:Class 9 1 3 0 74 45:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 CompiledClass 6 1 3 0 11 index:Class 9 1 3 0 74 51:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 subNamespaces:Namespace 9 1 3 0 73 53:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 8 Function 10 1 3 0 74 57:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 byteCode:Compiler 21 1 3 0 20 operator=:vector:std 20 1 3 0 8 ByteCode 6 1 3 0 21 constantPool:Compiler 6 1 3 0 23 constantsCount:Compiler 4 1 3 0 13 LocalVariable 9 1 3 0 74 62:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 18 variables:Function 6 1 3 0 19 value:LocalVariable 20 1 3 0 7 int32_t 9 1 3 0 74 65:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 location:LocalVariable 6 1 3 0 15 offset:Location 6 1 3 0 18 type:LocalVariable 21 1 3 0 10 IsInt:Type 7 1 3 0 14 pop_local_int: 21 1 3 0 11 IsLong:Type 7 1 3 0 15 pop_local_long: 21 1 3 0 12 IsFloat:Type 7 1 3 0 16 pop_local_float: 21 1 3 0 13 IsDouble:Type 7 1 3 0 17 pop_local_double: 21 1 3 0 13 IsString:Type 7 1 3 0 17 pop_local_string: 20 1 3 0 19 wstring:__cxx11:std 24 1 3 0 24 basic_string:__cxx11:std 9 1 3 0 74 92:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 expressions:Function 9 1 3 0 74 96:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 location:Function 9 1 3 0 74 97:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 98:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 parameters:Function 9 1 3 0 74 99:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 2 3 0 24 Visit:Visitor:Expression 14 Visit:Compiler 4 1 3 0 18 ConstantExpression 10 1 3 0 75 103:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 7 any:std 9 1 3 0 74 105:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 7 1 3 0 13 constant_int: 8 1 3 0 10 ConvertInt 8 1 3 0 12 any_cast:std 7 1 3 0 18 push_constant_int: 20 1 3 0 7 int64_t 8 1 3 0 11 ConvertLong 7 1 3 0 19 push_constant_long: 8 1 3 0 12 ConvertFloat 7 1 3 0 20 push_constant_float: 8 1 3 0 13 ConvertDouble 7 1 3 0 21 push_constant_double: 8 1 3 0 13 ConvertString 7 1 3 0 21 push_constant_string: 4 1 3 0 15 UnaryExpression 10 1 3 0 75 149:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 type:Expression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 10 minus_int: 7 1 3 0 11 minus_long: 7 1 3 0 12 minus_float: 7 1 3 0 13 minus_double: 21 1 3 0 14 IsBoolean:Type 7 1 3 0 18 Not:ExpressionKind 7 1 3 0 12 logical_not: 4 1 3 0 16 BinaryExpression 10 1 3 0 75 217:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 8 add_int: 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 8 sub_int: 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 8 mul_int: 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 8 div_int: 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 8 mod_int: 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 7 gt_int: 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 7 lt_int: 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 7 ge_int: 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 7 le_int: 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 7 eq_int: 7 1 3 0 23 NotEqual:ExpressionKind 7 1 3 0 7 ne_int: 7 1 3 0 9 add_long: 7 1 3 0 9 sub_long: 7 1 3 0 9 mul_long: 7 1 3 0 9 div_long: 7 1 3 0 9 mod_long: 7 1 3 0 8 gt_long: 7 1 3 0 8 lt_long: 7 1 3 0 8 ge_long: 7 1 3 0 8 le_long: 7 1 3 0 8 eq_long: 7 1 3 0 8 ne_long: 7 1 3 0 10 add_float: 7 1 3 0 10 sub_float: 7 1 3 0 10 mul_float: 7 1 3 0 10 div_float: 7 1 3 0 9 gt_float: 7 1 3 0 9 lt_float: 7 1 3 0 9 ge_float: 7 1 3 0 9 le_float: 7 1 3 0 9 eq_float: 7 1 3 0 9 ne_float: 7 1 3 0 11 add_double: 7 1 3 0 11 sub_double: 7 1 3 0 11 mul_double: 7 1 3 0 11 div_double: 7 1 3 0 10 gt_double: 7 1 3 0 10 lt_double: 7 1 3 0 10 ge_double: 7 1 3 0 10 le_double: 7 1 3 0 10 eq_double: 7 1 3 0 10 ne_double: 7 1 3 0 18 And:ExpressionKind 7 1 3 0 12 logical_and: 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 11 logical_or: 4 1 3 0 16 AssignExpression 10 1 3 0 75 445:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:AssignExpression 6 1 3 0 25 location:AssignExpression 21 1 3 0 16 IsLocal:Location 7 1 3 0 14 pop_field_int: 6 1 3 0 14 index:Location 4 1 3 0 15 BlockExpression 10 1 3 0 75 471:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 473:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 75 478:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 26 condition:IfThenExpression 7 1 3 0 14 jump_if_false: 9 1 3 0 75 482:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 13 ConvertUShort 6 1 3 0 23 ifTrue:IfThenExpression 9 1 3 0 75 485:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 13 at:vector:std 4 1 3 0 20 IfThenElseExpression 10 1 3 0 75 489:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 30 condition:IfThenElseExpression 9 1 3 0 75 493:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 ifTrue:IfThenElseExpression 7 1 3 0 5 jump: 9 1 3 0 75 498:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 501:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 28 ifFalse:IfThenElseExpression 9 1 3 0 75 505:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 14 CallExpression 10 1 3 0 75 509:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 511:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 arguments:CallExpression 7 1 3 0 7 invoke: 4 1 3 0 23 NotImplementedException 4 1 3 0 18 VariableExpression 10 1 3 0 75 520:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 location:VariableExpression 7 1 3 0 15 push_local_int: 7 1 3 0 16 push_local_long: 7 1 3 0 17 push_local_float: 4 1 3 0 16 ReturnExpression 10 1 3 0 75 554:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:ReturnExpression 7 1 3 0 11 return_int: 7 1 3 0 12 return_long: 7 1 3 0 13 return_float: 7 1 3 0 14 return_double: 4 1 3 0 15 WhileExpression 10 1 3 0 75 578:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 DotExpression 10 1 3 0 75 581:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 587:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 587:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 588:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 index:CompiledModule 6 1 3 0 25 fieldCount:CompiledModule 6 1 3 0 24 functions:CompiledModule 21 1 3 0 27 EmitByteCode:CompiledModule 9 1 3 0 75 596:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 600:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 602:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 29 EmitByteCode:CompiledFunction 10 1 3 0 75 612:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 612:53:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 613:34:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 index:CompiledClass 6 1 3 0 24 fieldCount:CompiledClass 6 1 3 0 21 methods:CompiledClass 21 1 3 0 26 EmitByteCode:CompiledClass 9 1 3 0 75 621:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 625:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 627:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 637:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 637:59:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 638:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 638:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 639:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 639:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 640:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 index:CompiledFunction 6 1 3 0 26 stackSize:CompiledFunction 6 1 3 0 26 argsCount:CompiledFunction 6 1 3 0 28 localsCount:CompiledFunction 6 1 3 0 30 constantCount:CompiledFunction 6 1 3 0 29 constantPool:CompiledFunction 6 1 3 0 25 byteCode:CompiledFunction 9 1 3 0 75 652:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 659:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 663:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 672:57:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 673:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 modules:CompiledProgram 6 1 3 0 23 classes:CompiledProgram 21 1 3 0 28 EmitByteCode:CompiledProgram 9 1 3 0 75 680:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 681:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 684:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 689:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 692:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 12 ConvertValue 10 1 3 0 75 699:29:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 20 1 3 0 4 byte 10 1 3 0 75 699:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 699:60:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 701:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 706:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 20 1 3 0 8 uint16_t 10 1 3 0 75 706:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 710:27:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 710:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 714:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 714:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 718:29:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 718:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 722:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 722:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 726:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 726:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 728:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 29 size:basic_string:__cxx11:std 9 1 3 0 75 730:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 732:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 35 operator[]:basic_string:__cxx11:std 0 0 8 0 0 0 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 1531040417 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.hpp 1531021024 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1530931711 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530932060 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Instruction.hpp 1530969953 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1530931928 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530932187 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
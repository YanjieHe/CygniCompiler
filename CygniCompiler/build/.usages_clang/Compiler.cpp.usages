22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3996 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "Compiler.hpp" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 15 "Exception.hpp" 2 10 2 25 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 17 "Instruction.hpp" 3 10 3 27 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 1 < 4 10 4 11 18446744073709551615 8 iostream 4 11 4 19 18446744073709551615 1 > 4 19 4 20 18446744073709551615 5 using 5 1 5 6 18446744073709551615 3 std 5 7 5 10 0 2 :: 5 10 5 12 18446744073709551615 8 any_cast 5 12 5 20 1 1 ; 5 20 5 21 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 4 endl 6 12 6 16 2 1 ; 6 16 6 17 18446744073709551615 5 using 7 1 7 6 18446744073709551615 3 std 7 7 7 10 0 2 :: 7 10 7 12 18446744073709551615 5 wcout 7 12 7 17 3 1 ; 7 17 7 18 18446744073709551615 8 Compiler 8 1 8 9 4 2 :: 8 9 8 11 4 8 Compiler 8 11 8 19 4 1 ( 8 19 8 20 4 1 ) 8 20 8 21 4 1 { 9 1 9 2 18446744073709551615 1 } 10 1 10 2 18446744073709551615 15 CompiledProgram 11 1 11 16 5 8 Compiler 11 17 11 25 4 2 :: 11 25 11 27 6 7 Compile 11 27 11 34 6 1 ( 11 34 11 35 6 15 NamespaceRecord 11 35 11 50 7 1 & 11 50 11 51 18446744073709551615 8 nsRecord 11 52 11 60 8 1 ) 11 60 11 61 6 1 { 12 1 12 2 18446744073709551615 3 for 13 2 13 5 18446744073709551615 1 ( 13 6 13 7 18446744073709551615 4 auto 13 7 13 11 18446744073709551615 1 & 13 11 13 12 18446744073709551615 1 p 13 13 13 14 9 1 : 13 15 13 16 10 8 nsRecord 13 17 13 25 8 1 . 13 25 13 26 18446744073709551615 6 record 13 26 13 32 11 1 ) 13 32 13 33 18446744073709551615 1 { 14 2 14 3 18446744073709551615 4 auto 15 3 15 7 18446744073709551615 1 & 15 7 15 8 18446744073709551615 5 nsPtr 15 9 15 14 12 1 = 15 15 15 16 18446744073709551615 1 p 15 17 15 18 9 1 . 15 18 15 19 18446744073709551615 6 second 15 19 15 25 13 1 ; 15 25 15 26 18446744073709551615 16 CompileNamespace 16 3 16 19 14 1 ( 16 19 16 20 14 5 nsPtr 16 20 16 25 12 1 ) 16 25 16 26 14 1 ; 16 26 16 27 18446744073709551615 1 } 17 2 17 3 18446744073709551615 6 return 18 2 18 8 18446744073709551615 15 CompiledProgram 18 9 18 24 5 1 ( 18 24 18 25 5 7 modules 18 25 18 32 15 1 , 18 32 18 33 5 7 classes 18 34 18 41 16 1 ) 18 41 18 42 5 1 ; 18 42 18 43 18446744073709551615 1 } 19 1 19 2 18446744073709551615 4 void 20 1 20 5 18446744073709551615 8 Compiler 20 6 20 14 4 2 :: 20 14 20 16 14 16 CompileNamespace 20 16 20 32 14 1 ( 20 32 20 33 14 10 shared_ptr 20 33 20 43 17 1 < 20 43 20 44 18446744073709551615 9 Namespace 20 44 20 53 18 1 > 20 53 20 54 18446744073709551615 1 & 20 54 20 55 18446744073709551615 5 nsPtr 20 56 20 61 19 1 ) 20 61 20 62 14 1 { 21 1 21 2 18446744073709551615 3 for 22 2 22 5 18446744073709551615 1 ( 22 6 22 7 18446744073709551615 4 auto 22 7 22 11 18446744073709551615 1 & 22 11 22 12 18446744073709551615 1 p 22 13 22 14 20 1 : 22 15 22 16 10 5 nsPtr 22 17 22 22 19 2 -> 22 22 22 24 18446744073709551615 7 modules 22 24 22 31 21 1 ) 22 31 22 32 18446744073709551615 1 { 23 2 23 3 18446744073709551615 6 Module 24 3 24 9 22 1 & 24 9 24 10 18446744073709551615 10 moduleInfo 24 11 24 21 23 1 = 24 22 24 23 18446744073709551615 1 p 24 24 24 25 20 1 . 24 25 24 26 18446744073709551615 6 second 24 26 24 32 13 1 ; 24 32 24 33 18446744073709551615 6 vector 25 3 25 9 24 1 < 25 9 25 10 18446744073709551615 16 CompiledFunction 25 10 25 26 25 1 > 25 26 25 27 18446744073709551615 5 cfVec 25 28 25 33 26 1 ; 25 33 25 34 18446744073709551615 3 for 26 3 26 6 18446744073709551615 1 ( 26 7 26 8 18446744073709551615 4 auto 26 8 26 12 18446744073709551615 1 & 26 12 26 13 18446744073709551615 5 field 26 14 26 19 27 1 : 26 20 26 21 28 10 moduleInfo 26 22 26 32 23 1 . 26 32 26 33 18446744073709551615 6 fields 26 33 26 39 29 1 ) 26 39 26 40 18446744073709551615 1 { 27 3 27 4 18446744073709551615 5 field 28 4 28 9 27 1 . 28 9 28 10 18446744073709551615 5 value 28 10 28 15 30 2 -> 28 15 28 17 31 6 Accept 28 17 28 23 31 1 ( 28 23 28 24 31 4 this 28 24 28 28 18446744073709551615 1 ) 28 28 28 29 31 1 ; 28 29 28 30 18446744073709551615 1 } 29 3 29 4 18446744073709551615 3 for 30 3 30 6 18446744073709551615 1 ( 30 7 30 8 18446744073709551615 4 auto 30 8 30 12 18446744073709551615 1 & 30 12 30 13 18446744073709551615 8 function 30 14 30 22 32 1 : 30 23 30 24 28 10 moduleInfo 30 25 30 35 23 1 . 30 35 30 36 18446744073709551615 9 functions 30 36 30 45 33 1 ) 30 45 30 46 18446744073709551615 1 { 31 3 31 4 18446744073709551615 16 CompiledFunction 32 4 32 20 25 2 cf 32 21 32 23 34 1 = 32 24 32 25 18446744073709551615 15 CompileFunction 32 26 32 41 35 1 ( 32 41 32 42 35 8 function 32 42 32 50 32 1 ) 32 50 32 51 35 1 ; 32 51 32 52 18446744073709551615 5 cfVec 33 4 33 9 26 1 . 33 9 33 10 36 9 push_back 33 10 33 19 36 1 ( 33 19 33 20 36 2 cf 33 20 33 22 34 1 ) 33 22 33 23 36 1 ; 33 23 33 24 18446744073709551615 1 } 34 3 34 4 18446744073709551615 7 modules 35 3 35 10 15 1 . 35 10 35 11 36 9 push_back 35 11 35 20 36 1 ( 35 20 35 21 36 14 CompiledModule 36 4 36 18 37 1 ( 36 18 36 19 37 10 moduleInfo 36 19 36 29 23 1 . 36 29 36 30 18446744073709551615 5 index 36 30 36 35 38 1 , 36 35 36 36 37 10 moduleInfo 36 37 36 47 23 1 . 36 47 36 48 18446744073709551615 6 fields 36 48 36 54 29 1 . 36 54 36 55 39 4 size 36 55 36 59 39 1 ( 36 59 36 60 39 1 ) 36 60 36 61 39 1 , 36 61 36 62 37 5 cfVec 36 63 36 68 26 1 ) 36 68 36 69 37 1 ) 36 69 36 70 36 1 ; 36 70 36 71 18446744073709551615 1 } 37 2 37 3 18446744073709551615 3 for 38 2 38 5 18446744073709551615 1 ( 38 6 38 7 18446744073709551615 4 auto 38 7 38 11 18446744073709551615 1 & 38 11 38 12 18446744073709551615 1 p 38 13 38 14 40 1 : 38 15 38 16 10 5 nsPtr 38 17 38 22 19 2 -> 38 22 38 24 18446744073709551615 7 classes 38 24 38 31 41 1 ) 38 31 38 32 18446744073709551615 1 { 39 2 39 3 18446744073709551615 5 Class 40 3 40 8 42 1 & 40 8 40 9 18446744073709551615 9 classInfo 40 10 40 19 43 1 = 40 20 40 21 18446744073709551615 1 p 40 22 40 23 40 1 . 40 23 40 24 18446744073709551615 6 second 40 24 40 30 13 1 ; 40 30 40 31 18446744073709551615 6 vector 41 3 41 9 24 1 < 41 9 41 10 18446744073709551615 16 CompiledFunction 41 10 41 26 25 1 > 41 26 41 27 18446744073709551615 5 cfVec 41 28 41 33 44 1 ; 41 33 41 34 18446744073709551615 3 for 42 3 42 6 18446744073709551615 1 ( 42 7 42 8 18446744073709551615 4 auto 42 8 42 12 18446744073709551615 1 & 42 12 42 13 18446744073709551615 5 field 42 14 42 19 45 1 : 42 20 42 21 28 9 classInfo 42 22 42 31 43 1 . 42 31 42 32 18446744073709551615 6 fields 42 32 42 38 46 1 ) 42 38 42 39 18446744073709551615 1 { 43 3 43 4 18446744073709551615 5 field 44 4 44 9 45 1 . 44 9 44 10 18446744073709551615 5 value 44 10 44 15 30 2 -> 44 15 44 17 31 6 Accept 44 17 44 23 31 1 ( 44 23 44 24 31 4 this 44 24 44 28 18446744073709551615 1 ) 44 28 44 29 31 1 ; 44 29 44 30 18446744073709551615 1 } 45 3 45 4 18446744073709551615 3 for 46 3 46 6 18446744073709551615 1 ( 46 7 46 8 18446744073709551615 4 auto 46 8 46 12 18446744073709551615 1 & 46 12 46 13 18446744073709551615 8 function 46 14 46 22 47 1 : 46 23 46 24 28 9 classInfo 46 25 46 34 43 1 . 46 34 46 35 18446744073709551615 9 functions 46 35 46 44 48 1 ) 46 44 46 45 18446744073709551615 1 { 47 3 47 4 18446744073709551615 16 CompiledFunction 48 4 48 20 25 2 cf 48 21 48 23 49 1 = 48 24 48 25 18446744073709551615 15 CompileFunction 48 26 48 41 35 1 ( 48 41 48 42 35 8 function 48 42 48 50 47 1 ) 48 50 48 51 35 1 ; 48 51 48 52 18446744073709551615 5 cfVec 49 4 49 9 44 1 . 49 9 49 10 36 9 push_back 49 10 49 19 36 1 ( 49 19 49 20 36 2 cf 49 20 49 22 49 1 ) 49 22 49 23 36 1 ; 49 23 49 24 18446744073709551615 1 } 50 3 50 4 18446744073709551615 7 classes 51 3 51 10 16 1 . 51 10 51 11 36 9 push_back 51 11 51 20 36 1 ( 51 20 51 21 36 13 CompiledClass 52 4 52 17 50 1 ( 52 17 52 18 50 9 classInfo 52 18 52 27 43 1 . 52 27 52 28 18446744073709551615 5 index 52 28 52 33 51 1 , 52 33 52 34 50 9 classInfo 52 35 52 44 43 1 . 52 44 52 45 18446744073709551615 6 fields 52 45 52 51 46 1 . 52 51 52 52 39 4 size 52 52 52 56 39 1 ( 52 56 52 57 39 1 ) 52 57 52 58 39 1 , 52 58 52 59 50 5 cfVec 52 60 52 65 44 1 ) 52 65 52 66 50 1 ) 52 66 52 67 36 1 ; 52 67 52 68 18446744073709551615 1 } 53 2 53 3 18446744073709551615 3 for 54 2 54 5 18446744073709551615 1 ( 54 6 54 7 18446744073709551615 4 auto 54 7 54 11 18446744073709551615 1 & 54 11 54 12 18446744073709551615 1 p 54 13 54 14 52 1 : 54 15 54 16 10 5 nsPtr 54 17 54 22 19 2 -> 54 22 54 24 18446744073709551615 13 subNamespaces 54 24 54 37 53 1 ) 54 37 54 38 18446744073709551615 1 { 55 2 55 3 18446744073709551615 4 auto 56 3 56 7 18446744073709551615 1 & 56 7 56 8 18446744073709551615 8 subNsPtr 56 9 56 17 54 1 = 56 18 56 19 18446744073709551615 1 p 56 20 56 21 52 1 . 56 21 56 22 18446744073709551615 6 second 56 22 56 28 13 1 ; 56 28 56 29 18446744073709551615 16 CompileNamespace 57 3 57 19 14 1 ( 57 19 57 20 14 8 subNsPtr 57 20 57 28 54 1 ) 57 28 57 29 14 1 ; 57 29 57 30 18446744073709551615 1 } 58 2 58 3 18446744073709551615 1 } 59 1 59 2 18446744073709551615 16 CompiledFunction 60 1 60 17 25 8 Compiler 60 18 60 26 4 2 :: 60 26 60 28 35 15 CompileFunction 60 28 60 43 35 1 ( 60 43 60 44 35 8 Function 60 44 60 52 55 1 & 60 52 60 53 18446744073709551615 8 function 60 54 60 62 56 1 ) 60 62 60 63 35 1 { 61 1 61 2 18446744073709551615 8 byteCode 62 2 62 10 57 1 = 62 11 62 12 58 8 ByteCode 62 13 62 21 59 1 ( 62 21 62 22 24 1 ) 62 22 62 23 24 1 ; 62 23 62 24 18446744073709551615 12 constantPool 63 2 63 14 60 1 = 63 15 63 16 58 8 ByteCode 63 17 63 25 59 1 ( 63 25 63 26 24 1 ) 63 26 63 27 24 1 ; 63 27 63 28 18446744073709551615 14 constantsCount 64 2 64 16 61 1 = 64 17 64 18 18446744073709551615 1 0 64 19 64 20 18446744073709551615 1 ; 64 20 64 21 18446744073709551615 3 for 65 2 65 5 18446744073709551615 1 ( 65 6 65 7 18446744073709551615 13 LocalVariable 65 7 65 20 62 1 & 65 20 65 21 18446744073709551615 8 variable 65 22 65 30 63 1 : 65 31 65 32 28 8 function 65 33 65 41 56 1 . 65 41 65 42 18446744073709551615 9 variables 65 42 65 51 64 1 ) 65 51 65 52 18446744073709551615 1 { 66 2 66 3 18446744073709551615 8 variable 67 3 67 11 63 1 . 67 11 67 12 18446744073709551615 5 value 67 12 67 17 65 2 -> 67 17 67 19 31 6 Accept 67 19 67 25 31 1 ( 67 25 67 26 31 4 this 67 26 67 30 18446744073709551615 1 ) 67 30 67 31 31 1 ; 67 31 67 32 18446744073709551615 7 int32_t 68 3 68 10 66 6 offset 68 11 68 17 67 1 = 68 18 68 19 18446744073709551615 8 variable 68 20 68 28 63 1 . 68 28 68 29 18446744073709551615 8 location 68 29 68 37 68 1 . 68 37 68 38 18446744073709551615 6 offset 68 38 68 44 69 1 ; 68 44 68 45 18446744073709551615 2 if 69 3 69 5 18446744073709551615 1 ( 69 6 69 7 18446744073709551615 8 variable 69 7 69 15 63 1 . 69 15 69 16 18446744073709551615 4 type 69 16 69 20 70 1 . 69 20 69 21 71 5 IsInt 69 21 69 26 71 1 ( 69 26 69 27 71 1 ) 69 27 69 28 71 1 ) 69 28 69 29 18446744073709551615 1 { 70 3 70 4 18446744073709551615 8 byteCode 71 4 71 12 57 1 . 71 12 71 13 36 9 push_back 71 13 71 22 36 1 ( 71 22 71 23 36 13 pop_local_int 71 23 71 36 72 1 ) 71 36 71 37 36 1 ; 71 37 71 38 18446744073709551615 1 } 72 3 72 4 18446744073709551615 4 else 73 3 73 7 18446744073709551615 2 if 73 8 73 10 18446744073709551615 1 ( 73 11 73 12 18446744073709551615 8 variable 73 12 73 20 63 1 . 73 20 73 21 18446744073709551615 4 type 73 21 73 25 70 1 . 73 25 73 26 73 6 IsLong 73 26 73 32 73 1 ( 73 32 73 33 73 1 ) 73 33 73 34 73 1 ) 73 34 73 35 18446744073709551615 1 { 74 3 74 4 18446744073709551615 8 byteCode 75 4 75 12 57 1 . 75 12 75 13 36 9 push_back 75 13 75 22 36 1 ( 75 22 75 23 36 14 pop_local_long 75 23 75 37 74 1 ) 75 37 75 38 36 1 ; 75 38 75 39 18446744073709551615 1 } 76 3 76 4 18446744073709551615 4 else 77 3 77 7 18446744073709551615 2 if 77 8 77 10 18446744073709551615 1 ( 77 11 77 12 18446744073709551615 8 variable 77 12 77 20 63 1 . 77 20 77 21 18446744073709551615 4 type 77 21 77 25 70 1 . 77 25 77 26 75 7 IsFloat 77 26 77 33 75 1 ( 77 33 77 34 75 1 ) 77 34 77 35 75 1 ) 77 35 77 36 18446744073709551615 1 { 78 3 78 4 18446744073709551615 8 byteCode 79 4 79 12 57 1 . 79 12 79 13 36 9 push_back 79 13 79 22 36 1 ( 79 22 79 23 36 15 pop_local_float 79 23 79 38 76 1 ) 79 38 79 39 36 1 ; 79 39 79 40 18446744073709551615 1 } 80 3 80 4 18446744073709551615 4 else 81 3 81 7 18446744073709551615 2 if 81 8 81 10 18446744073709551615 1 ( 81 11 81 12 18446744073709551615 8 variable 81 12 81 20 63 1 . 81 20 81 21 18446744073709551615 4 type 81 21 81 25 70 1 . 81 25 81 26 77 8 IsDouble 81 26 81 34 77 1 ( 81 34 81 35 77 1 ) 81 35 81 36 77 1 ) 81 36 81 37 18446744073709551615 1 { 82 3 82 4 18446744073709551615 8 byteCode 83 4 83 12 57 1 . 83 12 83 13 36 9 push_back 83 13 83 22 36 1 ( 83 22 83 23 36 16 pop_local_double 83 23 83 39 78 1 ) 83 39 83 40 36 1 ; 83 40 83 41 18446744073709551615 1 } 84 3 84 4 18446744073709551615 4 else 85 3 85 7 18446744073709551615 2 if 85 8 85 10 18446744073709551615 1 ( 85 11 85 12 18446744073709551615 8 variable 85 12 85 20 63 1 . 85 20 85 21 18446744073709551615 4 type 85 21 85 25 70 1 . 85 25 85 26 79 8 IsString 85 26 85 34 79 1 ( 85 34 85 35 79 1 ) 85 35 85 36 79 1 ) 85 36 85 37 18446744073709551615 1 { 86 3 86 4 18446744073709551615 8 byteCode 87 4 87 12 57 1 . 87 12 87 13 36 9 push_back 87 13 87 22 36 1 ( 87 22 87 23 36 16 pop_local_string 87 23 87 39 80 1 ) 87 39 87 40 36 1 ; 87 40 87 41 18446744073709551615 1 } 88 3 88 4 18446744073709551615 4 else 89 3 89 7 18446744073709551615 1 { 90 3 90 4 18446744073709551615 5 throw 91 4 91 9 18446744073709551615 7 wstring 91 10 91 17 81 1 ( 91 17 91 18 82 30 L"not supported variable type" 91 18 91 48 18446744073709551615 1 ) 91 48 91 49 82 1 ; 91 49 91 50 18446744073709551615 1 } 92 3 92 4 18446744073709551615 8 byteCode 93 3 93 11 57 1 . 93 11 93 12 36 9 push_back 93 12 93 21 36 1 ( 93 21 93 22 36 6 offset 93 22 93 28 67 1 ) 93 28 93 29 36 1 ; 93 29 93 30 18446744073709551615 1 } 94 2 94 3 18446744073709551615 3 for 95 2 95 5 18446744073709551615 1 ( 95 6 95 7 18446744073709551615 4 auto 95 7 95 11 18446744073709551615 1 & 95 11 95 12 18446744073709551615 1 e 95 13 95 14 83 1 : 95 15 95 16 28 8 function 95 17 95 25 56 1 . 95 25 95 26 18446744073709551615 11 expressions 95 26 95 37 84 1 ) 95 37 95 38 18446744073709551615 1 { 96 2 96 3 18446744073709551615 1 e 97 3 97 4 83 2 -> 97 4 97 6 31 6 Accept 97 6 97 12 31 1 ( 97 12 97 13 31 4 this 97 13 97 17 18446744073709551615 1 ) 97 17 97 18 31 1 ; 97 18 97 19 18446744073709551615 1 } 98 2 98 3 18446744073709551615 7 int32_t 99 2 99 9 66 6 offset 99 10 99 16 85 1 = 99 17 99 18 18446744073709551615 8 function 99 19 99 27 56 1 . 99 27 99 28 18446744073709551615 8 location 99 28 99 36 86 1 . 99 36 99 37 18446744073709551615 6 offset 99 37 99 43 69 1 ; 99 43 99 44 18446744073709551615 7 int32_t 100 2 100 9 66 9 stackSize 100 10 100 19 87 1 = 100 20 100 21 18446744073709551615 1 0 100 22 100 23 18446744073709551615 1 ; 100 23 100 24 18446744073709551615 7 int32_t 101 2 101 9 66 9 argsCount 101 10 101 19 88 1 = 101 20 101 21 18446744073709551615 8 function 101 22 101 30 56 1 . 101 30 101 31 18446744073709551615 10 parameters 101 31 101 41 89 1 . 101 41 101 42 39 4 size 101 42 101 46 39 1 ( 101 46 101 47 39 1 ) 101 47 101 48 39 1 ; 101 48 101 49 18446744073709551615 7 int32_t 102 2 102 9 66 11 localsCount 102 10 102 21 90 1 = 102 22 102 23 18446744073709551615 8 function 102 24 102 32 56 1 . 102 32 102 33 18446744073709551615 9 variables 102 33 102 42 64 1 . 102 42 102 43 39 4 size 102 43 102 47 39 1 ( 102 47 102 48 39 1 ) 102 48 102 49 39 1 ; 102 49 102 50 18446744073709551615 6 return 103 2 103 8 18446744073709551615 16 CompiledFunction 103 9 103 25 25 1 ( 103 25 103 26 25 8 function 103 26 103 34 56 1 . 103 34 103 35 18446744073709551615 4 name 103 35 103 39 91 1 , 103 39 103 40 25 6 offset 103 41 103 47 85 1 , 103 47 103 48 25 9 stackSize 103 49 103 58 87 1 , 103 58 103 59 25 9 argsCount 103 60 103 69 88 1 , 103 69 103 70 25 11 localsCount 104 8 104 19 90 1 , 104 19 104 20 25 14 constantsCount 104 21 104 35 61 1 , 104 35 104 36 25 12 constantPool 104 37 104 49 60 1 , 104 49 104 50 25 8 byteCode 105 8 105 16 57 1 ) 105 16 105 17 25 1 ; 105 17 105 18 18446744073709551615 1 } 106 1 106 2 18446744073709551615 4 void 107 1 107 5 18446744073709551615 8 Compiler 107 6 107 14 4 2 :: 107 14 107 16 92 5 Visit 107 16 107 21 92 1 ( 107 21 107 22 92 18 ConstantExpression 107 22 107 40 93 1 * 107 40 107 41 18446744073709551615 4 node 107 42 107 46 94 1 ) 107 46 107 47 92 1 { 108 1 108 2 18446744073709551615 3 any 109 2 109 5 95 5 value 109 6 109 11 96 1 = 109 12 109 13 18446744073709551615 4 node 109 14 109 18 94 2 -> 109 18 109 20 18446744073709551615 5 value 109 20 109 25 97 1 ; 109 25 109 26 18446744073709551615 2 if 110 2 110 4 18446744073709551615 1 ( 110 5 110 6 18446744073709551615 5 value 110 6 110 11 96 1 . 110 11 110 12 98 4 type 110 12 110 16 98 1 ( 110 16 110 17 98 1 ) 110 17 110 18 98 2 == 110 19 110 21 99 6 typeid 110 22 110 28 18446744073709551615 1 ( 110 28 110 29 18446744073709551615 7 int32_t 110 29 110 36 66 1 ) 110 36 110 37 18446744073709551615 1 ) 110 37 110 38 18446744073709551615 1 { 111 2 111 3 18446744073709551615 12 constantPool 112 3 112 15 60 1 . 112 15 112 16 36 9 push_back 112 16 112 25 36 1 ( 112 25 112 26 36 12 constant_int 112 26 112 38 100 1 ) 112 38 112 39 36 1 ; 112 39 112 40 18446744073709551615 10 ConvertInt 113 3 113 13 101 1 ( 113 13 113 14 101 12 constantPool 113 14 113 26 60 1 , 113 26 113 27 101 8 any_cast 113 28 113 36 102 1 < 113 36 113 37 102 7 int32_t 113 37 113 44 66 1 > 113 44 113 45 102 1 ( 113 45 113 46 102 5 value 113 46 113 51 96 1 ) 113 51 113 52 102 1 ) 113 52 113 53 101 1 ; 113 53 113 54 18446744073709551615 8 byteCode 114 3 114 11 57 1 . 114 11 114 12 36 9 push_back 114 12 114 21 36 1 ( 114 21 114 22 36 17 push_constant_int 114 22 114 39 103 1 ) 114 39 114 40 36 1 ; 114 40 114 41 18446744073709551615 1 } 115 2 115 3 18446744073709551615 4 else 116 2 116 6 18446744073709551615 2 if 116 7 116 9 18446744073709551615 1 ( 116 10 116 11 18446744073709551615 5 value 116 11 116 16 96 1 . 116 16 116 17 98 4 type 116 17 116 21 98 1 ( 116 21 116 22 98 1 ) 116 22 116 23 98 2 == 116 24 116 26 99 6 typeid 116 27 116 33 18446744073709551615 1 ( 116 33 116 34 18446744073709551615 7 int64_t 116 34 116 41 104 1 ) 116 41 116 42 18446744073709551615 1 ) 116 42 116 43 18446744073709551615 1 { 117 2 117 3 18446744073709551615 12 constantPool 118 3 118 15 60 1 . 118 15 118 16 36 9 push_back 118 16 118 25 36 1 ( 118 25 118 26 36 13 constant_long 118 26 118 39 105 1 ) 118 39 118 40 36 1 ; 118 40 118 41 18446744073709551615 11 ConvertLong 119 3 119 14 106 1 ( 119 14 119 15 106 12 constantPool 119 15 119 27 60 1 , 119 27 119 28 106 8 any_cast 119 29 119 37 102 1 < 119 37 119 38 102 7 int64_t 119 38 119 45 104 1 > 119 45 119 46 102 1 ( 119 46 119 47 102 5 value 119 47 119 52 96 1 ) 119 52 119 53 102 1 ) 119 53 119 54 106 1 ; 119 54 119 55 18446744073709551615 8 byteCode 120 3 120 11 57 1 . 120 11 120 12 36 9 push_back 120 12 120 21 36 1 ( 120 21 120 22 36 18 push_constant_long 120 22 120 40 107 1 ) 120 40 120 41 36 1 ; 120 41 120 42 18446744073709551615 1 } 121 2 121 3 18446744073709551615 4 else 122 2 122 6 18446744073709551615 2 if 122 7 122 9 18446744073709551615 1 ( 122 10 122 11 18446744073709551615 5 value 122 11 122 16 96 1 . 122 16 122 17 98 4 type 122 17 122 21 98 1 ( 122 21 122 22 98 1 ) 122 22 122 23 98 2 == 122 24 122 26 99 6 typeid 122 27 122 33 18446744073709551615 1 ( 122 33 122 34 18446744073709551615 5 float 122 34 122 39 18446744073709551615 1 ) 122 39 122 40 18446744073709551615 1 ) 122 40 122 41 18446744073709551615 1 { 123 2 123 3 18446744073709551615 12 constantPool 124 3 124 15 60 1 . 124 15 124 16 36 9 push_back 124 16 124 25 36 1 ( 124 25 124 26 36 14 constant_float 124 26 124 40 108 1 ) 124 40 124 41 36 1 ; 124 41 124 42 18446744073709551615 12 ConvertFloat 125 3 125 15 109 1 ( 125 15 125 16 109 12 constantPool 125 16 125 28 60 1 , 125 28 125 29 109 8 any_cast 125 30 125 38 102 1 < 125 38 125 39 102 5 float 125 39 125 44 18446744073709551615 1 > 125 44 125 45 102 1 ( 125 45 125 46 102 5 value 125 46 125 51 96 1 ) 125 51 125 52 102 1 ) 125 52 125 53 109 1 ; 125 53 125 54 18446744073709551615 8 byteCode 126 3 126 11 57 1 . 126 11 126 12 36 9 push_back 126 12 126 21 36 1 ( 126 21 126 22 36 19 push_constant_float 126 22 126 41 110 1 ) 126 41 126 42 36 1 ; 126 42 126 43 18446744073709551615 1 } 127 2 127 3 18446744073709551615 4 else 128 2 128 6 18446744073709551615 2 if 128 7 128 9 18446744073709551615 1 ( 128 10 128 11 18446744073709551615 5 value 128 11 128 16 96 1 . 128 16 128 17 98 4 type 128 17 128 21 98 1 ( 128 21 128 22 98 1 ) 128 22 128 23 98 2 == 128 24 128 26 99 6 typeid 128 27 128 33 18446744073709551615 1 ( 128 33 128 34 18446744073709551615 6 double 128 34 128 40 18446744073709551615 1 ) 128 40 128 41 18446744073709551615 1 ) 128 41 128 42 18446744073709551615 1 { 129 2 129 3 18446744073709551615 12 constantPool 130 3 130 15 60 1 . 130 15 130 16 36 9 push_back 130 16 130 25 36 1 ( 130 25 130 26 36 15 constant_double 130 26 130 41 111 1 ) 130 41 130 42 36 1 ; 130 42 130 43 18446744073709551615 13 ConvertDouble 131 3 131 16 112 1 ( 131 16 131 17 112 12 constantPool 131 17 131 29 60 1 , 131 29 131 30 112 8 any_cast 131 31 131 39 102 1 < 131 39 131 40 102 6 double 131 40 131 46 18446744073709551615 1 > 131 46 131 47 102 1 ( 131 47 131 48 102 5 value 131 48 131 53 96 1 ) 131 53 131 54 102 1 ) 131 54 131 55 112 1 ; 131 55 131 56 18446744073709551615 8 byteCode 132 3 132 11 57 1 . 132 11 132 12 36 9 push_back 132 12 132 21 36 1 ( 132 21 132 22 36 20 push_constant_double 132 22 132 42 113 1 ) 132 42 132 43 36 1 ; 132 43 132 44 18446744073709551615 1 } 133 2 133 3 18446744073709551615 4 else 134 2 134 6 18446744073709551615 2 if 134 7 134 9 18446744073709551615 1 ( 134 10 134 11 18446744073709551615 5 value 134 11 134 16 96 1 . 134 16 134 17 98 4 type 134 17 134 21 98 1 ( 134 21 134 22 98 1 ) 134 22 134 23 98 2 == 134 24 134 26 99 6 typeid 134 27 134 33 18446744073709551615 1 ( 134 33 134 34 18446744073709551615 7 wchar_t 134 34 134 41 18446744073709551615 1 ) 134 41 134 42 18446744073709551615 1 ) 134 42 134 43 18446744073709551615 1 { 135 2 135 3 18446744073709551615 12 constantPool 136 3 136 15 60 1 . 136 15 136 16 36 9 push_back 136 16 136 25 36 1 ( 136 25 136 26 36 12 constant_int 136 26 136 38 100 1 ) 136 38 136 39 36 1 ; 136 39 136 40 18446744073709551615 10 ConvertInt 137 3 137 13 101 1 ( 137 13 137 14 101 12 constantPool 137 14 137 26 60 1 , 137 26 137 27 101 8 any_cast 137 28 137 36 102 1 < 137 36 137 37 102 7 int32_t 137 37 137 44 66 1 > 137 44 137 45 102 1 ( 137 45 137 46 102 5 value 137 46 137 51 96 1 ) 137 51 137 52 102 1 ) 137 52 137 53 101 1 ; 137 53 137 54 18446744073709551615 8 byteCode 138 3 138 11 57 1 . 138 11 138 12 36 9 push_back 138 12 138 21 36 1 ( 138 21 138 22 36 17 push_constant_int 138 22 138 39 103 1 ) 138 39 138 40 36 1 ; 138 40 138 41 18446744073709551615 1 } 139 2 139 3 18446744073709551615 4 else 140 2 140 6 18446744073709551615 2 if 140 7 140 9 18446744073709551615 1 ( 140 10 140 11 18446744073709551615 5 value 140 11 140 16 96 1 . 140 16 140 17 98 4 type 140 17 140 21 98 1 ( 140 21 140 22 98 1 ) 140 22 140 23 98 2 == 140 24 140 26 99 6 typeid 140 27 140 33 18446744073709551615 1 ( 140 33 140 34 18446744073709551615 7 wstring 140 34 140 41 81 1 ) 140 41 140 42 18446744073709551615 1 ) 140 42 140 43 18446744073709551615 1 { 141 2 141 3 18446744073709551615 12 constantPool 142 3 142 15 60 1 . 142 15 142 16 36 9 push_back 142 16 142 25 36 1 ( 142 25 142 26 36 15 constant_string 142 26 142 41 114 1 ) 142 41 142 42 36 1 ; 142 42 142 43 18446744073709551615 13 ConvertString 143 3 143 16 115 1 ( 143 16 143 17 115 12 constantPool 143 17 143 29 60 1 , 143 29 143 30 115 8 any_cast 143 31 143 39 102 1 < 143 39 143 40 102 7 wstring 143 40 143 47 81 1 > 143 47 143 48 102 1 ( 143 48 143 49 102 5 value 143 49 143 54 96 1 ) 143 54 143 55 102 1 ) 143 55 143 56 115 1 ; 143 56 143 57 18446744073709551615 8 byteCode 144 3 144 11 57 1 . 144 11 144 12 36 9 push_back 144 12 144 21 36 1 ( 144 21 144 22 36 20 push_constant_string 144 22 144 42 116 1 ) 144 42 144 43 36 1 ; 144 43 144 44 18446744073709551615 1 } 145 2 145 3 18446744073709551615 4 else 146 2 146 6 18446744073709551615 1 { 147 2 147 3 18446744073709551615 5 throw 148 3 148 8 18446744073709551615 7 wstring 148 9 148 16 81 1 ( 148 16 148 17 82 17 L"wrong constant" 148 17 148 34 18446744073709551615 1 ) 148 34 148 35 82 1 ; 148 35 148 36 18446744073709551615 1 } 149 2 149 3 18446744073709551615 8 byteCode 150 2 150 10 57 1 . 150 10 150 11 36 9 push_back 150 11 150 20 36 1 ( 150 20 150 21 36 14 constantsCount 150 21 150 35 61 1 ) 150 35 150 36 36 1 ; 150 36 150 37 18446744073709551615 14 constantsCount 151 2 151 16 61 2 ++ 151 16 151 18 18446744073709551615 1 ; 151 18 151 19 18446744073709551615 1 } 152 1 152 2 18446744073709551615 4 void 153 1 153 5 18446744073709551615 8 Compiler 153 6 153 14 4 2 :: 153 14 153 16 92 5 Visit 153 16 153 21 92 1 ( 153 21 153 22 92 15 UnaryExpression 153 22 153 37 117 1 * 153 37 153 38 18446744073709551615 4 node 153 39 153 43 118 1 ) 153 43 153 44 92 1 { 154 1 154 2 18446744073709551615 4 node 155 2 155 6 118 2 -> 155 6 155 8 18446744073709551615 7 operand 155 8 155 15 119 2 -> 155 15 155 17 31 6 Accept 155 17 155 23 31 1 ( 155 23 155 24 31 4 this 155 24 155 28 18446744073709551615 1 ) 155 28 155 29 31 1 ; 155 29 155 30 18446744073709551615 2 if 156 2 156 4 18446744073709551615 1 ( 156 5 156 6 18446744073709551615 4 node 156 6 156 10 118 2 -> 156 10 156 12 18446744073709551615 4 type 156 12 156 16 120 1 . 156 16 156 17 71 5 IsInt 156 17 156 22 71 1 ( 156 22 156 23 71 1 ) 156 23 156 24 71 1 ) 156 24 156 25 18446744073709551615 1 { 157 2 157 3 18446744073709551615 2 if 158 3 158 5 18446744073709551615 1 ( 158 6 158 7 18446744073709551615 4 node 158 7 158 11 118 2 -> 158 11 158 13 18446744073709551615 4 kind 158 13 158 17 121 2 == 158 18 158 20 18446744073709551615 14 ExpressionKind 158 21 158 35 122 2 :: 158 35 158 37 18446744073709551615 9 UnaryPlus 158 37 158 46 123 1 ) 158 46 158 47 18446744073709551615 1 { 159 3 159 4 18446744073709551615 1 } 160 3 160 4 18446744073709551615 4 else 161 3 161 7 18446744073709551615 2 if 161 8 161 10 18446744073709551615 1 ( 161 11 161 12 18446744073709551615 4 node 161 12 161 16 118 2 -> 161 16 161 18 18446744073709551615 4 kind 161 18 161 22 121 2 == 161 23 161 25 18446744073709551615 14 ExpressionKind 161 26 161 40 122 2 :: 161 40 161 42 18446744073709551615 10 UnaryMinus 161 42 161 52 124 1 ) 161 52 161 53 18446744073709551615 1 { 162 3 162 4 18446744073709551615 8 byteCode 163 4 163 12 57 1 . 163 12 163 13 36 9 push_back 163 13 163 22 36 1 ( 163 22 163 23 36 9 minus_int 163 23 163 32 125 1 ) 163 32 163 33 36 1 ; 163 33 163 34 18446744073709551615 1 } 164 3 164 4 18446744073709551615 4 else 165 3 165 7 18446744073709551615 1 { 166 3 166 4 18446744073709551615 5 throw 167 4 167 9 18446744073709551615 7 wstring 167 10 167 17 81 1 ( 167 17 167 18 82 46 L"wrong unary operation, where operand is int" 167 18 167 64 18446744073709551615 1 ) 167 64 167 65 82 1 ; 167 65 167 66 18446744073709551615 1 } 168 3 168 4 18446744073709551615 1 } 169 2 169 3 18446744073709551615 4 else 170 2 170 6 18446744073709551615 2 if 170 7 170 9 18446744073709551615 1 ( 170 10 170 11 18446744073709551615 4 node 170 11 170 15 118 2 -> 170 15 170 17 18446744073709551615 4 type 170 17 170 21 120 1 . 170 21 170 22 73 6 IsLong 170 22 170 28 73 1 ( 170 28 170 29 73 1 ) 170 29 170 30 73 1 ) 170 30 170 31 18446744073709551615 1 { 171 2 171 3 18446744073709551615 2 if 172 3 172 5 18446744073709551615 1 ( 172 6 172 7 18446744073709551615 4 node 172 7 172 11 118 2 -> 172 11 172 13 18446744073709551615 4 kind 172 13 172 17 121 2 == 172 18 172 20 18446744073709551615 14 ExpressionKind 172 21 172 35 122 2 :: 172 35 172 37 18446744073709551615 9 UnaryPlus 172 37 172 46 123 1 ) 172 46 172 47 18446744073709551615 1 { 173 3 173 4 18446744073709551615 1 } 174 3 174 4 18446744073709551615 4 else 175 3 175 7 18446744073709551615 2 if 175 8 175 10 18446744073709551615 1 ( 175 11 175 12 18446744073709551615 4 node 175 12 175 16 118 2 -> 175 16 175 18 18446744073709551615 4 kind 175 18 175 22 121 2 == 175 23 175 25 18446744073709551615 14 ExpressionKind 175 26 175 40 122 2 :: 175 40 175 42 18446744073709551615 10 UnaryMinus 175 42 175 52 124 1 ) 175 52 175 53 18446744073709551615 1 { 176 3 176 4 18446744073709551615 8 byteCode 177 4 177 12 57 1 . 177 12 177 13 36 9 push_back 177 13 177 22 36 1 ( 177 22 177 23 36 10 minus_long 177 23 177 33 126 1 ) 177 33 177 34 36 1 ; 177 34 177 35 18446744073709551615 1 } 178 3 178 4 18446744073709551615 4 else 179 3 179 7 18446744073709551615 1 { 180 3 180 4 18446744073709551615 5 throw 181 4 181 9 18446744073709551615 7 wstring 181 10 181 17 81 1 ( 181 17 181 18 82 47 L"wrong unary operation, where operand is long" 181 18 181 65 18446744073709551615 1 ) 181 65 181 66 82 1 ; 181 66 181 67 18446744073709551615 1 } 182 3 182 4 18446744073709551615 1 } 183 2 183 3 18446744073709551615 4 else 184 2 184 6 18446744073709551615 2 if 184 7 184 9 18446744073709551615 1 ( 184 10 184 11 18446744073709551615 4 node 184 11 184 15 118 2 -> 184 15 184 17 18446744073709551615 4 type 184 17 184 21 120 1 . 184 21 184 22 75 7 IsFloat 184 22 184 29 75 1 ( 184 29 184 30 75 1 ) 184 30 184 31 75 1 ) 184 31 184 32 18446744073709551615 1 { 185 2 185 3 18446744073709551615 2 if 186 3 186 5 18446744073709551615 1 ( 186 6 186 7 18446744073709551615 4 node 186 7 186 11 118 2 -> 186 11 186 13 18446744073709551615 4 kind 186 13 186 17 121 2 == 186 18 186 20 18446744073709551615 14 ExpressionKind 186 21 186 35 122 2 :: 186 35 186 37 18446744073709551615 9 UnaryPlus 186 37 186 46 123 1 ) 186 46 186 47 18446744073709551615 1 { 187 3 187 4 18446744073709551615 1 } 188 3 188 4 18446744073709551615 4 else 189 3 189 7 18446744073709551615 2 if 189 8 189 10 18446744073709551615 1 ( 189 11 189 12 18446744073709551615 4 node 189 12 189 16 118 2 -> 189 16 189 18 18446744073709551615 4 kind 189 18 189 22 121 2 == 189 23 189 25 18446744073709551615 14 ExpressionKind 189 26 189 40 122 2 :: 189 40 189 42 18446744073709551615 10 UnaryMinus 189 42 189 52 124 1 ) 189 52 189 53 18446744073709551615 1 { 190 3 190 4 18446744073709551615 8 byteCode 191 4 191 12 57 1 . 191 12 191 13 36 9 push_back 191 13 191 22 36 1 ( 191 22 191 23 36 11 minus_float 191 23 191 34 127 1 ) 191 34 191 35 36 1 ; 191 35 191 36 18446744073709551615 1 } 192 3 192 4 18446744073709551615 4 else 193 3 193 7 18446744073709551615 1 { 194 3 194 4 18446744073709551615 5 throw 195 4 195 9 18446744073709551615 7 wstring 195 10 195 17 81 1 ( 195 17 195 18 82 48 L"wrong unary operation, where operand is float" 195 18 195 66 18446744073709551615 1 ) 195 66 195 67 82 1 ; 195 67 195 68 18446744073709551615 1 } 196 3 196 4 18446744073709551615 1 } 197 2 197 3 18446744073709551615 4 else 198 2 198 6 18446744073709551615 2 if 198 7 198 9 18446744073709551615 1 ( 198 10 198 11 18446744073709551615 4 node 198 11 198 15 118 2 -> 198 15 198 17 18446744073709551615 4 type 198 17 198 21 120 1 . 198 21 198 22 77 8 IsDouble 198 22 198 30 77 1 ( 198 30 198 31 77 1 ) 198 31 198 32 77 1 ) 198 32 198 33 18446744073709551615 1 { 199 2 199 3 18446744073709551615 2 if 200 3 200 5 18446744073709551615 1 ( 200 6 200 7 18446744073709551615 4 node 200 7 200 11 118 2 -> 200 11 200 13 18446744073709551615 4 kind 200 13 200 17 121 2 == 200 18 200 20 18446744073709551615 14 ExpressionKind 200 21 200 35 122 2 :: 200 35 200 37 18446744073709551615 9 UnaryPlus 200 37 200 46 123 1 ) 200 46 200 47 18446744073709551615 1 { 201 3 201 4 18446744073709551615 1 } 202 3 202 4 18446744073709551615 4 else 203 3 203 7 18446744073709551615 2 if 203 8 203 10 18446744073709551615 1 ( 203 11 203 12 18446744073709551615 4 node 203 12 203 16 118 2 -> 203 16 203 18 18446744073709551615 4 kind 203 18 203 22 121 2 == 203 23 203 25 18446744073709551615 14 ExpressionKind 203 26 203 40 122 2 :: 203 40 203 42 18446744073709551615 10 UnaryMinus 203 42 203 52 124 1 ) 203 52 203 53 18446744073709551615 1 { 204 3 204 4 18446744073709551615 8 byteCode 205 4 205 12 57 1 . 205 12 205 13 36 9 push_back 205 13 205 22 36 1 ( 205 22 205 23 36 12 minus_double 205 23 205 35 128 1 ) 205 35 205 36 36 1 ; 205 36 205 37 18446744073709551615 1 } 206 3 206 4 18446744073709551615 4 else 207 3 207 7 18446744073709551615 1 { 208 3 208 4 18446744073709551615 5 throw 209 4 209 9 18446744073709551615 7 wstring 209 10 209 17 81 1 ( 209 17 209 18 82 49 L"wrong unary operation, where operand is double" 209 18 209 67 18446744073709551615 1 ) 209 67 209 68 82 1 ; 209 68 209 69 18446744073709551615 1 } 210 3 210 4 18446744073709551615 1 } 211 2 211 3 18446744073709551615 4 else 212 2 212 6 18446744073709551615 2 if 212 7 212 9 18446744073709551615 1 ( 212 10 212 11 18446744073709551615 4 node 212 11 212 15 118 2 -> 212 15 212 17 18446744073709551615 4 type 212 17 212 21 120 1 . 212 21 212 22 129 9 IsBoolean 212 22 212 31 129 1 ( 212 31 212 32 129 1 ) 212 32 212 33 129 2 && 212 34 212 36 18446744073709551615 4 node 212 37 212 41 118 2 -> 212 41 212 43 18446744073709551615 4 kind 212 43 212 47 121 2 == 212 48 212 50 18446744073709551615 14 ExpressionKind 212 51 212 65 122 2 :: 212 65 212 67 18446744073709551615 3 Not 212 67 212 70 130 1 ) 212 70 212 71 18446744073709551615 1 { 213 2 213 3 18446744073709551615 8 byteCode 214 3 214 11 57 1 . 214 11 214 12 36 9 push_back 214 12 214 21 36 1 ( 214 21 214 22 36 11 logical_not 214 22 214 33 131 1 ) 214 33 214 34 36 1 ; 214 34 214 35 18446744073709551615 1 } 215 2 215 3 18446744073709551615 4 else 216 2 216 6 18446744073709551615 1 { 217 2 217 3 18446744073709551615 5 throw 218 3 218 8 18446744073709551615 7 wstring 218 9 218 16 81 1 ( 218 16 218 17 82 24 L"wrong unary operation" 218 17 218 41 18446744073709551615 1 ) 218 41 218 42 82 1 ; 218 42 218 43 18446744073709551615 1 } 219 2 219 3 18446744073709551615 1 } 220 1 220 2 18446744073709551615 4 void 221 1 221 5 18446744073709551615 8 Compiler 221 6 221 14 4 2 :: 221 14 221 16 92 5 Visit 221 16 221 21 92 1 ( 221 21 221 22 92 16 BinaryExpression 221 22 221 38 132 1 * 221 38 221 39 18446744073709551615 4 node 221 40 221 44 133 1 ) 221 44 221 45 92 1 { 222 1 222 2 18446744073709551615 4 node 223 2 223 6 133 2 -> 223 6 223 8 18446744073709551615 4 left 223 8 223 12 134 2 -> 223 12 223 14 31 6 Accept 223 14 223 20 31 1 ( 223 20 223 21 31 4 this 223 21 223 25 18446744073709551615 1 ) 223 25 223 26 31 1 ; 223 26 223 27 18446744073709551615 4 node 224 2 224 6 133 2 -> 224 6 224 8 18446744073709551615 5 right 224 8 224 13 135 2 -> 224 13 224 15 31 6 Accept 224 15 224 21 31 1 ( 224 21 224 22 31 4 this 224 22 224 26 18446744073709551615 1 ) 224 26 224 27 31 1 ; 224 27 224 28 18446744073709551615 2 if 225 2 225 4 18446744073709551615 1 ( 225 5 225 6 18446744073709551615 4 node 225 6 225 10 133 2 -> 225 10 225 12 18446744073709551615 4 left 225 12 225 16 134 2 -> 225 16 225 18 18446744073709551615 4 type 225 18 225 22 120 1 . 225 22 225 23 71 5 IsInt 225 23 225 28 71 1 ( 225 28 225 29 71 1 ) 225 29 225 30 71 2 && 225 31 225 33 18446744073709551615 4 node 225 34 225 38 133 2 -> 225 38 225 40 18446744073709551615 5 right 225 40 225 45 135 2 -> 225 45 225 47 18446744073709551615 4 type 225 47 225 51 120 1 . 225 51 225 52 71 5 IsInt 225 52 225 57 71 1 ( 225 57 225 58 71 1 ) 225 58 225 59 71 1 ) 225 59 225 60 18446744073709551615 1 { 226 2 226 3 18446744073709551615 2 if 227 3 227 5 18446744073709551615 1 ( 227 6 227 7 18446744073709551615 4 node 227 7 227 11 133 2 -> 227 11 227 13 18446744073709551615 4 kind 227 13 227 17 121 2 == 227 18 227 20 18446744073709551615 14 ExpressionKind 227 21 227 35 122 2 :: 227 35 227 37 18446744073709551615 3 Add 227 37 227 40 136 1 ) 227 40 227 41 18446744073709551615 1 { 228 3 228 4 18446744073709551615 8 byteCode 229 4 229 12 57 1 . 229 12 229 13 36 9 push_back 229 13 229 22 36 1 ( 229 22 229 23 36 7 add_int 229 23 229 30 137 1 ) 229 30 229 31 36 1 ; 229 31 229 32 18446744073709551615 1 } 230 3 230 4 18446744073709551615 4 else 231 3 231 7 18446744073709551615 2 if 231 8 231 10 18446744073709551615 1 ( 231 11 231 12 18446744073709551615 4 node 231 12 231 16 133 2 -> 231 16 231 18 18446744073709551615 4 kind 231 18 231 22 121 2 == 231 23 231 25 18446744073709551615 14 ExpressionKind 231 26 231 40 122 2 :: 231 40 231 42 18446744073709551615 8 Subtract 231 42 231 50 138 1 ) 231 50 231 51 18446744073709551615 1 { 232 3 232 4 18446744073709551615 8 byteCode 233 4 233 12 57 1 . 233 12 233 13 36 9 push_back 233 13 233 22 36 1 ( 233 22 233 23 36 7 sub_int 233 23 233 30 139 1 ) 233 30 233 31 36 1 ; 233 31 233 32 18446744073709551615 1 } 234 3 234 4 18446744073709551615 4 else 235 3 235 7 18446744073709551615 2 if 235 8 235 10 18446744073709551615 1 ( 235 11 235 12 18446744073709551615 4 node 235 12 235 16 133 2 -> 235 16 235 18 18446744073709551615 4 kind 235 18 235 22 121 2 == 235 23 235 25 18446744073709551615 14 ExpressionKind 235 26 235 40 122 2 :: 235 40 235 42 18446744073709551615 8 Multiply 235 42 235 50 140 1 ) 235 50 235 51 18446744073709551615 1 { 236 3 236 4 18446744073709551615 8 byteCode 237 4 237 12 57 1 . 237 12 237 13 36 9 push_back 237 13 237 22 36 1 ( 237 22 237 23 36 7 mul_int 237 23 237 30 141 1 ) 237 30 237 31 36 1 ; 237 31 237 32 18446744073709551615 1 } 238 3 238 4 18446744073709551615 4 else 239 3 239 7 18446744073709551615 2 if 239 8 239 10 18446744073709551615 1 ( 239 11 239 12 18446744073709551615 4 node 239 12 239 16 133 2 -> 239 16 239 18 18446744073709551615 4 kind 239 18 239 22 121 2 == 239 23 239 25 18446744073709551615 14 ExpressionKind 239 26 239 40 122 2 :: 239 40 239 42 18446744073709551615 6 Divide 239 42 239 48 142 1 ) 239 48 239 49 18446744073709551615 1 { 240 3 240 4 18446744073709551615 8 byteCode 241 4 241 12 57 1 . 241 12 241 13 36 9 push_back 241 13 241 22 36 1 ( 241 22 241 23 36 7 div_int 241 23 241 30 143 1 ) 241 30 241 31 36 1 ; 241 31 241 32 18446744073709551615 1 } 242 3 242 4 18446744073709551615 4 else 243 3 243 7 18446744073709551615 2 if 243 8 243 10 18446744073709551615 1 ( 243 11 243 12 18446744073709551615 4 node 243 12 243 16 133 2 -> 243 16 243 18 18446744073709551615 4 kind 243 18 243 22 121 2 == 243 23 243 25 18446744073709551615 14 ExpressionKind 243 26 243 40 122 2 :: 243 40 243 42 18446744073709551615 6 Modulo 243 42 243 48 144 1 ) 243 48 243 49 18446744073709551615 1 { 244 3 244 4 18446744073709551615 8 byteCode 245 4 245 12 57 1 . 245 12 245 13 36 9 push_back 245 13 245 22 36 1 ( 245 22 245 23 36 7 mod_int 245 23 245 30 145 1 ) 245 30 245 31 36 1 ; 245 31 245 32 18446744073709551615 1 } 246 3 246 4 18446744073709551615 4 else 247 3 247 7 18446744073709551615 2 if 247 8 247 10 18446744073709551615 1 ( 247 11 247 12 18446744073709551615 4 node 247 12 247 16 133 2 -> 247 16 247 18 18446744073709551615 4 kind 247 18 247 22 121 2 == 247 23 247 25 18446744073709551615 14 ExpressionKind 247 26 247 40 122 2 :: 247 40 247 42 18446744073709551615 11 GreaterThan 247 42 247 53 146 1 ) 247 53 247 54 18446744073709551615 1 { 248 3 248 4 18446744073709551615 8 byteCode 249 4 249 12 57 1 . 249 12 249 13 36 9 push_back 249 13 249 22 36 1 ( 249 22 249 23 36 6 gt_int 249 23 249 29 147 1 ) 249 29 249 30 36 1 ; 249 30 249 31 18446744073709551615 1 } 250 3 250 4 18446744073709551615 4 else 251 3 251 7 18446744073709551615 2 if 251 8 251 10 18446744073709551615 1 ( 251 11 251 12 18446744073709551615 4 node 251 12 251 16 133 2 -> 251 16 251 18 18446744073709551615 4 kind 251 18 251 22 121 2 == 251 23 251 25 18446744073709551615 14 ExpressionKind 251 26 251 40 122 2 :: 251 40 251 42 18446744073709551615 8 LessThan 251 42 251 50 148 1 ) 251 50 251 51 18446744073709551615 1 { 252 3 252 4 18446744073709551615 8 byteCode 253 4 253 12 57 1 . 253 12 253 13 36 9 push_back 253 13 253 22 36 1 ( 253 22 253 23 36 6 lt_int 253 23 253 29 149 1 ) 253 29 253 30 36 1 ; 253 30 253 31 18446744073709551615 1 } 254 3 254 4 18446744073709551615 4 else 255 3 255 7 18446744073709551615 2 if 255 8 255 10 18446744073709551615 1 ( 255 11 255 12 18446744073709551615 4 node 255 12 255 16 133 2 -> 255 16 255 18 18446744073709551615 4 kind 255 18 255 22 121 2 == 255 23 255 25 18446744073709551615 14 ExpressionKind 255 26 255 40 122 2 :: 255 40 255 42 18446744073709551615 18 GreaterThanOrEqual 255 42 255 60 150 1 ) 255 60 255 61 18446744073709551615 1 { 256 3 256 4 18446744073709551615 8 byteCode 257 4 257 12 57 1 . 257 12 257 13 36 9 push_back 257 13 257 22 36 1 ( 257 22 257 23 36 6 ge_int 257 23 257 29 151 1 ) 257 29 257 30 36 1 ; 257 30 257 31 18446744073709551615 1 } 258 3 258 4 18446744073709551615 4 else 259 3 259 7 18446744073709551615 2 if 259 8 259 10 18446744073709551615 1 ( 259 11 259 12 18446744073709551615 4 node 259 12 259 16 133 2 -> 259 16 259 18 18446744073709551615 4 kind 259 18 259 22 121 2 == 259 23 259 25 18446744073709551615 14 ExpressionKind 259 26 259 40 122 2 :: 259 40 259 42 18446744073709551615 15 LessThanOrEqual 259 42 259 57 152 1 ) 259 57 259 58 18446744073709551615 1 { 260 3 260 4 18446744073709551615 8 byteCode 261 4 261 12 57 1 . 261 12 261 13 36 9 push_back 261 13 261 22 36 1 ( 261 22 261 23 36 6 le_int 261 23 261 29 153 1 ) 261 29 261 30 36 1 ; 261 30 261 31 18446744073709551615 1 } 262 3 262 4 18446744073709551615 4 else 263 3 263 7 18446744073709551615 2 if 263 8 263 10 18446744073709551615 1 ( 263 11 263 12 18446744073709551615 4 node 263 12 263 16 133 2 -> 263 16 263 18 18446744073709551615 4 kind 263 18 263 22 121 2 == 263 23 263 25 18446744073709551615 14 ExpressionKind 263 26 263 40 122 2 :: 263 40 263 42 18446744073709551615 5 Equal 263 42 263 47 154 1 ) 263 47 263 48 18446744073709551615 1 { 264 3 264 4 18446744073709551615 8 byteCode 265 4 265 12 57 1 . 265 12 265 13 36 9 push_back 265 13 265 22 36 1 ( 265 22 265 23 36 6 eq_int 265 23 265 29 155 1 ) 265 29 265 30 36 1 ; 265 30 265 31 18446744073709551615 1 } 266 3 266 4 18446744073709551615 4 else 267 3 267 7 18446744073709551615 2 if 267 8 267 10 18446744073709551615 1 ( 267 11 267 12 18446744073709551615 4 node 267 12 267 16 133 2 -> 267 16 267 18 18446744073709551615 4 kind 267 18 267 22 121 2 == 267 23 267 25 18446744073709551615 14 ExpressionKind 267 26 267 40 122 2 :: 267 40 267 42 18446744073709551615 8 NotEqual 267 42 267 50 156 1 ) 267 50 267 51 18446744073709551615 1 { 268 3 268 4 18446744073709551615 8 byteCode 269 4 269 12 57 1 . 269 12 269 13 36 9 push_back 269 13 269 22 36 1 ( 269 22 269 23 36 6 ne_int 269 23 269 29 157 1 ) 269 29 269 30 36 1 ; 269 30 269 31 18446744073709551615 1 } 270 3 270 4 18446744073709551615 4 else 271 3 271 7 18446744073709551615 1 { 272 3 272 4 18446744073709551615 5 throw 273 4 273 9 18446744073709551615 7 wstring 273 10 273 17 81 1 ( 273 17 273 18 82 33 L"wrong binary operation for int" 273 18 273 51 18446744073709551615 1 ) 273 51 273 52 82 1 ; 273 52 273 53 18446744073709551615 1 } 274 3 274 4 18446744073709551615 1 } 275 2 275 3 18446744073709551615 4 else 276 2 276 6 18446744073709551615 2 if 276 7 276 9 18446744073709551615 1 ( 276 10 276 11 18446744073709551615 4 node 276 11 276 15 133 2 -> 276 15 276 17 18446744073709551615 4 left 276 17 276 21 134 2 -> 276 21 276 23 18446744073709551615 4 type 276 23 276 27 120 1 . 276 27 276 28 73 6 IsLong 276 28 276 34 73 1 ( 276 34 276 35 73 1 ) 276 35 276 36 73 2 && 276 37 276 39 18446744073709551615 4 node 276 40 276 44 133 2 -> 276 44 276 46 18446744073709551615 5 right 276 46 276 51 135 2 -> 276 51 276 53 18446744073709551615 4 type 276 53 276 57 120 1 . 276 57 276 58 73 6 IsLong 276 58 276 64 73 1 ( 276 64 276 65 73 1 ) 276 65 276 66 73 1 ) 276 66 276 67 18446744073709551615 1 { 277 2 277 3 18446744073709551615 2 if 278 3 278 5 18446744073709551615 1 ( 278 6 278 7 18446744073709551615 4 node 278 7 278 11 133 2 -> 278 11 278 13 18446744073709551615 4 kind 278 13 278 17 121 2 == 278 18 278 20 18446744073709551615 14 ExpressionKind 278 21 278 35 122 2 :: 278 35 278 37 18446744073709551615 3 Add 278 37 278 40 136 1 ) 278 40 278 41 18446744073709551615 1 { 279 3 279 4 18446744073709551615 8 byteCode 280 4 280 12 57 1 . 280 12 280 13 36 9 push_back 280 13 280 22 36 1 ( 280 22 280 23 36 8 add_long 280 23 280 31 158 1 ) 280 31 280 32 36 1 ; 280 32 280 33 18446744073709551615 1 } 281 3 281 4 18446744073709551615 4 else 282 3 282 7 18446744073709551615 2 if 282 8 282 10 18446744073709551615 1 ( 282 11 282 12 18446744073709551615 4 node 282 12 282 16 133 2 -> 282 16 282 18 18446744073709551615 4 kind 282 18 282 22 121 2 == 282 23 282 25 18446744073709551615 14 ExpressionKind 282 26 282 40 122 2 :: 282 40 282 42 18446744073709551615 8 Subtract 282 42 282 50 138 1 ) 282 50 282 51 18446744073709551615 1 { 283 3 283 4 18446744073709551615 8 byteCode 284 4 284 12 57 1 . 284 12 284 13 36 9 push_back 284 13 284 22 36 1 ( 284 22 284 23 36 8 sub_long 284 23 284 31 159 1 ) 284 31 284 32 36 1 ; 284 32 284 33 18446744073709551615 1 } 285 3 285 4 18446744073709551615 4 else 286 3 286 7 18446744073709551615 2 if 286 8 286 10 18446744073709551615 1 ( 286 11 286 12 18446744073709551615 4 node 286 12 286 16 133 2 -> 286 16 286 18 18446744073709551615 4 kind 286 18 286 22 121 2 == 286 23 286 25 18446744073709551615 14 ExpressionKind 286 26 286 40 122 2 :: 286 40 286 42 18446744073709551615 8 Multiply 286 42 286 50 140 1 ) 286 50 286 51 18446744073709551615 1 { 287 3 287 4 18446744073709551615 8 byteCode 288 4 288 12 57 1 . 288 12 288 13 36 9 push_back 288 13 288 22 36 1 ( 288 22 288 23 36 8 mul_long 288 23 288 31 160 1 ) 288 31 288 32 36 1 ; 288 32 288 33 18446744073709551615 1 } 289 3 289 4 18446744073709551615 4 else 290 3 290 7 18446744073709551615 2 if 290 8 290 10 18446744073709551615 1 ( 290 11 290 12 18446744073709551615 4 node 290 12 290 16 133 2 -> 290 16 290 18 18446744073709551615 4 kind 290 18 290 22 121 2 == 290 23 290 25 18446744073709551615 14 ExpressionKind 290 26 290 40 122 2 :: 290 40 290 42 18446744073709551615 6 Divide 290 42 290 48 142 1 ) 290 48 290 49 18446744073709551615 1 { 291 3 291 4 18446744073709551615 8 byteCode 292 4 292 12 57 1 . 292 12 292 13 36 9 push_back 292 13 292 22 36 1 ( 292 22 292 23 36 8 div_long 292 23 292 31 161 1 ) 292 31 292 32 36 1 ; 292 32 292 33 18446744073709551615 1 } 293 3 293 4 18446744073709551615 4 else 294 3 294 7 18446744073709551615 2 if 294 8 294 10 18446744073709551615 1 ( 294 11 294 12 18446744073709551615 4 node 294 12 294 16 133 2 -> 294 16 294 18 18446744073709551615 4 kind 294 18 294 22 121 2 == 294 23 294 25 18446744073709551615 14 ExpressionKind 294 26 294 40 122 2 :: 294 40 294 42 18446744073709551615 6 Modulo 294 42 294 48 144 1 ) 294 48 294 49 18446744073709551615 1 { 295 3 295 4 18446744073709551615 8 byteCode 296 4 296 12 57 1 . 296 12 296 13 36 9 push_back 296 13 296 22 36 1 ( 296 22 296 23 36 8 mod_long 296 23 296 31 162 1 ) 296 31 296 32 36 1 ; 296 32 296 33 18446744073709551615 1 } 297 3 297 4 18446744073709551615 4 else 298 3 298 7 18446744073709551615 2 if 298 8 298 10 18446744073709551615 1 ( 298 11 298 12 18446744073709551615 4 node 298 12 298 16 133 2 -> 298 16 298 18 18446744073709551615 4 kind 298 18 298 22 121 2 == 298 23 298 25 18446744073709551615 14 ExpressionKind 298 26 298 40 122 2 :: 298 40 298 42 18446744073709551615 11 GreaterThan 298 42 298 53 146 1 ) 298 53 298 54 18446744073709551615 1 { 299 3 299 4 18446744073709551615 8 byteCode 300 4 300 12 57 1 . 300 12 300 13 36 9 push_back 300 13 300 22 36 1 ( 300 22 300 23 36 7 gt_long 300 23 300 30 163 1 ) 300 30 300 31 36 1 ; 300 31 300 32 18446744073709551615 1 } 301 3 301 4 18446744073709551615 4 else 302 3 302 7 18446744073709551615 2 if 302 8 302 10 18446744073709551615 1 ( 302 11 302 12 18446744073709551615 4 node 302 12 302 16 133 2 -> 302 16 302 18 18446744073709551615 4 kind 302 18 302 22 121 2 == 302 23 302 25 18446744073709551615 14 ExpressionKind 302 26 302 40 122 2 :: 302 40 302 42 18446744073709551615 8 LessThan 302 42 302 50 148 1 ) 302 50 302 51 18446744073709551615 1 { 303 3 303 4 18446744073709551615 8 byteCode 304 4 304 12 57 1 . 304 12 304 13 36 9 push_back 304 13 304 22 36 1 ( 304 22 304 23 36 7 lt_long 304 23 304 30 164 1 ) 304 30 304 31 36 1 ; 304 31 304 32 18446744073709551615 1 } 305 3 305 4 18446744073709551615 4 else 306 3 306 7 18446744073709551615 2 if 306 8 306 10 18446744073709551615 1 ( 306 11 306 12 18446744073709551615 4 node 306 12 306 16 133 2 -> 306 16 306 18 18446744073709551615 4 kind 306 18 306 22 121 2 == 306 23 306 25 18446744073709551615 14 ExpressionKind 306 26 306 40 122 2 :: 306 40 306 42 18446744073709551615 18 GreaterThanOrEqual 306 42 306 60 150 1 ) 306 60 306 61 18446744073709551615 1 { 307 3 307 4 18446744073709551615 8 byteCode 308 4 308 12 57 1 . 308 12 308 13 36 9 push_back 308 13 308 22 36 1 ( 308 22 308 23 36 7 ge_long 308 23 308 30 165 1 ) 308 30 308 31 36 1 ; 308 31 308 32 18446744073709551615 1 } 309 3 309 4 18446744073709551615 4 else 310 3 310 7 18446744073709551615 2 if 310 8 310 10 18446744073709551615 1 ( 310 11 310 12 18446744073709551615 4 node 310 12 310 16 133 2 -> 310 16 310 18 18446744073709551615 4 kind 310 18 310 22 121 2 == 310 23 310 25 18446744073709551615 14 ExpressionKind 310 26 310 40 122 2 :: 310 40 310 42 18446744073709551615 15 LessThanOrEqual 310 42 310 57 152 1 ) 310 57 310 58 18446744073709551615 1 { 311 3 311 4 18446744073709551615 8 byteCode 312 4 312 12 57 1 . 312 12 312 13 36 9 push_back 312 13 312 22 36 1 ( 312 22 312 23 36 7 le_long 312 23 312 30 166 1 ) 312 30 312 31 36 1 ; 312 31 312 32 18446744073709551615 1 } 313 3 313 4 18446744073709551615 4 else 314 3 314 7 18446744073709551615 2 if 314 8 314 10 18446744073709551615 1 ( 314 11 314 12 18446744073709551615 4 node 314 12 314 16 133 2 -> 314 16 314 18 18446744073709551615 4 kind 314 18 314 22 121 2 == 314 23 314 25 18446744073709551615 14 ExpressionKind 314 26 314 40 122 2 :: 314 40 314 42 18446744073709551615 5 Equal 314 42 314 47 154 1 ) 314 47 314 48 18446744073709551615 1 { 315 3 315 4 18446744073709551615 8 byteCode 316 4 316 12 57 1 . 316 12 316 13 36 9 push_back 316 13 316 22 36 1 ( 316 22 316 23 36 7 eq_long 316 23 316 30 167 1 ) 316 30 316 31 36 1 ; 316 31 316 32 18446744073709551615 1 } 317 3 317 4 18446744073709551615 4 else 318 3 318 7 18446744073709551615 2 if 318 8 318 10 18446744073709551615 1 ( 318 11 318 12 18446744073709551615 4 node 318 12 318 16 133 2 -> 318 16 318 18 18446744073709551615 4 kind 318 18 318 22 121 2 == 318 23 318 25 18446744073709551615 14 ExpressionKind 318 26 318 40 122 2 :: 318 40 318 42 18446744073709551615 8 NotEqual 318 42 318 50 156 1 ) 318 50 318 51 18446744073709551615 1 { 319 3 319 4 18446744073709551615 8 byteCode 320 4 320 12 57 1 . 320 12 320 13 36 9 push_back 320 13 320 22 36 1 ( 320 22 320 23 36 7 ne_long 320 23 320 30 168 1 ) 320 30 320 31 36 1 ; 320 31 320 32 18446744073709551615 1 } 321 3 321 4 18446744073709551615 4 else 322 3 322 7 18446744073709551615 1 { 323 3 323 4 18446744073709551615 5 throw 324 4 324 9 18446744073709551615 7 wstring 324 10 324 17 81 1 ( 324 17 324 18 82 34 L"wrong binary operation for long" 324 18 324 52 18446744073709551615 1 ) 324 52 324 53 82 1 ; 324 53 324 54 18446744073709551615 1 } 325 3 325 4 18446744073709551615 1 } 326 2 326 3 18446744073709551615 4 else 327 2 327 6 18446744073709551615 2 if 327 7 327 9 18446744073709551615 1 ( 327 10 327 11 18446744073709551615 4 node 327 11 327 15 133 2 -> 327 15 327 17 18446744073709551615 4 left 327 17 327 21 134 2 -> 327 21 327 23 18446744073709551615 4 type 327 23 327 27 120 1 . 327 27 327 28 75 7 IsFloat 327 28 327 35 75 1 ( 327 35 327 36 75 1 ) 327 36 327 37 75 2 && 327 38 327 40 18446744073709551615 4 node 327 41 327 45 133 2 -> 327 45 327 47 18446744073709551615 5 right 327 47 327 52 135 2 -> 327 52 327 54 18446744073709551615 4 type 327 54 327 58 120 1 . 327 58 327 59 75 7 IsFloat 327 59 327 66 75 1 ( 327 66 327 67 75 1 ) 327 67 327 68 75 1 ) 327 68 327 69 18446744073709551615 1 { 328 2 328 3 18446744073709551615 2 if 329 3 329 5 18446744073709551615 1 ( 329 6 329 7 18446744073709551615 4 node 329 7 329 11 133 2 -> 329 11 329 13 18446744073709551615 4 kind 329 13 329 17 121 2 == 329 18 329 20 18446744073709551615 14 ExpressionKind 329 21 329 35 122 2 :: 329 35 329 37 18446744073709551615 3 Add 329 37 329 40 136 1 ) 329 40 329 41 18446744073709551615 1 { 330 3 330 4 18446744073709551615 8 byteCode 331 4 331 12 57 1 . 331 12 331 13 36 9 push_back 331 13 331 22 36 1 ( 331 22 331 23 36 9 add_float 331 23 331 32 169 1 ) 331 32 331 33 36 1 ; 331 33 331 34 18446744073709551615 1 } 332 3 332 4 18446744073709551615 4 else 333 3 333 7 18446744073709551615 2 if 333 8 333 10 18446744073709551615 1 ( 333 11 333 12 18446744073709551615 4 node 333 12 333 16 133 2 -> 333 16 333 18 18446744073709551615 4 kind 333 18 333 22 121 2 == 333 23 333 25 18446744073709551615 14 ExpressionKind 333 26 333 40 122 2 :: 333 40 333 42 18446744073709551615 8 Subtract 333 42 333 50 138 1 ) 333 50 333 51 18446744073709551615 1 { 334 3 334 4 18446744073709551615 8 byteCode 335 4 335 12 57 1 . 335 12 335 13 36 9 push_back 335 13 335 22 36 1 ( 335 22 335 23 36 9 sub_float 335 23 335 32 170 1 ) 335 32 335 33 36 1 ; 335 33 335 34 18446744073709551615 1 } 336 3 336 4 18446744073709551615 4 else 337 3 337 7 18446744073709551615 2 if 337 8 337 10 18446744073709551615 1 ( 337 11 337 12 18446744073709551615 4 node 337 12 337 16 133 2 -> 337 16 337 18 18446744073709551615 4 kind 337 18 337 22 121 2 == 337 23 337 25 18446744073709551615 14 ExpressionKind 337 26 337 40 122 2 :: 337 40 337 42 18446744073709551615 8 Multiply 337 42 337 50 140 1 ) 337 50 337 51 18446744073709551615 1 { 338 3 338 4 18446744073709551615 8 byteCode 339 4 339 12 57 1 . 339 12 339 13 36 9 push_back 339 13 339 22 36 1 ( 339 22 339 23 36 9 mul_float 339 23 339 32 171 1 ) 339 32 339 33 36 1 ; 339 33 339 34 18446744073709551615 1 } 340 3 340 4 18446744073709551615 4 else 341 3 341 7 18446744073709551615 2 if 341 8 341 10 18446744073709551615 1 ( 341 11 341 12 18446744073709551615 4 node 341 12 341 16 133 2 -> 341 16 341 18 18446744073709551615 4 kind 341 18 341 22 121 2 == 341 23 341 25 18446744073709551615 14 ExpressionKind 341 26 341 40 122 2 :: 341 40 341 42 18446744073709551615 6 Divide 341 42 341 48 142 1 ) 341 48 341 49 18446744073709551615 1 { 342 3 342 4 18446744073709551615 8 byteCode 343 4 343 12 57 1 . 343 12 343 13 36 9 push_back 343 13 343 22 36 1 ( 343 22 343 23 36 9 div_float 343 23 343 32 172 1 ) 343 32 343 33 36 1 ; 343 33 343 34 18446744073709551615 1 } 344 3 344 4 18446744073709551615 4 else 345 3 345 7 18446744073709551615 2 if 345 8 345 10 18446744073709551615 1 ( 345 11 345 12 18446744073709551615 4 node 345 12 345 16 133 2 -> 345 16 345 18 18446744073709551615 4 kind 345 18 345 22 121 2 == 345 23 345 25 18446744073709551615 14 ExpressionKind 345 26 345 40 122 2 :: 345 40 345 42 18446744073709551615 11 GreaterThan 345 42 345 53 146 1 ) 345 53 345 54 18446744073709551615 1 { 346 3 346 4 18446744073709551615 8 byteCode 347 4 347 12 57 1 . 347 12 347 13 36 9 push_back 347 13 347 22 36 1 ( 347 22 347 23 36 8 gt_float 347 23 347 31 173 1 ) 347 31 347 32 36 1 ; 347 32 347 33 18446744073709551615 1 } 348 3 348 4 18446744073709551615 4 else 349 3 349 7 18446744073709551615 2 if 349 8 349 10 18446744073709551615 1 ( 349 11 349 12 18446744073709551615 4 node 349 12 349 16 133 2 -> 349 16 349 18 18446744073709551615 4 kind 349 18 349 22 121 2 == 349 23 349 25 18446744073709551615 14 ExpressionKind 349 26 349 40 122 2 :: 349 40 349 42 18446744073709551615 8 LessThan 349 42 349 50 148 1 ) 349 50 349 51 18446744073709551615 1 { 350 3 350 4 18446744073709551615 8 byteCode 351 4 351 12 57 1 . 351 12 351 13 36 9 push_back 351 13 351 22 36 1 ( 351 22 351 23 36 8 lt_float 351 23 351 31 174 1 ) 351 31 351 32 36 1 ; 351 32 351 33 18446744073709551615 1 } 352 3 352 4 18446744073709551615 4 else 353 3 353 7 18446744073709551615 2 if 353 8 353 10 18446744073709551615 1 ( 353 11 353 12 18446744073709551615 4 node 353 12 353 16 133 2 -> 353 16 353 18 18446744073709551615 4 kind 353 18 353 22 121 2 == 353 23 353 25 18446744073709551615 14 ExpressionKind 353 26 353 40 122 2 :: 353 40 353 42 18446744073709551615 18 GreaterThanOrEqual 353 42 353 60 150 1 ) 353 60 353 61 18446744073709551615 1 { 354 3 354 4 18446744073709551615 8 byteCode 355 4 355 12 57 1 . 355 12 355 13 36 9 push_back 355 13 355 22 36 1 ( 355 22 355 23 36 8 ge_float 355 23 355 31 175 1 ) 355 31 355 32 36 1 ; 355 32 355 33 18446744073709551615 1 } 356 3 356 4 18446744073709551615 4 else 357 3 357 7 18446744073709551615 2 if 357 8 357 10 18446744073709551615 1 ( 357 11 357 12 18446744073709551615 4 node 357 12 357 16 133 2 -> 357 16 357 18 18446744073709551615 4 kind 357 18 357 22 121 2 == 357 23 357 25 18446744073709551615 14 ExpressionKind 357 26 357 40 122 2 :: 357 40 357 42 18446744073709551615 15 LessThanOrEqual 357 42 357 57 152 1 ) 357 57 357 58 18446744073709551615 1 { 358 3 358 4 18446744073709551615 8 byteCode 359 4 359 12 57 1 . 359 12 359 13 36 9 push_back 359 13 359 22 36 1 ( 359 22 359 23 36 8 le_float 359 23 359 31 176 1 ) 359 31 359 32 36 1 ; 359 32 359 33 18446744073709551615 1 } 360 3 360 4 18446744073709551615 4 else 361 3 361 7 18446744073709551615 2 if 361 8 361 10 18446744073709551615 1 ( 361 11 361 12 18446744073709551615 4 node 361 12 361 16 133 2 -> 361 16 361 18 18446744073709551615 4 kind 361 18 361 22 121 2 == 361 23 361 25 18446744073709551615 14 ExpressionKind 361 26 361 40 122 2 :: 361 40 361 42 18446744073709551615 5 Equal 361 42 361 47 154 1 ) 361 47 361 48 18446744073709551615 1 { 362 3 362 4 18446744073709551615 8 byteCode 363 4 363 12 57 1 . 363 12 363 13 36 9 push_back 363 13 363 22 36 1 ( 363 22 363 23 36 8 eq_float 363 23 363 31 177 1 ) 363 31 363 32 36 1 ; 363 32 363 33 18446744073709551615 1 } 364 3 364 4 18446744073709551615 4 else 365 3 365 7 18446744073709551615 2 if 365 8 365 10 18446744073709551615 1 ( 365 11 365 12 18446744073709551615 4 node 365 12 365 16 133 2 -> 365 16 365 18 18446744073709551615 4 kind 365 18 365 22 121 2 == 365 23 365 25 18446744073709551615 14 ExpressionKind 365 26 365 40 122 2 :: 365 40 365 42 18446744073709551615 8 NotEqual 365 42 365 50 156 1 ) 365 50 365 51 18446744073709551615 1 { 366 3 366 4 18446744073709551615 8 byteCode 367 4 367 12 57 1 . 367 12 367 13 36 9 push_back 367 13 367 22 36 1 ( 367 22 367 23 36 8 ne_float 367 23 367 31 178 1 ) 367 31 367 32 36 1 ; 367 32 367 33 18446744073709551615 1 } 368 3 368 4 18446744073709551615 4 else 369 3 369 7 18446744073709551615 1 { 370 3 370 4 18446744073709551615 5 throw 371 4 371 9 18446744073709551615 7 wstring 371 10 371 17 81 1 ( 371 17 371 18 82 35 L"wrong binary operation for float" 371 18 371 53 18446744073709551615 1 ) 371 53 371 54 82 1 ; 371 54 371 55 18446744073709551615 1 } 372 3 372 4 18446744073709551615 1 } 373 2 373 3 18446744073709551615 4 else 374 2 374 6 18446744073709551615 2 if 374 7 374 9 18446744073709551615 1 ( 374 10 374 11 18446744073709551615 4 node 374 11 374 15 133 2 -> 374 15 374 17 18446744073709551615 4 left 374 17 374 21 134 2 -> 374 21 374 23 18446744073709551615 4 type 374 23 374 27 120 1 . 374 27 374 28 77 8 IsDouble 374 28 374 36 77 1 ( 374 36 374 37 77 1 ) 374 37 374 38 77 2 && 374 39 374 41 18446744073709551615 4 node 374 42 374 46 133 2 -> 374 46 374 48 18446744073709551615 5 right 374 48 374 53 135 2 -> 374 53 374 55 18446744073709551615 4 type 374 55 374 59 120 1 . 374 59 374 60 77 8 IsDouble 374 60 374 68 77 1 ( 374 68 374 69 77 1 ) 374 69 374 70 77 1 ) 374 70 374 71 18446744073709551615 1 { 375 2 375 3 18446744073709551615 2 if 376 3 376 5 18446744073709551615 1 ( 376 6 376 7 18446744073709551615 4 node 376 7 376 11 133 2 -> 376 11 376 13 18446744073709551615 4 kind 376 13 376 17 121 2 == 376 18 376 20 18446744073709551615 14 ExpressionKind 376 21 376 35 122 2 :: 376 35 376 37 18446744073709551615 3 Add 376 37 376 40 136 1 ) 376 40 376 41 18446744073709551615 1 { 377 3 377 4 18446744073709551615 8 byteCode 378 4 378 12 57 1 . 378 12 378 13 36 9 push_back 378 13 378 22 36 1 ( 378 22 378 23 36 10 add_double 378 23 378 33 179 1 ) 378 33 378 34 36 1 ; 378 34 378 35 18446744073709551615 1 } 379 3 379 4 18446744073709551615 4 else 380 3 380 7 18446744073709551615 2 if 380 8 380 10 18446744073709551615 1 ( 380 11 380 12 18446744073709551615 4 node 380 12 380 16 133 2 -> 380 16 380 18 18446744073709551615 4 kind 380 18 380 22 121 2 == 380 23 380 25 18446744073709551615 14 ExpressionKind 380 26 380 40 122 2 :: 380 40 380 42 18446744073709551615 8 Subtract 380 42 380 50 138 1 ) 380 50 380 51 18446744073709551615 1 { 381 3 381 4 18446744073709551615 8 byteCode 382 4 382 12 57 1 . 382 12 382 13 36 9 push_back 382 13 382 22 36 1 ( 382 22 382 23 36 10 sub_double 382 23 382 33 180 1 ) 382 33 382 34 36 1 ; 382 34 382 35 18446744073709551615 1 } 383 3 383 4 18446744073709551615 4 else 384 3 384 7 18446744073709551615 2 if 384 8 384 10 18446744073709551615 1 ( 384 11 384 12 18446744073709551615 4 node 384 12 384 16 133 2 -> 384 16 384 18 18446744073709551615 4 kind 384 18 384 22 121 2 == 384 23 384 25 18446744073709551615 14 ExpressionKind 384 26 384 40 122 2 :: 384 40 384 42 18446744073709551615 8 Multiply 384 42 384 50 140 1 ) 384 50 384 51 18446744073709551615 1 { 385 3 385 4 18446744073709551615 8 byteCode 386 4 386 12 57 1 . 386 12 386 13 36 9 push_back 386 13 386 22 36 1 ( 386 22 386 23 36 10 mul_double 386 23 386 33 181 1 ) 386 33 386 34 36 1 ; 386 34 386 35 18446744073709551615 1 } 387 3 387 4 18446744073709551615 4 else 388 3 388 7 18446744073709551615 2 if 388 8 388 10 18446744073709551615 1 ( 388 11 388 12 18446744073709551615 4 node 388 12 388 16 133 2 -> 388 16 388 18 18446744073709551615 4 kind 388 18 388 22 121 2 == 388 23 388 25 18446744073709551615 14 ExpressionKind 388 26 388 40 122 2 :: 388 40 388 42 18446744073709551615 6 Divide 388 42 388 48 142 1 ) 388 48 388 49 18446744073709551615 1 { 389 3 389 4 18446744073709551615 8 byteCode 390 4 390 12 57 1 . 390 12 390 13 36 9 push_back 390 13 390 22 36 1 ( 390 22 390 23 36 10 div_double 390 23 390 33 182 1 ) 390 33 390 34 36 1 ; 390 34 390 35 18446744073709551615 1 } 391 3 391 4 18446744073709551615 4 else 392 3 392 7 18446744073709551615 2 if 392 8 392 10 18446744073709551615 1 ( 392 11 392 12 18446744073709551615 4 node 392 12 392 16 133 2 -> 392 16 392 18 18446744073709551615 4 kind 392 18 392 22 121 2 == 392 23 392 25 18446744073709551615 14 ExpressionKind 392 26 392 40 122 2 :: 392 40 392 42 18446744073709551615 11 GreaterThan 392 42 392 53 146 1 ) 392 53 392 54 18446744073709551615 1 { 393 3 393 4 18446744073709551615 8 byteCode 394 4 394 12 57 1 . 394 12 394 13 36 9 push_back 394 13 394 22 36 1 ( 394 22 394 23 36 9 gt_double 394 23 394 32 183 1 ) 394 32 394 33 36 1 ; 394 33 394 34 18446744073709551615 1 } 395 3 395 4 18446744073709551615 4 else 396 3 396 7 18446744073709551615 2 if 396 8 396 10 18446744073709551615 1 ( 396 11 396 12 18446744073709551615 4 node 396 12 396 16 133 2 -> 396 16 396 18 18446744073709551615 4 kind 396 18 396 22 121 2 == 396 23 396 25 18446744073709551615 14 ExpressionKind 396 26 396 40 122 2 :: 396 40 396 42 18446744073709551615 8 LessThan 396 42 396 50 148 1 ) 396 50 396 51 18446744073709551615 1 { 397 3 397 4 18446744073709551615 8 byteCode 398 4 398 12 57 1 . 398 12 398 13 36 9 push_back 398 13 398 22 36 1 ( 398 22 398 23 36 9 lt_double 398 23 398 32 184 1 ) 398 32 398 33 36 1 ; 398 33 398 34 18446744073709551615 1 } 399 3 399 4 18446744073709551615 4 else 400 3 400 7 18446744073709551615 2 if 400 8 400 10 18446744073709551615 1 ( 400 11 400 12 18446744073709551615 4 node 400 12 400 16 133 2 -> 400 16 400 18 18446744073709551615 4 kind 400 18 400 22 121 2 == 400 23 400 25 18446744073709551615 14 ExpressionKind 400 26 400 40 122 2 :: 400 40 400 42 18446744073709551615 18 GreaterThanOrEqual 400 42 400 60 150 1 ) 400 60 400 61 18446744073709551615 1 { 401 3 401 4 18446744073709551615 8 byteCode 402 4 402 12 57 1 . 402 12 402 13 36 9 push_back 402 13 402 22 36 1 ( 402 22 402 23 36 9 ge_double 402 23 402 32 185 1 ) 402 32 402 33 36 1 ; 402 33 402 34 18446744073709551615 1 } 403 3 403 4 18446744073709551615 4 else 404 3 404 7 18446744073709551615 2 if 404 8 404 10 18446744073709551615 1 ( 404 11 404 12 18446744073709551615 4 node 404 12 404 16 133 2 -> 404 16 404 18 18446744073709551615 4 kind 404 18 404 22 121 2 == 404 23 404 25 18446744073709551615 14 ExpressionKind 404 26 404 40 122 2 :: 404 40 404 42 18446744073709551615 15 LessThanOrEqual 404 42 404 57 152 1 ) 404 57 404 58 18446744073709551615 1 { 405 3 405 4 18446744073709551615 8 byteCode 406 4 406 12 57 1 . 406 12 406 13 36 9 push_back 406 13 406 22 36 1 ( 406 22 406 23 36 9 le_double 406 23 406 32 186 1 ) 406 32 406 33 36 1 ; 406 33 406 34 18446744073709551615 1 } 407 3 407 4 18446744073709551615 4 else 408 3 408 7 18446744073709551615 2 if 408 8 408 10 18446744073709551615 1 ( 408 11 408 12 18446744073709551615 4 node 408 12 408 16 133 2 -> 408 16 408 18 18446744073709551615 4 kind 408 18 408 22 121 2 == 408 23 408 25 18446744073709551615 14 ExpressionKind 408 26 408 40 122 2 :: 408 40 408 42 18446744073709551615 5 Equal 408 42 408 47 154 1 ) 408 47 408 48 18446744073709551615 1 { 409 3 409 4 18446744073709551615 8 byteCode 410 4 410 12 57 1 . 410 12 410 13 36 9 push_back 410 13 410 22 36 1 ( 410 22 410 23 36 9 eq_double 410 23 410 32 187 1 ) 410 32 410 33 36 1 ; 410 33 410 34 18446744073709551615 1 } 411 3 411 4 18446744073709551615 4 else 412 3 412 7 18446744073709551615 2 if 412 8 412 10 18446744073709551615 1 ( 412 11 412 12 18446744073709551615 4 node 412 12 412 16 133 2 -> 412 16 412 18 18446744073709551615 4 kind 412 18 412 22 121 2 == 412 23 412 25 18446744073709551615 14 ExpressionKind 412 26 412 40 122 2 :: 412 40 412 42 18446744073709551615 8 NotEqual 412 42 412 50 156 1 ) 412 50 412 51 18446744073709551615 1 { 413 3 413 4 18446744073709551615 8 byteCode 414 4 414 12 57 1 . 414 12 414 13 36 9 push_back 414 13 414 22 36 1 ( 414 22 414 23 36 9 ne_double 414 23 414 32 188 1 ) 414 32 414 33 36 1 ; 414 33 414 34 18446744073709551615 1 } 415 3 415 4 18446744073709551615 4 else 416 3 416 7 18446744073709551615 1 { 417 3 417 4 18446744073709551615 5 throw 418 4 418 9 18446744073709551615 7 wstring 418 10 418 17 81 1 ( 418 17 418 18 82 36 L"wrong binary operation for double" 418 18 418 54 18446744073709551615 1 ) 418 54 418 55 82 1 ; 418 55 418 56 18446744073709551615 1 } 419 3 419 4 18446744073709551615 1 } 420 2 420 3 18446744073709551615 4 else 421 2 421 6 18446744073709551615 2 if 421 7 421 9 18446744073709551615 1 ( 421 10 421 11 18446744073709551615 4 node 421 11 421 15 133 2 -> 421 15 421 17 18446744073709551615 4 left 421 17 421 21 134 2 -> 421 21 421 23 18446744073709551615 4 type 421 23 421 27 120 1 . 421 27 421 28 129 9 IsBoolean 421 28 421 37 129 1 ( 421 37 421 38 129 1 ) 421 38 421 39 129 2 && 421 40 421 42 18446744073709551615 4 node 421 43 421 47 133 2 -> 421 47 421 49 18446744073709551615 5 right 421 49 421 54 135 2 -> 421 54 421 56 18446744073709551615 4 type 421 56 421 60 120 1 . 421 60 421 61 129 9 IsBoolean 421 61 421 70 129 1 ( 421 70 421 71 129 1 ) 421 71 421 72 129 1 ) 421 72 421 73 18446744073709551615 1 { 422 2 422 3 18446744073709551615 2 if 423 3 423 5 18446744073709551615 1 ( 423 6 423 7 18446744073709551615 4 node 423 7 423 11 133 2 -> 423 11 423 13 18446744073709551615 4 kind 423 13 423 17 121 2 == 423 18 423 20 18446744073709551615 14 ExpressionKind 423 21 423 35 122 2 :: 423 35 423 37 18446744073709551615 3 And 423 37 423 40 189 1 ) 423 40 423 41 18446744073709551615 1 { 424 3 424 4 18446744073709551615 8 byteCode 425 4 425 12 57 1 . 425 12 425 13 36 9 push_back 425 13 425 22 36 1 ( 425 22 425 23 36 11 logical_and 425 23 425 34 190 1 ) 425 34 425 35 36 1 ; 425 35 425 36 18446744073709551615 1 } 426 3 426 4 18446744073709551615 4 else 427 3 427 7 18446744073709551615 2 if 427 8 427 10 18446744073709551615 1 ( 427 11 427 12 18446744073709551615 4 node 427 12 427 16 133 2 -> 427 16 427 18 18446744073709551615 4 kind 427 18 427 22 121 2 == 427 23 427 25 18446744073709551615 14 ExpressionKind 427 26 427 40 122 2 :: 427 40 427 42 18446744073709551615 2 Or 427 42 427 44 191 1 ) 427 44 427 45 18446744073709551615 1 { 428 3 428 4 18446744073709551615 8 byteCode 429 4 429 12 57 1 . 429 12 429 13 36 9 push_back 429 13 429 22 36 1 ( 429 22 429 23 36 10 logical_or 429 23 429 33 192 1 ) 429 33 429 34 36 1 ; 429 34 429 35 18446744073709551615 1 } 430 3 430 4 18446744073709551615 4 else 431 3 431 7 18446744073709551615 2 if 431 8 431 10 18446744073709551615 1 ( 431 11 431 12 18446744073709551615 4 node 431 12 431 16 133 2 -> 431 16 431 18 18446744073709551615 4 kind 431 18 431 22 121 2 == 431 23 431 25 18446744073709551615 14 ExpressionKind 431 26 431 40 122 2 :: 431 40 431 42 18446744073709551615 5 Equal 431 42 431 47 154 1 ) 431 47 431 48 18446744073709551615 1 { 432 3 432 4 18446744073709551615 8 byteCode 433 4 433 12 57 1 . 433 12 433 13 36 9 push_back 433 13 433 22 36 1 ( 433 22 433 23 36 6 eq_int 433 23 433 29 155 1 ) 433 29 433 30 36 1 ; 433 30 433 31 18446744073709551615 1 } 434 3 434 4 18446744073709551615 4 else 435 3 435 7 18446744073709551615 2 if 435 8 435 10 18446744073709551615 1 ( 435 11 435 12 18446744073709551615 4 node 435 12 435 16 133 2 -> 435 16 435 18 18446744073709551615 4 kind 435 18 435 22 121 2 == 435 23 435 25 18446744073709551615 14 ExpressionKind 435 26 435 40 122 2 :: 435 40 435 42 18446744073709551615 8 NotEqual 435 42 435 50 156 1 ) 435 50 435 51 18446744073709551615 1 { 436 3 436 4 18446744073709551615 8 byteCode 437 4 437 12 57 1 . 437 12 437 13 36 9 push_back 437 13 437 22 36 1 ( 437 22 437 23 36 6 ne_int 437 23 437 29 157 1 ) 437 29 437 30 36 1 ; 437 30 437 31 18446744073709551615 1 } 438 3 438 4 18446744073709551615 4 else 439 3 439 7 18446744073709551615 1 { 440 3 440 4 18446744073709551615 5 throw 441 4 441 9 18446744073709551615 7 wstring 441 10 441 17 81 1 ( 441 17 441 18 82 37 L"wrong binary operation for boolean" 441 18 441 55 18446744073709551615 1 ) 441 55 441 56 82 1 ; 441 56 441 57 18446744073709551615 1 } 442 3 442 4 18446744073709551615 1 } 443 2 443 3 18446744073709551615 4 else 444 2 444 6 18446744073709551615 1 { 445 2 445 3 18446744073709551615 5 throw 446 3 446 8 18446744073709551615 7 wstring 446 9 446 16 81 1 ( 446 16 446 17 82 21 L"not supported type" 446 17 446 38 18446744073709551615 1 ) 446 38 446 39 82 1 ; 446 39 446 40 18446744073709551615 1 } 447 2 447 3 18446744073709551615 1 } 448 1 448 2 18446744073709551615 4 void 449 1 449 5 18446744073709551615 8 Compiler 449 6 449 14 4 2 :: 449 14 449 16 92 5 Visit 449 16 449 21 92 1 ( 449 21 449 22 92 16 AssignExpression 449 22 449 38 193 1 * 449 38 449 39 18446744073709551615 4 node 449 40 449 44 194 1 ) 449 44 449 45 92 1 { 450 1 450 2 18446744073709551615 4 node 451 2 451 6 194 2 -> 451 6 451 8 18446744073709551615 5 value 451 8 451 13 195 2 -> 451 13 451 15 31 6 Accept 451 15 451 21 31 1 ( 451 21 451 22 31 4 this 451 22 451 26 18446744073709551615 1 ) 451 26 451 27 31 1 ; 451 27 451 28 18446744073709551615 2 if 452 2 452 4 18446744073709551615 1 ( 452 5 452 6 18446744073709551615 4 node 452 6 452 10 194 2 -> 452 10 452 12 18446744073709551615 4 type 452 12 452 16 120 1 . 452 16 452 17 71 5 IsInt 452 17 452 22 71 1 ( 452 22 452 23 71 1 ) 452 23 452 24 71 1 ) 452 24 452 25 18446744073709551615 1 { 453 2 453 3 18446744073709551615 2 if 454 3 454 5 18446744073709551615 1 ( 454 6 454 7 18446744073709551615 4 node 454 7 454 11 194 2 -> 454 11 454 13 18446744073709551615 8 location 454 13 454 21 196 1 . 454 21 454 22 197 7 IsLocal 454 22 454 29 197 1 ( 454 29 454 30 197 1 ) 454 30 454 31 197 1 ) 454 31 454 32 18446744073709551615 1 { 455 3 455 4 18446744073709551615 17 // local variable 456 4 456 21 18446744073709551615 8 byteCode 457 4 457 12 57 1 . 457 12 457 13 36 9 push_back 457 13 457 22 36 1 ( 457 22 457 23 36 13 pop_local_int 457 23 457 36 72 1 ) 457 36 457 37 36 1 ; 457 37 457 38 18446744073709551615 8 byteCode 458 4 458 12 57 1 . 458 12 458 13 36 9 push_back 458 13 458 22 36 1 ( 458 22 458 23 36 4 node 458 23 458 27 194 2 -> 458 27 458 29 18446744073709551615 8 location 458 29 458 37 196 1 . 458 37 458 38 18446744073709551615 6 offset 458 38 458 44 69 1 ) 458 44 458 45 36 1 ; 458 45 458 46 18446744073709551615 1 } 459 3 459 4 18446744073709551615 4 else 460 3 460 7 18446744073709551615 1 { 461 3 461 4 18446744073709551615 8 byteCode 462 4 462 12 57 1 . 462 12 462 13 36 9 push_back 462 13 462 22 36 1 ( 462 22 462 23 36 13 pop_field_int 462 23 462 36 198 1 ) 462 36 462 37 36 1 ; 462 37 462 38 18446744073709551615 12 constantPool 463 4 463 16 60 1 . 463 16 463 17 36 9 push_back 463 17 463 26 36 1 ( 463 26 463 27 36 12 constant_int 463 27 463 39 100 1 ) 463 39 463 40 36 1 ; 463 40 463 41 18446744073709551615 10 ConvertInt 464 4 464 14 101 1 ( 464 14 464 15 101 12 constantPool 464 15 464 27 60 1 , 464 27 464 28 101 4 node 464 29 464 33 194 2 -> 464 33 464 35 18446744073709551615 8 location 464 35 464 43 196 1 . 464 43 464 44 18446744073709551615 5 index 464 44 464 49 199 1 ) 464 49 464 50 101 1 ; 464 50 464 51 18446744073709551615 8 byteCode 465 4 465 12 57 1 . 465 12 465 13 36 9 push_back 465 13 465 22 36 1 ( 465 22 465 23 36 14 constantsCount 465 23 465 37 61 1 ) 465 37 465 38 36 1 ; 465 38 465 39 18446744073709551615 14 constantsCount 466 4 466 18 61 2 ++ 466 18 466 20 18446744073709551615 1 ; 466 20 466 21 18446744073709551615 8 byteCode 467 4 467 12 57 1 . 467 12 467 13 36 9 push_back 467 13 467 22 36 1 ( 467 22 467 23 36 4 node 467 23 467 27 194 2 -> 467 27 467 29 18446744073709551615 8 location 467 29 467 37 196 1 . 467 37 467 38 18446744073709551615 6 offset 467 38 467 44 69 1 ) 467 44 467 45 36 1 ; 467 45 467 46 18446744073709551615 1 } 468 3 468 4 18446744073709551615 1 } 469 2 469 3 18446744073709551615 4 else 470 2 470 6 18446744073709551615 2 if 470 7 470 9 18446744073709551615 1 ( 470 10 470 11 18446744073709551615 4 node 470 11 470 15 194 2 -> 470 15 470 17 18446744073709551615 4 type 470 17 470 21 120 1 . 470 21 470 22 73 6 IsLong 470 22 470 28 73 1 ( 470 28 470 29 73 1 ) 470 29 470 30 73 1 ) 470 30 470 31 18446744073709551615 1 { 471 2 471 3 18446744073709551615 8 // To DO 472 3 472 11 18446744073709551615 1 } 473 2 473 3 18446744073709551615 1 } 474 1 474 2 18446744073709551615 4 void 475 1 475 5 18446744073709551615 8 Compiler 475 6 475 14 4 2 :: 475 14 475 16 92 5 Visit 475 16 475 21 92 1 ( 475 21 475 22 92 15 BlockExpression 475 22 475 37 200 1 * 475 37 475 38 18446744073709551615 4 node 475 39 475 43 201 1 ) 475 43 475 44 92 1 { 476 1 476 2 18446744073709551615 3 for 477 2 477 5 18446744073709551615 1 ( 477 6 477 7 18446744073709551615 4 auto 477 7 477 11 18446744073709551615 1 & 477 11 477 12 18446744073709551615 1 e 477 13 477 14 202 1 : 477 15 477 16 28 4 node 477 17 477 21 201 2 -> 477 21 477 23 18446744073709551615 11 expressions 477 23 477 34 203 1 ) 477 34 477 35 18446744073709551615 1 { 478 2 478 3 18446744073709551615 1 e 479 3 479 4 202 2 -> 479 4 479 6 31 6 Accept 479 6 479 12 31 1 ( 479 12 479 13 31 4 this 479 13 479 17 18446744073709551615 1 ) 479 17 479 18 31 1 ; 479 18 479 19 18446744073709551615 1 } 480 2 480 3 18446744073709551615 1 } 481 1 481 2 18446744073709551615 4 void 482 1 482 5 18446744073709551615 8 Compiler 482 6 482 14 4 2 :: 482 14 482 16 92 5 Visit 482 16 482 21 92 1 ( 482 21 482 22 92 16 IfThenExpression 482 22 482 38 204 1 * 482 38 482 39 18446744073709551615 4 node 482 40 482 44 205 1 ) 482 44 482 45 92 1 { 483 1 483 2 18446744073709551615 4 node 484 2 484 6 205 2 -> 484 6 484 8 18446744073709551615 9 condition 484 8 484 17 206 2 -> 484 17 484 19 31 6 Accept 484 19 484 25 31 1 ( 484 25 484 26 31 4 this 484 26 484 30 18446744073709551615 1 ) 484 30 484 31 31 1 ; 484 31 484 32 18446744073709551615 8 byteCode 485 2 485 10 57 1 . 485 10 485 11 36 9 push_back 485 11 485 20 36 1 ( 485 20 485 21 36 13 jump_if_false 485 21 485 34 207 1 ) 485 34 485 35 36 1 ; 485 35 485 36 18446744073709551615 7 int32_t 486 2 486 9 66 5 index 486 10 486 15 208 1 = 486 16 486 17 18446744073709551615 8 byteCode 486 18 486 26 57 1 . 486 26 486 27 39 4 size 486 27 486 31 39 1 ( 486 31 486 32 39 1 ) 486 32 486 33 39 1 ; 486 33 486 34 18446744073709551615 13 ConvertUShort 487 2 487 15 209 1 ( 487 15 487 16 209 8 byteCode 487 16 487 24 57 1 , 487 24 487 25 209 1 0 487 26 487 27 18446744073709551615 1 ) 487 27 487 28 209 1 ; 487 28 487 29 18446744073709551615 4 node 488 2 488 6 205 2 -> 488 6 488 8 18446744073709551615 6 ifTrue 488 8 488 14 210 2 -> 488 14 488 16 31 6 Accept 488 16 488 22 31 1 ( 488 22 488 23 31 4 this 488 23 488 27 18446744073709551615 1 ) 488 27 488 28 31 1 ; 488 28 488 29 18446744073709551615 7 int32_t 489 2 489 9 66 6 target 489 10 489 16 211 1 = 489 17 489 18 18446744073709551615 8 byteCode 489 19 489 27 57 1 . 489 27 489 28 39 4 size 489 28 489 32 39 1 ( 489 32 489 33 39 1 ) 489 33 489 34 39 1 ; 489 34 489 35 18446744073709551615 8 byteCode 490 2 490 10 57 1 . 490 10 490 11 212 2 at 490 11 490 13 212 1 ( 490 13 490 14 212 5 index 490 14 490 19 208 1 ) 490 19 490 20 212 1 = 490 21 490 22 18446744073709551615 6 target 490 23 490 29 211 1 % 490 30 490 31 18446744073709551615 3 256 490 32 490 35 18446744073709551615 1 ; 490 35 490 36 18446744073709551615 8 byteCode 491 2 491 10 57 1 . 491 10 491 11 212 2 at 491 11 491 13 212 1 ( 491 13 491 14 212 5 index 491 14 491 19 208 1 + 491 20 491 21 18446744073709551615 1 1 491 22 491 23 18446744073709551615 1 ) 491 23 491 24 212 1 = 491 25 491 26 18446744073709551615 6 target 491 27 491 33 211 1 / 491 34 491 35 18446744073709551615 3 256 491 36 491 39 18446744073709551615 1 ; 491 39 491 40 18446744073709551615 1 } 492 1 492 2 18446744073709551615 4 void 493 1 493 5 18446744073709551615 8 Compiler 493 6 493 14 4 2 :: 493 14 493 16 92 5 Visit 493 16 493 21 92 1 ( 493 21 493 22 92 20 IfThenElseExpression 493 22 493 42 213 1 * 493 42 493 43 18446744073709551615 4 node 493 44 493 48 214 1 ) 493 48 493 49 92 1 { 494 1 494 2 18446744073709551615 4 node 495 2 495 6 214 2 -> 495 6 495 8 18446744073709551615 9 condition 495 8 495 17 215 2 -> 495 17 495 19 31 6 Accept 495 19 495 25 31 1 ( 495 25 495 26 31 4 this 495 26 495 30 18446744073709551615 1 ) 495 30 495 31 31 1 ; 495 31 495 32 18446744073709551615 8 byteCode 496 2 496 10 57 1 . 496 10 496 11 36 9 push_back 496 11 496 20 36 1 ( 496 20 496 21 36 13 jump_if_false 496 21 496 34 207 1 ) 496 34 496 35 36 1 ; 496 35 496 36 18446744073709551615 7 int32_t 497 2 497 9 66 6 index1 497 10 497 16 216 1 = 497 17 497 18 18446744073709551615 8 byteCode 497 19 497 27 57 1 . 497 27 497 28 39 4 size 497 28 497 32 39 1 ( 497 32 497 33 39 1 ) 497 33 497 34 39 1 ; 497 34 497 35 18446744073709551615 13 ConvertUShort 498 2 498 15 209 1 ( 498 15 498 16 209 8 byteCode 498 16 498 24 57 1 , 498 24 498 25 209 1 0 498 26 498 27 18446744073709551615 1 ) 498 27 498 28 209 1 ; 498 28 498 29 18446744073709551615 4 node 500 2 500 6 214 2 -> 500 6 500 8 18446744073709551615 6 ifTrue 500 8 500 14 217 2 -> 500 14 500 16 31 6 Accept 500 16 500 22 31 1 ( 500 22 500 23 31 4 this 500 23 500 27 18446744073709551615 1 ) 500 27 500 28 31 1 ; 500 28 500 29 18446744073709551615 8 byteCode 501 2 501 10 57 1 . 501 10 501 11 36 9 push_back 501 11 501 20 36 1 ( 501 20 501 21 36 4 jump 501 21 501 25 218 1 ) 501 25 501 26 36 1 ; 501 26 501 27 18446744073709551615 7 int32_t 502 2 502 9 66 6 index2 502 10 502 16 219 1 = 502 17 502 18 18446744073709551615 8 byteCode 502 19 502 27 57 1 . 502 27 502 28 39 4 size 502 28 502 32 39 1 ( 502 32 502 33 39 1 ) 502 33 502 34 39 1 ; 502 34 502 35 18446744073709551615 13 ConvertUShort 503 2 503 15 209 1 ( 503 15 503 16 209 8 byteCode 503 16 503 24 57 1 , 503 24 503 25 209 1 0 503 26 503 27 18446744073709551615 1 ) 503 27 503 28 209 1 ; 503 28 503 29 18446744073709551615 7 int32_t 505 2 505 9 66 6 target 505 10 505 16 220 1 = 505 17 505 18 18446744073709551615 8 byteCode 505 19 505 27 57 1 . 505 27 505 28 39 4 size 505 28 505 32 39 1 ( 505 32 505 33 39 1 ) 505 33 505 34 39 1 ; 505 34 505 35 18446744073709551615 8 byteCode 506 2 506 10 57 1 . 506 10 506 11 212 2 at 506 11 506 13 212 1 ( 506 13 506 14 212 6 index1 506 14 506 20 216 1 ) 506 20 506 21 212 1 = 506 22 506 23 18446744073709551615 6 target 506 24 506 30 220 1 % 506 31 506 32 18446744073709551615 3 256 506 33 506 36 18446744073709551615 1 ; 506 36 506 37 18446744073709551615 8 byteCode 507 2 507 10 57 1 . 507 10 507 11 212 2 at 507 11 507 13 212 1 ( 507 13 507 14 212 6 index1 507 14 507 20 216 1 + 507 21 507 22 18446744073709551615 1 1 507 23 507 24 18446744073709551615 1 ) 507 24 507 25 212 1 = 507 26 507 27 18446744073709551615 6 target 507 28 507 34 220 1 / 507 35 507 36 18446744073709551615 3 256 507 37 507 40 18446744073709551615 1 ; 507 40 507 41 18446744073709551615 4 node 508 2 508 6 214 2 -> 508 6 508 8 18446744073709551615 7 ifFalse 508 8 508 15 221 2 -> 508 15 508 17 31 6 Accept 508 17 508 23 31 1 ( 508 23 508 24 31 4 this 508 24 508 28 18446744073709551615 1 ) 508 28 508 29 31 1 ; 508 29 508 30 18446744073709551615 7 int32_t 509 2 509 9 66 7 target2 509 10 509 17 222 1 = 509 18 509 19 18446744073709551615 8 byteCode 509 20 509 28 57 1 . 509 28 509 29 39 4 size 509 29 509 33 39 1 ( 509 33 509 34 39 1 ) 509 34 509 35 39 1 ; 509 35 509 36 18446744073709551615 8 byteCode 510 2 510 10 57 1 . 510 10 510 11 212 2 at 510 11 510 13 212 1 ( 510 13 510 14 212 6 index2 510 14 510 20 219 1 ) 510 20 510 21 212 1 = 510 22 510 23 18446744073709551615 7 target2 510 24 510 31 222 1 % 510 32 510 33 18446744073709551615 3 256 510 34 510 37 18446744073709551615 1 ; 510 37 510 38 18446744073709551615 8 byteCode 511 2 511 10 57 1 . 511 10 511 11 212 2 at 511 11 511 13 212 1 ( 511 13 511 14 212 6 index2 511 14 511 20 219 1 + 511 21 511 22 18446744073709551615 1 1 511 23 511 24 18446744073709551615 1 ) 511 24 511 25 212 1 = 511 26 511 27 18446744073709551615 6 target 511 28 511 34 220 1 / 511 35 511 36 18446744073709551615 3 256 511 37 511 40 18446744073709551615 1 ; 511 40 511 41 18446744073709551615 1 } 512 1 512 2 18446744073709551615 4 void 513 1 513 5 18446744073709551615 8 Compiler 513 6 513 14 4 2 :: 513 14 513 16 92 5 Visit 513 16 513 21 92 1 ( 513 21 513 22 92 14 CallExpression 513 22 513 36 223 1 * 513 36 513 37 18446744073709551615 4 node 513 38 513 42 224 1 ) 513 42 513 43 92 1 { 514 1 514 2 18446744073709551615 3 for 515 2 515 5 18446744073709551615 1 ( 515 6 515 7 18446744073709551615 4 auto 515 7 515 11 18446744073709551615 1 & 515 11 515 12 18446744073709551615 3 arg 515 13 515 16 225 1 : 515 17 515 18 28 4 node 515 19 515 23 224 2 -> 515 23 515 25 18446744073709551615 9 arguments 515 25 515 34 226 1 ) 515 34 515 35 18446744073709551615 1 { 516 2 516 3 18446744073709551615 3 arg 517 3 517 6 225 2 -> 517 6 517 8 31 6 Accept 517 8 517 14 31 1 ( 517 14 517 15 31 4 this 517 15 517 19 18446744073709551615 1 ) 517 19 517 20 31 1 ; 517 20 517 21 18446744073709551615 1 } 518 2 518 3 18446744073709551615 4 node 519 2 519 6 224 2 -> 519 6 519 8 18446744073709551615 8 function 519 8 519 16 227 2 -> 519 16 519 18 31 6 Accept 519 18 519 24 31 1 ( 519 24 519 25 31 4 this 519 25 519 29 18446744073709551615 1 ) 519 29 519 30 31 1 ; 519 30 519 31 18446744073709551615 8 byteCode 520 2 520 10 57 1 . 520 10 520 11 36 9 push_back 520 11 520 20 36 1 ( 520 20 520 21 36 6 invoke 520 21 520 27 228 1 ) 520 27 520 28 36 1 ; 520 28 520 29 18446744073709551615 1 } 521 1 521 2 18446744073709551615 4 void 522 1 522 5 18446744073709551615 8 Compiler 522 6 522 14 4 2 :: 522 14 522 16 92 5 Visit 522 16 522 21 92 1 ( 522 21 522 22 92 18 VariableExpression 522 22 522 40 229 1 * 522 40 522 41 18446744073709551615 4 node 522 42 522 46 230 1 ) 522 46 522 47 92 1 { 523 1 523 2 18446744073709551615 2 if 524 2 524 4 18446744073709551615 1 ( 524 5 524 6 18446744073709551615 4 node 524 6 524 10 230 2 -> 524 10 524 12 18446744073709551615 8 location 524 12 524 20 231 1 . 524 20 524 21 197 7 IsLocal 524 21 524 28 197 1 ( 524 28 524 29 197 1 ) 524 29 524 30 197 1 ) 524 30 524 31 18446744073709551615 1 { 525 2 525 3 18446744073709551615 2 if 526 3 526 5 18446744073709551615 1 ( 526 6 526 7 18446744073709551615 4 node 526 7 526 11 230 2 -> 526 11 526 13 18446744073709551615 4 type 526 13 526 17 120 1 . 526 17 526 18 71 5 IsInt 526 18 526 23 71 1 ( 526 23 526 24 71 1 ) 526 24 526 25 71 1 ) 526 25 526 26 18446744073709551615 1 { 527 3 527 4 18446744073709551615 8 byteCode 528 4 528 12 57 1 . 528 12 528 13 36 9 push_back 528 13 528 22 36 1 ( 528 22 528 23 36 14 push_local_int 528 23 528 37 232 1 ) 528 37 528 38 36 1 ; 528 38 528 39 18446744073709551615 8 byteCode 529 4 529 12 57 1 . 529 12 529 13 36 9 push_back 529 13 529 22 36 1 ( 529 22 529 23 36 4 node 529 23 529 27 230 2 -> 529 27 529 29 18446744073709551615 8 location 529 29 529 37 231 1 . 529 37 529 38 18446744073709551615 6 offset 529 38 529 44 69 1 ) 529 44 529 45 36 1 ; 529 45 529 46 18446744073709551615 1 } 530 3 530 4 18446744073709551615 4 else 531 3 531 7 18446744073709551615 2 if 531 8 531 10 18446744073709551615 1 ( 531 11 531 12 18446744073709551615 4 node 531 12 531 16 230 2 -> 531 16 531 18 18446744073709551615 4 type 531 18 531 22 120 1 . 531 22 531 23 73 6 IsLong 531 23 531 29 73 1 ( 531 29 531 30 73 1 ) 531 30 531 31 73 1 ) 531 31 531 32 18446744073709551615 1 { 532 3 532 4 18446744073709551615 8 byteCode 533 4 533 12 57 1 . 533 12 533 13 36 9 push_back 533 13 533 22 36 1 ( 533 22 533 23 36 15 push_local_long 533 23 533 38 233 1 ) 533 38 533 39 36 1 ; 533 39 533 40 18446744073709551615 8 byteCode 534 4 534 12 57 1 . 534 12 534 13 36 9 push_back 534 13 534 22 36 1 ( 534 22 534 23 36 4 node 534 23 534 27 230 2 -> 534 27 534 29 18446744073709551615 8 location 534 29 534 37 231 1 . 534 37 534 38 18446744073709551615 6 offset 534 38 534 44 69 1 ) 534 44 534 45 36 1 ; 534 45 534 46 18446744073709551615 1 } 535 3 535 4 18446744073709551615 4 else 536 3 536 7 18446744073709551615 2 if 536 8 536 10 18446744073709551615 1 ( 536 11 536 12 18446744073709551615 4 node 536 12 536 16 230 2 -> 536 16 536 18 18446744073709551615 4 type 536 18 536 22 120 1 . 536 22 536 23 75 7 IsFloat 536 23 536 30 75 1 ( 536 30 536 31 75 1 ) 536 31 536 32 75 1 ) 536 32 536 33 18446744073709551615 1 { 537 3 537 4 18446744073709551615 8 byteCode 538 4 538 12 57 1 . 538 12 538 13 36 9 push_back 538 13 538 22 36 1 ( 538 22 538 23 36 16 push_local_float 538 23 538 39 234 1 ) 538 39 538 40 36 1 ; 538 40 538 41 18446744073709551615 8 byteCode 539 4 539 12 57 1 . 539 12 539 13 36 9 push_back 539 13 539 22 36 1 ( 539 22 539 23 36 4 node 539 23 539 27 230 2 -> 539 27 539 29 18446744073709551615 8 location 539 29 539 37 231 1 . 539 37 539 38 18446744073709551615 6 offset 539 38 539 44 69 1 ) 539 44 539 45 36 1 ; 539 45 539 46 18446744073709551615 1 } 540 3 540 4 18446744073709551615 4 else 541 3 541 7 18446744073709551615 2 if 541 8 541 10 18446744073709551615 1 ( 541 11 541 12 18446744073709551615 4 node 541 12 541 16 230 2 -> 541 16 541 18 18446744073709551615 4 type 541 18 541 22 120 1 . 541 22 541 23 77 8 IsDouble 541 23 541 31 77 1 ( 541 31 541 32 77 1 ) 541 32 541 33 77 1 ) 541 33 541 34 18446744073709551615 1 { 542 3 542 4 18446744073709551615 8 byteCode 543 4 543 12 57 1 . 543 12 543 13 36 9 push_back 543 13 543 22 36 1 ( 543 22 543 23 36 14 push_local_int 543 23 543 37 232 1 ) 543 37 543 38 36 1 ; 543 38 543 39 18446744073709551615 8 byteCode 544 4 544 12 57 1 . 544 12 544 13 36 9 push_back 544 13 544 22 36 1 ( 544 22 544 23 36 4 node 544 23 544 27 230 2 -> 544 27 544 29 18446744073709551615 8 location 544 29 544 37 231 1 . 544 37 544 38 18446744073709551615 6 offset 544 38 544 44 69 1 ) 544 44 544 45 36 1 ; 544 45 544 46 18446744073709551615 1 } 545 3 545 4 18446744073709551615 4 else 546 3 546 7 18446744073709551615 1 { 547 3 547 4 18446744073709551615 5 throw 548 4 548 9 18446744073709551615 23 NotImplementedException 548 10 548 33 235 1 ( 548 33 548 34 235 1 ) 548 34 548 35 235 1 ; 548 35 548 36 18446744073709551615 1 } 549 3 549 4 18446744073709551615 1 } 550 2 550 3 18446744073709551615 4 else 551 2 551 6 18446744073709551615 1 { 552 2 552 3 18446744073709551615 2 if 553 3 553 5 18446744073709551615 1 ( 553 6 553 7 18446744073709551615 4 node 553 7 553 11 230 2 -> 553 11 553 13 18446744073709551615 4 type 553 13 553 17 120 1 . 553 17 553 18 236 10 IsFunction 553 18 553 28 236 1 ( 553 28 553 29 236 1 ) 553 29 553 30 236 1 ) 553 30 553 31 18446744073709551615 1 { 554 3 554 4 18446744073709551615 8 byteCode 555 4 555 12 57 1 . 555 12 555 13 36 9 push_back 555 13 555 22 36 1 ( 555 22 555 23 36 13 push_function 555 23 555 36 237 1 ) 555 36 555 37 36 1 ; 555 37 555 38 18446744073709551615 12 constantPool 556 4 556 16 60 1 . 556 16 556 17 36 9 push_back 556 17 556 26 36 1 ( 556 26 556 27 36 12 constant_int 556 27 556 39 100 1 ) 556 39 556 40 36 1 ; 556 40 556 41 18446744073709551615 10 ConvertInt 557 4 557 14 101 1 ( 557 14 557 15 101 12 constantPool 557 15 557 27 60 1 , 557 27 557 28 101 4 node 557 29 557 33 230 2 -> 557 33 557 35 18446744073709551615 8 location 557 35 557 43 231 1 . 557 43 557 44 18446744073709551615 5 index 557 44 557 49 199 1 ) 557 49 557 50 101 1 ; 557 50 557 51 18446744073709551615 8 byteCode 558 4 558 12 57 1 . 558 12 558 13 36 9 push_back 558 13 558 22 36 1 ( 558 22 558 23 36 14 constantsCount 558 23 558 37 61 1 ) 558 37 558 38 36 1 ; 558 38 558 39 18446744073709551615 14 constantsCount 559 4 559 18 61 2 ++ 559 18 559 20 18446744073709551615 1 ; 559 20 559 21 18446744073709551615 8 byteCode 560 4 560 12 57 1 . 560 12 560 13 36 9 push_back 560 13 560 22 36 1 ( 560 22 560 23 36 4 node 560 23 560 27 230 2 -> 560 27 560 29 18446744073709551615 8 location 560 29 560 37 231 1 . 560 37 560 38 18446744073709551615 6 offset 560 38 560 44 69 1 ) 560 44 560 45 36 1 ; 560 45 560 46 18446744073709551615 1 } 561 3 561 4 18446744073709551615 4 else 562 3 562 7 18446744073709551615 1 { 563 3 563 4 18446744073709551615 5 throw 564 4 564 9 18446744073709551615 23 NotImplementedException 564 10 564 33 235 1 ( 564 33 564 34 235 1 ) 564 34 564 35 235 1 ; 564 35 564 36 18446744073709551615 1 } 565 3 565 4 18446744073709551615 1 } 566 2 566 3 18446744073709551615 1 } 567 1 567 2 18446744073709551615 4 void 568 1 568 5 18446744073709551615 8 Compiler 568 6 568 14 4 2 :: 568 14 568 16 92 5 Visit 568 16 568 21 92 1 ( 568 21 568 22 92 16 ReturnExpression 568 22 568 38 238 1 * 568 38 568 39 18446744073709551615 4 node 568 40 568 44 239 1 ) 568 44 568 45 92 1 { 569 1 569 2 18446744073709551615 4 node 570 2 570 6 239 2 -> 570 6 570 8 18446744073709551615 5 value 570 8 570 13 240 2 -> 570 13 570 15 31 6 Accept 570 15 570 21 31 1 ( 570 21 570 22 31 4 this 570 22 570 26 18446744073709551615 1 ) 570 26 570 27 31 1 ; 570 27 570 28 18446744073709551615 2 if 571 2 571 4 18446744073709551615 1 ( 571 5 571 6 18446744073709551615 4 node 571 6 571 10 239 2 -> 571 10 571 12 18446744073709551615 4 type 571 12 571 16 120 1 . 571 16 571 17 71 5 IsInt 571 17 571 22 71 1 ( 571 22 571 23 71 1 ) 571 23 571 24 71 1 ) 571 24 571 25 18446744073709551615 1 { 572 2 572 3 18446744073709551615 8 byteCode 573 3 573 11 57 1 . 573 11 573 12 36 9 push_back 573 12 573 21 36 1 ( 573 21 573 22 36 10 return_int 573 22 573 32 241 1 ) 573 32 573 33 36 1 ; 573 33 573 34 18446744073709551615 1 } 574 2 574 3 18446744073709551615 4 else 575 2 575 6 18446744073709551615 2 if 575 7 575 9 18446744073709551615 1 ( 575 10 575 11 18446744073709551615 4 node 575 11 575 15 239 2 -> 575 15 575 17 18446744073709551615 4 type 575 17 575 21 120 1 . 575 21 575 22 73 6 IsLong 575 22 575 28 73 1 ( 575 28 575 29 73 1 ) 575 29 575 30 73 1 ) 575 30 575 31 18446744073709551615 1 { 576 2 576 3 18446744073709551615 8 byteCode 577 3 577 11 57 1 . 577 11 577 12 36 9 push_back 577 12 577 21 36 1 ( 577 21 577 22 36 11 return_long 577 22 577 33 242 1 ) 577 33 577 34 36 1 ; 577 34 577 35 18446744073709551615 1 } 578 2 578 3 18446744073709551615 4 else 579 2 579 6 18446744073709551615 2 if 579 7 579 9 18446744073709551615 1 ( 579 10 579 11 18446744073709551615 4 node 579 11 579 15 239 2 -> 579 15 579 17 18446744073709551615 4 type 579 17 579 21 120 1 . 579 21 579 22 75 7 IsFloat 579 22 579 29 75 1 ( 579 29 579 30 75 1 ) 579 30 579 31 75 1 ) 579 31 579 32 18446744073709551615 1 { 580 2 580 3 18446744073709551615 8 byteCode 581 3 581 11 57 1 . 581 11 581 12 36 9 push_back 581 12 581 21 36 1 ( 581 21 581 22 36 12 return_float 581 22 581 34 243 1 ) 581 34 581 35 36 1 ; 581 35 581 36 18446744073709551615 1 } 582 2 582 3 18446744073709551615 4 else 583 2 583 6 18446744073709551615 2 if 583 7 583 9 18446744073709551615 1 ( 583 10 583 11 18446744073709551615 4 node 583 11 583 15 239 2 -> 583 15 583 17 18446744073709551615 4 type 583 17 583 21 120 1 . 583 21 583 22 77 8 IsDouble 583 22 583 30 77 1 ( 583 30 583 31 77 1 ) 583 31 583 32 77 1 ) 583 32 583 33 18446744073709551615 1 { 584 2 584 3 18446744073709551615 8 byteCode 585 3 585 11 57 1 . 585 11 585 12 36 9 push_back 585 12 585 21 36 1 ( 585 21 585 22 36 13 return_double 585 22 585 35 244 1 ) 585 35 585 36 36 1 ; 585 36 585 37 18446744073709551615 1 } 586 2 586 3 18446744073709551615 4 else 587 2 587 6 18446744073709551615 1 { 588 2 588 3 18446744073709551615 5 throw 589 3 589 8 18446744073709551615 7 wstring 589 9 589 16 81 1 ( 589 16 589 17 82 28 L"not supported return type" 589 17 589 45 18446744073709551615 1 ) 589 45 589 46 82 1 ; 589 46 589 47 18446744073709551615 1 } 590 2 590 3 18446744073709551615 1 } 591 1 591 2 18446744073709551615 4 void 592 1 592 5 18446744073709551615 8 Compiler 592 6 592 14 4 2 :: 592 14 592 16 92 5 Visit 592 16 592 21 92 1 ( 592 21 592 22 92 15 WhileExpression 592 22 592 37 245 1 * 592 37 592 38 18446744073709551615 4 node 592 39 592 43 246 1 ) 592 43 592 44 92 1 { 593 1 593 2 18446744073709551615 1 } 594 1 594 2 18446744073709551615 4 void 595 1 595 5 18446744073709551615 8 Compiler 595 6 595 14 4 2 :: 595 14 595 16 92 5 Visit 595 16 595 21 92 1 ( 595 21 595 22 92 13 DotExpression 595 22 595 35 247 1 * 595 35 595 36 18446744073709551615 4 node 595 37 595 41 248 1 ) 595 41 595 42 92 1 { 596 1 596 2 18446744073709551615 4 Type 597 2 597 6 249 1 & 597 6 597 7 18446744073709551615 7 objType 597 8 597 15 250 1 = 597 16 597 17 18446744073709551615 4 node 597 18 597 22 248 2 -> 597 22 597 24 18446744073709551615 6 object 597 24 597 30 251 2 -> 597 30 597 32 18446744073709551615 4 type 597 32 597 36 120 1 ; 597 36 597 37 18446744073709551615 2 if 598 2 598 4 18446744073709551615 1 ( 598 5 598 6 18446744073709551615 7 objType 598 6 598 13 250 1 . 598 13 598 14 252 8 IsModule 598 14 598 22 252 1 ( 598 22 598 23 252 1 ) 598 23 598 24 252 1 ) 598 24 598 25 18446744073709551615 1 { 599 2 599 3 18446744073709551615 2 if 600 3 600 5 18446744073709551615 1 ( 600 6 600 7 18446744073709551615 4 node 600 7 600 11 248 2 -> 600 11 600 13 18446744073709551615 5 value 600 13 600 18 253 1 . 600 18 600 19 98 4 type 600 19 600 23 98 1 ( 600 23 600 24 98 1 ) 600 24 600 25 98 2 == 600 26 600 28 99 6 typeid 600 29 600 35 18446744073709551615 1 ( 600 35 600 36 18446744073709551615 8 Function 600 36 600 44 55 1 ) 600 44 600 45 18446744073709551615 1 ) 600 45 600 46 18446744073709551615 1 { 601 3 601 4 18446744073709551615 8 Function 602 4 602 12 55 1 f 602 13 602 14 254 1 = 602 15 602 16 18446744073709551615 8 any_cast 602 17 602 25 102 1 < 602 25 602 26 102 8 Function 602 26 602 34 55 1 > 602 34 602 35 102 1 ( 602 35 602 36 102 4 node 602 36 602 40 248 2 -> 602 40 602 42 18446744073709551615 5 value 602 42 602 47 253 1 ) 602 47 602 48 102 1 ; 602 48 602 49 18446744073709551615 8 byteCode 603 4 603 12 57 1 . 603 12 603 13 36 9 push_back 603 13 603 22 36 1 ( 603 22 603 23 36 13 push_function 603 23 603 36 237 1 ) 603 36 603 37 36 1 ; 603 37 603 38 18446744073709551615 12 constantPool 604 4 604 16 60 1 . 604 16 604 17 36 9 push_back 604 17 604 26 36 1 ( 604 26 604 27 36 12 constant_int 604 27 604 39 100 1 ) 604 39 604 40 36 1 ; 604 40 604 41 18446744073709551615 10 ConvertInt 605 4 605 14 101 1 ( 605 14 605 15 101 12 constantPool 605 15 605 27 60 1 , 605 27 605 28 101 1 f 605 29 605 30 254 1 . 605 30 605 31 18446744073709551615 8 location 605 31 605 39 86 1 . 605 39 605 40 18446744073709551615 5 index 605 40 605 45 199 1 ) 605 45 605 46 101 1 ; 605 46 605 47 18446744073709551615 8 byteCode 606 4 606 12 57 1 . 606 12 606 13 36 9 push_back 606 13 606 22 36 1 ( 606 22 606 23 36 14 constantsCount 606 23 606 37 61 1 ) 606 37 606 38 36 1 ; 606 38 606 39 18446744073709551615 14 constantsCount 607 4 607 18 61 2 ++ 607 18 607 20 18446744073709551615 1 ; 607 20 607 21 18446744073709551615 8 byteCode 608 4 608 12 57 1 . 608 12 608 13 36 9 push_back 608 13 608 22 36 1 ( 608 22 608 23 36 1 f 608 23 608 24 254 1 . 608 24 608 25 18446744073709551615 8 location 608 25 608 33 86 1 . 608 33 608 34 18446744073709551615 6 offset 608 34 608 40 69 1 ) 608 40 608 41 36 1 ; 608 41 608 42 18446744073709551615 1 } 609 3 609 4 18446744073709551615 4 else 610 3 610 7 18446744073709551615 1 { 611 3 611 4 18446744073709551615 5 throw 612 4 612 9 18446744073709551615 23 NotImplementedException 612 10 612 33 235 1 ( 612 33 612 34 235 1 ) 612 34 612 35 235 1 ; 612 35 612 36 18446744073709551615 1 } 613 3 613 4 18446744073709551615 1 } 614 2 614 3 18446744073709551615 4 else 615 2 615 6 18446744073709551615 1 { 616 2 616 3 18446744073709551615 5 throw 617 3 617 8 18446744073709551615 23 NotImplementedException 617 9 617 32 235 1 ( 617 32 617 33 235 1 ) 617 33 617 34 235 1 ; 617 34 617 35 18446744073709551615 1 } 618 2 618 3 18446744073709551615 1 } 619 1 619 2 18446744073709551615 14 CompiledModule 620 1 620 15 37 2 :: 620 15 620 17 37 14 CompiledModule 620 17 620 31 37 1 ( 620 31 620 32 37 1 ) 620 32 620 33 37 1 { 621 1 621 2 18446744073709551615 1 } 622 1 622 2 18446744073709551615 14 CompiledModule 623 1 623 15 37 2 :: 623 15 623 17 37 14 CompiledModule 623 17 623 31 37 1 ( 623 31 623 32 37 7 int32_t 623 32 623 39 66 5 index 623 40 623 45 255 1 , 623 45 623 46 37 7 int32_t 623 47 623 54 66 10 fieldCount 623 55 623 65 256 1 , 623 65 623 66 37 6 vector 624 11 624 17 24 1 < 624 17 624 18 18446744073709551615 16 CompiledFunction 624 18 624 34 25 1 > 624 34 624 35 18446744073709551615 9 functions 624 36 624 45 257 1 ) 624 45 624 46 37 1 : 625 2 625 3 37 5 index 625 4 625 9 258 1 { 625 9 625 10 18446744073709551615 5 index 625 10 625 15 255 1 } 625 15 625 16 18446744073709551615 1 , 626 2 626 3 37 10 fieldCount 626 4 626 14 259 1 { 626 14 626 15 18446744073709551615 10 fieldCount 626 15 626 25 256 1 } 626 25 626 26 18446744073709551615 1 , 627 2 627 3 37 9 functions 627 4 627 13 260 1 { 627 13 627 14 24 9 functions 627 14 627 23 257 1 } 627 23 627 24 24 1 { 628 1 628 2 18446744073709551615 1 } 629 1 629 2 18446744073709551615 8 ByteCode 630 1 630 9 59 14 CompiledModule 630 10 630 24 37 2 :: 630 24 630 26 261 12 EmitByteCode 630 26 630 38 261 1 ( 630 38 630 39 261 1 ) 630 39 630 40 261 1 { 631 1 631 2 18446744073709551615 8 ByteCode 632 2 632 10 59 4 code 632 11 632 15 262 1 ; 632 15 632 16 18446744073709551615 10 ConvertInt 633 2 633 12 101 1 ( 633 12 633 13 101 4 code 633 13 633 17 262 1 , 633 17 633 18 101 5 index 633 19 633 24 258 1 ) 633 24 633 25 101 1 ; 633 25 633 26 18446744073709551615 4 code 634 2 634 6 262 1 . 634 6 634 7 36 9 push_back 634 7 634 16 36 1 ( 634 16 634 17 36 10 fieldCount 634 17 634 27 259 1 ) 634 27 634 28 36 1 ; 634 28 634 29 18446744073709551615 4 code 635 2 635 6 262 1 . 635 6 635 7 36 9 push_back 635 7 635 16 36 1 ( 635 16 635 17 36 9 functions 635 17 635 26 260 1 . 635 26 635 27 39 4 size 635 27 635 31 39 1 ( 635 31 635 32 39 1 ) 635 32 635 33 39 1 ) 635 33 635 34 36 1 ; 635 34 635 35 18446744073709551615 3 for 636 2 636 5 18446744073709551615 1 ( 636 6 636 7 18446744073709551615 4 auto 636 7 636 11 18446744073709551615 1 & 636 11 636 12 18446744073709551615 8 function 636 13 636 21 263 1 : 636 22 636 23 28 9 functions 636 24 636 33 260 1 ) 636 33 636 34 18446744073709551615 1 { 637 2 637 3 18446744073709551615 3 for 638 3 638 6 18446744073709551615 1 ( 638 7 638 8 18446744073709551615 4 auto 638 8 638 12 18446744073709551615 1 b 638 13 638 14 264 1 : 638 15 638 16 28 8 function 638 17 638 25 263 1 . 638 25 638 26 265 12 EmitByteCode 638 26 638 38 265 1 ( 638 38 638 39 265 1 ) 638 39 638 40 265 1 ) 638 40 638 41 18446744073709551615 1 { 639 3 639 4 18446744073709551615 4 code 640 4 640 8 262 1 . 640 8 640 9 36 9 push_back 640 9 640 18 36 1 ( 640 18 640 19 36 1 b 640 19 640 20 264 1 ) 640 20 640 21 36 1 ; 640 21 640 22 18446744073709551615 1 } 641 3 641 4 18446744073709551615 1 } 642 2 642 3 18446744073709551615 6 return 643 2 643 8 18446744073709551615 4 code 643 9 643 13 262 1 ; 643 13 643 14 18446744073709551615 1 } 644 1 644 2 18446744073709551615 13 CompiledClass 645 1 645 14 50 2 :: 645 14 645 16 50 13 CompiledClass 645 16 645 29 50 1 ( 645 29 645 30 50 1 ) 645 30 645 31 50 1 { 646 1 646 2 18446744073709551615 1 } 647 1 647 2 18446744073709551615 13 CompiledClass 648 1 648 14 50 2 :: 648 14 648 16 50 13 CompiledClass 648 16 648 29 50 1 ( 648 29 648 30 50 7 int32_t 648 30 648 37 66 5 index 648 38 648 43 266 1 , 648 43 648 44 50 7 int32_t 648 45 648 52 66 10 fieldCount 648 53 648 63 267 1 , 648 63 648 64 50 6 vector 649 9 649 15 24 1 < 649 15 649 16 18446744073709551615 16 CompiledFunction 649 16 649 32 25 1 > 649 32 649 33 18446744073709551615 7 methods 649 34 649 41 268 1 ) 649 41 649 42 50 1 : 650 2 650 3 50 5 index 650 4 650 9 269 1 { 650 9 650 10 18446744073709551615 5 index 650 10 650 15 266 1 } 650 15 650 16 18446744073709551615 1 , 651 2 651 3 50 10 fieldCount 651 4 651 14 270 1 { 651 14 651 15 18446744073709551615 10 fieldCount 651 15 651 25 267 1 } 651 25 651 26 18446744073709551615 1 , 652 2 652 3 50 7 methods 652 4 652 11 271 1 { 652 11 652 12 24 7 methods 652 12 652 19 268 1 } 652 19 652 20 24 1 { 653 1 653 2 18446744073709551615 1 } 654 1 654 2 18446744073709551615 8 ByteCode 655 1 655 9 59 13 CompiledClass 655 10 655 23 50 2 :: 655 23 655 25 272 12 EmitByteCode 655 25 655 37 272 1 ( 655 37 655 38 272 1 ) 655 38 655 39 272 1 { 656 1 656 2 18446744073709551615 8 ByteCode 657 2 657 10 59 4 code 657 11 657 15 273 1 ; 657 15 657 16 18446744073709551615 4 code 658 2 658 6 273 1 . 658 6 658 7 36 9 push_back 658 7 658 16 36 1 ( 658 16 658 17 36 5 index 658 17 658 22 269 1 ) 658 22 658 23 36 1 ; 658 23 658 24 18446744073709551615 4 code 659 2 659 6 273 1 . 659 6 659 7 36 9 push_back 659 7 659 16 36 1 ( 659 16 659 17 36 10 fieldCount 659 17 659 27 270 1 ) 659 27 659 28 36 1 ; 659 28 659 29 18446744073709551615 4 code 660 2 660 6 273 1 . 660 6 660 7 36 9 push_back 660 7 660 16 36 1 ( 660 16 660 17 36 7 methods 660 17 660 24 271 1 . 660 24 660 25 39 4 size 660 25 660 29 39 1 ( 660 29 660 30 39 1 ) 660 30 660 31 39 1 ) 660 31 660 32 36 1 ; 660 32 660 33 18446744073709551615 3 for 661 2 661 5 18446744073709551615 1 ( 661 6 661 7 18446744073709551615 4 auto 661 7 661 11 18446744073709551615 1 & 661 11 661 12 18446744073709551615 6 method 661 13 661 19 274 1 : 661 20 661 21 28 7 methods 661 22 661 29 271 1 ) 661 29 661 30 18446744073709551615 1 { 662 2 662 3 18446744073709551615 3 for 663 3 663 6 18446744073709551615 1 ( 663 7 663 8 18446744073709551615 4 auto 663 8 663 12 18446744073709551615 1 b 663 13 663 14 275 1 : 663 15 663 16 28 6 method 663 17 663 23 274 1 . 663 23 663 24 265 12 EmitByteCode 663 24 663 36 265 1 ( 663 36 663 37 265 1 ) 663 37 663 38 265 1 ) 663 38 663 39 18446744073709551615 1 { 664 3 664 4 18446744073709551615 4 code 665 4 665 8 273 1 . 665 8 665 9 36 9 push_back 665 9 665 18 36 1 ( 665 18 665 19 36 1 b 665 19 665 20 275 1 ) 665 20 665 21 36 1 ; 665 21 665 22 18446744073709551615 1 } 666 3 666 4 18446744073709551615 1 } 667 2 667 3 18446744073709551615 6 return 668 2 668 8 18446744073709551615 4 code 668 9 668 13 273 1 ; 668 13 668 14 18446744073709551615 1 } 669 1 669 2 18446744073709551615 16 CompiledFunction 670 1 670 17 25 2 :: 670 17 670 19 25 16 CompiledFunction 670 19 670 35 25 1 ( 670 35 670 36 25 1 ) 670 36 670 37 25 1 { 671 1 671 2 18446744073709551615 1 } 672 1 672 2 18446744073709551615 16 CompiledFunction 673 1 673 17 25 2 :: 673 17 673 19 25 16 CompiledFunction 673 19 673 35 25 1 ( 673 35 673 36 25 7 wstring 673 36 673 43 81 4 name 673 44 673 48 276 1 , 673 48 673 49 25 7 int32_t 673 50 673 57 66 5 index 673 58 673 63 277 1 , 673 63 673 64 25 7 int32_t 674 12 674 19 66 9 stackSize 674 20 674 29 278 1 , 674 29 674 30 25 7 int32_t 674 31 674 38 66 9 argsCount 674 39 674 48 279 1 , 674 48 674 49 25 7 int32_t 675 12 675 19 66 11 localsCount 675 20 675 31 280 1 , 675 31 675 32 25 7 int32_t 675 33 675 40 66 13 constantCount 675 41 675 54 281 1 , 675 54 675 55 25 8 ByteCode 676 12 676 20 59 12 constantPool 676 21 676 33 282 1 , 676 33 676 34 25 8 ByteCode 676 35 676 43 59 8 byteCode 676 44 676 52 283 1 ) 676 52 676 53 25 1 : 677 2 677 3 25 4 name 677 4 677 8 284 1 { 677 8 677 9 82 4 name 677 9 677 13 276 1 } 677 13 677 14 82 1 , 678 2 678 3 25 5 index 678 4 678 9 285 1 { 678 9 678 10 18446744073709551615 5 index 678 10 678 15 277 1 } 678 15 678 16 18446744073709551615 1 , 679 2 679 3 25 9 stackSize 679 4 679 13 286 1 { 679 13 679 14 18446744073709551615 9 stackSize 679 14 679 23 278 1 } 679 23 679 24 18446744073709551615 1 , 680 2 680 3 25 9 argsCount 680 4 680 13 287 1 { 680 13 680 14 18446744073709551615 9 argsCount 680 14 680 23 279 1 } 680 23 680 24 18446744073709551615 1 , 681 2 681 3 25 11 localsCount 681 4 681 15 288 1 { 681 15 681 16 18446744073709551615 11 localsCount 681 16 681 27 280 1 } 681 27 681 28 18446744073709551615 1 , 682 2 682 3 25 13 constantCount 682 4 682 17 289 1 { 682 17 682 18 18446744073709551615 13 constantCount 682 18 682 31 281 1 } 682 31 682 32 18446744073709551615 1 , 683 2 683 3 25 12 constantPool 683 4 683 16 290 1 { 683 16 683 17 24 12 constantPool 683 17 683 29 282 1 } 683 29 683 30 24 1 , 684 2 684 3 25 8 byteCode 684 4 684 12 291 1 { 684 12 684 13 24 8 byteCode 684 13 684 21 283 1 } 684 21 684 22 24 1 { 685 1 685 2 18446744073709551615 1 } 686 1 686 2 18446744073709551615 8 ByteCode 687 1 687 9 59 16 CompiledFunction 687 10 687 26 25 2 :: 687 26 687 28 265 12 EmitByteCode 687 28 687 40 265 1 ( 687 40 687 41 265 1 ) 687 41 687 42 265 1 { 688 1 688 2 18446744073709551615 8 ByteCode 689 2 689 10 59 4 code 689 11 689 15 292 1 ; 689 15 689 16 18446744073709551615 4 code 690 2 690 6 292 1 . 690 6 690 7 36 9 push_back 690 7 690 16 36 1 ( 690 16 690 17 36 5 index 690 17 690 22 285 1 ) 690 22 690 23 36 1 ; 690 23 690 24 18446744073709551615 10 ConvertInt 691 2 691 12 101 1 ( 691 12 691 13 101 4 code 691 13 691 17 292 1 , 691 17 691 18 101 9 stackSize 691 19 691 28 286 1 ) 691 28 691 29 101 1 ; 691 29 691 30 18446744073709551615 4 code 692 2 692 6 292 1 . 692 6 692 7 36 9 push_back 692 7 692 16 36 1 ( 692 16 692 17 36 9 argsCount 692 17 692 26 287 1 ) 692 26 692 27 36 1 ; 692 27 692 28 18446744073709551615 4 code 693 2 693 6 292 1 . 693 6 693 7 36 9 push_back 693 7 693 16 36 1 ( 693 16 693 17 36 11 localsCount 693 17 693 28 288 1 ) 693 28 693 29 36 1 ; 693 29 693 30 18446744073709551615 4 code 694 2 694 6 292 1 . 694 6 694 7 36 9 push_back 694 7 694 16 36 1 ( 694 16 694 17 36 13 constantCount 694 17 694 30 289 1 ) 694 30 694 31 36 1 ; 694 31 694 32 18446744073709551615 13 ConvertUShort 695 2 695 15 209 1 ( 695 15 695 16 209 4 code 695 16 695 20 292 1 , 695 20 695 21 209 8 byteCode 695 22 695 30 291 1 . 695 30 695 31 39 4 size 695 31 695 35 39 1 ( 695 35 695 36 39 1 ) 695 36 695 37 39 1 ) 695 37 695 38 209 1 ; 695 38 695 39 18446744073709551615 3 for 696 2 696 5 18446744073709551615 1 ( 696 6 696 7 18446744073709551615 4 auto 696 7 696 11 18446744073709551615 1 & 696 11 696 12 18446744073709551615 1 b 696 13 696 14 293 1 : 696 15 696 16 28 12 constantPool 696 17 696 29 290 1 ) 696 29 696 30 18446744073709551615 1 { 697 2 697 3 18446744073709551615 4 code 698 3 698 7 292 1 . 698 7 698 8 36 9 push_back 698 8 698 17 36 1 ( 698 17 698 18 36 1 b 698 18 698 19 293 1 ) 698 19 698 20 36 1 ; 698 20 698 21 18446744073709551615 1 } 699 2 699 3 18446744073709551615 3 for 700 2 700 5 18446744073709551615 1 ( 700 6 700 7 18446744073709551615 4 auto 700 7 700 11 18446744073709551615 1 & 700 11 700 12 18446744073709551615 1 b 700 13 700 14 294 1 : 700 15 700 16 28 8 byteCode 700 17 700 25 291 1 ) 700 25 700 26 18446744073709551615 1 { 701 2 701 3 18446744073709551615 4 code 702 3 702 7 292 1 . 702 7 702 8 36 9 push_back 702 8 702 17 36 1 ( 702 17 702 18 36 1 b 702 18 702 19 294 1 ) 702 19 702 20 36 1 ; 702 20 702 21 18446744073709551615 1 } 703 2 703 3 18446744073709551615 6 return 704 2 704 8 18446744073709551615 4 code 704 9 704 13 292 1 ; 704 13 704 14 18446744073709551615 1 } 705 1 705 2 18446744073709551615 15 CompiledProgram 706 1 706 16 5 2 :: 706 16 706 18 5 15 CompiledProgram 706 18 706 33 5 1 ( 706 33 706 34 5 1 ) 706 34 706 35 5 1 { 707 1 707 2 18446744073709551615 1 } 708 1 708 2 18446744073709551615 15 CompiledProgram 709 1 709 16 5 2 :: 709 16 709 18 5 15 CompiledProgram 709 18 709 33 5 1 ( 709 33 709 34 5 6 vector 709 34 709 40 24 1 < 709 40 709 41 18446744073709551615 14 CompiledModule 709 41 709 55 37 1 > 709 55 709 56 18446744073709551615 7 modules 709 57 709 64 295 1 , 709 64 709 65 5 6 vector 710 10 710 16 24 1 < 710 16 710 17 18446744073709551615 13 CompiledClass 710 17 710 30 50 1 > 710 30 710 31 18446744073709551615 7 classes 710 32 710 39 296 1 ) 710 39 710 40 5 1 : 711 2 711 3 5 7 modules 711 4 711 11 297 1 { 711 11 711 12 24 7 modules 711 12 711 19 295 1 } 711 19 711 20 24 1 , 712 2 712 3 5 7 classes 712 4 712 11 298 1 { 712 11 712 12 24 7 classes 712 12 712 19 296 1 } 712 19 712 20 24 1 { 713 1 713 2 18446744073709551615 1 } 714 1 714 2 18446744073709551615 4 void 715 1 715 5 18446744073709551615 15 CompiledProgram 715 6 715 21 5 2 :: 715 21 715 23 299 18 SearchMainFunction 715 23 715 41 299 1 ( 715 41 715 42 299 1 ) 715 42 715 43 299 1 { 716 1 716 2 18446744073709551615 3 for 717 2 717 5 18446744073709551615 1 ( 717 6 717 7 18446744073709551615 4 auto 717 7 717 11 18446744073709551615 1 & 717 11 717 12 18446744073709551615 10 moduleInfo 717 13 717 23 300 1 : 717 24 717 25 28 7 modules 717 26 717 33 297 1 ) 717 33 717 34 18446744073709551615 1 { 718 2 718 3 18446744073709551615 3 for 719 3 719 6 18446744073709551615 1 ( 719 7 719 8 18446744073709551615 4 auto 719 8 719 12 18446744073709551615 1 & 719 12 719 13 18446744073709551615 1 f 719 14 719 15 301 1 : 719 16 719 17 28 10 moduleInfo 719 18 719 28 300 1 . 719 28 719 29 18446744073709551615 9 functions 719 29 719 38 260 1 ) 719 38 719 39 18446744073709551615 1 { 720 3 720 4 18446744073709551615 2 if 721 4 721 6 18446744073709551615 1 ( 721 7 721 8 18446744073709551615 1 f 721 8 721 9 301 1 . 721 9 721 10 18446744073709551615 4 name 721 10 721 14 284 2 == 721 15 721 17 302 7 L"Main" 721 18 721 25 18446744073709551615 1 ) 721 25 721 26 18446744073709551615 1 { 722 4 722 5 18446744073709551615 10 mainModule 723 5 723 15 303 1 = 723 16 723 17 18446744073709551615 10 moduleInfo 723 18 723 28 300 1 . 723 28 723 29 18446744073709551615 5 index 723 29 723 34 258 1 ; 723 34 723 35 18446744073709551615 12 mainFunction 724 5 724 17 304 1 = 724 18 724 19 18446744073709551615 1 f 724 20 724 21 301 1 . 724 21 724 22 18446744073709551615 5 index 724 22 724 27 285 1 ; 724 27 724 28 18446744073709551615 6 return 725 5 725 11 18446744073709551615 1 ; 725 11 725 12 18446744073709551615 1 } 726 4 726 5 18446744073709551615 1 } 727 3 727 4 18446744073709551615 1 } 728 2 728 3 18446744073709551615 10 mainModule 729 2 729 12 303 1 = 729 13 729 14 18446744073709551615 1 - 729 15 729 16 18446744073709551615 1 1 729 16 729 17 18446744073709551615 1 ; 729 17 729 18 18446744073709551615 12 mainFunction 730 2 730 14 304 1 = 730 15 730 16 18446744073709551615 1 - 730 17 730 18 18446744073709551615 1 1 730 18 730 19 18446744073709551615 1 ; 730 19 730 20 18446744073709551615 5 throw 731 2 731 7 18446744073709551615 7 wstring 731 8 731 15 81 1 ( 731 15 731 16 82 24 L"missing main function" 731 16 731 40 18446744073709551615 1 ) 731 40 731 41 82 1 ; 731 41 731 42 18446744073709551615 1 } 732 1 732 2 18446744073709551615 8 ByteCode 733 1 733 9 59 15 CompiledProgram 733 10 733 25 5 2 :: 733 25 733 27 305 12 EmitByteCode 733 27 733 39 305 1 ( 733 39 733 40 305 1 ) 733 40 733 41 305 1 { 734 1 734 2 18446744073709551615 18 SearchMainFunction 735 2 735 20 299 1 ( 735 20 735 21 299 1 ) 735 21 735 22 299 1 ; 735 22 735 23 18446744073709551615 8 ByteCode 736 2 736 10 59 4 code 736 11 736 15 306 1 ; 736 15 736 16 18446744073709551615 10 ConvertInt 737 2 737 12 101 1 ( 737 12 737 13 101 4 code 737 13 737 17 306 1 , 737 17 737 18 101 10 mainModule 737 19 737 29 303 1 ) 737 29 737 30 101 1 ; 737 30 737 31 18446744073709551615 4 code 738 2 738 6 306 1 . 738 6 738 7 36 9 push_back 738 7 738 16 36 1 ( 738 16 738 17 36 12 mainFunction 738 17 738 29 304 1 ) 738 29 738 30 36 1 ; 738 30 738 31 18446744073709551615 3 for 739 2 739 5 18446744073709551615 1 ( 739 6 739 7 18446744073709551615 4 auto 739 7 739 11 18446744073709551615 1 & 739 11 739 12 18446744073709551615 6 module 739 13 739 19 307 1 : 739 20 739 21 28 7 modules 739 22 739 29 297 1 ) 739 29 739 30 18446744073709551615 1 { 740 2 740 3 18446744073709551615 4 code 741 3 741 7 306 1 . 741 7 741 8 36 9 push_back 741 8 741 17 36 1 ( 741 17 741 18 36 1 0 741 18 741 19 18446744073709551615 1 ) 741 19 741 20 36 1 ; 741 20 741 21 18446744073709551615 3 for 742 3 742 6 18446744073709551615 1 ( 742 7 742 8 18446744073709551615 4 auto 742 8 742 12 18446744073709551615 1 b 742 13 742 14 308 1 : 742 15 742 16 28 6 module 742 17 742 23 307 1 . 742 23 742 24 261 12 EmitByteCode 742 24 742 36 261 1 ( 742 36 742 37 261 1 ) 742 37 742 38 261 1 ) 742 38 742 39 18446744073709551615 1 { 743 3 743 4 18446744073709551615 4 code 744 4 744 8 306 1 . 744 8 744 9 36 9 push_back 744 9 744 18 36 1 ( 744 18 744 19 36 1 b 744 19 744 20 308 1 ) 744 20 744 21 36 1 ; 744 21 744 22 18446744073709551615 1 } 745 3 745 4 18446744073709551615 1 } 746 2 746 3 18446744073709551615 3 for 747 2 747 5 18446744073709551615 1 ( 747 6 747 7 18446744073709551615 4 auto 747 7 747 11 18446744073709551615 1 & 747 11 747 12 18446744073709551615 6 _class 747 13 747 19 309 1 : 747 20 747 21 28 7 classes 747 22 747 29 298 1 ) 747 29 747 30 18446744073709551615 1 { 748 2 748 3 18446744073709551615 4 code 749 3 749 7 306 1 . 749 7 749 8 36 9 push_back 749 8 749 17 36 1 ( 749 17 749 18 36 1 1 749 18 749 19 18446744073709551615 1 ) 749 19 749 20 36 1 ; 749 20 749 21 18446744073709551615 3 for 750 3 750 6 18446744073709551615 1 ( 750 7 750 8 18446744073709551615 4 auto 750 8 750 12 18446744073709551615 1 b 750 13 750 14 310 1 : 750 15 750 16 28 6 _class 750 17 750 23 309 1 . 750 23 750 24 272 12 EmitByteCode 750 24 750 36 272 1 ( 750 36 750 37 272 1 ) 750 37 750 38 272 1 ) 750 38 750 39 18446744073709551615 1 { 751 3 751 4 18446744073709551615 4 code 752 4 752 8 306 1 . 752 8 752 9 36 9 push_back 752 9 752 18 36 1 ( 752 18 752 19 36 1 b 752 19 752 20 310 1 ) 752 20 752 21 36 1 ; 752 21 752 22 18446744073709551615 1 } 753 3 753 4 18446744073709551615 1 } 754 2 754 3 18446744073709551615 6 return 755 2 755 8 18446744073709551615 4 code 755 9 755 13 306 1 ; 755 13 755 14 18446744073709551615 1 } 756 1 756 2 18446744073709551615 4 void 757 1 757 5 18446744073709551615 12 ConvertValue 757 6 757 18 311 1 ( 757 18 757 19 311 8 ByteCode 757 19 757 27 59 1 & 757 27 757 28 18446744073709551615 8 byteCode 757 29 757 37 312 1 , 757 37 757 38 311 4 byte 757 39 757 43 313 1 * 757 43 757 44 18446744073709551615 5 bytes 757 45 757 50 314 1 , 757 50 757 51 311 7 int32_t 757 52 757 59 66 6 length 757 60 757 66 315 1 ) 757 66 757 67 311 1 { 758 1 758 2 18446744073709551615 3 for 759 2 759 5 18446744073709551615 1 ( 759 6 759 7 18446744073709551615 7 int32_t 759 7 759 14 66 1 i 759 15 759 16 316 1 = 759 17 759 18 18446744073709551615 1 0 759 19 759 20 18446744073709551615 1 ; 759 20 759 21 18446744073709551615 1 i 759 22 759 23 316 1 < 759 24 759 25 18446744073709551615 6 length 759 26 759 32 315 1 ; 759 32 759 33 18446744073709551615 1 i 759 34 759 35 316 2 ++ 759 35 759 37 18446744073709551615 1 ) 759 37 759 38 18446744073709551615 1 { 760 2 760 3 18446744073709551615 8 byteCode 761 3 761 11 312 1 . 761 11 761 12 36 9 push_back 761 12 761 21 36 1 ( 761 21 761 22 36 5 bytes 761 22 761 27 314 1 [ 761 27 761 28 18446744073709551615 1 i 761 28 761 29 316 1 ] 761 29 761 30 18446744073709551615 1 ) 761 30 761 31 36 1 ; 761 31 761 32 18446744073709551615 1 } 762 2 762 3 18446744073709551615 1 } 763 1 763 2 18446744073709551615 4 void 764 1 764 5 18446744073709551615 13 ConvertUShort 764 6 764 19 209 1 ( 764 19 764 20 209 8 ByteCode 764 20 764 28 59 1 & 764 28 764 29 18446744073709551615 8 byteCode 764 30 764 38 317 1 , 764 38 764 39 209 8 uint16_t 764 40 764 48 318 5 value 764 49 764 54 319 1 ) 764 54 764 55 209 1 { 765 1 765 2 18446744073709551615 12 ConvertValue 766 2 766 14 311 1 ( 766 14 766 15 311 8 byteCode 766 15 766 23 317 1 , 766 23 766 24 311 1 ( 766 25 766 26 18446744073709551615 4 byte 766 26 766 30 313 1 * 766 30 766 31 18446744073709551615 1 ) 766 31 766 32 18446744073709551615 1 & 766 33 766 34 18446744073709551615 5 value 766 34 766 39 319 1 , 766 39 766 40 311 6 sizeof 766 41 766 47 18446744073709551615 1 ( 766 47 766 48 18446744073709551615 8 uint16_t 766 48 766 56 318 1 ) 766 56 766 57 18446744073709551615 1 ) 766 57 766 58 311 1 ; 766 58 766 59 18446744073709551615 1 } 767 1 767 2 18446744073709551615 4 void 768 1 768 5 18446744073709551615 10 ConvertInt 768 6 768 16 101 1 ( 768 16 768 17 101 8 ByteCode 768 17 768 25 59 1 & 768 25 768 26 18446744073709551615 8 byteCode 768 27 768 35 320 1 , 768 35 768 36 101 7 int32_t 768 37 768 44 66 5 value 768 45 768 50 321 1 ) 768 50 768 51 101 1 { 769 1 769 2 18446744073709551615 12 ConvertValue 770 2 770 14 311 1 ( 770 14 770 15 311 8 byteCode 770 15 770 23 320 1 , 770 23 770 24 311 1 ( 770 25 770 26 18446744073709551615 4 byte 770 26 770 30 313 1 * 770 30 770 31 18446744073709551615 1 ) 770 31 770 32 18446744073709551615 1 & 770 33 770 34 18446744073709551615 5 value 770 34 770 39 321 1 , 770 39 770 40 311 6 sizeof 770 41 770 47 18446744073709551615 1 ( 770 47 770 48 18446744073709551615 7 int32_t 770 48 770 55 66 1 ) 770 55 770 56 18446744073709551615 1 ) 770 56 770 57 311 1 ; 770 57 770 58 18446744073709551615 1 } 771 1 771 2 18446744073709551615 4 void 772 1 772 5 18446744073709551615 11 ConvertLong 772 6 772 17 106 1 ( 772 17 772 18 106 8 ByteCode 772 18 772 26 59 1 & 772 26 772 27 18446744073709551615 8 byteCode 772 28 772 36 322 1 , 772 36 772 37 106 7 int64_t 772 38 772 45 104 5 value 772 46 772 51 323 1 ) 772 51 772 52 106 1 { 773 1 773 2 18446744073709551615 12 ConvertValue 774 2 774 14 311 1 ( 774 14 774 15 311 8 byteCode 774 15 774 23 322 1 , 774 23 774 24 311 1 ( 774 25 774 26 18446744073709551615 4 byte 774 26 774 30 313 1 * 774 30 774 31 18446744073709551615 1 ) 774 31 774 32 18446744073709551615 1 & 774 33 774 34 18446744073709551615 5 value 774 34 774 39 323 1 , 774 39 774 40 311 6 sizeof 774 41 774 47 18446744073709551615 1 ( 774 47 774 48 18446744073709551615 7 int64_t 774 48 774 55 104 1 ) 774 55 774 56 18446744073709551615 1 ) 774 56 774 57 311 1 ; 774 57 774 58 18446744073709551615 1 } 775 1 775 2 18446744073709551615 4 void 776 1 776 5 18446744073709551615 12 ConvertFloat 776 6 776 18 109 1 ( 776 18 776 19 109 8 ByteCode 776 19 776 27 59 1 & 776 27 776 28 18446744073709551615 8 byteCode 776 29 776 37 324 1 , 776 37 776 38 109 5 float 776 39 776 44 18446744073709551615 5 value 776 45 776 50 325 1 ) 776 50 776 51 109 1 { 777 1 777 2 18446744073709551615 12 ConvertValue 778 2 778 14 311 1 ( 778 14 778 15 311 8 byteCode 778 15 778 23 324 1 , 778 23 778 24 311 1 ( 778 25 778 26 18446744073709551615 4 byte 778 26 778 30 313 1 * 778 30 778 31 18446744073709551615 1 ) 778 31 778 32 18446744073709551615 1 & 778 33 778 34 18446744073709551615 5 value 778 34 778 39 325 1 , 778 39 778 40 311 6 sizeof 778 41 778 47 18446744073709551615 1 ( 778 47 778 48 18446744073709551615 5 float 778 48 778 53 18446744073709551615 1 ) 778 53 778 54 18446744073709551615 1 ) 778 54 778 55 311 1 ; 778 55 778 56 18446744073709551615 1 } 779 1 779 2 18446744073709551615 4 void 780 1 780 5 18446744073709551615 13 ConvertDouble 780 6 780 19 112 1 ( 780 19 780 20 112 8 ByteCode 780 20 780 28 59 1 & 780 28 780 29 18446744073709551615 8 byteCode 780 30 780 38 326 1 , 780 38 780 39 112 6 double 780 40 780 46 18446744073709551615 5 value 780 47 780 52 327 1 ) 780 52 780 53 112 1 { 781 1 781 2 18446744073709551615 12 ConvertValue 782 2 782 14 311 1 ( 782 14 782 15 311 8 byteCode 782 15 782 23 326 1 , 782 23 782 24 311 1 ( 782 25 782 26 18446744073709551615 4 byte 782 26 782 30 313 1 * 782 30 782 31 18446744073709551615 1 ) 782 31 782 32 18446744073709551615 1 & 782 33 782 34 18446744073709551615 5 value 782 34 782 39 327 1 , 782 39 782 40 311 6 sizeof 782 41 782 47 18446744073709551615 1 ( 782 47 782 48 18446744073709551615 6 double 782 48 782 54 18446744073709551615 1 ) 782 54 782 55 18446744073709551615 1 ) 782 55 782 56 311 1 ; 782 56 782 57 18446744073709551615 1 } 783 1 783 2 18446744073709551615 4 void 784 1 784 5 18446744073709551615 13 ConvertString 784 6 784 19 115 1 ( 784 19 784 20 115 8 ByteCode 784 20 784 28 59 1 & 784 28 784 29 18446744073709551615 8 byteCode 784 30 784 38 328 1 , 784 38 784 39 115 7 wstring 784 40 784 47 81 4 text 784 48 784 52 329 1 ) 784 52 784 53 115 1 { 785 1 785 2 18446744073709551615 7 int32_t 786 2 786 9 66 6 length 786 10 786 16 330 1 = 786 17 786 18 18446744073709551615 4 text 786 19 786 23 329 1 . 786 23 786 24 331 4 size 786 24 786 28 331 1 ( 786 28 786 29 331 1 ) 786 29 786 30 331 1 ; 786 30 786 31 18446744073709551615 10 ConvertInt 787 2 787 12 101 1 ( 787 12 787 13 101 8 byteCode 787 13 787 21 328 1 , 787 21 787 22 101 6 length 787 23 787 29 330 1 ) 787 29 787 30 101 1 ; 787 30 787 31 18446744073709551615 3 for 788 2 788 5 18446744073709551615 1 ( 788 6 788 7 18446744073709551615 7 int32_t 788 7 788 14 66 1 i 788 15 788 16 332 1 = 788 17 788 18 18446744073709551615 1 0 788 19 788 20 18446744073709551615 1 ; 788 20 788 21 18446744073709551615 1 i 788 22 788 23 332 1 < 788 24 788 25 18446744073709551615 6 length 788 26 788 32 330 1 ; 788 32 788 33 18446744073709551615 1 i 788 34 788 35 332 2 ++ 788 35 788 37 18446744073709551615 1 ) 788 37 788 38 18446744073709551615 1 { 789 2 789 3 18446744073709551615 7 int32_t 790 3 790 10 66 9 character 790 11 790 20 333 1 = 790 21 790 22 18446744073709551615 4 text 790 23 790 27 329 1 [ 790 27 790 28 334 1 i 790 28 790 29 332 1 ] 790 29 790 30 334 1 ; 790 30 790 31 18446744073709551615 10 ConvertInt 791 3 791 13 101 1 ( 791 13 791 14 101 8 byteCode 791 14 791 22 328 1 , 791 22 791 23 101 9 character 791 24 791 33 333 1 ) 791 33 791 34 101 1 ; 791 34 791 35 18446744073709551615 1 } 792 2 792 3 18446744073709551615 1 } 793 1 793 2 18446744073709551615 0 0 335 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 8 Compiler 4 1 3 0 15 CompiledProgram 21 1 3 0 16 Compile:Compiler 4 1 3 0 15 NamespaceRecord 10 1 3 0 74 11:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 13:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 73 15:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 25 CompileNamespace:Compiler 6 1 3 0 16 modules:Compiler 6 1 3 0 16 classes:Compiler 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 74 20:56:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 22:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 74 24:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 31 1 3 0 10 vector:std 4 1 3 0 16 CompiledFunction 9 1 3 0 74 25:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 26:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 9 1 3 0 74 30:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 16 functions:Module 9 1 3 0 74 32:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 24 CompileFunction:Compiler 21 1 3 0 20 push_back:vector:std 4 1 3 0 14 CompiledModule 6 1 3 0 12 index:Module 21 1 3 0 15 size:vector:std 9 1 3 0 74 38:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 74 40:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 41:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 42:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 12 fields:Class 9 1 3 0 74 46:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 functions:Class 9 1 3 0 74 48:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 CompiledClass 6 1 3 0 11 index:Class 9 1 3 0 74 54:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 subNamespaces:Namespace 9 1 3 0 73 56:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 8 Function 10 1 3 0 74 60:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 byteCode:Compiler 21 1 3 0 20 operator=:vector:std 20 1 3 0 8 ByteCode 6 1 3 0 21 constantPool:Compiler 6 1 3 0 23 constantsCount:Compiler 4 1 3 0 13 LocalVariable 9 1 3 0 74 65:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 18 variables:Function 6 1 3 0 19 value:LocalVariable 20 1 3 0 7 int32_t 9 1 3 0 74 68:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 location:LocalVariable 6 1 3 0 15 offset:Location 6 1 3 0 18 type:LocalVariable 21 1 3 0 10 IsInt:Type 7 1 3 0 14 pop_local_int: 21 1 3 0 11 IsLong:Type 7 1 3 0 15 pop_local_long: 21 1 3 0 12 IsFloat:Type 7 1 3 0 16 pop_local_float: 21 1 3 0 13 IsDouble:Type 7 1 3 0 17 pop_local_double: 21 1 3 0 13 IsString:Type 7 1 3 0 17 pop_local_string: 20 1 3 0 19 wstring:__cxx11:std 24 1 3 0 24 basic_string:__cxx11:std 9 1 3 0 74 95:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 expressions:Function 9 1 3 0 74 99:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 location:Function 9 1 3 0 75 100:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 101:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 parameters:Function 9 1 3 0 75 102:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 13 name:Function 21 2 3 0 24 Visit:Visitor:Expression 14 Visit:Compiler 4 1 3 0 18 ConstantExpression 10 1 3 0 75 107:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 7 any:std 9 1 3 0 74 109:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 7 1 3 0 13 constant_int: 8 1 3 0 10 ConvertInt 8 1 3 0 12 any_cast:std 7 1 3 0 18 push_constant_int: 20 1 3 0 7 int64_t 7 1 3 0 14 constant_long: 8 1 3 0 11 ConvertLong 7 1 3 0 19 push_constant_long: 7 1 3 0 15 constant_float: 8 1 3 0 12 ConvertFloat 7 1 3 0 20 push_constant_float: 7 1 3 0 16 constant_double: 8 1 3 0 13 ConvertDouble 7 1 3 0 21 push_constant_double: 7 1 3 0 16 constant_string: 8 1 3 0 13 ConvertString 7 1 3 0 21 push_constant_string: 4 1 3 0 15 UnaryExpression 10 1 3 0 75 153:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 type:Expression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 10 minus_int: 7 1 3 0 11 minus_long: 7 1 3 0 12 minus_float: 7 1 3 0 13 minus_double: 21 1 3 0 14 IsBoolean:Type 7 1 3 0 18 Not:ExpressionKind 7 1 3 0 12 logical_not: 4 1 3 0 16 BinaryExpression 10 1 3 0 75 221:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 8 add_int: 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 8 sub_int: 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 8 mul_int: 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 8 div_int: 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 8 mod_int: 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 7 gt_int: 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 7 lt_int: 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 7 ge_int: 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 7 le_int: 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 7 eq_int: 7 1 3 0 23 NotEqual:ExpressionKind 7 1 3 0 7 ne_int: 7 1 3 0 9 add_long: 7 1 3 0 9 sub_long: 7 1 3 0 9 mul_long: 7 1 3 0 9 div_long: 7 1 3 0 9 mod_long: 7 1 3 0 8 gt_long: 7 1 3 0 8 lt_long: 7 1 3 0 8 ge_long: 7 1 3 0 8 le_long: 7 1 3 0 8 eq_long: 7 1 3 0 8 ne_long: 7 1 3 0 10 add_float: 7 1 3 0 10 sub_float: 7 1 3 0 10 mul_float: 7 1 3 0 10 div_float: 7 1 3 0 9 gt_float: 7 1 3 0 9 lt_float: 7 1 3 0 9 ge_float: 7 1 3 0 9 le_float: 7 1 3 0 9 eq_float: 7 1 3 0 9 ne_float: 7 1 3 0 11 add_double: 7 1 3 0 11 sub_double: 7 1 3 0 11 mul_double: 7 1 3 0 11 div_double: 7 1 3 0 10 gt_double: 7 1 3 0 10 lt_double: 7 1 3 0 10 ge_double: 7 1 3 0 10 le_double: 7 1 3 0 10 eq_double: 7 1 3 0 10 ne_double: 7 1 3 0 18 And:ExpressionKind 7 1 3 0 12 logical_and: 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 11 logical_or: 4 1 3 0 16 AssignExpression 10 1 3 0 75 449:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:AssignExpression 6 1 3 0 25 location:AssignExpression 21 1 3 0 16 IsLocal:Location 7 1 3 0 14 pop_field_int: 6 1 3 0 14 index:Location 4 1 3 0 15 BlockExpression 10 1 3 0 75 475:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 477:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 75 482:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 26 condition:IfThenExpression 7 1 3 0 14 jump_if_false: 9 1 3 0 75 486:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 13 ConvertUShort 6 1 3 0 23 ifTrue:IfThenExpression 9 1 3 0 75 489:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 13 at:vector:std 4 1 3 0 20 IfThenElseExpression 10 1 3 0 75 493:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 30 condition:IfThenElseExpression 9 1 3 0 75 497:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 ifTrue:IfThenElseExpression 7 1 3 0 5 jump: 9 1 3 0 75 502:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 505:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 28 ifFalse:IfThenElseExpression 9 1 3 0 75 509:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 14 CallExpression 10 1 3 0 75 513:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 515:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 arguments:CallExpression 6 1 3 0 23 function:CallExpression 7 1 3 0 7 invoke: 4 1 3 0 18 VariableExpression 10 1 3 0 75 522:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 location:VariableExpression 7 1 3 0 15 push_local_int: 7 1 3 0 16 push_local_long: 7 1 3 0 17 push_local_float: 4 1 3 0 23 NotImplementedException 21 1 3 0 15 IsFunction:Type 7 1 3 0 14 push_function: 4 1 3 0 16 ReturnExpression 10 1 3 0 75 568:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:ReturnExpression 7 1 3 0 11 return_int: 7 1 3 0 12 return_long: 7 1 3 0 13 return_float: 7 1 3 0 14 return_double: 4 1 3 0 15 WhileExpression 10 1 3 0 75 592:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 DotExpression 10 1 3 0 75 595:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 4 Type 9 1 3 0 74 597:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 object:DotExpression 21 1 3 0 13 IsModule:Type 6 1 3 0 19 value:DotExpression 9 1 3 0 75 602:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 623:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 623:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 624:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 index:CompiledModule 6 1 3 0 25 fieldCount:CompiledModule 6 1 3 0 24 functions:CompiledModule 21 1 3 0 27 EmitByteCode:CompiledModule 9 1 3 0 75 632:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 636:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 638:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 29 EmitByteCode:CompiledFunction 10 1 3 0 75 648:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 648:53:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 649:34:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 index:CompiledClass 6 1 3 0 24 fieldCount:CompiledClass 6 1 3 0 21 methods:CompiledClass 21 1 3 0 26 EmitByteCode:CompiledClass 9 1 3 0 75 657:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 661:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 663:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 673:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 673:58:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 674:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 674:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 675:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 675:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 676:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 676:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 21 name:CompiledFunction 6 1 3 0 22 index:CompiledFunction 6 1 3 0 26 stackSize:CompiledFunction 6 1 3 0 26 argsCount:CompiledFunction 6 1 3 0 28 localsCount:CompiledFunction 6 1 3 0 30 constantCount:CompiledFunction 6 1 3 0 29 constantPool:CompiledFunction 6 1 3 0 25 byteCode:CompiledFunction 9 1 3 0 75 689:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 696:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 700:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 709:57:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 710:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 modules:CompiledProgram 6 1 3 0 23 classes:CompiledProgram 21 1 3 0 34 SearchMainFunction:CompiledProgram 9 1 3 0 75 717:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 719:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 14 operator==:std 6 1 3 0 26 mainModule:CompiledProgram 6 1 3 0 28 mainFunction:CompiledProgram 21 1 3 0 28 EmitByteCode:CompiledProgram 9 1 3 0 75 736:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 739:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 742:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 747:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 750:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 12 ConvertValue 10 1 3 0 75 757:29:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 20 1 3 0 4 byte 10 1 3 0 75 757:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 757:60:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 759:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 764:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 20 1 3 0 8 uint16_t 10 1 3 0 75 764:49:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 768:27:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 768:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 772:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 772:46:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 776:29:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 776:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 780:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 780:47:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 784:30:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 784:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 786:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 29 size:basic_string:__cxx11:std 9 1 3 0 75 788:15:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 790:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 35 operator[]:basic_string:__cxx11:std 0 0 8 0 0 0 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 1531292997 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.hpp 1531108467 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1530931711 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1531290788 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Instruction.hpp 1531282532 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1530931928 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1531291274 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
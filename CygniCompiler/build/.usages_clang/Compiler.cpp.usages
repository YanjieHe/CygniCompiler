22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 4047 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 14 "Compiler.hpp" 1 10 1 24 18446744073709551615 1 # 2 1 2 2 18446744073709551615 7 include 2 2 2 9 18446744073709551615 18 "BitConverter.hpp" 2 10 2 28 18446744073709551615 1 # 3 1 3 2 18446744073709551615 7 include 3 2 3 9 18446744073709551615 15 "Exception.hpp" 3 10 3 25 18446744073709551615 1 # 4 1 4 2 18446744073709551615 7 include 4 2 4 9 18446744073709551615 17 "Instruction.hpp" 4 10 4 27 18446744073709551615 1 # 5 1 5 2 18446744073709551615 7 include 5 2 5 9 18446744073709551615 1 < 5 10 5 11 18446744073709551615 8 iostream 5 11 5 19 18446744073709551615 1 > 5 19 5 20 18446744073709551615 5 using 6 1 6 6 18446744073709551615 3 std 6 7 6 10 0 2 :: 6 10 6 12 18446744073709551615 8 any_cast 6 12 6 20 1 1 ; 6 20 6 21 18446744073709551615 5 using 7 1 7 6 18446744073709551615 3 std 7 7 7 10 0 2 :: 7 10 7 12 18446744073709551615 4 endl 7 12 7 16 2 1 ; 7 16 7 17 18446744073709551615 5 using 8 1 8 6 18446744073709551615 3 std 8 7 8 10 0 2 :: 8 10 8 12 18446744073709551615 5 wcout 8 12 8 17 3 1 ; 8 17 8 18 18446744073709551615 8 Compiler 9 1 9 9 4 2 :: 9 9 9 11 4 8 Compiler 9 11 9 19 4 1 ( 9 19 9 20 4 1 ) 9 20 9 21 4 1 { 10 1 10 2 18446744073709551615 1 } 11 1 11 2 18446744073709551615 15 CompiledProgram 12 1 12 16 5 8 Compiler 12 17 12 25 4 2 :: 12 25 12 27 6 7 Compile 12 27 12 34 6 1 ( 12 34 12 35 6 15 NamespaceRecord 12 35 12 50 7 1 & 12 50 12 51 18446744073709551615 8 nsRecord 12 52 12 60 8 1 ) 12 60 12 61 6 1 { 13 1 13 2 18446744073709551615 3 for 14 2 14 5 18446744073709551615 1 ( 14 6 14 7 18446744073709551615 4 auto 14 7 14 11 18446744073709551615 1 & 14 11 14 12 18446744073709551615 1 p 14 13 14 14 9 1 : 14 15 14 16 10 8 nsRecord 14 17 14 25 8 1 . 14 25 14 26 18446744073709551615 6 record 14 26 14 32 11 1 ) 14 32 14 33 18446744073709551615 1 { 15 2 15 3 18446744073709551615 4 auto 16 3 16 7 18446744073709551615 1 & 16 7 16 8 18446744073709551615 5 nsPtr 16 9 16 14 12 1 = 16 15 16 16 18446744073709551615 1 p 16 17 16 18 9 1 . 16 18 16 19 18446744073709551615 6 second 16 19 16 25 13 1 ; 16 25 16 26 18446744073709551615 16 CompileNamespace 17 3 17 19 14 1 ( 17 19 17 20 14 5 nsPtr 17 20 17 25 12 1 ) 17 25 17 26 14 1 ; 17 26 17 27 18446744073709551615 1 } 18 2 18 3 18446744073709551615 6 return 19 2 19 8 18446744073709551615 15 CompiledProgram 19 9 19 24 5 1 ( 19 24 19 25 5 7 modules 19 25 19 32 15 1 , 19 32 19 33 5 7 classes 19 34 19 41 16 1 ) 19 41 19 42 5 1 ; 19 42 19 43 18446744073709551615 1 } 20 1 20 2 18446744073709551615 4 void 21 1 21 5 18446744073709551615 8 Compiler 21 6 21 14 4 2 :: 21 14 21 16 14 16 CompileNamespace 21 16 21 32 14 1 ( 21 32 21 33 14 10 shared_ptr 21 33 21 43 17 1 < 21 43 21 44 18446744073709551615 9 Namespace 21 44 21 53 18 1 > 21 53 21 54 18446744073709551615 1 & 21 54 21 55 18446744073709551615 5 nsPtr 21 56 21 61 19 1 ) 21 61 21 62 14 1 { 22 1 22 2 18446744073709551615 3 for 23 2 23 5 18446744073709551615 1 ( 23 6 23 7 18446744073709551615 4 auto 23 7 23 11 18446744073709551615 1 & 23 11 23 12 18446744073709551615 1 p 23 13 23 14 20 1 : 23 15 23 16 10 5 nsPtr 23 17 23 22 19 2 -> 23 22 23 24 18446744073709551615 7 modules 23 24 23 31 21 1 ) 23 31 23 32 18446744073709551615 1 { 24 2 24 3 18446744073709551615 6 Module 25 3 25 9 22 1 & 25 9 25 10 18446744073709551615 10 moduleInfo 25 11 25 21 23 1 = 25 22 25 23 18446744073709551615 1 p 25 24 25 25 20 1 . 25 25 25 26 18446744073709551615 6 second 25 26 25 32 13 1 ; 25 32 25 33 18446744073709551615 6 vector 26 3 26 9 24 1 < 26 9 26 10 18446744073709551615 16 CompiledFunction 26 10 26 26 25 1 > 26 26 26 27 18446744073709551615 5 cfVec 26 28 26 33 26 1 ; 26 33 26 34 18446744073709551615 3 for 27 3 27 6 18446744073709551615 1 ( 27 7 27 8 18446744073709551615 4 auto 27 8 27 12 18446744073709551615 1 & 27 12 27 13 18446744073709551615 5 field 27 14 27 19 27 1 : 27 20 27 21 28 10 moduleInfo 27 22 27 32 23 1 . 27 32 27 33 18446744073709551615 6 fields 27 33 27 39 29 1 ) 27 39 27 40 18446744073709551615 1 { 28 3 28 4 18446744073709551615 5 field 29 4 29 9 27 1 . 29 9 29 10 18446744073709551615 5 value 29 10 29 15 30 2 -> 29 15 29 17 31 6 Accept 29 17 29 23 31 1 ( 29 23 29 24 31 4 this 29 24 29 28 18446744073709551615 1 ) 29 28 29 29 31 1 ; 29 29 29 30 18446744073709551615 1 } 30 3 30 4 18446744073709551615 3 for 31 3 31 6 18446744073709551615 1 ( 31 7 31 8 18446744073709551615 4 auto 31 8 31 12 18446744073709551615 1 & 31 12 31 13 18446744073709551615 8 function 31 14 31 22 32 1 : 31 23 31 24 28 10 moduleInfo 31 25 31 35 23 1 . 31 35 31 36 18446744073709551615 9 functions 31 36 31 45 33 1 ) 31 45 31 46 18446744073709551615 1 { 32 3 32 4 18446744073709551615 16 CompiledFunction 33 4 33 20 25 2 cf 33 21 33 23 34 1 = 33 24 33 25 18446744073709551615 15 CompileFunction 33 26 33 41 35 1 ( 33 41 33 42 35 8 function 33 42 33 50 32 1 ) 33 50 33 51 35 1 ; 33 51 33 52 18446744073709551615 5 cfVec 34 4 34 9 26 1 . 34 9 34 10 36 9 push_back 34 10 34 19 36 1 ( 34 19 34 20 36 2 cf 34 20 34 22 34 1 ) 34 22 34 23 36 1 ; 34 23 34 24 18446744073709551615 1 } 35 3 35 4 18446744073709551615 7 modules 36 3 36 10 15 1 . 36 10 36 11 36 9 push_back 36 11 36 20 36 1 ( 36 20 36 21 36 14 CompiledModule 37 4 37 18 37 1 ( 37 18 37 19 37 10 moduleInfo 37 19 37 29 23 1 . 37 29 37 30 18446744073709551615 5 index 37 30 37 35 38 1 , 37 35 37 36 37 10 moduleInfo 37 37 37 47 23 1 . 37 47 37 48 18446744073709551615 6 fields 37 48 37 54 29 1 . 37 54 37 55 39 4 size 37 55 37 59 39 1 ( 37 59 37 60 39 1 ) 37 60 37 61 39 1 , 37 61 37 62 37 5 cfVec 37 63 37 68 26 1 ) 37 68 37 69 37 1 ) 37 69 37 70 36 1 ; 37 70 37 71 18446744073709551615 1 } 38 2 38 3 18446744073709551615 3 for 39 2 39 5 18446744073709551615 1 ( 39 6 39 7 18446744073709551615 4 auto 39 7 39 11 18446744073709551615 1 & 39 11 39 12 18446744073709551615 1 p 39 13 39 14 40 1 : 39 15 39 16 10 5 nsPtr 39 17 39 22 19 2 -> 39 22 39 24 18446744073709551615 7 classes 39 24 39 31 41 1 ) 39 31 39 32 18446744073709551615 1 { 40 2 40 3 18446744073709551615 5 Class 41 3 41 8 42 1 & 41 8 41 9 18446744073709551615 9 classInfo 41 10 41 19 43 1 = 41 20 41 21 18446744073709551615 1 p 41 22 41 23 40 1 . 41 23 41 24 18446744073709551615 6 second 41 24 41 30 13 1 ; 41 30 41 31 18446744073709551615 6 vector 42 3 42 9 24 1 < 42 9 42 10 18446744073709551615 16 CompiledFunction 42 10 42 26 25 1 > 42 26 42 27 18446744073709551615 5 cfVec 42 28 42 33 44 1 ; 42 33 42 34 18446744073709551615 3 for 43 3 43 6 18446744073709551615 1 ( 43 7 43 8 18446744073709551615 4 auto 43 8 43 12 18446744073709551615 1 & 43 12 43 13 18446744073709551615 5 field 43 14 43 19 45 1 : 43 20 43 21 28 9 classInfo 43 22 43 31 43 1 . 43 31 43 32 18446744073709551615 6 fields 43 32 43 38 46 1 ) 43 38 43 39 18446744073709551615 1 { 44 3 44 4 18446744073709551615 5 field 45 4 45 9 45 1 . 45 9 45 10 18446744073709551615 5 value 45 10 45 15 30 2 -> 45 15 45 17 31 6 Accept 45 17 45 23 31 1 ( 45 23 45 24 31 4 this 45 24 45 28 18446744073709551615 1 ) 45 28 45 29 31 1 ; 45 29 45 30 18446744073709551615 1 } 46 3 46 4 18446744073709551615 3 for 47 3 47 6 18446744073709551615 1 ( 47 7 47 8 18446744073709551615 4 auto 47 8 47 12 18446744073709551615 1 & 47 12 47 13 18446744073709551615 8 function 47 14 47 22 47 1 : 47 23 47 24 28 9 classInfo 47 25 47 34 43 1 . 47 34 47 35 18446744073709551615 9 functions 47 35 47 44 48 1 ) 47 44 47 45 18446744073709551615 1 { 48 3 48 4 18446744073709551615 16 CompiledFunction 49 4 49 20 25 2 cf 49 21 49 23 49 1 = 49 24 49 25 18446744073709551615 15 CompileFunction 49 26 49 41 35 1 ( 49 41 49 42 35 8 function 49 42 49 50 47 1 ) 49 50 49 51 35 1 ; 49 51 49 52 18446744073709551615 5 cfVec 50 4 50 9 44 1 . 50 9 50 10 36 9 push_back 50 10 50 19 36 1 ( 50 19 50 20 36 2 cf 50 20 50 22 49 1 ) 50 22 50 23 36 1 ; 50 23 50 24 18446744073709551615 1 } 51 3 51 4 18446744073709551615 7 classes 52 3 52 10 16 1 . 52 10 52 11 36 9 push_back 52 11 52 20 36 1 ( 52 20 52 21 36 13 CompiledClass 53 4 53 17 50 1 ( 53 17 53 18 50 9 classInfo 53 18 53 27 43 1 . 53 27 53 28 18446744073709551615 5 index 53 28 53 33 51 1 , 53 33 53 34 50 9 classInfo 53 35 53 44 43 1 . 53 44 53 45 18446744073709551615 6 fields 53 45 53 51 46 1 . 53 51 53 52 39 4 size 53 52 53 56 39 1 ( 53 56 53 57 39 1 ) 53 57 53 58 39 1 , 53 58 53 59 50 5 cfVec 53 60 53 65 44 1 ) 53 65 53 66 50 1 ) 53 66 53 67 36 1 ; 53 67 53 68 18446744073709551615 1 } 54 2 54 3 18446744073709551615 3 for 55 2 55 5 18446744073709551615 1 ( 55 6 55 7 18446744073709551615 4 auto 55 7 55 11 18446744073709551615 1 & 55 11 55 12 18446744073709551615 1 p 55 13 55 14 52 1 : 55 15 55 16 10 5 nsPtr 55 17 55 22 19 2 -> 55 22 55 24 18446744073709551615 13 subNamespaces 55 24 55 37 53 1 ) 55 37 55 38 18446744073709551615 1 { 56 2 56 3 18446744073709551615 4 auto 57 3 57 7 18446744073709551615 1 & 57 7 57 8 18446744073709551615 8 subNsPtr 57 9 57 17 54 1 = 57 18 57 19 18446744073709551615 1 p 57 20 57 21 52 1 . 57 21 57 22 18446744073709551615 6 second 57 22 57 28 13 1 ; 57 28 57 29 18446744073709551615 16 CompileNamespace 58 3 58 19 14 1 ( 58 19 58 20 14 8 subNsPtr 58 20 58 28 54 1 ) 58 28 58 29 14 1 ; 58 29 58 30 18446744073709551615 1 } 59 2 59 3 18446744073709551615 1 } 60 1 60 2 18446744073709551615 16 CompiledFunction 61 1 61 17 25 8 Compiler 61 18 61 26 4 2 :: 61 26 61 28 35 15 CompileFunction 61 28 61 43 35 1 ( 61 43 61 44 35 8 Function 61 44 61 52 55 1 & 61 52 61 53 18446744073709551615 8 function 61 54 61 62 56 1 ) 61 62 61 63 35 1 { 62 1 62 2 18446744073709551615 8 byteCode 63 2 63 10 57 1 . 63 10 63 11 58 5 clear 63 11 63 16 58 1 ( 63 16 63 17 58 1 ) 63 17 63 18 58 1 ; 63 18 63 19 18446744073709551615 12 constantPool 64 2 64 14 59 1 . 64 14 64 15 58 5 clear 64 15 64 20 58 1 ( 64 20 64 21 58 1 ) 64 21 64 22 58 1 ; 64 22 64 23 18446744073709551615 14 constantsCount 65 2 65 16 60 1 = 65 17 65 18 18446744073709551615 1 0 65 19 65 20 18446744073709551615 1 ; 65 20 65 21 18446744073709551615 3 for 66 2 66 5 18446744073709551615 1 ( 66 6 66 7 18446744073709551615 13 LocalVariable 66 7 66 20 61 1 & 66 20 66 21 18446744073709551615 8 variable 66 22 66 30 62 1 : 66 31 66 32 28 8 function 66 33 66 41 56 1 . 66 41 66 42 18446744073709551615 9 variables 66 42 66 51 63 1 ) 66 51 66 52 18446744073709551615 1 { 67 2 67 3 18446744073709551615 8 variable 68 3 68 11 62 1 . 68 11 68 12 18446744073709551615 5 value 68 12 68 17 64 2 -> 68 17 68 19 31 6 Accept 68 19 68 25 31 1 ( 68 25 68 26 31 4 this 68 26 68 30 18446744073709551615 1 ) 68 30 68 31 31 1 ; 68 31 68 32 18446744073709551615 7 int32_t 69 3 69 10 65 6 offset 69 11 69 17 66 1 = 69 18 69 19 18446744073709551615 8 variable 69 20 69 28 62 1 . 69 28 69 29 18446744073709551615 8 location 69 29 69 37 67 1 . 69 37 69 38 18446744073709551615 6 offset 69 38 69 44 68 1 ; 69 44 69 45 18446744073709551615 2 if 70 3 70 5 18446744073709551615 1 ( 70 6 70 7 18446744073709551615 8 variable 70 7 70 15 62 1 . 70 15 70 16 18446744073709551615 4 type 70 16 70 20 69 1 . 70 20 70 21 70 5 IsInt 70 21 70 26 70 1 ( 70 26 70 27 70 1 ) 70 27 70 28 70 1 ) 70 28 70 29 18446744073709551615 1 { 71 3 71 4 18446744073709551615 8 byteCode 72 4 72 12 57 1 . 72 12 72 13 36 9 push_back 72 13 72 22 36 1 ( 72 22 72 23 36 13 pop_local_int 72 23 72 36 71 1 ) 72 36 72 37 36 1 ; 72 37 72 38 18446744073709551615 1 } 73 3 73 4 18446744073709551615 4 else 74 3 74 7 18446744073709551615 2 if 74 8 74 10 18446744073709551615 1 ( 74 11 74 12 18446744073709551615 8 variable 74 12 74 20 62 1 . 74 20 74 21 18446744073709551615 4 type 74 21 74 25 69 1 . 74 25 74 26 72 6 IsLong 74 26 74 32 72 1 ( 74 32 74 33 72 1 ) 74 33 74 34 72 1 ) 74 34 74 35 18446744073709551615 1 { 75 3 75 4 18446744073709551615 8 byteCode 76 4 76 12 57 1 . 76 12 76 13 36 9 push_back 76 13 76 22 36 1 ( 76 22 76 23 36 14 pop_local_long 76 23 76 37 73 1 ) 76 37 76 38 36 1 ; 76 38 76 39 18446744073709551615 1 } 77 3 77 4 18446744073709551615 4 else 78 3 78 7 18446744073709551615 2 if 78 8 78 10 18446744073709551615 1 ( 78 11 78 12 18446744073709551615 8 variable 78 12 78 20 62 1 . 78 20 78 21 18446744073709551615 4 type 78 21 78 25 69 1 . 78 25 78 26 74 7 IsFloat 78 26 78 33 74 1 ( 78 33 78 34 74 1 ) 78 34 78 35 74 1 ) 78 35 78 36 18446744073709551615 1 { 79 3 79 4 18446744073709551615 8 byteCode 80 4 80 12 57 1 . 80 12 80 13 36 9 push_back 80 13 80 22 36 1 ( 80 22 80 23 36 15 pop_local_float 80 23 80 38 75 1 ) 80 38 80 39 36 1 ; 80 39 80 40 18446744073709551615 1 } 81 3 81 4 18446744073709551615 4 else 82 3 82 7 18446744073709551615 2 if 82 8 82 10 18446744073709551615 1 ( 82 11 82 12 18446744073709551615 8 variable 82 12 82 20 62 1 . 82 20 82 21 18446744073709551615 4 type 82 21 82 25 69 1 . 82 25 82 26 76 8 IsDouble 82 26 82 34 76 1 ( 82 34 82 35 76 1 ) 82 35 82 36 76 1 ) 82 36 82 37 18446744073709551615 1 { 83 3 83 4 18446744073709551615 8 byteCode 84 4 84 12 57 1 . 84 12 84 13 36 9 push_back 84 13 84 22 36 1 ( 84 22 84 23 36 16 pop_local_double 84 23 84 39 77 1 ) 84 39 84 40 36 1 ; 84 40 84 41 18446744073709551615 1 } 85 3 85 4 18446744073709551615 4 else 86 3 86 7 18446744073709551615 2 if 86 8 86 10 18446744073709551615 1 ( 86 11 86 12 18446744073709551615 8 variable 86 12 86 20 62 1 . 86 20 86 21 18446744073709551615 4 type 86 21 86 25 69 1 . 86 25 86 26 78 8 IsString 86 26 86 34 78 1 ( 86 34 86 35 78 1 ) 86 35 86 36 78 1 ) 86 36 86 37 18446744073709551615 1 { 87 3 87 4 18446744073709551615 8 byteCode 88 4 88 12 57 1 . 88 12 88 13 36 9 push_back 88 13 88 22 36 1 ( 88 22 88 23 36 16 pop_local_string 88 23 88 39 79 1 ) 88 39 88 40 36 1 ; 88 40 88 41 18446744073709551615 1 } 89 3 89 4 18446744073709551615 4 else 90 3 90 7 18446744073709551615 1 { 91 3 91 4 18446744073709551615 5 throw 92 4 92 9 18446744073709551615 7 wstring 92 10 92 17 80 1 ( 92 17 92 18 81 30 L"not supported variable type" 92 18 92 48 18446744073709551615 1 ) 92 48 92 49 81 1 ; 92 49 92 50 18446744073709551615 1 } 93 3 93 4 18446744073709551615 8 byteCode 94 3 94 11 57 1 . 94 11 94 12 36 9 push_back 94 12 94 21 36 1 ( 94 21 94 22 36 6 offset 94 22 94 28 66 1 ) 94 28 94 29 36 1 ; 94 29 94 30 18446744073709551615 1 } 95 2 95 3 18446744073709551615 3 for 96 2 96 5 18446744073709551615 1 ( 96 6 96 7 18446744073709551615 4 auto 96 7 96 11 18446744073709551615 1 & 96 11 96 12 18446744073709551615 1 e 96 13 96 14 82 1 : 96 15 96 16 28 8 function 96 17 96 25 56 1 . 96 25 96 26 18446744073709551615 11 expressions 96 26 96 37 83 1 ) 96 37 96 38 18446744073709551615 1 { 97 2 97 3 18446744073709551615 1 e 98 3 98 4 82 2 -> 98 4 98 6 31 6 Accept 98 6 98 12 31 1 ( 98 12 98 13 31 4 this 98 13 98 17 18446744073709551615 1 ) 98 17 98 18 31 1 ; 98 18 98 19 18446744073709551615 1 } 99 2 99 3 18446744073709551615 7 int32_t 100 2 100 9 65 6 offset 100 10 100 16 84 1 = 100 17 100 18 18446744073709551615 8 function 100 19 100 27 56 1 . 100 27 100 28 18446744073709551615 8 location 100 28 100 36 85 1 . 100 36 100 37 18446744073709551615 6 offset 100 37 100 43 68 1 ; 100 43 100 44 18446744073709551615 7 int32_t 101 2 101 9 65 9 stackSize 101 10 101 19 86 1 = 101 20 101 21 18446744073709551615 1 0 101 22 101 23 18446744073709551615 1 ; 101 23 101 24 18446744073709551615 7 int32_t 102 2 102 9 65 9 argsCount 102 10 102 19 87 1 = 102 20 102 21 18446744073709551615 8 function 102 22 102 30 56 1 . 102 30 102 31 18446744073709551615 10 parameters 102 31 102 41 88 1 . 102 41 102 42 39 4 size 102 42 102 46 39 1 ( 102 46 102 47 39 1 ) 102 47 102 48 39 1 ; 102 48 102 49 18446744073709551615 7 int32_t 103 2 103 9 65 11 localsCount 103 10 103 21 89 1 = 103 22 103 23 18446744073709551615 8 function 103 24 103 32 56 1 . 103 32 103 33 18446744073709551615 9 variables 103 33 103 42 63 1 . 103 42 103 43 39 4 size 103 43 103 47 39 1 ( 103 47 103 48 39 1 ) 103 48 103 49 39 1 ; 103 49 103 50 18446744073709551615 6 return 104 2 104 8 18446744073709551615 16 CompiledFunction 104 9 104 25 25 1 ( 104 25 104 26 25 8 function 104 26 104 34 56 1 . 104 34 104 35 18446744073709551615 4 name 104 35 104 39 90 1 , 104 39 104 40 25 6 offset 104 41 104 47 84 1 , 104 47 104 48 25 9 stackSize 104 49 104 58 86 1 , 104 58 104 59 25 9 argsCount 104 60 104 69 87 1 , 104 69 104 70 25 11 localsCount 105 8 105 19 89 1 , 105 19 105 20 25 14 constantsCount 105 21 105 35 60 1 , 105 35 105 36 25 12 constantPool 105 37 105 49 59 1 , 105 49 105 50 25 8 byteCode 106 8 106 16 57 1 ) 106 16 106 17 25 1 ; 106 17 106 18 18446744073709551615 1 } 107 1 107 2 18446744073709551615 22 CompiledNativeFunction 108 1 108 23 91 8 Compiler 109 2 109 10 4 2 :: 109 10 109 12 92 21 CompileNativeFunction 109 12 109 33 92 1 ( 109 33 109 34 92 14 NativeFunction 109 34 109 48 93 1 & 109 48 109 49 18446744073709551615 14 nativeFunction 109 50 109 64 94 1 ) 109 64 109 65 92 1 { 110 1 110 2 18446744073709551615 8 byteCode 111 2 111 10 57 1 . 111 10 111 11 58 5 clear 111 11 111 16 58 1 ( 111 16 111 17 58 1 ) 111 17 111 18 58 1 ; 111 18 111 19 18446744073709551615 12 constantPool 112 2 112 14 59 1 . 112 14 112 15 58 5 clear 112 15 112 20 58 1 ( 112 20 112 21 58 1 ) 112 21 112 22 58 1 ; 112 22 112 23 18446744073709551615 14 constantsCount 113 2 113 16 60 1 = 113 17 113 18 18446744073709551615 1 0 113 19 113 20 18446744073709551615 1 ; 113 20 113 21 18446744073709551615 7 int32_t 115 2 115 9 65 6 offset 115 10 115 16 95 1 = 115 17 115 18 18446744073709551615 14 nativeFunction 115 19 115 33 94 1 . 115 33 115 34 18446744073709551615 8 location 115 34 115 42 96 1 . 115 42 115 43 18446744073709551615 6 offset 115 43 115 49 68 1 ; 115 49 115 50 18446744073709551615 7 int32_t 116 2 116 9 65 9 argsCount 116 10 116 19 97 1 = 116 20 116 21 18446744073709551615 14 nativeFunction 116 22 116 36 94 1 . 116 36 116 37 18446744073709551615 10 parameters 116 37 116 47 98 1 . 116 47 116 48 39 4 size 116 48 116 52 39 1 ( 116 52 116 53 39 1 ) 116 53 116 54 39 1 ; 116 54 116 55 18446744073709551615 6 return 117 2 117 8 18446744073709551615 22 CompiledNativeFunction 117 9 117 31 91 1 ( 117 31 117 32 91 14 nativeFunction 117 32 117 46 94 1 . 117 46 117 47 18446744073709551615 11 libraryPath 117 47 117 58 99 1 , 117 58 117 59 91 14 nativeFunction 118 11 118 25 94 1 . 118 25 118 26 18446744073709551615 12 functionName 118 26 118 38 100 1 , 118 38 118 39 91 6 offset 118 40 118 46 95 1 , 118 46 118 47 91 9 argsCount 119 11 119 20 97 1 ) 119 20 119 21 91 1 ; 119 21 119 22 18446744073709551615 1 } 120 1 120 2 18446744073709551615 4 void 121 1 121 5 18446744073709551615 8 Compiler 121 6 121 14 4 2 :: 121 14 121 16 101 5 Visit 121 16 121 21 101 1 ( 121 21 121 22 101 18 ConstantExpression 121 22 121 40 102 1 * 121 40 121 41 18446744073709551615 4 node 121 42 121 46 103 1 ) 121 46 121 47 101 1 { 122 1 122 2 18446744073709551615 3 any 123 2 123 5 104 5 value 123 6 123 11 105 1 = 123 12 123 13 18446744073709551615 4 node 123 14 123 18 103 2 -> 123 18 123 20 18446744073709551615 5 value 123 20 123 25 106 1 ; 123 25 123 26 18446744073709551615 2 if 124 2 124 4 18446744073709551615 1 ( 124 5 124 6 18446744073709551615 5 value 124 6 124 11 105 1 . 124 11 124 12 107 4 type 124 12 124 16 107 1 ( 124 16 124 17 107 1 ) 124 17 124 18 107 2 == 124 19 124 21 108 6 typeid 124 22 124 28 18446744073709551615 1 ( 124 28 124 29 18446744073709551615 7 int32_t 124 29 124 36 65 1 ) 124 36 124 37 18446744073709551615 1 ) 124 37 124 38 18446744073709551615 1 { 125 2 125 3 18446744073709551615 12 constantPool 126 3 126 15 59 1 . 126 15 126 16 36 9 push_back 126 16 126 25 36 1 ( 126 25 126 26 36 12 constant_int 126 26 126 38 109 1 ) 126 38 126 39 36 1 ; 126 39 126 40 18446744073709551615 12 BitConverter 127 3 127 15 110 2 :: 127 15 127 17 111 9 AppendInt 127 17 127 26 111 1 ( 127 26 127 27 111 12 constantPool 127 27 127 39 59 1 , 127 39 127 40 111 8 any_cast 127 41 127 49 112 1 < 127 49 127 50 112 7 int32_t 127 50 127 57 65 1 > 127 57 127 58 112 1 ( 127 58 127 59 112 5 value 127 59 127 64 105 1 ) 127 64 127 65 112 1 ) 127 65 127 66 111 1 ; 127 66 127 67 18446744073709551615 8 byteCode 128 3 128 11 57 1 . 128 11 128 12 36 9 push_back 128 12 128 21 36 1 ( 128 21 128 22 36 17 push_constant_int 128 22 128 39 113 1 ) 128 39 128 40 36 1 ; 128 40 128 41 18446744073709551615 1 } 129 2 129 3 18446744073709551615 4 else 130 2 130 6 18446744073709551615 2 if 130 7 130 9 18446744073709551615 1 ( 130 10 130 11 18446744073709551615 5 value 130 11 130 16 105 1 . 130 16 130 17 107 4 type 130 17 130 21 107 1 ( 130 21 130 22 107 1 ) 130 22 130 23 107 2 == 130 24 130 26 108 6 typeid 130 27 130 33 18446744073709551615 1 ( 130 33 130 34 18446744073709551615 7 int64_t 130 34 130 41 114 1 ) 130 41 130 42 18446744073709551615 1 ) 130 42 130 43 18446744073709551615 1 { 131 2 131 3 18446744073709551615 12 constantPool 132 3 132 15 59 1 . 132 15 132 16 36 9 push_back 132 16 132 25 36 1 ( 132 25 132 26 36 13 constant_long 132 26 132 39 115 1 ) 132 39 132 40 36 1 ; 132 40 132 41 18446744073709551615 12 BitConverter 133 3 133 15 110 2 :: 133 15 133 17 116 10 AppendLong 133 17 133 27 116 1 ( 133 27 133 28 116 12 constantPool 133 28 133 40 59 1 , 133 40 133 41 116 8 any_cast 133 42 133 50 112 1 < 133 50 133 51 112 7 int64_t 133 51 133 58 114 1 > 133 58 133 59 112 1 ( 133 59 133 60 112 5 value 133 60 133 65 105 1 ) 133 65 133 66 112 1 ) 133 66 133 67 116 1 ; 133 67 133 68 18446744073709551615 8 byteCode 134 3 134 11 57 1 . 134 11 134 12 36 9 push_back 134 12 134 21 36 1 ( 134 21 134 22 36 18 push_constant_long 134 22 134 40 117 1 ) 134 40 134 41 36 1 ; 134 41 134 42 18446744073709551615 1 } 135 2 135 3 18446744073709551615 4 else 136 2 136 6 18446744073709551615 2 if 136 7 136 9 18446744073709551615 1 ( 136 10 136 11 18446744073709551615 5 value 136 11 136 16 105 1 . 136 16 136 17 107 4 type 136 17 136 21 107 1 ( 136 21 136 22 107 1 ) 136 22 136 23 107 2 == 136 24 136 26 108 6 typeid 136 27 136 33 18446744073709551615 1 ( 136 33 136 34 18446744073709551615 5 float 136 34 136 39 18446744073709551615 1 ) 136 39 136 40 18446744073709551615 1 ) 136 40 136 41 18446744073709551615 1 { 137 2 137 3 18446744073709551615 12 constantPool 138 3 138 15 59 1 . 138 15 138 16 36 9 push_back 138 16 138 25 36 1 ( 138 25 138 26 36 14 constant_float 138 26 138 40 118 1 ) 138 40 138 41 36 1 ; 138 41 138 42 18446744073709551615 12 BitConverter 139 3 139 15 110 2 :: 139 15 139 17 119 11 AppendFloat 139 17 139 28 119 1 ( 139 28 139 29 119 12 constantPool 139 29 139 41 59 1 , 139 41 139 42 119 8 any_cast 139 43 139 51 112 1 < 139 51 139 52 112 5 float 139 52 139 57 18446744073709551615 1 > 139 57 139 58 112 1 ( 139 58 139 59 112 5 value 139 59 139 64 105 1 ) 139 64 139 65 112 1 ) 139 65 139 66 119 1 ; 139 66 139 67 18446744073709551615 8 byteCode 140 3 140 11 57 1 . 140 11 140 12 36 9 push_back 140 12 140 21 36 1 ( 140 21 140 22 36 19 push_constant_float 140 22 140 41 120 1 ) 140 41 140 42 36 1 ; 140 42 140 43 18446744073709551615 1 } 141 2 141 3 18446744073709551615 4 else 142 2 142 6 18446744073709551615 2 if 142 7 142 9 18446744073709551615 1 ( 142 10 142 11 18446744073709551615 5 value 142 11 142 16 105 1 . 142 16 142 17 107 4 type 142 17 142 21 107 1 ( 142 21 142 22 107 1 ) 142 22 142 23 107 2 == 142 24 142 26 108 6 typeid 142 27 142 33 18446744073709551615 1 ( 142 33 142 34 18446744073709551615 6 double 142 34 142 40 18446744073709551615 1 ) 142 40 142 41 18446744073709551615 1 ) 142 41 142 42 18446744073709551615 1 { 143 2 143 3 18446744073709551615 12 constantPool 144 3 144 15 59 1 . 144 15 144 16 36 9 push_back 144 16 144 25 36 1 ( 144 25 144 26 36 15 constant_double 144 26 144 41 121 1 ) 144 41 144 42 36 1 ; 144 42 144 43 18446744073709551615 12 BitConverter 145 3 145 15 110 2 :: 145 15 145 17 122 12 AppendDouble 145 17 145 29 122 1 ( 145 29 145 30 122 12 constantPool 145 30 145 42 59 1 , 145 42 145 43 122 8 any_cast 145 44 145 52 112 1 < 145 52 145 53 112 6 double 145 53 145 59 18446744073709551615 1 > 145 59 145 60 112 1 ( 145 60 145 61 112 5 value 145 61 145 66 105 1 ) 145 66 145 67 112 1 ) 145 67 145 68 122 1 ; 145 68 145 69 18446744073709551615 8 byteCode 146 3 146 11 57 1 . 146 11 146 12 36 9 push_back 146 12 146 21 36 1 ( 146 21 146 22 36 20 push_constant_double 146 22 146 42 123 1 ) 146 42 146 43 36 1 ; 146 43 146 44 18446744073709551615 1 } 147 2 147 3 18446744073709551615 4 else 148 2 148 6 18446744073709551615 2 if 148 7 148 9 18446744073709551615 1 ( 148 10 148 11 18446744073709551615 5 value 148 11 148 16 105 1 . 148 16 148 17 107 4 type 148 17 148 21 107 1 ( 148 21 148 22 107 1 ) 148 22 148 23 107 2 == 148 24 148 26 108 6 typeid 148 27 148 33 18446744073709551615 1 ( 148 33 148 34 18446744073709551615 7 wchar_t 148 34 148 41 18446744073709551615 1 ) 148 41 148 42 18446744073709551615 1 ) 148 42 148 43 18446744073709551615 1 { 149 2 149 3 18446744073709551615 12 constantPool 150 3 150 15 59 1 . 150 15 150 16 36 9 push_back 150 16 150 25 36 1 ( 150 25 150 26 36 12 constant_int 150 26 150 38 109 1 ) 150 38 150 39 36 1 ; 150 39 150 40 18446744073709551615 12 BitConverter 151 3 151 15 110 2 :: 151 15 151 17 111 9 AppendInt 151 17 151 26 111 1 ( 151 26 151 27 111 12 constantPool 151 27 151 39 59 1 , 151 39 151 40 111 8 any_cast 151 41 151 49 112 1 < 151 49 151 50 112 7 wchar_t 151 50 151 57 18446744073709551615 1 > 151 57 151 58 112 1 ( 151 58 151 59 112 5 value 151 59 151 64 105 1 ) 151 64 151 65 112 1 ) 151 65 151 66 111 1 ; 151 66 151 67 18446744073709551615 8 byteCode 152 3 152 11 57 1 . 152 11 152 12 36 9 push_back 152 12 152 21 36 1 ( 152 21 152 22 36 17 push_constant_int 152 22 152 39 113 1 ) 152 39 152 40 36 1 ; 152 40 152 41 18446744073709551615 1 } 153 2 153 3 18446744073709551615 4 else 154 2 154 6 18446744073709551615 2 if 154 7 154 9 18446744073709551615 1 ( 154 10 154 11 18446744073709551615 5 value 154 11 154 16 105 1 . 154 16 154 17 107 4 type 154 17 154 21 107 1 ( 154 21 154 22 107 1 ) 154 22 154 23 107 2 == 154 24 154 26 108 6 typeid 154 27 154 33 18446744073709551615 1 ( 154 33 154 34 18446744073709551615 7 wstring 154 34 154 41 80 1 ) 154 41 154 42 18446744073709551615 1 ) 154 42 154 43 18446744073709551615 1 { 155 2 155 3 18446744073709551615 12 constantPool 156 3 156 15 59 1 . 156 15 156 16 36 9 push_back 156 16 156 25 36 1 ( 156 25 156 26 36 15 constant_string 156 26 156 41 124 1 ) 156 41 156 42 36 1 ; 156 42 156 43 18446744073709551615 12 BitConverter 157 3 157 15 110 2 :: 157 15 157 17 125 12 AppendString 157 17 157 29 125 1 ( 157 29 157 30 125 12 constantPool 157 30 157 42 59 1 , 157 42 157 43 125 8 any_cast 157 44 157 52 112 1 < 157 52 157 53 112 7 wstring 157 53 157 60 80 1 > 157 60 157 61 112 1 ( 157 61 157 62 112 5 value 157 62 157 67 105 1 ) 157 67 157 68 112 1 ) 157 68 157 69 125 1 ; 157 69 157 70 18446744073709551615 8 byteCode 158 3 158 11 57 1 . 158 11 158 12 36 9 push_back 158 12 158 21 36 1 ( 158 21 158 22 36 20 push_constant_string 158 22 158 42 126 1 ) 158 42 158 43 36 1 ; 158 43 158 44 18446744073709551615 1 } 159 2 159 3 18446744073709551615 4 else 160 2 160 6 18446744073709551615 1 { 161 2 161 3 18446744073709551615 5 throw 162 3 162 8 18446744073709551615 7 wstring 162 9 162 16 80 1 ( 162 16 162 17 81 17 L"wrong constant" 162 17 162 34 18446744073709551615 1 ) 162 34 162 35 81 1 ; 162 35 162 36 18446744073709551615 1 } 163 2 163 3 18446744073709551615 8 byteCode 164 2 164 10 57 1 . 164 10 164 11 36 9 push_back 164 11 164 20 36 1 ( 164 20 164 21 36 14 constantsCount 164 21 164 35 60 1 ) 164 35 164 36 36 1 ; 164 36 164 37 18446744073709551615 14 constantsCount 165 2 165 16 60 2 ++ 165 16 165 18 18446744073709551615 1 ; 165 18 165 19 18446744073709551615 1 } 166 1 166 2 18446744073709551615 4 void 167 1 167 5 18446744073709551615 8 Compiler 167 6 167 14 4 2 :: 167 14 167 16 101 5 Visit 167 16 167 21 101 1 ( 167 21 167 22 101 15 UnaryExpression 167 22 167 37 127 1 * 167 37 167 38 18446744073709551615 4 node 167 39 167 43 128 1 ) 167 43 167 44 101 1 { 168 1 168 2 18446744073709551615 4 node 169 2 169 6 128 2 -> 169 6 169 8 18446744073709551615 7 operand 169 8 169 15 129 2 -> 169 15 169 17 31 6 Accept 169 17 169 23 31 1 ( 169 23 169 24 31 4 this 169 24 169 28 18446744073709551615 1 ) 169 28 169 29 31 1 ; 169 29 169 30 18446744073709551615 2 if 170 2 170 4 18446744073709551615 1 ( 170 5 170 6 18446744073709551615 4 node 170 6 170 10 128 2 -> 170 10 170 12 18446744073709551615 4 type 170 12 170 16 130 1 . 170 16 170 17 70 5 IsInt 170 17 170 22 70 1 ( 170 22 170 23 70 1 ) 170 23 170 24 70 1 ) 170 24 170 25 18446744073709551615 1 { 171 2 171 3 18446744073709551615 2 if 172 3 172 5 18446744073709551615 1 ( 172 6 172 7 18446744073709551615 4 node 172 7 172 11 128 2 -> 172 11 172 13 18446744073709551615 4 kind 172 13 172 17 131 2 == 172 18 172 20 18446744073709551615 14 ExpressionKind 172 21 172 35 132 2 :: 172 35 172 37 18446744073709551615 9 UnaryPlus 172 37 172 46 133 1 ) 172 46 172 47 18446744073709551615 1 { 173 3 173 4 18446744073709551615 1 } 174 3 174 4 18446744073709551615 4 else 175 3 175 7 18446744073709551615 2 if 175 8 175 10 18446744073709551615 1 ( 175 11 175 12 18446744073709551615 4 node 175 12 175 16 128 2 -> 175 16 175 18 18446744073709551615 4 kind 175 18 175 22 131 2 == 175 23 175 25 18446744073709551615 14 ExpressionKind 175 26 175 40 132 2 :: 175 40 175 42 18446744073709551615 10 UnaryMinus 175 42 175 52 134 1 ) 175 52 175 53 18446744073709551615 1 { 176 3 176 4 18446744073709551615 8 byteCode 177 4 177 12 57 1 . 177 12 177 13 36 9 push_back 177 13 177 22 36 1 ( 177 22 177 23 36 9 minus_int 177 23 177 32 135 1 ) 177 32 177 33 36 1 ; 177 33 177 34 18446744073709551615 1 } 178 3 178 4 18446744073709551615 4 else 179 3 179 7 18446744073709551615 1 { 180 3 180 4 18446744073709551615 5 throw 181 4 181 9 18446744073709551615 7 wstring 181 10 181 17 80 1 ( 181 17 181 18 81 46 L"wrong unary operation, where operand is int" 181 18 181 64 18446744073709551615 1 ) 181 64 181 65 81 1 ; 181 65 181 66 18446744073709551615 1 } 182 3 182 4 18446744073709551615 1 } 183 2 183 3 18446744073709551615 4 else 184 2 184 6 18446744073709551615 2 if 184 7 184 9 18446744073709551615 1 ( 184 10 184 11 18446744073709551615 4 node 184 11 184 15 128 2 -> 184 15 184 17 18446744073709551615 4 type 184 17 184 21 130 1 . 184 21 184 22 72 6 IsLong 184 22 184 28 72 1 ( 184 28 184 29 72 1 ) 184 29 184 30 72 1 ) 184 30 184 31 18446744073709551615 1 { 185 2 185 3 18446744073709551615 2 if 186 3 186 5 18446744073709551615 1 ( 186 6 186 7 18446744073709551615 4 node 186 7 186 11 128 2 -> 186 11 186 13 18446744073709551615 4 kind 186 13 186 17 131 2 == 186 18 186 20 18446744073709551615 14 ExpressionKind 186 21 186 35 132 2 :: 186 35 186 37 18446744073709551615 9 UnaryPlus 186 37 186 46 133 1 ) 186 46 186 47 18446744073709551615 1 { 187 3 187 4 18446744073709551615 1 } 188 3 188 4 18446744073709551615 4 else 189 3 189 7 18446744073709551615 2 if 189 8 189 10 18446744073709551615 1 ( 189 11 189 12 18446744073709551615 4 node 189 12 189 16 128 2 -> 189 16 189 18 18446744073709551615 4 kind 189 18 189 22 131 2 == 189 23 189 25 18446744073709551615 14 ExpressionKind 189 26 189 40 132 2 :: 189 40 189 42 18446744073709551615 10 UnaryMinus 189 42 189 52 134 1 ) 189 52 189 53 18446744073709551615 1 { 190 3 190 4 18446744073709551615 8 byteCode 191 4 191 12 57 1 . 191 12 191 13 36 9 push_back 191 13 191 22 36 1 ( 191 22 191 23 36 10 minus_long 191 23 191 33 136 1 ) 191 33 191 34 36 1 ; 191 34 191 35 18446744073709551615 1 } 192 3 192 4 18446744073709551615 4 else 193 3 193 7 18446744073709551615 1 { 194 3 194 4 18446744073709551615 5 throw 195 4 195 9 18446744073709551615 7 wstring 195 10 195 17 80 1 ( 195 17 195 18 81 47 L"wrong unary operation, where operand is long" 195 18 195 65 18446744073709551615 1 ) 195 65 195 66 81 1 ; 195 66 195 67 18446744073709551615 1 } 196 3 196 4 18446744073709551615 1 } 197 2 197 3 18446744073709551615 4 else 198 2 198 6 18446744073709551615 2 if 198 7 198 9 18446744073709551615 1 ( 198 10 198 11 18446744073709551615 4 node 198 11 198 15 128 2 -> 198 15 198 17 18446744073709551615 4 type 198 17 198 21 130 1 . 198 21 198 22 74 7 IsFloat 198 22 198 29 74 1 ( 198 29 198 30 74 1 ) 198 30 198 31 74 1 ) 198 31 198 32 18446744073709551615 1 { 199 2 199 3 18446744073709551615 2 if 200 3 200 5 18446744073709551615 1 ( 200 6 200 7 18446744073709551615 4 node 200 7 200 11 128 2 -> 200 11 200 13 18446744073709551615 4 kind 200 13 200 17 131 2 == 200 18 200 20 18446744073709551615 14 ExpressionKind 200 21 200 35 132 2 :: 200 35 200 37 18446744073709551615 9 UnaryPlus 200 37 200 46 133 1 ) 200 46 200 47 18446744073709551615 1 { 201 3 201 4 18446744073709551615 1 } 202 3 202 4 18446744073709551615 4 else 203 3 203 7 18446744073709551615 2 if 203 8 203 10 18446744073709551615 1 ( 203 11 203 12 18446744073709551615 4 node 203 12 203 16 128 2 -> 203 16 203 18 18446744073709551615 4 kind 203 18 203 22 131 2 == 203 23 203 25 18446744073709551615 14 ExpressionKind 203 26 203 40 132 2 :: 203 40 203 42 18446744073709551615 10 UnaryMinus 203 42 203 52 134 1 ) 203 52 203 53 18446744073709551615 1 { 204 3 204 4 18446744073709551615 8 byteCode 205 4 205 12 57 1 . 205 12 205 13 36 9 push_back 205 13 205 22 36 1 ( 205 22 205 23 36 11 minus_float 205 23 205 34 137 1 ) 205 34 205 35 36 1 ; 205 35 205 36 18446744073709551615 1 } 206 3 206 4 18446744073709551615 4 else 207 3 207 7 18446744073709551615 1 { 208 3 208 4 18446744073709551615 5 throw 209 4 209 9 18446744073709551615 7 wstring 209 10 209 17 80 1 ( 209 17 209 18 81 48 L"wrong unary operation, where operand is float" 209 18 209 66 18446744073709551615 1 ) 209 66 209 67 81 1 ; 209 67 209 68 18446744073709551615 1 } 210 3 210 4 18446744073709551615 1 } 211 2 211 3 18446744073709551615 4 else 212 2 212 6 18446744073709551615 2 if 212 7 212 9 18446744073709551615 1 ( 212 10 212 11 18446744073709551615 4 node 212 11 212 15 128 2 -> 212 15 212 17 18446744073709551615 4 type 212 17 212 21 130 1 . 212 21 212 22 76 8 IsDouble 212 22 212 30 76 1 ( 212 30 212 31 76 1 ) 212 31 212 32 76 1 ) 212 32 212 33 18446744073709551615 1 { 213 2 213 3 18446744073709551615 2 if 214 3 214 5 18446744073709551615 1 ( 214 6 214 7 18446744073709551615 4 node 214 7 214 11 128 2 -> 214 11 214 13 18446744073709551615 4 kind 214 13 214 17 131 2 == 214 18 214 20 18446744073709551615 14 ExpressionKind 214 21 214 35 132 2 :: 214 35 214 37 18446744073709551615 9 UnaryPlus 214 37 214 46 133 1 ) 214 46 214 47 18446744073709551615 1 { 215 3 215 4 18446744073709551615 1 } 216 3 216 4 18446744073709551615 4 else 217 3 217 7 18446744073709551615 2 if 217 8 217 10 18446744073709551615 1 ( 217 11 217 12 18446744073709551615 4 node 217 12 217 16 128 2 -> 217 16 217 18 18446744073709551615 4 kind 217 18 217 22 131 2 == 217 23 217 25 18446744073709551615 14 ExpressionKind 217 26 217 40 132 2 :: 217 40 217 42 18446744073709551615 10 UnaryMinus 217 42 217 52 134 1 ) 217 52 217 53 18446744073709551615 1 { 218 3 218 4 18446744073709551615 8 byteCode 219 4 219 12 57 1 . 219 12 219 13 36 9 push_back 219 13 219 22 36 1 ( 219 22 219 23 36 12 minus_double 219 23 219 35 138 1 ) 219 35 219 36 36 1 ; 219 36 219 37 18446744073709551615 1 } 220 3 220 4 18446744073709551615 4 else 221 3 221 7 18446744073709551615 1 { 222 3 222 4 18446744073709551615 5 throw 223 4 223 9 18446744073709551615 7 wstring 223 10 223 17 80 1 ( 223 17 223 18 81 49 L"wrong unary operation, where operand is double" 223 18 223 67 18446744073709551615 1 ) 223 67 223 68 81 1 ; 223 68 223 69 18446744073709551615 1 } 224 3 224 4 18446744073709551615 1 } 225 2 225 3 18446744073709551615 4 else 226 2 226 6 18446744073709551615 2 if 226 7 226 9 18446744073709551615 1 ( 226 10 226 11 18446744073709551615 4 node 226 11 226 15 128 2 -> 226 15 226 17 18446744073709551615 4 type 226 17 226 21 130 1 . 226 21 226 22 139 9 IsBoolean 226 22 226 31 139 1 ( 226 31 226 32 139 1 ) 226 32 226 33 139 2 && 226 34 226 36 18446744073709551615 4 node 226 37 226 41 128 2 -> 226 41 226 43 18446744073709551615 4 kind 226 43 226 47 131 2 == 226 48 226 50 18446744073709551615 14 ExpressionKind 226 51 226 65 132 2 :: 226 65 226 67 18446744073709551615 3 Not 226 67 226 70 140 1 ) 226 70 226 71 18446744073709551615 1 { 227 2 227 3 18446744073709551615 8 byteCode 228 3 228 11 57 1 . 228 11 228 12 36 9 push_back 228 12 228 21 36 1 ( 228 21 228 22 36 11 logical_not 228 22 228 33 141 1 ) 228 33 228 34 36 1 ; 228 34 228 35 18446744073709551615 1 } 229 2 229 3 18446744073709551615 4 else 230 2 230 6 18446744073709551615 1 { 231 2 231 3 18446744073709551615 5 throw 232 3 232 8 18446744073709551615 7 wstring 232 9 232 16 80 1 ( 232 16 232 17 81 24 L"wrong unary operation" 232 17 232 41 18446744073709551615 1 ) 232 41 232 42 81 1 ; 232 42 232 43 18446744073709551615 1 } 233 2 233 3 18446744073709551615 1 } 234 1 234 2 18446744073709551615 4 void 235 1 235 5 18446744073709551615 8 Compiler 235 6 235 14 4 2 :: 235 14 235 16 101 5 Visit 235 16 235 21 101 1 ( 235 21 235 22 101 16 BinaryExpression 235 22 235 38 142 1 * 235 38 235 39 18446744073709551615 4 node 235 40 235 44 143 1 ) 235 44 235 45 101 1 { 236 1 236 2 18446744073709551615 4 node 237 2 237 6 143 2 -> 237 6 237 8 18446744073709551615 4 left 237 8 237 12 144 2 -> 237 12 237 14 31 6 Accept 237 14 237 20 31 1 ( 237 20 237 21 31 4 this 237 21 237 25 18446744073709551615 1 ) 237 25 237 26 31 1 ; 237 26 237 27 18446744073709551615 4 node 238 2 238 6 143 2 -> 238 6 238 8 18446744073709551615 5 right 238 8 238 13 145 2 -> 238 13 238 15 31 6 Accept 238 15 238 21 31 1 ( 238 21 238 22 31 4 this 238 22 238 26 18446744073709551615 1 ) 238 26 238 27 31 1 ; 238 27 238 28 18446744073709551615 2 if 239 2 239 4 18446744073709551615 1 ( 239 5 239 6 18446744073709551615 4 node 239 6 239 10 143 2 -> 239 10 239 12 18446744073709551615 4 left 239 12 239 16 144 2 -> 239 16 239 18 18446744073709551615 4 type 239 18 239 22 130 1 . 239 22 239 23 70 5 IsInt 239 23 239 28 70 1 ( 239 28 239 29 70 1 ) 239 29 239 30 70 2 && 239 31 239 33 18446744073709551615 4 node 239 34 239 38 143 2 -> 239 38 239 40 18446744073709551615 5 right 239 40 239 45 145 2 -> 239 45 239 47 18446744073709551615 4 type 239 47 239 51 130 1 . 239 51 239 52 70 5 IsInt 239 52 239 57 70 1 ( 239 57 239 58 70 1 ) 239 58 239 59 70 1 ) 239 59 239 60 18446744073709551615 1 { 240 2 240 3 18446744073709551615 2 if 241 3 241 5 18446744073709551615 1 ( 241 6 241 7 18446744073709551615 4 node 241 7 241 11 143 2 -> 241 11 241 13 18446744073709551615 4 kind 241 13 241 17 131 2 == 241 18 241 20 18446744073709551615 14 ExpressionKind 241 21 241 35 132 2 :: 241 35 241 37 18446744073709551615 3 Add 241 37 241 40 146 1 ) 241 40 241 41 18446744073709551615 1 { 242 3 242 4 18446744073709551615 8 byteCode 243 4 243 12 57 1 . 243 12 243 13 36 9 push_back 243 13 243 22 36 1 ( 243 22 243 23 36 7 add_int 243 23 243 30 147 1 ) 243 30 243 31 36 1 ; 243 31 243 32 18446744073709551615 1 } 244 3 244 4 18446744073709551615 4 else 245 3 245 7 18446744073709551615 2 if 245 8 245 10 18446744073709551615 1 ( 245 11 245 12 18446744073709551615 4 node 245 12 245 16 143 2 -> 245 16 245 18 18446744073709551615 4 kind 245 18 245 22 131 2 == 245 23 245 25 18446744073709551615 14 ExpressionKind 245 26 245 40 132 2 :: 245 40 245 42 18446744073709551615 8 Subtract 245 42 245 50 148 1 ) 245 50 245 51 18446744073709551615 1 { 246 3 246 4 18446744073709551615 8 byteCode 247 4 247 12 57 1 . 247 12 247 13 36 9 push_back 247 13 247 22 36 1 ( 247 22 247 23 36 7 sub_int 247 23 247 30 149 1 ) 247 30 247 31 36 1 ; 247 31 247 32 18446744073709551615 1 } 248 3 248 4 18446744073709551615 4 else 249 3 249 7 18446744073709551615 2 if 249 8 249 10 18446744073709551615 1 ( 249 11 249 12 18446744073709551615 4 node 249 12 249 16 143 2 -> 249 16 249 18 18446744073709551615 4 kind 249 18 249 22 131 2 == 249 23 249 25 18446744073709551615 14 ExpressionKind 249 26 249 40 132 2 :: 249 40 249 42 18446744073709551615 8 Multiply 249 42 249 50 150 1 ) 249 50 249 51 18446744073709551615 1 { 250 3 250 4 18446744073709551615 8 byteCode 251 4 251 12 57 1 . 251 12 251 13 36 9 push_back 251 13 251 22 36 1 ( 251 22 251 23 36 7 mul_int 251 23 251 30 151 1 ) 251 30 251 31 36 1 ; 251 31 251 32 18446744073709551615 1 } 252 3 252 4 18446744073709551615 4 else 253 3 253 7 18446744073709551615 2 if 253 8 253 10 18446744073709551615 1 ( 253 11 253 12 18446744073709551615 4 node 253 12 253 16 143 2 -> 253 16 253 18 18446744073709551615 4 kind 253 18 253 22 131 2 == 253 23 253 25 18446744073709551615 14 ExpressionKind 253 26 253 40 132 2 :: 253 40 253 42 18446744073709551615 6 Divide 253 42 253 48 152 1 ) 253 48 253 49 18446744073709551615 1 { 254 3 254 4 18446744073709551615 8 byteCode 255 4 255 12 57 1 . 255 12 255 13 36 9 push_back 255 13 255 22 36 1 ( 255 22 255 23 36 7 div_int 255 23 255 30 153 1 ) 255 30 255 31 36 1 ; 255 31 255 32 18446744073709551615 1 } 256 3 256 4 18446744073709551615 4 else 257 3 257 7 18446744073709551615 2 if 257 8 257 10 18446744073709551615 1 ( 257 11 257 12 18446744073709551615 4 node 257 12 257 16 143 2 -> 257 16 257 18 18446744073709551615 4 kind 257 18 257 22 131 2 == 257 23 257 25 18446744073709551615 14 ExpressionKind 257 26 257 40 132 2 :: 257 40 257 42 18446744073709551615 6 Modulo 257 42 257 48 154 1 ) 257 48 257 49 18446744073709551615 1 { 258 3 258 4 18446744073709551615 8 byteCode 259 4 259 12 57 1 . 259 12 259 13 36 9 push_back 259 13 259 22 36 1 ( 259 22 259 23 36 7 mod_int 259 23 259 30 155 1 ) 259 30 259 31 36 1 ; 259 31 259 32 18446744073709551615 1 } 260 3 260 4 18446744073709551615 4 else 261 3 261 7 18446744073709551615 2 if 261 8 261 10 18446744073709551615 1 ( 261 11 261 12 18446744073709551615 4 node 261 12 261 16 143 2 -> 261 16 261 18 18446744073709551615 4 kind 261 18 261 22 131 2 == 261 23 261 25 18446744073709551615 14 ExpressionKind 261 26 261 40 132 2 :: 261 40 261 42 18446744073709551615 11 GreaterThan 261 42 261 53 156 1 ) 261 53 261 54 18446744073709551615 1 { 262 3 262 4 18446744073709551615 8 byteCode 263 4 263 12 57 1 . 263 12 263 13 36 9 push_back 263 13 263 22 36 1 ( 263 22 263 23 36 6 gt_int 263 23 263 29 157 1 ) 263 29 263 30 36 1 ; 263 30 263 31 18446744073709551615 1 } 264 3 264 4 18446744073709551615 4 else 265 3 265 7 18446744073709551615 2 if 265 8 265 10 18446744073709551615 1 ( 265 11 265 12 18446744073709551615 4 node 265 12 265 16 143 2 -> 265 16 265 18 18446744073709551615 4 kind 265 18 265 22 131 2 == 265 23 265 25 18446744073709551615 14 ExpressionKind 265 26 265 40 132 2 :: 265 40 265 42 18446744073709551615 8 LessThan 265 42 265 50 158 1 ) 265 50 265 51 18446744073709551615 1 { 266 3 266 4 18446744073709551615 8 byteCode 267 4 267 12 57 1 . 267 12 267 13 36 9 push_back 267 13 267 22 36 1 ( 267 22 267 23 36 6 lt_int 267 23 267 29 159 1 ) 267 29 267 30 36 1 ; 267 30 267 31 18446744073709551615 1 } 268 3 268 4 18446744073709551615 4 else 269 3 269 7 18446744073709551615 2 if 269 8 269 10 18446744073709551615 1 ( 269 11 269 12 18446744073709551615 4 node 269 12 269 16 143 2 -> 269 16 269 18 18446744073709551615 4 kind 269 18 269 22 131 2 == 269 23 269 25 18446744073709551615 14 ExpressionKind 269 26 269 40 132 2 :: 269 40 269 42 18446744073709551615 18 GreaterThanOrEqual 269 42 269 60 160 1 ) 269 60 269 61 18446744073709551615 1 { 270 3 270 4 18446744073709551615 8 byteCode 271 4 271 12 57 1 . 271 12 271 13 36 9 push_back 271 13 271 22 36 1 ( 271 22 271 23 36 6 ge_int 271 23 271 29 161 1 ) 271 29 271 30 36 1 ; 271 30 271 31 18446744073709551615 1 } 272 3 272 4 18446744073709551615 4 else 273 3 273 7 18446744073709551615 2 if 273 8 273 10 18446744073709551615 1 ( 273 11 273 12 18446744073709551615 4 node 273 12 273 16 143 2 -> 273 16 273 18 18446744073709551615 4 kind 273 18 273 22 131 2 == 273 23 273 25 18446744073709551615 14 ExpressionKind 273 26 273 40 132 2 :: 273 40 273 42 18446744073709551615 15 LessThanOrEqual 273 42 273 57 162 1 ) 273 57 273 58 18446744073709551615 1 { 274 3 274 4 18446744073709551615 8 byteCode 275 4 275 12 57 1 . 275 12 275 13 36 9 push_back 275 13 275 22 36 1 ( 275 22 275 23 36 6 le_int 275 23 275 29 163 1 ) 275 29 275 30 36 1 ; 275 30 275 31 18446744073709551615 1 } 276 3 276 4 18446744073709551615 4 else 277 3 277 7 18446744073709551615 2 if 277 8 277 10 18446744073709551615 1 ( 277 11 277 12 18446744073709551615 4 node 277 12 277 16 143 2 -> 277 16 277 18 18446744073709551615 4 kind 277 18 277 22 131 2 == 277 23 277 25 18446744073709551615 14 ExpressionKind 277 26 277 40 132 2 :: 277 40 277 42 18446744073709551615 5 Equal 277 42 277 47 164 1 ) 277 47 277 48 18446744073709551615 1 { 278 3 278 4 18446744073709551615 8 byteCode 279 4 279 12 57 1 . 279 12 279 13 36 9 push_back 279 13 279 22 36 1 ( 279 22 279 23 36 6 eq_int 279 23 279 29 165 1 ) 279 29 279 30 36 1 ; 279 30 279 31 18446744073709551615 1 } 280 3 280 4 18446744073709551615 4 else 281 3 281 7 18446744073709551615 2 if 281 8 281 10 18446744073709551615 1 ( 281 11 281 12 18446744073709551615 4 node 281 12 281 16 143 2 -> 281 16 281 18 18446744073709551615 4 kind 281 18 281 22 131 2 == 281 23 281 25 18446744073709551615 14 ExpressionKind 281 26 281 40 132 2 :: 281 40 281 42 18446744073709551615 8 NotEqual 281 42 281 50 166 1 ) 281 50 281 51 18446744073709551615 1 { 282 3 282 4 18446744073709551615 8 byteCode 283 4 283 12 57 1 . 283 12 283 13 36 9 push_back 283 13 283 22 36 1 ( 283 22 283 23 36 6 ne_int 283 23 283 29 167 1 ) 283 29 283 30 36 1 ; 283 30 283 31 18446744073709551615 1 } 284 3 284 4 18446744073709551615 4 else 285 3 285 7 18446744073709551615 1 { 286 3 286 4 18446744073709551615 5 throw 287 4 287 9 18446744073709551615 7 wstring 287 10 287 17 80 1 ( 287 17 287 18 81 33 L"wrong binary operation for int" 287 18 287 51 18446744073709551615 1 ) 287 51 287 52 81 1 ; 287 52 287 53 18446744073709551615 1 } 288 3 288 4 18446744073709551615 1 } 289 2 289 3 18446744073709551615 4 else 290 2 290 6 18446744073709551615 2 if 290 7 290 9 18446744073709551615 1 ( 290 10 290 11 18446744073709551615 4 node 290 11 290 15 143 2 -> 290 15 290 17 18446744073709551615 4 left 290 17 290 21 144 2 -> 290 21 290 23 18446744073709551615 4 type 290 23 290 27 130 1 . 290 27 290 28 72 6 IsLong 290 28 290 34 72 1 ( 290 34 290 35 72 1 ) 290 35 290 36 72 2 && 290 37 290 39 18446744073709551615 4 node 290 40 290 44 143 2 -> 290 44 290 46 18446744073709551615 5 right 290 46 290 51 145 2 -> 290 51 290 53 18446744073709551615 4 type 290 53 290 57 130 1 . 290 57 290 58 72 6 IsLong 290 58 290 64 72 1 ( 290 64 290 65 72 1 ) 290 65 290 66 72 1 ) 290 66 290 67 18446744073709551615 1 { 291 2 291 3 18446744073709551615 2 if 292 3 292 5 18446744073709551615 1 ( 292 6 292 7 18446744073709551615 4 node 292 7 292 11 143 2 -> 292 11 292 13 18446744073709551615 4 kind 292 13 292 17 131 2 == 292 18 292 20 18446744073709551615 14 ExpressionKind 292 21 292 35 132 2 :: 292 35 292 37 18446744073709551615 3 Add 292 37 292 40 146 1 ) 292 40 292 41 18446744073709551615 1 { 293 3 293 4 18446744073709551615 8 byteCode 294 4 294 12 57 1 . 294 12 294 13 36 9 push_back 294 13 294 22 36 1 ( 294 22 294 23 36 8 add_long 294 23 294 31 168 1 ) 294 31 294 32 36 1 ; 294 32 294 33 18446744073709551615 1 } 295 3 295 4 18446744073709551615 4 else 296 3 296 7 18446744073709551615 2 if 296 8 296 10 18446744073709551615 1 ( 296 11 296 12 18446744073709551615 4 node 296 12 296 16 143 2 -> 296 16 296 18 18446744073709551615 4 kind 296 18 296 22 131 2 == 296 23 296 25 18446744073709551615 14 ExpressionKind 296 26 296 40 132 2 :: 296 40 296 42 18446744073709551615 8 Subtract 296 42 296 50 148 1 ) 296 50 296 51 18446744073709551615 1 { 297 3 297 4 18446744073709551615 8 byteCode 298 4 298 12 57 1 . 298 12 298 13 36 9 push_back 298 13 298 22 36 1 ( 298 22 298 23 36 8 sub_long 298 23 298 31 169 1 ) 298 31 298 32 36 1 ; 298 32 298 33 18446744073709551615 1 } 299 3 299 4 18446744073709551615 4 else 300 3 300 7 18446744073709551615 2 if 300 8 300 10 18446744073709551615 1 ( 300 11 300 12 18446744073709551615 4 node 300 12 300 16 143 2 -> 300 16 300 18 18446744073709551615 4 kind 300 18 300 22 131 2 == 300 23 300 25 18446744073709551615 14 ExpressionKind 300 26 300 40 132 2 :: 300 40 300 42 18446744073709551615 8 Multiply 300 42 300 50 150 1 ) 300 50 300 51 18446744073709551615 1 { 301 3 301 4 18446744073709551615 8 byteCode 302 4 302 12 57 1 . 302 12 302 13 36 9 push_back 302 13 302 22 36 1 ( 302 22 302 23 36 8 mul_long 302 23 302 31 170 1 ) 302 31 302 32 36 1 ; 302 32 302 33 18446744073709551615 1 } 303 3 303 4 18446744073709551615 4 else 304 3 304 7 18446744073709551615 2 if 304 8 304 10 18446744073709551615 1 ( 304 11 304 12 18446744073709551615 4 node 304 12 304 16 143 2 -> 304 16 304 18 18446744073709551615 4 kind 304 18 304 22 131 2 == 304 23 304 25 18446744073709551615 14 ExpressionKind 304 26 304 40 132 2 :: 304 40 304 42 18446744073709551615 6 Divide 304 42 304 48 152 1 ) 304 48 304 49 18446744073709551615 1 { 305 3 305 4 18446744073709551615 8 byteCode 306 4 306 12 57 1 . 306 12 306 13 36 9 push_back 306 13 306 22 36 1 ( 306 22 306 23 36 8 div_long 306 23 306 31 171 1 ) 306 31 306 32 36 1 ; 306 32 306 33 18446744073709551615 1 } 307 3 307 4 18446744073709551615 4 else 308 3 308 7 18446744073709551615 2 if 308 8 308 10 18446744073709551615 1 ( 308 11 308 12 18446744073709551615 4 node 308 12 308 16 143 2 -> 308 16 308 18 18446744073709551615 4 kind 308 18 308 22 131 2 == 308 23 308 25 18446744073709551615 14 ExpressionKind 308 26 308 40 132 2 :: 308 40 308 42 18446744073709551615 6 Modulo 308 42 308 48 154 1 ) 308 48 308 49 18446744073709551615 1 { 309 3 309 4 18446744073709551615 8 byteCode 310 4 310 12 57 1 . 310 12 310 13 36 9 push_back 310 13 310 22 36 1 ( 310 22 310 23 36 8 mod_long 310 23 310 31 172 1 ) 310 31 310 32 36 1 ; 310 32 310 33 18446744073709551615 1 } 311 3 311 4 18446744073709551615 4 else 312 3 312 7 18446744073709551615 2 if 312 8 312 10 18446744073709551615 1 ( 312 11 312 12 18446744073709551615 4 node 312 12 312 16 143 2 -> 312 16 312 18 18446744073709551615 4 kind 312 18 312 22 131 2 == 312 23 312 25 18446744073709551615 14 ExpressionKind 312 26 312 40 132 2 :: 312 40 312 42 18446744073709551615 11 GreaterThan 312 42 312 53 156 1 ) 312 53 312 54 18446744073709551615 1 { 313 3 313 4 18446744073709551615 8 byteCode 314 4 314 12 57 1 . 314 12 314 13 36 9 push_back 314 13 314 22 36 1 ( 314 22 314 23 36 7 gt_long 314 23 314 30 173 1 ) 314 30 314 31 36 1 ; 314 31 314 32 18446744073709551615 1 } 315 3 315 4 18446744073709551615 4 else 316 3 316 7 18446744073709551615 2 if 316 8 316 10 18446744073709551615 1 ( 316 11 316 12 18446744073709551615 4 node 316 12 316 16 143 2 -> 316 16 316 18 18446744073709551615 4 kind 316 18 316 22 131 2 == 316 23 316 25 18446744073709551615 14 ExpressionKind 316 26 316 40 132 2 :: 316 40 316 42 18446744073709551615 8 LessThan 316 42 316 50 158 1 ) 316 50 316 51 18446744073709551615 1 { 317 3 317 4 18446744073709551615 8 byteCode 318 4 318 12 57 1 . 318 12 318 13 36 9 push_back 318 13 318 22 36 1 ( 318 22 318 23 36 7 lt_long 318 23 318 30 174 1 ) 318 30 318 31 36 1 ; 318 31 318 32 18446744073709551615 1 } 319 3 319 4 18446744073709551615 4 else 320 3 320 7 18446744073709551615 2 if 320 8 320 10 18446744073709551615 1 ( 320 11 320 12 18446744073709551615 4 node 320 12 320 16 143 2 -> 320 16 320 18 18446744073709551615 4 kind 320 18 320 22 131 2 == 320 23 320 25 18446744073709551615 14 ExpressionKind 320 26 320 40 132 2 :: 320 40 320 42 18446744073709551615 18 GreaterThanOrEqual 320 42 320 60 160 1 ) 320 60 320 61 18446744073709551615 1 { 321 3 321 4 18446744073709551615 8 byteCode 322 4 322 12 57 1 . 322 12 322 13 36 9 push_back 322 13 322 22 36 1 ( 322 22 322 23 36 7 ge_long 322 23 322 30 175 1 ) 322 30 322 31 36 1 ; 322 31 322 32 18446744073709551615 1 } 323 3 323 4 18446744073709551615 4 else 324 3 324 7 18446744073709551615 2 if 324 8 324 10 18446744073709551615 1 ( 324 11 324 12 18446744073709551615 4 node 324 12 324 16 143 2 -> 324 16 324 18 18446744073709551615 4 kind 324 18 324 22 131 2 == 324 23 324 25 18446744073709551615 14 ExpressionKind 324 26 324 40 132 2 :: 324 40 324 42 18446744073709551615 15 LessThanOrEqual 324 42 324 57 162 1 ) 324 57 324 58 18446744073709551615 1 { 325 3 325 4 18446744073709551615 8 byteCode 326 4 326 12 57 1 . 326 12 326 13 36 9 push_back 326 13 326 22 36 1 ( 326 22 326 23 36 7 le_long 326 23 326 30 176 1 ) 326 30 326 31 36 1 ; 326 31 326 32 18446744073709551615 1 } 327 3 327 4 18446744073709551615 4 else 328 3 328 7 18446744073709551615 2 if 328 8 328 10 18446744073709551615 1 ( 328 11 328 12 18446744073709551615 4 node 328 12 328 16 143 2 -> 328 16 328 18 18446744073709551615 4 kind 328 18 328 22 131 2 == 328 23 328 25 18446744073709551615 14 ExpressionKind 328 26 328 40 132 2 :: 328 40 328 42 18446744073709551615 5 Equal 328 42 328 47 164 1 ) 328 47 328 48 18446744073709551615 1 { 329 3 329 4 18446744073709551615 8 byteCode 330 4 330 12 57 1 . 330 12 330 13 36 9 push_back 330 13 330 22 36 1 ( 330 22 330 23 36 7 eq_long 330 23 330 30 177 1 ) 330 30 330 31 36 1 ; 330 31 330 32 18446744073709551615 1 } 331 3 331 4 18446744073709551615 4 else 332 3 332 7 18446744073709551615 2 if 332 8 332 10 18446744073709551615 1 ( 332 11 332 12 18446744073709551615 4 node 332 12 332 16 143 2 -> 332 16 332 18 18446744073709551615 4 kind 332 18 332 22 131 2 == 332 23 332 25 18446744073709551615 14 ExpressionKind 332 26 332 40 132 2 :: 332 40 332 42 18446744073709551615 8 NotEqual 332 42 332 50 166 1 ) 332 50 332 51 18446744073709551615 1 { 333 3 333 4 18446744073709551615 8 byteCode 334 4 334 12 57 1 . 334 12 334 13 36 9 push_back 334 13 334 22 36 1 ( 334 22 334 23 36 7 ne_long 334 23 334 30 178 1 ) 334 30 334 31 36 1 ; 334 31 334 32 18446744073709551615 1 } 335 3 335 4 18446744073709551615 4 else 336 3 336 7 18446744073709551615 1 { 337 3 337 4 18446744073709551615 5 throw 338 4 338 9 18446744073709551615 7 wstring 338 10 338 17 80 1 ( 338 17 338 18 81 34 L"wrong binary operation for long" 338 18 338 52 18446744073709551615 1 ) 338 52 338 53 81 1 ; 338 53 338 54 18446744073709551615 1 } 339 3 339 4 18446744073709551615 1 } 340 2 340 3 18446744073709551615 4 else 341 2 341 6 18446744073709551615 2 if 341 7 341 9 18446744073709551615 1 ( 341 10 341 11 18446744073709551615 4 node 341 11 341 15 143 2 -> 341 15 341 17 18446744073709551615 4 left 341 17 341 21 144 2 -> 341 21 341 23 18446744073709551615 4 type 341 23 341 27 130 1 . 341 27 341 28 74 7 IsFloat 341 28 341 35 74 1 ( 341 35 341 36 74 1 ) 341 36 341 37 74 2 && 341 38 341 40 18446744073709551615 4 node 341 41 341 45 143 2 -> 341 45 341 47 18446744073709551615 5 right 341 47 341 52 145 2 -> 341 52 341 54 18446744073709551615 4 type 341 54 341 58 130 1 . 341 58 341 59 74 7 IsFloat 341 59 341 66 74 1 ( 341 66 341 67 74 1 ) 341 67 341 68 74 1 ) 341 68 341 69 18446744073709551615 1 { 342 2 342 3 18446744073709551615 2 if 343 3 343 5 18446744073709551615 1 ( 343 6 343 7 18446744073709551615 4 node 343 7 343 11 143 2 -> 343 11 343 13 18446744073709551615 4 kind 343 13 343 17 131 2 == 343 18 343 20 18446744073709551615 14 ExpressionKind 343 21 343 35 132 2 :: 343 35 343 37 18446744073709551615 3 Add 343 37 343 40 146 1 ) 343 40 343 41 18446744073709551615 1 { 344 3 344 4 18446744073709551615 8 byteCode 345 4 345 12 57 1 . 345 12 345 13 36 9 push_back 345 13 345 22 36 1 ( 345 22 345 23 36 9 add_float 345 23 345 32 179 1 ) 345 32 345 33 36 1 ; 345 33 345 34 18446744073709551615 1 } 346 3 346 4 18446744073709551615 4 else 347 3 347 7 18446744073709551615 2 if 347 8 347 10 18446744073709551615 1 ( 347 11 347 12 18446744073709551615 4 node 347 12 347 16 143 2 -> 347 16 347 18 18446744073709551615 4 kind 347 18 347 22 131 2 == 347 23 347 25 18446744073709551615 14 ExpressionKind 347 26 347 40 132 2 :: 347 40 347 42 18446744073709551615 8 Subtract 347 42 347 50 148 1 ) 347 50 347 51 18446744073709551615 1 { 348 3 348 4 18446744073709551615 8 byteCode 349 4 349 12 57 1 . 349 12 349 13 36 9 push_back 349 13 349 22 36 1 ( 349 22 349 23 36 9 sub_float 349 23 349 32 180 1 ) 349 32 349 33 36 1 ; 349 33 349 34 18446744073709551615 1 } 350 3 350 4 18446744073709551615 4 else 351 3 351 7 18446744073709551615 2 if 351 8 351 10 18446744073709551615 1 ( 351 11 351 12 18446744073709551615 4 node 351 12 351 16 143 2 -> 351 16 351 18 18446744073709551615 4 kind 351 18 351 22 131 2 == 351 23 351 25 18446744073709551615 14 ExpressionKind 351 26 351 40 132 2 :: 351 40 351 42 18446744073709551615 8 Multiply 351 42 351 50 150 1 ) 351 50 351 51 18446744073709551615 1 { 352 3 352 4 18446744073709551615 8 byteCode 353 4 353 12 57 1 . 353 12 353 13 36 9 push_back 353 13 353 22 36 1 ( 353 22 353 23 36 9 mul_float 353 23 353 32 181 1 ) 353 32 353 33 36 1 ; 353 33 353 34 18446744073709551615 1 } 354 3 354 4 18446744073709551615 4 else 355 3 355 7 18446744073709551615 2 if 355 8 355 10 18446744073709551615 1 ( 355 11 355 12 18446744073709551615 4 node 355 12 355 16 143 2 -> 355 16 355 18 18446744073709551615 4 kind 355 18 355 22 131 2 == 355 23 355 25 18446744073709551615 14 ExpressionKind 355 26 355 40 132 2 :: 355 40 355 42 18446744073709551615 6 Divide 355 42 355 48 152 1 ) 355 48 355 49 18446744073709551615 1 { 356 3 356 4 18446744073709551615 8 byteCode 357 4 357 12 57 1 . 357 12 357 13 36 9 push_back 357 13 357 22 36 1 ( 357 22 357 23 36 9 div_float 357 23 357 32 182 1 ) 357 32 357 33 36 1 ; 357 33 357 34 18446744073709551615 1 } 358 3 358 4 18446744073709551615 4 else 359 3 359 7 18446744073709551615 2 if 359 8 359 10 18446744073709551615 1 ( 359 11 359 12 18446744073709551615 4 node 359 12 359 16 143 2 -> 359 16 359 18 18446744073709551615 4 kind 359 18 359 22 131 2 == 359 23 359 25 18446744073709551615 14 ExpressionKind 359 26 359 40 132 2 :: 359 40 359 42 18446744073709551615 11 GreaterThan 359 42 359 53 156 1 ) 359 53 359 54 18446744073709551615 1 { 360 3 360 4 18446744073709551615 8 byteCode 361 4 361 12 57 1 . 361 12 361 13 36 9 push_back 361 13 361 22 36 1 ( 361 22 361 23 36 8 gt_float 361 23 361 31 183 1 ) 361 31 361 32 36 1 ; 361 32 361 33 18446744073709551615 1 } 362 3 362 4 18446744073709551615 4 else 363 3 363 7 18446744073709551615 2 if 363 8 363 10 18446744073709551615 1 ( 363 11 363 12 18446744073709551615 4 node 363 12 363 16 143 2 -> 363 16 363 18 18446744073709551615 4 kind 363 18 363 22 131 2 == 363 23 363 25 18446744073709551615 14 ExpressionKind 363 26 363 40 132 2 :: 363 40 363 42 18446744073709551615 8 LessThan 363 42 363 50 158 1 ) 363 50 363 51 18446744073709551615 1 { 364 3 364 4 18446744073709551615 8 byteCode 365 4 365 12 57 1 . 365 12 365 13 36 9 push_back 365 13 365 22 36 1 ( 365 22 365 23 36 8 lt_float 365 23 365 31 184 1 ) 365 31 365 32 36 1 ; 365 32 365 33 18446744073709551615 1 } 366 3 366 4 18446744073709551615 4 else 367 3 367 7 18446744073709551615 2 if 367 8 367 10 18446744073709551615 1 ( 367 11 367 12 18446744073709551615 4 node 367 12 367 16 143 2 -> 367 16 367 18 18446744073709551615 4 kind 367 18 367 22 131 2 == 367 23 367 25 18446744073709551615 14 ExpressionKind 367 26 367 40 132 2 :: 367 40 367 42 18446744073709551615 18 GreaterThanOrEqual 367 42 367 60 160 1 ) 367 60 367 61 18446744073709551615 1 { 368 3 368 4 18446744073709551615 8 byteCode 369 4 369 12 57 1 . 369 12 369 13 36 9 push_back 369 13 369 22 36 1 ( 369 22 369 23 36 8 ge_float 369 23 369 31 185 1 ) 369 31 369 32 36 1 ; 369 32 369 33 18446744073709551615 1 } 370 3 370 4 18446744073709551615 4 else 371 3 371 7 18446744073709551615 2 if 371 8 371 10 18446744073709551615 1 ( 371 11 371 12 18446744073709551615 4 node 371 12 371 16 143 2 -> 371 16 371 18 18446744073709551615 4 kind 371 18 371 22 131 2 == 371 23 371 25 18446744073709551615 14 ExpressionKind 371 26 371 40 132 2 :: 371 40 371 42 18446744073709551615 15 LessThanOrEqual 371 42 371 57 162 1 ) 371 57 371 58 18446744073709551615 1 { 372 3 372 4 18446744073709551615 8 byteCode 373 4 373 12 57 1 . 373 12 373 13 36 9 push_back 373 13 373 22 36 1 ( 373 22 373 23 36 8 le_float 373 23 373 31 186 1 ) 373 31 373 32 36 1 ; 373 32 373 33 18446744073709551615 1 } 374 3 374 4 18446744073709551615 4 else 375 3 375 7 18446744073709551615 2 if 375 8 375 10 18446744073709551615 1 ( 375 11 375 12 18446744073709551615 4 node 375 12 375 16 143 2 -> 375 16 375 18 18446744073709551615 4 kind 375 18 375 22 131 2 == 375 23 375 25 18446744073709551615 14 ExpressionKind 375 26 375 40 132 2 :: 375 40 375 42 18446744073709551615 5 Equal 375 42 375 47 164 1 ) 375 47 375 48 18446744073709551615 1 { 376 3 376 4 18446744073709551615 8 byteCode 377 4 377 12 57 1 . 377 12 377 13 36 9 push_back 377 13 377 22 36 1 ( 377 22 377 23 36 8 eq_float 377 23 377 31 187 1 ) 377 31 377 32 36 1 ; 377 32 377 33 18446744073709551615 1 } 378 3 378 4 18446744073709551615 4 else 379 3 379 7 18446744073709551615 2 if 379 8 379 10 18446744073709551615 1 ( 379 11 379 12 18446744073709551615 4 node 379 12 379 16 143 2 -> 379 16 379 18 18446744073709551615 4 kind 379 18 379 22 131 2 == 379 23 379 25 18446744073709551615 14 ExpressionKind 379 26 379 40 132 2 :: 379 40 379 42 18446744073709551615 8 NotEqual 379 42 379 50 166 1 ) 379 50 379 51 18446744073709551615 1 { 380 3 380 4 18446744073709551615 8 byteCode 381 4 381 12 57 1 . 381 12 381 13 36 9 push_back 381 13 381 22 36 1 ( 381 22 381 23 36 8 ne_float 381 23 381 31 188 1 ) 381 31 381 32 36 1 ; 381 32 381 33 18446744073709551615 1 } 382 3 382 4 18446744073709551615 4 else 383 3 383 7 18446744073709551615 1 { 384 3 384 4 18446744073709551615 5 throw 385 4 385 9 18446744073709551615 7 wstring 385 10 385 17 80 1 ( 385 17 385 18 81 35 L"wrong binary operation for float" 385 18 385 53 18446744073709551615 1 ) 385 53 385 54 81 1 ; 385 54 385 55 18446744073709551615 1 } 386 3 386 4 18446744073709551615 1 } 387 2 387 3 18446744073709551615 4 else 388 2 388 6 18446744073709551615 2 if 388 7 388 9 18446744073709551615 1 ( 388 10 388 11 18446744073709551615 4 node 388 11 388 15 143 2 -> 388 15 388 17 18446744073709551615 4 left 388 17 388 21 144 2 -> 388 21 388 23 18446744073709551615 4 type 388 23 388 27 130 1 . 388 27 388 28 76 8 IsDouble 388 28 388 36 76 1 ( 388 36 388 37 76 1 ) 388 37 388 38 76 2 && 388 39 388 41 18446744073709551615 4 node 388 42 388 46 143 2 -> 388 46 388 48 18446744073709551615 5 right 388 48 388 53 145 2 -> 388 53 388 55 18446744073709551615 4 type 388 55 388 59 130 1 . 388 59 388 60 76 8 IsDouble 388 60 388 68 76 1 ( 388 68 388 69 76 1 ) 388 69 388 70 76 1 ) 388 70 388 71 18446744073709551615 1 { 389 2 389 3 18446744073709551615 2 if 390 3 390 5 18446744073709551615 1 ( 390 6 390 7 18446744073709551615 4 node 390 7 390 11 143 2 -> 390 11 390 13 18446744073709551615 4 kind 390 13 390 17 131 2 == 390 18 390 20 18446744073709551615 14 ExpressionKind 390 21 390 35 132 2 :: 390 35 390 37 18446744073709551615 3 Add 390 37 390 40 146 1 ) 390 40 390 41 18446744073709551615 1 { 391 3 391 4 18446744073709551615 8 byteCode 392 4 392 12 57 1 . 392 12 392 13 36 9 push_back 392 13 392 22 36 1 ( 392 22 392 23 36 10 add_double 392 23 392 33 189 1 ) 392 33 392 34 36 1 ; 392 34 392 35 18446744073709551615 1 } 393 3 393 4 18446744073709551615 4 else 394 3 394 7 18446744073709551615 2 if 394 8 394 10 18446744073709551615 1 ( 394 11 394 12 18446744073709551615 4 node 394 12 394 16 143 2 -> 394 16 394 18 18446744073709551615 4 kind 394 18 394 22 131 2 == 394 23 394 25 18446744073709551615 14 ExpressionKind 394 26 394 40 132 2 :: 394 40 394 42 18446744073709551615 8 Subtract 394 42 394 50 148 1 ) 394 50 394 51 18446744073709551615 1 { 395 3 395 4 18446744073709551615 8 byteCode 396 4 396 12 57 1 . 396 12 396 13 36 9 push_back 396 13 396 22 36 1 ( 396 22 396 23 36 10 sub_double 396 23 396 33 190 1 ) 396 33 396 34 36 1 ; 396 34 396 35 18446744073709551615 1 } 397 3 397 4 18446744073709551615 4 else 398 3 398 7 18446744073709551615 2 if 398 8 398 10 18446744073709551615 1 ( 398 11 398 12 18446744073709551615 4 node 398 12 398 16 143 2 -> 398 16 398 18 18446744073709551615 4 kind 398 18 398 22 131 2 == 398 23 398 25 18446744073709551615 14 ExpressionKind 398 26 398 40 132 2 :: 398 40 398 42 18446744073709551615 8 Multiply 398 42 398 50 150 1 ) 398 50 398 51 18446744073709551615 1 { 399 3 399 4 18446744073709551615 8 byteCode 400 4 400 12 57 1 . 400 12 400 13 36 9 push_back 400 13 400 22 36 1 ( 400 22 400 23 36 10 mul_double 400 23 400 33 191 1 ) 400 33 400 34 36 1 ; 400 34 400 35 18446744073709551615 1 } 401 3 401 4 18446744073709551615 4 else 402 3 402 7 18446744073709551615 2 if 402 8 402 10 18446744073709551615 1 ( 402 11 402 12 18446744073709551615 4 node 402 12 402 16 143 2 -> 402 16 402 18 18446744073709551615 4 kind 402 18 402 22 131 2 == 402 23 402 25 18446744073709551615 14 ExpressionKind 402 26 402 40 132 2 :: 402 40 402 42 18446744073709551615 6 Divide 402 42 402 48 152 1 ) 402 48 402 49 18446744073709551615 1 { 403 3 403 4 18446744073709551615 8 byteCode 404 4 404 12 57 1 . 404 12 404 13 36 9 push_back 404 13 404 22 36 1 ( 404 22 404 23 36 10 div_double 404 23 404 33 192 1 ) 404 33 404 34 36 1 ; 404 34 404 35 18446744073709551615 1 } 405 3 405 4 18446744073709551615 4 else 406 3 406 7 18446744073709551615 2 if 406 8 406 10 18446744073709551615 1 ( 406 11 406 12 18446744073709551615 4 node 406 12 406 16 143 2 -> 406 16 406 18 18446744073709551615 4 kind 406 18 406 22 131 2 == 406 23 406 25 18446744073709551615 14 ExpressionKind 406 26 406 40 132 2 :: 406 40 406 42 18446744073709551615 11 GreaterThan 406 42 406 53 156 1 ) 406 53 406 54 18446744073709551615 1 { 407 3 407 4 18446744073709551615 8 byteCode 408 4 408 12 57 1 . 408 12 408 13 36 9 push_back 408 13 408 22 36 1 ( 408 22 408 23 36 9 gt_double 408 23 408 32 193 1 ) 408 32 408 33 36 1 ; 408 33 408 34 18446744073709551615 1 } 409 3 409 4 18446744073709551615 4 else 410 3 410 7 18446744073709551615 2 if 410 8 410 10 18446744073709551615 1 ( 410 11 410 12 18446744073709551615 4 node 410 12 410 16 143 2 -> 410 16 410 18 18446744073709551615 4 kind 410 18 410 22 131 2 == 410 23 410 25 18446744073709551615 14 ExpressionKind 410 26 410 40 132 2 :: 410 40 410 42 18446744073709551615 8 LessThan 410 42 410 50 158 1 ) 410 50 410 51 18446744073709551615 1 { 411 3 411 4 18446744073709551615 8 byteCode 412 4 412 12 57 1 . 412 12 412 13 36 9 push_back 412 13 412 22 36 1 ( 412 22 412 23 36 9 lt_double 412 23 412 32 194 1 ) 412 32 412 33 36 1 ; 412 33 412 34 18446744073709551615 1 } 413 3 413 4 18446744073709551615 4 else 414 3 414 7 18446744073709551615 2 if 414 8 414 10 18446744073709551615 1 ( 414 11 414 12 18446744073709551615 4 node 414 12 414 16 143 2 -> 414 16 414 18 18446744073709551615 4 kind 414 18 414 22 131 2 == 414 23 414 25 18446744073709551615 14 ExpressionKind 414 26 414 40 132 2 :: 414 40 414 42 18446744073709551615 18 GreaterThanOrEqual 414 42 414 60 160 1 ) 414 60 414 61 18446744073709551615 1 { 415 3 415 4 18446744073709551615 8 byteCode 416 4 416 12 57 1 . 416 12 416 13 36 9 push_back 416 13 416 22 36 1 ( 416 22 416 23 36 9 ge_double 416 23 416 32 195 1 ) 416 32 416 33 36 1 ; 416 33 416 34 18446744073709551615 1 } 417 3 417 4 18446744073709551615 4 else 418 3 418 7 18446744073709551615 2 if 418 8 418 10 18446744073709551615 1 ( 418 11 418 12 18446744073709551615 4 node 418 12 418 16 143 2 -> 418 16 418 18 18446744073709551615 4 kind 418 18 418 22 131 2 == 418 23 418 25 18446744073709551615 14 ExpressionKind 418 26 418 40 132 2 :: 418 40 418 42 18446744073709551615 15 LessThanOrEqual 418 42 418 57 162 1 ) 418 57 418 58 18446744073709551615 1 { 419 3 419 4 18446744073709551615 8 byteCode 420 4 420 12 57 1 . 420 12 420 13 36 9 push_back 420 13 420 22 36 1 ( 420 22 420 23 36 9 le_double 420 23 420 32 196 1 ) 420 32 420 33 36 1 ; 420 33 420 34 18446744073709551615 1 } 421 3 421 4 18446744073709551615 4 else 422 3 422 7 18446744073709551615 2 if 422 8 422 10 18446744073709551615 1 ( 422 11 422 12 18446744073709551615 4 node 422 12 422 16 143 2 -> 422 16 422 18 18446744073709551615 4 kind 422 18 422 22 131 2 == 422 23 422 25 18446744073709551615 14 ExpressionKind 422 26 422 40 132 2 :: 422 40 422 42 18446744073709551615 5 Equal 422 42 422 47 164 1 ) 422 47 422 48 18446744073709551615 1 { 423 3 423 4 18446744073709551615 8 byteCode 424 4 424 12 57 1 . 424 12 424 13 36 9 push_back 424 13 424 22 36 1 ( 424 22 424 23 36 9 eq_double 424 23 424 32 197 1 ) 424 32 424 33 36 1 ; 424 33 424 34 18446744073709551615 1 } 425 3 425 4 18446744073709551615 4 else 426 3 426 7 18446744073709551615 2 if 426 8 426 10 18446744073709551615 1 ( 426 11 426 12 18446744073709551615 4 node 426 12 426 16 143 2 -> 426 16 426 18 18446744073709551615 4 kind 426 18 426 22 131 2 == 426 23 426 25 18446744073709551615 14 ExpressionKind 426 26 426 40 132 2 :: 426 40 426 42 18446744073709551615 8 NotEqual 426 42 426 50 166 1 ) 426 50 426 51 18446744073709551615 1 { 427 3 427 4 18446744073709551615 8 byteCode 428 4 428 12 57 1 . 428 12 428 13 36 9 push_back 428 13 428 22 36 1 ( 428 22 428 23 36 9 ne_double 428 23 428 32 198 1 ) 428 32 428 33 36 1 ; 428 33 428 34 18446744073709551615 1 } 429 3 429 4 18446744073709551615 4 else 430 3 430 7 18446744073709551615 1 { 431 3 431 4 18446744073709551615 5 throw 432 4 432 9 18446744073709551615 7 wstring 432 10 432 17 80 1 ( 432 17 432 18 81 36 L"wrong binary operation for double" 432 18 432 54 18446744073709551615 1 ) 432 54 432 55 81 1 ; 432 55 432 56 18446744073709551615 1 } 433 3 433 4 18446744073709551615 1 } 434 2 434 3 18446744073709551615 4 else 435 2 435 6 18446744073709551615 2 if 435 7 435 9 18446744073709551615 1 ( 435 10 435 11 18446744073709551615 4 node 435 11 435 15 143 2 -> 435 15 435 17 18446744073709551615 4 left 435 17 435 21 144 2 -> 435 21 435 23 18446744073709551615 4 type 435 23 435 27 130 1 . 435 27 435 28 139 9 IsBoolean 435 28 435 37 139 1 ( 435 37 435 38 139 1 ) 435 38 435 39 139 2 && 435 40 435 42 18446744073709551615 4 node 435 43 435 47 143 2 -> 435 47 435 49 18446744073709551615 5 right 435 49 435 54 145 2 -> 435 54 435 56 18446744073709551615 4 type 435 56 435 60 130 1 . 435 60 435 61 139 9 IsBoolean 435 61 435 70 139 1 ( 435 70 435 71 139 1 ) 435 71 435 72 139 1 ) 435 72 435 73 18446744073709551615 1 { 436 2 436 3 18446744073709551615 2 if 437 3 437 5 18446744073709551615 1 ( 437 6 437 7 18446744073709551615 4 node 437 7 437 11 143 2 -> 437 11 437 13 18446744073709551615 4 kind 437 13 437 17 131 2 == 437 18 437 20 18446744073709551615 14 ExpressionKind 437 21 437 35 132 2 :: 437 35 437 37 18446744073709551615 3 And 437 37 437 40 199 1 ) 437 40 437 41 18446744073709551615 1 { 438 3 438 4 18446744073709551615 8 byteCode 439 4 439 12 57 1 . 439 12 439 13 36 9 push_back 439 13 439 22 36 1 ( 439 22 439 23 36 11 logical_and 439 23 439 34 200 1 ) 439 34 439 35 36 1 ; 439 35 439 36 18446744073709551615 1 } 440 3 440 4 18446744073709551615 4 else 441 3 441 7 18446744073709551615 2 if 441 8 441 10 18446744073709551615 1 ( 441 11 441 12 18446744073709551615 4 node 441 12 441 16 143 2 -> 441 16 441 18 18446744073709551615 4 kind 441 18 441 22 131 2 == 441 23 441 25 18446744073709551615 14 ExpressionKind 441 26 441 40 132 2 :: 441 40 441 42 18446744073709551615 2 Or 441 42 441 44 201 1 ) 441 44 441 45 18446744073709551615 1 { 442 3 442 4 18446744073709551615 8 byteCode 443 4 443 12 57 1 . 443 12 443 13 36 9 push_back 443 13 443 22 36 1 ( 443 22 443 23 36 10 logical_or 443 23 443 33 202 1 ) 443 33 443 34 36 1 ; 443 34 443 35 18446744073709551615 1 } 444 3 444 4 18446744073709551615 4 else 445 3 445 7 18446744073709551615 2 if 445 8 445 10 18446744073709551615 1 ( 445 11 445 12 18446744073709551615 4 node 445 12 445 16 143 2 -> 445 16 445 18 18446744073709551615 4 kind 445 18 445 22 131 2 == 445 23 445 25 18446744073709551615 14 ExpressionKind 445 26 445 40 132 2 :: 445 40 445 42 18446744073709551615 5 Equal 445 42 445 47 164 1 ) 445 47 445 48 18446744073709551615 1 { 446 3 446 4 18446744073709551615 8 byteCode 447 4 447 12 57 1 . 447 12 447 13 36 9 push_back 447 13 447 22 36 1 ( 447 22 447 23 36 6 eq_int 447 23 447 29 165 1 ) 447 29 447 30 36 1 ; 447 30 447 31 18446744073709551615 1 } 448 3 448 4 18446744073709551615 4 else 449 3 449 7 18446744073709551615 2 if 449 8 449 10 18446744073709551615 1 ( 449 11 449 12 18446744073709551615 4 node 449 12 449 16 143 2 -> 449 16 449 18 18446744073709551615 4 kind 449 18 449 22 131 2 == 449 23 449 25 18446744073709551615 14 ExpressionKind 449 26 449 40 132 2 :: 449 40 449 42 18446744073709551615 8 NotEqual 449 42 449 50 166 1 ) 449 50 449 51 18446744073709551615 1 { 450 3 450 4 18446744073709551615 8 byteCode 451 4 451 12 57 1 . 451 12 451 13 36 9 push_back 451 13 451 22 36 1 ( 451 22 451 23 36 6 ne_int 451 23 451 29 167 1 ) 451 29 451 30 36 1 ; 451 30 451 31 18446744073709551615 1 } 452 3 452 4 18446744073709551615 4 else 453 3 453 7 18446744073709551615 1 { 454 3 454 4 18446744073709551615 5 throw 455 4 455 9 18446744073709551615 7 wstring 455 10 455 17 80 1 ( 455 17 455 18 81 37 L"wrong binary operation for boolean" 455 18 455 55 18446744073709551615 1 ) 455 55 455 56 81 1 ; 455 56 455 57 18446744073709551615 1 } 456 3 456 4 18446744073709551615 1 } 457 2 457 3 18446744073709551615 4 else 458 2 458 6 18446744073709551615 1 { 459 2 459 3 18446744073709551615 5 throw 460 3 460 8 18446744073709551615 7 wstring 460 9 460 16 80 1 ( 460 16 460 17 81 21 L"not supported type" 460 17 460 38 18446744073709551615 1 ) 460 38 460 39 81 1 ; 460 39 460 40 18446744073709551615 1 } 461 2 461 3 18446744073709551615 1 } 462 1 462 2 18446744073709551615 4 void 463 1 463 5 18446744073709551615 8 Compiler 463 6 463 14 4 2 :: 463 14 463 16 101 5 Visit 463 16 463 21 101 1 ( 463 21 463 22 101 16 AssignExpression 463 22 463 38 203 1 * 463 38 463 39 18446744073709551615 4 node 463 40 463 44 204 1 ) 463 44 463 45 101 1 { 464 1 464 2 18446744073709551615 4 node 465 2 465 6 204 2 -> 465 6 465 8 18446744073709551615 5 value 465 8 465 13 205 2 -> 465 13 465 15 31 6 Accept 465 15 465 21 31 1 ( 465 21 465 22 31 4 this 465 22 465 26 18446744073709551615 1 ) 465 26 465 27 31 1 ; 465 27 465 28 18446744073709551615 2 if 466 2 466 4 18446744073709551615 1 ( 466 5 466 6 18446744073709551615 4 node 466 6 466 10 204 2 -> 466 10 466 12 18446744073709551615 4 type 466 12 466 16 130 1 . 466 16 466 17 70 5 IsInt 466 17 466 22 70 1 ( 466 22 466 23 70 1 ) 466 23 466 24 70 1 ) 466 24 466 25 18446744073709551615 1 { 467 2 467 3 18446744073709551615 2 if 468 3 468 5 18446744073709551615 1 ( 468 6 468 7 18446744073709551615 4 node 468 7 468 11 204 2 -> 468 11 468 13 18446744073709551615 8 location 468 13 468 21 206 1 . 468 21 468 22 207 7 IsLocal 468 22 468 29 207 1 ( 468 29 468 30 207 1 ) 468 30 468 31 207 1 ) 468 31 468 32 18446744073709551615 1 { 469 3 469 4 18446744073709551615 17 // local variable 470 4 470 21 18446744073709551615 8 byteCode 471 4 471 12 57 1 . 471 12 471 13 36 9 push_back 471 13 471 22 36 1 ( 471 22 471 23 36 13 pop_local_int 471 23 471 36 71 1 ) 471 36 471 37 36 1 ; 471 37 471 38 18446744073709551615 8 byteCode 472 4 472 12 57 1 . 472 12 472 13 36 9 push_back 472 13 472 22 36 1 ( 472 22 472 23 36 4 node 472 23 472 27 204 2 -> 472 27 472 29 18446744073709551615 8 location 472 29 472 37 206 1 . 472 37 472 38 18446744073709551615 6 offset 472 38 472 44 68 1 ) 472 44 472 45 36 1 ; 472 45 472 46 18446744073709551615 1 } 473 3 473 4 18446744073709551615 4 else 474 3 474 7 18446744073709551615 1 { 475 3 475 4 18446744073709551615 8 byteCode 476 4 476 12 57 1 . 476 12 476 13 36 9 push_back 476 13 476 22 36 1 ( 476 22 476 23 36 13 pop_field_int 476 23 476 36 208 1 ) 476 36 476 37 36 1 ; 476 37 476 38 18446744073709551615 12 constantPool 477 4 477 16 59 1 . 477 16 477 17 36 9 push_back 477 17 477 26 36 1 ( 477 26 477 27 36 12 constant_int 477 27 477 39 109 1 ) 477 39 477 40 36 1 ; 477 40 477 41 18446744073709551615 12 BitConverter 478 4 478 16 110 2 :: 478 16 478 18 111 9 AppendInt 478 18 478 27 111 1 ( 478 27 478 28 111 12 constantPool 478 28 478 40 59 1 , 478 40 478 41 111 4 node 478 42 478 46 204 2 -> 478 46 478 48 18446744073709551615 8 location 478 48 478 56 206 1 . 478 56 478 57 18446744073709551615 5 index 478 57 478 62 209 1 ) 478 62 478 63 111 1 ; 478 63 478 64 18446744073709551615 8 byteCode 479 4 479 12 57 1 . 479 12 479 13 36 9 push_back 479 13 479 22 36 1 ( 479 22 479 23 36 14 constantsCount 479 23 479 37 60 1 ) 479 37 479 38 36 1 ; 479 38 479 39 18446744073709551615 14 constantsCount 480 4 480 18 60 2 ++ 480 18 480 20 18446744073709551615 1 ; 480 20 480 21 18446744073709551615 8 byteCode 481 4 481 12 57 1 . 481 12 481 13 36 9 push_back 481 13 481 22 36 1 ( 481 22 481 23 36 4 node 481 23 481 27 204 2 -> 481 27 481 29 18446744073709551615 8 location 481 29 481 37 206 1 . 481 37 481 38 18446744073709551615 6 offset 481 38 481 44 68 1 ) 481 44 481 45 36 1 ; 481 45 481 46 18446744073709551615 1 } 482 3 482 4 18446744073709551615 1 } 483 2 483 3 18446744073709551615 4 else 484 2 484 6 18446744073709551615 2 if 484 7 484 9 18446744073709551615 1 ( 484 10 484 11 18446744073709551615 4 node 484 11 484 15 204 2 -> 484 15 484 17 18446744073709551615 4 type 484 17 484 21 130 1 . 484 21 484 22 72 6 IsLong 484 22 484 28 72 1 ( 484 28 484 29 72 1 ) 484 29 484 30 72 1 ) 484 30 484 31 18446744073709551615 1 { 485 2 485 3 18446744073709551615 8 // To DO 486 3 486 11 18446744073709551615 1 } 487 2 487 3 18446744073709551615 1 } 488 1 488 2 18446744073709551615 4 void 489 1 489 5 18446744073709551615 8 Compiler 489 6 489 14 4 2 :: 489 14 489 16 101 5 Visit 489 16 489 21 101 1 ( 489 21 489 22 101 15 BlockExpression 489 22 489 37 210 1 * 489 37 489 38 18446744073709551615 4 node 489 39 489 43 211 1 ) 489 43 489 44 101 1 { 490 1 490 2 18446744073709551615 3 for 491 2 491 5 18446744073709551615 1 ( 491 6 491 7 18446744073709551615 4 auto 491 7 491 11 18446744073709551615 1 & 491 11 491 12 18446744073709551615 1 e 491 13 491 14 212 1 : 491 15 491 16 28 4 node 491 17 491 21 211 2 -> 491 21 491 23 18446744073709551615 11 expressions 491 23 491 34 213 1 ) 491 34 491 35 18446744073709551615 1 { 492 2 492 3 18446744073709551615 1 e 493 3 493 4 212 2 -> 493 4 493 6 31 6 Accept 493 6 493 12 31 1 ( 493 12 493 13 31 4 this 493 13 493 17 18446744073709551615 1 ) 493 17 493 18 31 1 ; 493 18 493 19 18446744073709551615 1 } 494 2 494 3 18446744073709551615 1 } 495 1 495 2 18446744073709551615 4 void 496 1 496 5 18446744073709551615 8 Compiler 496 6 496 14 4 2 :: 496 14 496 16 101 5 Visit 496 16 496 21 101 1 ( 496 21 496 22 101 16 IfThenExpression 496 22 496 38 214 1 * 496 38 496 39 18446744073709551615 4 node 496 40 496 44 215 1 ) 496 44 496 45 101 1 { 497 1 497 2 18446744073709551615 4 node 498 2 498 6 215 2 -> 498 6 498 8 18446744073709551615 9 condition 498 8 498 17 216 2 -> 498 17 498 19 31 6 Accept 498 19 498 25 31 1 ( 498 25 498 26 31 4 this 498 26 498 30 18446744073709551615 1 ) 498 30 498 31 31 1 ; 498 31 498 32 18446744073709551615 8 byteCode 499 2 499 10 57 1 . 499 10 499 11 36 9 push_back 499 11 499 20 36 1 ( 499 20 499 21 36 13 jump_if_false 499 21 499 34 217 1 ) 499 34 499 35 36 1 ; 499 35 499 36 18446744073709551615 7 int32_t 500 2 500 9 65 5 index 500 10 500 15 218 1 = 500 16 500 17 18446744073709551615 8 byteCode 500 18 500 26 57 1 . 500 26 500 27 39 4 size 500 27 500 31 39 1 ( 500 31 500 32 39 1 ) 500 32 500 33 39 1 ; 500 33 500 34 18446744073709551615 12 BitConverter 501 2 501 14 110 2 :: 501 14 501 16 219 12 AppendUShort 501 16 501 28 219 1 ( 501 28 501 29 219 8 byteCode 501 29 501 37 57 1 , 501 37 501 38 219 1 0 501 39 501 40 18446744073709551615 1 ) 501 40 501 41 219 1 ; 501 41 501 42 18446744073709551615 4 node 502 2 502 6 215 2 -> 502 6 502 8 18446744073709551615 6 ifTrue 502 8 502 14 220 2 -> 502 14 502 16 31 6 Accept 502 16 502 22 31 1 ( 502 22 502 23 31 4 this 502 23 502 27 18446744073709551615 1 ) 502 27 502 28 31 1 ; 502 28 502 29 18446744073709551615 7 int32_t 503 2 503 9 65 6 target 503 10 503 16 221 1 = 503 17 503 18 18446744073709551615 8 byteCode 503 19 503 27 57 1 . 503 27 503 28 39 4 size 503 28 503 32 39 1 ( 503 32 503 33 39 1 ) 503 33 503 34 39 1 ; 503 34 503 35 18446744073709551615 8 byteCode 504 2 504 10 57 1 . 504 10 504 11 222 2 at 504 11 504 13 222 1 ( 504 13 504 14 222 5 index 504 14 504 19 218 1 ) 504 19 504 20 222 1 = 504 21 504 22 18446744073709551615 6 target 504 23 504 29 221 1 % 504 30 504 31 18446744073709551615 3 256 504 32 504 35 18446744073709551615 1 ; 504 35 504 36 18446744073709551615 8 byteCode 505 2 505 10 57 1 . 505 10 505 11 222 2 at 505 11 505 13 222 1 ( 505 13 505 14 222 5 index 505 14 505 19 218 1 + 505 20 505 21 18446744073709551615 1 1 505 22 505 23 18446744073709551615 1 ) 505 23 505 24 222 1 = 505 25 505 26 18446744073709551615 6 target 505 27 505 33 221 1 / 505 34 505 35 18446744073709551615 3 256 505 36 505 39 18446744073709551615 1 ; 505 39 505 40 18446744073709551615 1 } 506 1 506 2 18446744073709551615 4 void 507 1 507 5 18446744073709551615 8 Compiler 507 6 507 14 4 2 :: 507 14 507 16 101 5 Visit 507 16 507 21 101 1 ( 507 21 507 22 101 20 IfThenElseExpression 507 22 507 42 223 1 * 507 42 507 43 18446744073709551615 4 node 507 44 507 48 224 1 ) 507 48 507 49 101 1 { 508 1 508 2 18446744073709551615 4 node 509 2 509 6 224 2 -> 509 6 509 8 18446744073709551615 9 condition 509 8 509 17 225 2 -> 509 17 509 19 31 6 Accept 509 19 509 25 31 1 ( 509 25 509 26 31 4 this 509 26 509 30 18446744073709551615 1 ) 509 30 509 31 31 1 ; 509 31 509 32 18446744073709551615 8 byteCode 510 2 510 10 57 1 . 510 10 510 11 36 9 push_back 510 11 510 20 36 1 ( 510 20 510 21 36 13 jump_if_false 510 21 510 34 217 1 ) 510 34 510 35 36 1 ; 510 35 510 36 18446744073709551615 7 int32_t 511 2 511 9 65 6 index1 511 10 511 16 226 1 = 511 17 511 18 18446744073709551615 8 byteCode 511 19 511 27 57 1 . 511 27 511 28 39 4 size 511 28 511 32 39 1 ( 511 32 511 33 39 1 ) 511 33 511 34 39 1 ; 511 34 511 35 18446744073709551615 12 BitConverter 512 2 512 14 110 2 :: 512 14 512 16 219 12 AppendUShort 512 16 512 28 219 1 ( 512 28 512 29 219 8 byteCode 512 29 512 37 57 1 , 512 37 512 38 219 1 0 512 39 512 40 18446744073709551615 1 ) 512 40 512 41 219 1 ; 512 41 512 42 18446744073709551615 4 node 514 2 514 6 224 2 -> 514 6 514 8 18446744073709551615 6 ifTrue 514 8 514 14 227 2 -> 514 14 514 16 31 6 Accept 514 16 514 22 31 1 ( 514 22 514 23 31 4 this 514 23 514 27 18446744073709551615 1 ) 514 27 514 28 31 1 ; 514 28 514 29 18446744073709551615 8 byteCode 515 2 515 10 57 1 . 515 10 515 11 36 9 push_back 515 11 515 20 36 1 ( 515 20 515 21 36 4 jump 515 21 515 25 228 1 ) 515 25 515 26 36 1 ; 515 26 515 27 18446744073709551615 7 int32_t 516 2 516 9 65 6 index2 516 10 516 16 229 1 = 516 17 516 18 18446744073709551615 8 byteCode 516 19 516 27 57 1 . 516 27 516 28 39 4 size 516 28 516 32 39 1 ( 516 32 516 33 39 1 ) 516 33 516 34 39 1 ; 516 34 516 35 18446744073709551615 12 BitConverter 517 2 517 14 110 2 :: 517 14 517 16 219 12 AppendUShort 517 16 517 28 219 1 ( 517 28 517 29 219 8 byteCode 517 29 517 37 57 1 , 517 37 517 38 219 1 0 517 39 517 40 18446744073709551615 1 ) 517 40 517 41 219 1 ; 517 41 517 42 18446744073709551615 7 int32_t 519 2 519 9 65 7 target1 519 10 519 17 230 1 = 519 18 519 19 18446744073709551615 8 byteCode 519 20 519 28 57 1 . 519 28 519 29 39 4 size 519 29 519 33 39 1 ( 519 33 519 34 39 1 ) 519 34 519 35 39 1 ; 519 35 519 36 18446744073709551615 8 byteCode 520 2 520 10 57 1 . 520 10 520 11 222 2 at 520 11 520 13 222 1 ( 520 13 520 14 222 6 index1 520 14 520 20 226 1 ) 520 20 520 21 222 1 = 520 22 520 23 18446744073709551615 7 target1 520 24 520 31 230 1 % 520 32 520 33 18446744073709551615 3 256 520 34 520 37 18446744073709551615 1 ; 520 37 520 38 18446744073709551615 8 byteCode 521 2 521 10 57 1 . 521 10 521 11 222 2 at 521 11 521 13 222 1 ( 521 13 521 14 222 6 index1 521 14 521 20 226 1 + 521 21 521 22 18446744073709551615 1 1 521 23 521 24 18446744073709551615 1 ) 521 24 521 25 222 1 = 521 26 521 27 18446744073709551615 7 target1 521 28 521 35 230 1 / 521 36 521 37 18446744073709551615 3 256 521 38 521 41 18446744073709551615 1 ; 521 41 521 42 18446744073709551615 4 node 522 2 522 6 224 2 -> 522 6 522 8 18446744073709551615 7 ifFalse 522 8 522 15 231 2 -> 522 15 522 17 31 6 Accept 522 17 522 23 31 1 ( 522 23 522 24 31 4 this 522 24 522 28 18446744073709551615 1 ) 522 28 522 29 31 1 ; 522 29 522 30 18446744073709551615 7 int32_t 523 2 523 9 65 7 target2 523 10 523 17 232 1 = 523 18 523 19 18446744073709551615 8 byteCode 523 20 523 28 57 1 . 523 28 523 29 39 4 size 523 29 523 33 39 1 ( 523 33 523 34 39 1 ) 523 34 523 35 39 1 ; 523 35 523 36 18446744073709551615 8 byteCode 524 2 524 10 57 1 . 524 10 524 11 222 2 at 524 11 524 13 222 1 ( 524 13 524 14 222 6 index2 524 14 524 20 229 1 ) 524 20 524 21 222 1 = 524 22 524 23 18446744073709551615 7 target2 524 24 524 31 232 1 % 524 32 524 33 18446744073709551615 3 256 524 34 524 37 18446744073709551615 1 ; 524 37 524 38 18446744073709551615 8 byteCode 525 2 525 10 57 1 . 525 10 525 11 222 2 at 525 11 525 13 222 1 ( 525 13 525 14 222 6 index2 525 14 525 20 229 1 + 525 21 525 22 18446744073709551615 1 1 525 23 525 24 18446744073709551615 1 ) 525 24 525 25 222 1 = 525 26 525 27 18446744073709551615 7 target2 525 28 525 35 232 1 / 525 36 525 37 18446744073709551615 3 256 525 38 525 41 18446744073709551615 1 ; 525 41 525 42 18446744073709551615 1 } 526 1 526 2 18446744073709551615 4 void 527 1 527 5 18446744073709551615 8 Compiler 527 6 527 14 4 2 :: 527 14 527 16 101 5 Visit 527 16 527 21 101 1 ( 527 21 527 22 101 14 CallExpression 527 22 527 36 233 1 * 527 36 527 37 18446744073709551615 4 node 527 38 527 42 234 1 ) 527 42 527 43 101 1 { 528 1 528 2 18446744073709551615 3 for 529 2 529 5 18446744073709551615 1 ( 529 6 529 7 18446744073709551615 4 auto 529 7 529 11 18446744073709551615 1 & 529 11 529 12 18446744073709551615 3 arg 529 13 529 16 235 1 : 529 17 529 18 28 4 node 529 19 529 23 234 2 -> 529 23 529 25 18446744073709551615 9 arguments 529 25 529 34 236 1 ) 529 34 529 35 18446744073709551615 1 { 530 2 530 3 18446744073709551615 3 arg 531 3 531 6 235 2 -> 531 6 531 8 31 6 Accept 531 8 531 14 31 1 ( 531 14 531 15 31 4 this 531 15 531 19 18446744073709551615 1 ) 531 19 531 20 31 1 ; 531 20 531 21 18446744073709551615 1 } 532 2 532 3 18446744073709551615 4 node 533 2 533 6 234 2 -> 533 6 533 8 18446744073709551615 8 function 533 8 533 16 237 2 -> 533 16 533 18 31 6 Accept 533 18 533 24 31 1 ( 533 24 533 25 31 4 this 533 25 533 29 18446744073709551615 1 ) 533 29 533 30 31 1 ; 533 30 533 31 18446744073709551615 8 byteCode 534 2 534 10 57 1 . 534 10 534 11 36 9 push_back 534 11 534 20 36 1 ( 534 20 534 21 36 6 invoke 534 21 534 27 238 1 ) 534 27 534 28 36 1 ; 534 28 534 29 18446744073709551615 1 } 535 1 535 2 18446744073709551615 4 void 536 1 536 5 18446744073709551615 8 Compiler 536 6 536 14 4 2 :: 536 14 536 16 101 5 Visit 536 16 536 21 101 1 ( 536 21 536 22 101 18 VariableExpression 536 22 536 40 239 1 * 536 40 536 41 18446744073709551615 4 node 536 42 536 46 240 1 ) 536 46 536 47 101 1 { 537 1 537 2 18446744073709551615 2 if 538 2 538 4 18446744073709551615 1 ( 538 5 538 6 18446744073709551615 4 node 538 6 538 10 240 2 -> 538 10 538 12 18446744073709551615 8 location 538 12 538 20 241 1 . 538 20 538 21 207 7 IsLocal 538 21 538 28 207 1 ( 538 28 538 29 207 1 ) 538 29 538 30 207 1 ) 538 30 538 31 18446744073709551615 1 { 539 2 539 3 18446744073709551615 2 if 540 3 540 5 18446744073709551615 1 ( 540 6 540 7 18446744073709551615 4 node 540 7 540 11 240 2 -> 540 11 540 13 18446744073709551615 4 type 540 13 540 17 130 1 . 540 17 540 18 70 5 IsInt 540 18 540 23 70 1 ( 540 23 540 24 70 1 ) 540 24 540 25 70 1 ) 540 25 540 26 18446744073709551615 1 { 541 3 541 4 18446744073709551615 8 byteCode 542 4 542 12 57 1 . 542 12 542 13 36 9 push_back 542 13 542 22 36 1 ( 542 22 542 23 36 14 push_local_int 542 23 542 37 242 1 ) 542 37 542 38 36 1 ; 542 38 542 39 18446744073709551615 8 byteCode 543 4 543 12 57 1 . 543 12 543 13 36 9 push_back 543 13 543 22 36 1 ( 543 22 543 23 36 4 node 543 23 543 27 240 2 -> 543 27 543 29 18446744073709551615 8 location 543 29 543 37 241 1 . 543 37 543 38 18446744073709551615 6 offset 543 38 543 44 68 1 ) 543 44 543 45 36 1 ; 543 45 543 46 18446744073709551615 1 } 544 3 544 4 18446744073709551615 4 else 545 3 545 7 18446744073709551615 2 if 545 8 545 10 18446744073709551615 1 ( 545 11 545 12 18446744073709551615 4 node 545 12 545 16 240 2 -> 545 16 545 18 18446744073709551615 4 type 545 18 545 22 130 1 . 545 22 545 23 72 6 IsLong 545 23 545 29 72 1 ( 545 29 545 30 72 1 ) 545 30 545 31 72 1 ) 545 31 545 32 18446744073709551615 1 { 546 3 546 4 18446744073709551615 8 byteCode 547 4 547 12 57 1 . 547 12 547 13 36 9 push_back 547 13 547 22 36 1 ( 547 22 547 23 36 15 push_local_long 547 23 547 38 243 1 ) 547 38 547 39 36 1 ; 547 39 547 40 18446744073709551615 8 byteCode 548 4 548 12 57 1 . 548 12 548 13 36 9 push_back 548 13 548 22 36 1 ( 548 22 548 23 36 4 node 548 23 548 27 240 2 -> 548 27 548 29 18446744073709551615 8 location 548 29 548 37 241 1 . 548 37 548 38 18446744073709551615 6 offset 548 38 548 44 68 1 ) 548 44 548 45 36 1 ; 548 45 548 46 18446744073709551615 1 } 549 3 549 4 18446744073709551615 4 else 550 3 550 7 18446744073709551615 2 if 550 8 550 10 18446744073709551615 1 ( 550 11 550 12 18446744073709551615 4 node 550 12 550 16 240 2 -> 550 16 550 18 18446744073709551615 4 type 550 18 550 22 130 1 . 550 22 550 23 74 7 IsFloat 550 23 550 30 74 1 ( 550 30 550 31 74 1 ) 550 31 550 32 74 1 ) 550 32 550 33 18446744073709551615 1 { 551 3 551 4 18446744073709551615 8 byteCode 552 4 552 12 57 1 . 552 12 552 13 36 9 push_back 552 13 552 22 36 1 ( 552 22 552 23 36 16 push_local_float 552 23 552 39 244 1 ) 552 39 552 40 36 1 ; 552 40 552 41 18446744073709551615 8 byteCode 553 4 553 12 57 1 . 553 12 553 13 36 9 push_back 553 13 553 22 36 1 ( 553 22 553 23 36 4 node 553 23 553 27 240 2 -> 553 27 553 29 18446744073709551615 8 location 553 29 553 37 241 1 . 553 37 553 38 18446744073709551615 6 offset 553 38 553 44 68 1 ) 553 44 553 45 36 1 ; 553 45 553 46 18446744073709551615 1 } 554 3 554 4 18446744073709551615 4 else 555 3 555 7 18446744073709551615 2 if 555 8 555 10 18446744073709551615 1 ( 555 11 555 12 18446744073709551615 4 node 555 12 555 16 240 2 -> 555 16 555 18 18446744073709551615 4 type 555 18 555 22 130 1 . 555 22 555 23 76 8 IsDouble 555 23 555 31 76 1 ( 555 31 555 32 76 1 ) 555 32 555 33 76 1 ) 555 33 555 34 18446744073709551615 1 { 556 3 556 4 18446744073709551615 8 byteCode 557 4 557 12 57 1 . 557 12 557 13 36 9 push_back 557 13 557 22 36 1 ( 557 22 557 23 36 14 push_local_int 557 23 557 37 242 1 ) 557 37 557 38 36 1 ; 557 38 557 39 18446744073709551615 8 byteCode 558 4 558 12 57 1 . 558 12 558 13 36 9 push_back 558 13 558 22 36 1 ( 558 22 558 23 36 4 node 558 23 558 27 240 2 -> 558 27 558 29 18446744073709551615 8 location 558 29 558 37 241 1 . 558 37 558 38 18446744073709551615 6 offset 558 38 558 44 68 1 ) 558 44 558 45 36 1 ; 558 45 558 46 18446744073709551615 1 } 559 3 559 4 18446744073709551615 4 else 560 3 560 7 18446744073709551615 1 { 561 3 561 4 18446744073709551615 5 throw 562 4 562 9 18446744073709551615 23 NotImplementedException 562 10 562 33 245 1 ( 562 33 562 34 245 1 ) 562 34 562 35 245 1 ; 562 35 562 36 18446744073709551615 1 } 563 3 563 4 18446744073709551615 1 } 564 2 564 3 18446744073709551615 4 else 565 2 565 6 18446744073709551615 1 { 566 2 566 3 18446744073709551615 2 if 567 3 567 5 18446744073709551615 1 ( 567 6 567 7 18446744073709551615 4 node 567 7 567 11 240 2 -> 567 11 567 13 18446744073709551615 4 type 567 13 567 17 130 1 . 567 17 567 18 246 10 IsFunction 567 18 567 28 246 1 ( 567 28 567 29 246 1 ) 567 29 567 30 246 1 ) 567 30 567 31 18446744073709551615 1 { 568 3 568 4 18446744073709551615 8 byteCode 569 4 569 12 57 1 . 569 12 569 13 36 9 push_back 569 13 569 22 36 1 ( 569 22 569 23 36 13 push_function 569 23 569 36 247 1 ) 569 36 569 37 36 1 ; 569 37 569 38 18446744073709551615 12 constantPool 570 4 570 16 59 1 . 570 16 570 17 36 9 push_back 570 17 570 26 36 1 ( 570 26 570 27 36 12 constant_int 570 27 570 39 109 1 ) 570 39 570 40 36 1 ; 570 40 570 41 18446744073709551615 12 BitConverter 571 4 571 16 110 2 :: 571 16 571 18 111 9 AppendInt 571 18 571 27 111 1 ( 571 27 571 28 111 12 constantPool 571 28 571 40 59 1 , 571 40 571 41 111 4 node 571 42 571 46 240 2 -> 571 46 571 48 18446744073709551615 8 location 571 48 571 56 241 1 . 571 56 571 57 18446744073709551615 5 index 571 57 571 62 209 1 ) 571 62 571 63 111 1 ; 571 63 571 64 18446744073709551615 8 byteCode 572 4 572 12 57 1 . 572 12 572 13 36 9 push_back 572 13 572 22 36 1 ( 572 22 572 23 36 14 constantsCount 572 23 572 37 60 1 ) 572 37 572 38 36 1 ; 572 38 572 39 18446744073709551615 14 constantsCount 573 4 573 18 60 2 ++ 573 18 573 20 18446744073709551615 1 ; 573 20 573 21 18446744073709551615 8 byteCode 574 4 574 12 57 1 . 574 12 574 13 36 9 push_back 574 13 574 22 36 1 ( 574 22 574 23 36 4 node 574 23 574 27 240 2 -> 574 27 574 29 18446744073709551615 8 location 574 29 574 37 241 1 . 574 37 574 38 18446744073709551615 6 offset 574 38 574 44 68 1 ) 574 44 574 45 36 1 ; 574 45 574 46 18446744073709551615 1 } 575 3 575 4 18446744073709551615 4 else 576 3 576 7 18446744073709551615 1 { 577 3 577 4 18446744073709551615 5 throw 578 4 578 9 18446744073709551615 23 NotImplementedException 578 10 578 33 245 1 ( 578 33 578 34 245 1 ) 578 34 578 35 245 1 ; 578 35 578 36 18446744073709551615 1 } 579 3 579 4 18446744073709551615 1 } 580 2 580 3 18446744073709551615 1 } 581 1 581 2 18446744073709551615 4 void 582 1 582 5 18446744073709551615 8 Compiler 582 6 582 14 4 2 :: 582 14 582 16 101 5 Visit 582 16 582 21 101 1 ( 582 21 582 22 101 16 ReturnExpression 582 22 582 38 248 1 * 582 38 582 39 18446744073709551615 4 node 582 40 582 44 249 1 ) 582 44 582 45 101 1 { 583 1 583 2 18446744073709551615 4 node 584 2 584 6 249 2 -> 584 6 584 8 18446744073709551615 5 value 584 8 584 13 250 2 -> 584 13 584 15 31 6 Accept 584 15 584 21 31 1 ( 584 21 584 22 31 4 this 584 22 584 26 18446744073709551615 1 ) 584 26 584 27 31 1 ; 584 27 584 28 18446744073709551615 2 if 585 2 585 4 18446744073709551615 1 ( 585 5 585 6 18446744073709551615 4 node 585 6 585 10 249 2 -> 585 10 585 12 18446744073709551615 4 type 585 12 585 16 130 1 . 585 16 585 17 70 5 IsInt 585 17 585 22 70 1 ( 585 22 585 23 70 1 ) 585 23 585 24 70 1 ) 585 24 585 25 18446744073709551615 1 { 586 2 586 3 18446744073709551615 8 byteCode 587 3 587 11 57 1 . 587 11 587 12 36 9 push_back 587 12 587 21 36 1 ( 587 21 587 22 36 10 return_int 587 22 587 32 251 1 ) 587 32 587 33 36 1 ; 587 33 587 34 18446744073709551615 1 } 588 2 588 3 18446744073709551615 4 else 589 2 589 6 18446744073709551615 2 if 589 7 589 9 18446744073709551615 1 ( 589 10 589 11 18446744073709551615 4 node 589 11 589 15 249 2 -> 589 15 589 17 18446744073709551615 4 type 589 17 589 21 130 1 . 589 21 589 22 72 6 IsLong 589 22 589 28 72 1 ( 589 28 589 29 72 1 ) 589 29 589 30 72 1 ) 589 30 589 31 18446744073709551615 1 { 590 2 590 3 18446744073709551615 8 byteCode 591 3 591 11 57 1 . 591 11 591 12 36 9 push_back 591 12 591 21 36 1 ( 591 21 591 22 36 11 return_long 591 22 591 33 252 1 ) 591 33 591 34 36 1 ; 591 34 591 35 18446744073709551615 1 } 592 2 592 3 18446744073709551615 4 else 593 2 593 6 18446744073709551615 2 if 593 7 593 9 18446744073709551615 1 ( 593 10 593 11 18446744073709551615 4 node 593 11 593 15 249 2 -> 593 15 593 17 18446744073709551615 4 type 593 17 593 21 130 1 . 593 21 593 22 74 7 IsFloat 593 22 593 29 74 1 ( 593 29 593 30 74 1 ) 593 30 593 31 74 1 ) 593 31 593 32 18446744073709551615 1 { 594 2 594 3 18446744073709551615 8 byteCode 595 3 595 11 57 1 . 595 11 595 12 36 9 push_back 595 12 595 21 36 1 ( 595 21 595 22 36 12 return_float 595 22 595 34 253 1 ) 595 34 595 35 36 1 ; 595 35 595 36 18446744073709551615 1 } 596 2 596 3 18446744073709551615 4 else 597 2 597 6 18446744073709551615 2 if 597 7 597 9 18446744073709551615 1 ( 597 10 597 11 18446744073709551615 4 node 597 11 597 15 249 2 -> 597 15 597 17 18446744073709551615 4 type 597 17 597 21 130 1 . 597 21 597 22 76 8 IsDouble 597 22 597 30 76 1 ( 597 30 597 31 76 1 ) 597 31 597 32 76 1 ) 597 32 597 33 18446744073709551615 1 { 598 2 598 3 18446744073709551615 8 byteCode 599 3 599 11 57 1 . 599 11 599 12 36 9 push_back 599 12 599 21 36 1 ( 599 21 599 22 36 13 return_double 599 22 599 35 254 1 ) 599 35 599 36 36 1 ; 599 36 599 37 18446744073709551615 1 } 600 2 600 3 18446744073709551615 4 else 601 2 601 6 18446744073709551615 1 { 602 2 602 3 18446744073709551615 5 throw 603 3 603 8 18446744073709551615 7 wstring 603 9 603 16 80 1 ( 603 16 603 17 81 28 L"not supported return type" 603 17 603 45 18446744073709551615 1 ) 603 45 603 46 81 1 ; 603 46 603 47 18446744073709551615 1 } 604 2 604 3 18446744073709551615 1 } 605 1 605 2 18446744073709551615 4 void 606 1 606 5 18446744073709551615 8 Compiler 606 6 606 14 4 2 :: 606 14 606 16 101 5 Visit 606 16 606 21 101 1 ( 606 21 606 22 101 15 WhileExpression 606 22 606 37 255 1 * 606 37 606 38 18446744073709551615 4 node 606 39 606 43 256 1 ) 606 43 606 44 101 1 { 607 1 607 2 18446744073709551615 7 int32_t 608 2 608 9 65 6 index1 608 10 608 16 257 1 = 608 17 608 18 18446744073709551615 8 byteCode 608 19 608 27 57 1 . 608 27 608 28 39 4 size 608 28 608 32 39 1 ( 608 32 608 33 39 1 ) 608 33 608 34 39 1 ; 608 34 608 35 18446744073709551615 4 node 609 2 609 6 256 2 -> 609 6 609 8 18446744073709551615 9 condition 609 8 609 17 258 2 -> 609 17 609 19 31 6 Accept 609 19 609 25 31 1 ( 609 25 609 26 31 4 this 609 26 609 30 18446744073709551615 1 ) 609 30 609 31 31 1 ; 609 31 609 32 18446744073709551615 8 byteCode 610 2 610 10 57 1 . 610 10 610 11 36 9 push_back 610 11 610 20 36 1 ( 610 20 610 21 36 13 jump_if_false 610 21 610 34 217 1 ) 610 34 610 35 36 1 ; 610 35 610 36 18446744073709551615 7 int32_t 611 2 611 9 65 6 index2 611 10 611 16 259 1 = 611 17 611 18 18446744073709551615 8 byteCode 611 19 611 27 57 1 . 611 27 611 28 39 4 size 611 28 611 32 39 1 ( 611 32 611 33 39 1 ) 611 33 611 34 39 1 ; 611 34 611 35 18446744073709551615 12 BitConverter 612 2 612 14 110 2 :: 612 14 612 16 219 12 AppendUShort 612 16 612 28 219 1 ( 612 28 612 29 219 8 byteCode 612 29 612 37 57 1 , 612 37 612 38 219 1 0 612 39 612 40 18446744073709551615 1 ) 612 40 612 41 219 1 ; 612 41 612 42 18446744073709551615 4 node 613 2 613 6 256 2 -> 613 6 613 8 18446744073709551615 4 body 613 8 613 12 260 2 -> 613 12 613 14 31 6 Accept 613 14 613 20 31 1 ( 613 20 613 21 31 4 this 613 21 613 25 18446744073709551615 1 ) 613 25 613 26 31 1 ; 613 26 613 27 18446744073709551615 8 byteCode 614 2 614 10 57 1 . 614 10 614 11 36 9 push_back 614 11 614 20 36 1 ( 614 20 614 21 36 4 jump 614 21 614 25 228 1 ) 614 25 614 26 36 1 ; 614 26 614 27 18446744073709551615 12 BitConverter 615 2 615 14 110 2 :: 615 14 615 16 219 12 AppendUShort 615 16 615 28 219 1 ( 615 28 615 29 219 8 byteCode 615 29 615 37 57 1 , 615 37 615 38 219 6 index1 615 39 615 45 257 1 ) 615 45 615 46 219 1 ; 615 46 615 47 18446744073709551615 7 int32_t 616 2 616 9 65 6 target 616 10 616 16 261 1 = 616 17 616 18 18446744073709551615 8 byteCode 616 19 616 27 57 1 . 616 27 616 28 39 4 size 616 28 616 32 39 1 ( 616 32 616 33 39 1 ) 616 33 616 34 39 1 ; 616 34 616 35 18446744073709551615 8 byteCode 617 2 617 10 57 1 . 617 10 617 11 222 2 at 617 11 617 13 222 1 ( 617 13 617 14 222 6 index2 617 14 617 20 259 1 ) 617 20 617 21 222 1 = 617 22 617 23 18446744073709551615 6 target 617 24 617 30 261 1 % 617 31 617 32 18446744073709551615 3 256 617 33 617 36 18446744073709551615 1 ; 617 36 617 37 18446744073709551615 8 byteCode 618 2 618 10 57 1 . 618 10 618 11 222 2 at 618 11 618 13 222 1 ( 618 13 618 14 222 6 index2 618 14 618 20 259 1 + 618 21 618 22 18446744073709551615 1 1 618 23 618 24 18446744073709551615 1 ) 618 24 618 25 222 1 = 618 26 618 27 18446744073709551615 6 target 618 28 618 34 261 1 / 618 35 618 36 18446744073709551615 3 256 618 37 618 40 18446744073709551615 1 ; 618 40 618 41 18446744073709551615 1 } 619 1 619 2 18446744073709551615 4 void 620 1 620 5 18446744073709551615 8 Compiler 620 6 620 14 4 2 :: 620 14 620 16 101 5 Visit 620 16 620 21 101 1 ( 620 21 620 22 101 13 DotExpression 620 22 620 35 262 1 * 620 35 620 36 18446744073709551615 4 node 620 37 620 41 263 1 ) 620 41 620 42 101 1 { 621 1 621 2 18446744073709551615 4 Type 622 2 622 6 264 1 & 622 6 622 7 18446744073709551615 7 objType 622 8 622 15 265 1 = 622 16 622 17 18446744073709551615 4 node 622 18 622 22 263 2 -> 622 22 622 24 18446744073709551615 6 object 622 24 622 30 266 2 -> 622 30 622 32 18446744073709551615 4 type 622 32 622 36 130 1 ; 622 36 622 37 18446744073709551615 2 if 623 2 623 4 18446744073709551615 1 ( 623 5 623 6 18446744073709551615 7 objType 623 6 623 13 265 1 . 623 13 623 14 267 8 IsModule 623 14 623 22 267 1 ( 623 22 623 23 267 1 ) 623 23 623 24 267 1 ) 623 24 623 25 18446744073709551615 1 { 624 2 624 3 18446744073709551615 2 if 625 3 625 5 18446744073709551615 1 ( 625 6 625 7 18446744073709551615 4 node 625 7 625 11 263 2 -> 625 11 625 13 18446744073709551615 5 value 625 13 625 18 268 1 . 625 18 625 19 107 4 type 625 19 625 23 107 1 ( 625 23 625 24 107 1 ) 625 24 625 25 107 2 == 625 26 625 28 108 6 typeid 625 29 625 35 18446744073709551615 1 ( 625 35 625 36 18446744073709551615 8 Function 625 36 625 44 55 1 ) 625 44 625 45 18446744073709551615 1 ) 625 45 625 46 18446744073709551615 1 { 626 3 626 4 18446744073709551615 8 Function 627 4 627 12 55 1 f 627 13 627 14 269 1 = 627 15 627 16 18446744073709551615 8 any_cast 627 17 627 25 112 1 < 627 25 627 26 112 8 Function 627 26 627 34 55 1 > 627 34 627 35 112 1 ( 627 35 627 36 112 4 node 627 36 627 40 263 2 -> 627 40 627 42 18446744073709551615 5 value 627 42 627 47 268 1 ) 627 47 627 48 112 1 ; 627 48 627 49 18446744073709551615 8 byteCode 628 4 628 12 57 1 . 628 12 628 13 36 9 push_back 628 13 628 22 36 1 ( 628 22 628 23 36 13 push_function 628 23 628 36 247 1 ) 628 36 628 37 36 1 ; 628 37 628 38 18446744073709551615 12 constantPool 629 4 629 16 59 1 . 629 16 629 17 36 9 push_back 629 17 629 26 36 1 ( 629 26 629 27 36 12 constant_int 629 27 629 39 109 1 ) 629 39 629 40 36 1 ; 629 40 629 41 18446744073709551615 12 BitConverter 630 4 630 16 110 2 :: 630 16 630 18 111 9 AppendInt 630 18 630 27 111 1 ( 630 27 630 28 111 12 constantPool 630 28 630 40 59 1 , 630 40 630 41 111 1 f 630 42 630 43 269 1 . 630 43 630 44 18446744073709551615 8 location 630 44 630 52 85 1 . 630 52 630 53 18446744073709551615 5 index 630 53 630 58 209 1 ) 630 58 630 59 111 1 ; 630 59 630 60 18446744073709551615 8 byteCode 631 4 631 12 57 1 . 631 12 631 13 36 9 push_back 631 13 631 22 36 1 ( 631 22 631 23 36 14 constantsCount 631 23 631 37 60 1 ) 631 37 631 38 36 1 ; 631 38 631 39 18446744073709551615 14 constantsCount 632 4 632 18 60 2 ++ 632 18 632 20 18446744073709551615 1 ; 632 20 632 21 18446744073709551615 8 byteCode 633 4 633 12 57 1 . 633 12 633 13 36 9 push_back 633 13 633 22 36 1 ( 633 22 633 23 36 1 f 633 23 633 24 269 1 . 633 24 633 25 18446744073709551615 8 location 633 25 633 33 85 1 . 633 33 633 34 18446744073709551615 6 offset 633 34 633 40 68 1 ) 633 40 633 41 36 1 ; 633 41 633 42 18446744073709551615 1 } 634 3 634 4 18446744073709551615 4 else 635 3 635 7 18446744073709551615 1 { 636 3 636 4 18446744073709551615 5 throw 637 4 637 9 18446744073709551615 23 NotImplementedException 637 10 637 33 245 1 ( 637 33 637 34 245 1 ) 637 34 637 35 245 1 ; 637 35 637 36 18446744073709551615 1 } 638 3 638 4 18446744073709551615 1 } 639 2 639 3 18446744073709551615 4 else 640 2 640 6 18446744073709551615 1 { 641 2 641 3 18446744073709551615 5 throw 642 3 642 8 18446744073709551615 23 NotImplementedException 642 9 642 32 245 1 ( 642 32 642 33 245 1 ) 642 33 642 34 245 1 ; 642 34 642 35 18446744073709551615 1 } 643 2 643 3 18446744073709551615 1 } 644 1 644 2 18446744073709551615 14 CompiledModule 645 1 645 15 37 2 :: 645 15 645 17 37 14 CompiledModule 645 17 645 31 37 1 ( 645 31 645 32 37 1 ) 645 32 645 33 37 1 { 646 1 646 2 18446744073709551615 1 } 647 1 647 2 18446744073709551615 14 CompiledModule 648 1 648 15 37 2 :: 648 15 648 17 37 14 CompiledModule 648 17 648 31 37 1 ( 648 31 648 32 37 7 int32_t 648 32 648 39 65 5 index 648 40 648 45 270 1 , 648 45 648 46 37 7 int32_t 648 47 648 54 65 10 fieldCount 648 55 648 65 271 1 , 648 65 648 66 37 6 vector 649 11 649 17 24 1 < 649 17 649 18 18446744073709551615 16 CompiledFunction 649 18 649 34 25 1 > 649 34 649 35 18446744073709551615 9 functions 649 36 649 45 272 1 ) 649 45 649 46 37 1 : 650 2 650 3 37 5 index 650 4 650 9 273 1 { 650 9 650 10 18446744073709551615 5 index 650 10 650 15 270 1 } 650 15 650 16 18446744073709551615 1 , 651 2 651 3 37 10 fieldCount 651 4 651 14 274 1 { 651 14 651 15 18446744073709551615 10 fieldCount 651 15 651 25 271 1 } 651 25 651 26 18446744073709551615 1 , 652 2 652 3 37 9 functions 652 4 652 13 275 1 { 652 13 652 14 24 9 functions 652 14 652 23 272 1 } 652 23 652 24 24 1 { 653 1 653 2 18446744073709551615 1 } 654 1 654 2 18446744073709551615 8 ByteCode 655 1 655 9 276 14 CompiledModule 655 10 655 24 37 2 :: 655 24 655 26 277 12 EmitByteCode 655 26 655 38 277 1 ( 655 38 655 39 277 1 ) 655 39 655 40 277 1 { 656 1 656 2 18446744073709551615 8 ByteCode 657 2 657 10 276 4 code 657 11 657 15 278 1 ; 657 15 657 16 18446744073709551615 12 BitConverter 658 2 658 14 110 2 :: 658 14 658 16 111 9 AppendInt 658 16 658 25 111 1 ( 658 25 658 26 111 4 code 658 26 658 30 278 1 , 658 30 658 31 111 5 index 658 32 658 37 273 1 ) 658 37 658 38 111 1 ; 658 38 658 39 18446744073709551615 4 code 659 2 659 6 278 1 . 659 6 659 7 36 9 push_back 659 7 659 16 36 1 ( 659 16 659 17 36 10 fieldCount 659 17 659 27 274 1 ) 659 27 659 28 36 1 ; 659 28 659 29 18446744073709551615 4 code 660 2 660 6 278 1 . 660 6 660 7 36 9 push_back 660 7 660 16 36 1 ( 660 16 660 17 36 9 functions 660 17 660 26 275 1 . 660 26 660 27 39 4 size 660 27 660 31 39 1 ( 660 31 660 32 39 1 ) 660 32 660 33 39 1 ) 660 33 660 34 36 1 ; 660 34 660 35 18446744073709551615 3 for 661 2 661 5 18446744073709551615 1 ( 661 6 661 7 18446744073709551615 4 auto 661 7 661 11 18446744073709551615 1 & 661 11 661 12 18446744073709551615 8 function 661 13 661 21 279 1 : 661 22 661 23 28 9 functions 661 24 661 33 275 1 ) 661 33 661 34 18446744073709551615 1 { 662 2 662 3 18446744073709551615 3 for 663 3 663 6 18446744073709551615 1 ( 663 7 663 8 18446744073709551615 4 auto 663 8 663 12 18446744073709551615 1 b 663 13 663 14 280 1 : 663 15 663 16 28 8 function 663 17 663 25 279 1 . 663 25 663 26 281 12 EmitByteCode 663 26 663 38 281 1 ( 663 38 663 39 281 1 ) 663 39 663 40 281 1 ) 663 40 663 41 18446744073709551615 1 { 664 3 664 4 18446744073709551615 4 code 665 4 665 8 278 1 . 665 8 665 9 36 9 push_back 665 9 665 18 36 1 ( 665 18 665 19 36 1 b 665 19 665 20 280 1 ) 665 20 665 21 36 1 ; 665 21 665 22 18446744073709551615 1 } 666 3 666 4 18446744073709551615 1 } 667 2 667 3 18446744073709551615 6 return 668 2 668 8 18446744073709551615 4 code 668 9 668 13 278 1 ; 668 13 668 14 18446744073709551615 1 } 669 1 669 2 18446744073709551615 13 CompiledClass 670 1 670 14 50 2 :: 670 14 670 16 50 13 CompiledClass 670 16 670 29 50 1 ( 670 29 670 30 50 1 ) 670 30 670 31 50 1 { 671 1 671 2 18446744073709551615 1 } 672 1 672 2 18446744073709551615 13 CompiledClass 673 1 673 14 50 2 :: 673 14 673 16 50 13 CompiledClass 673 16 673 29 50 1 ( 673 29 673 30 50 7 int32_t 673 30 673 37 65 5 index 673 38 673 43 282 1 , 673 43 673 44 50 7 int32_t 673 45 673 52 65 10 fieldCount 673 53 673 63 283 1 , 673 63 673 64 50 6 vector 674 9 674 15 24 1 < 674 15 674 16 18446744073709551615 16 CompiledFunction 674 16 674 32 25 1 > 674 32 674 33 18446744073709551615 7 methods 674 34 674 41 284 1 ) 674 41 674 42 50 1 : 675 2 675 3 50 5 index 675 4 675 9 285 1 { 675 9 675 10 18446744073709551615 5 index 675 10 675 15 282 1 } 675 15 675 16 18446744073709551615 1 , 676 2 676 3 50 10 fieldCount 676 4 676 14 286 1 { 676 14 676 15 18446744073709551615 10 fieldCount 676 15 676 25 283 1 } 676 25 676 26 18446744073709551615 1 , 677 2 677 3 50 7 methods 677 4 677 11 287 1 { 677 11 677 12 24 7 methods 677 12 677 19 284 1 } 677 19 677 20 24 1 { 678 1 678 2 18446744073709551615 1 } 679 1 679 2 18446744073709551615 8 ByteCode 680 1 680 9 276 13 CompiledClass 680 10 680 23 50 2 :: 680 23 680 25 288 12 EmitByteCode 680 25 680 37 288 1 ( 680 37 680 38 288 1 ) 680 38 680 39 288 1 { 681 1 681 2 18446744073709551615 8 ByteCode 682 2 682 10 276 4 code 682 11 682 15 289 1 ; 682 15 682 16 18446744073709551615 4 code 683 2 683 6 289 1 . 683 6 683 7 36 9 push_back 683 7 683 16 36 1 ( 683 16 683 17 36 5 index 683 17 683 22 285 1 ) 683 22 683 23 36 1 ; 683 23 683 24 18446744073709551615 4 code 684 2 684 6 289 1 . 684 6 684 7 36 9 push_back 684 7 684 16 36 1 ( 684 16 684 17 36 10 fieldCount 684 17 684 27 286 1 ) 684 27 684 28 36 1 ; 684 28 684 29 18446744073709551615 4 code 685 2 685 6 289 1 . 685 6 685 7 36 9 push_back 685 7 685 16 36 1 ( 685 16 685 17 36 7 methods 685 17 685 24 287 1 . 685 24 685 25 39 4 size 685 25 685 29 39 1 ( 685 29 685 30 39 1 ) 685 30 685 31 39 1 ) 685 31 685 32 36 1 ; 685 32 685 33 18446744073709551615 3 for 686 2 686 5 18446744073709551615 1 ( 686 6 686 7 18446744073709551615 4 auto 686 7 686 11 18446744073709551615 1 & 686 11 686 12 18446744073709551615 6 method 686 13 686 19 290 1 : 686 20 686 21 28 7 methods 686 22 686 29 287 1 ) 686 29 686 30 18446744073709551615 1 { 687 2 687 3 18446744073709551615 3 for 688 3 688 6 18446744073709551615 1 ( 688 7 688 8 18446744073709551615 4 auto 688 8 688 12 18446744073709551615 1 b 688 13 688 14 291 1 : 688 15 688 16 28 6 method 688 17 688 23 290 1 . 688 23 688 24 281 12 EmitByteCode 688 24 688 36 281 1 ( 688 36 688 37 281 1 ) 688 37 688 38 281 1 ) 688 38 688 39 18446744073709551615 1 { 689 3 689 4 18446744073709551615 4 code 690 4 690 8 289 1 . 690 8 690 9 36 9 push_back 690 9 690 18 36 1 ( 690 18 690 19 36 1 b 690 19 690 20 291 1 ) 690 20 690 21 36 1 ; 690 21 690 22 18446744073709551615 1 } 691 3 691 4 18446744073709551615 1 } 692 2 692 3 18446744073709551615 6 return 693 2 693 8 18446744073709551615 4 code 693 9 693 13 289 1 ; 693 13 693 14 18446744073709551615 1 } 694 1 694 2 18446744073709551615 16 CompiledFunction 695 1 695 17 25 2 :: 695 17 695 19 25 16 CompiledFunction 695 19 695 35 25 1 ( 695 35 695 36 25 1 ) 695 36 695 37 25 1 { 696 1 696 2 18446744073709551615 1 } 697 1 697 2 18446744073709551615 16 CompiledFunction 698 1 698 17 25 2 :: 698 17 698 19 25 16 CompiledFunction 698 19 698 35 25 1 ( 698 35 698 36 25 7 wstring 698 36 698 43 80 4 name 698 44 698 48 292 1 , 698 48 698 49 25 7 int32_t 698 50 698 57 65 5 index 698 58 698 63 293 1 , 698 63 698 64 25 7 int32_t 699 12 699 19 65 9 stackSize 699 20 699 29 294 1 , 699 29 699 30 25 7 int32_t 699 31 699 38 65 9 argsCount 699 39 699 48 295 1 , 699 48 699 49 25 7 int32_t 700 12 700 19 65 11 localsCount 700 20 700 31 296 1 , 700 31 700 32 25 7 int32_t 700 33 700 40 65 13 constantCount 700 41 700 54 297 1 , 700 54 700 55 25 8 ByteCode 701 12 701 20 276 12 constantPool 701 21 701 33 298 1 , 701 33 701 34 25 8 ByteCode 701 35 701 43 276 8 byteCode 701 44 701 52 299 1 ) 701 52 701 53 25 1 : 702 2 702 3 25 4 name 702 4 702 8 300 1 { 702 8 702 9 81 4 name 702 9 702 13 292 1 } 702 13 702 14 81 1 , 703 2 703 3 25 5 index 703 4 703 9 301 1 { 703 9 703 10 18446744073709551615 5 index 703 10 703 15 293 1 } 703 15 703 16 18446744073709551615 1 , 704 2 704 3 25 9 stackSize 704 4 704 13 302 1 { 704 13 704 14 18446744073709551615 9 stackSize 704 14 704 23 294 1 } 704 23 704 24 18446744073709551615 1 , 705 2 705 3 25 9 argsCount 705 4 705 13 303 1 { 705 13 705 14 18446744073709551615 9 argsCount 705 14 705 23 295 1 } 705 23 705 24 18446744073709551615 1 , 706 2 706 3 25 11 localsCount 706 4 706 15 304 1 { 706 15 706 16 18446744073709551615 11 localsCount 706 16 706 27 296 1 } 706 27 706 28 18446744073709551615 1 , 707 2 707 3 25 13 constantCount 707 4 707 17 305 1 { 707 17 707 18 18446744073709551615 13 constantCount 707 18 707 31 297 1 } 707 31 707 32 18446744073709551615 1 , 708 2 708 3 25 12 constantPool 708 4 708 16 306 1 { 708 16 708 17 24 12 constantPool 708 17 708 29 298 1 } 708 29 708 30 24 1 , 709 2 709 3 25 8 byteCode 709 4 709 12 307 1 { 709 12 709 13 24 8 byteCode 709 13 709 21 299 1 } 709 21 709 22 24 1 { 710 1 710 2 18446744073709551615 1 } 711 1 711 2 18446744073709551615 8 ByteCode 712 1 712 9 276 16 CompiledFunction 712 10 712 26 25 2 :: 712 26 712 28 281 12 EmitByteCode 712 28 712 40 281 1 ( 712 40 712 41 281 1 ) 712 41 712 42 281 1 { 713 1 713 2 18446744073709551615 8 ByteCode 714 2 714 10 276 4 code 714 11 714 15 308 1 ; 714 15 714 16 18446744073709551615 4 code 715 2 715 6 308 1 . 715 6 715 7 36 9 push_back 715 7 715 16 36 1 ( 715 16 715 17 36 5 index 715 17 715 22 301 1 ) 715 22 715 23 36 1 ; 715 23 715 24 18446744073709551615 12 BitConverter 716 2 716 14 110 2 :: 716 14 716 16 111 9 AppendInt 716 16 716 25 111 1 ( 716 25 716 26 111 4 code 716 26 716 30 308 1 , 716 30 716 31 111 9 stackSize 716 32 716 41 302 1 ) 716 41 716 42 111 1 ; 716 42 716 43 18446744073709551615 4 code 717 2 717 6 308 1 . 717 6 717 7 36 9 push_back 717 7 717 16 36 1 ( 717 16 717 17 36 9 argsCount 717 17 717 26 303 1 ) 717 26 717 27 36 1 ; 717 27 717 28 18446744073709551615 4 code 718 2 718 6 308 1 . 718 6 718 7 36 9 push_back 718 7 718 16 36 1 ( 718 16 718 17 36 11 localsCount 718 17 718 28 304 1 ) 718 28 718 29 36 1 ; 718 29 718 30 18446744073709551615 4 code 719 2 719 6 308 1 . 719 6 719 7 36 9 push_back 719 7 719 16 36 1 ( 719 16 719 17 36 13 constantCount 719 17 719 30 305 1 ) 719 30 719 31 36 1 ; 719 31 719 32 18446744073709551615 12 BitConverter 720 2 720 14 110 2 :: 720 14 720 16 219 12 AppendUShort 720 16 720 28 219 1 ( 720 28 720 29 219 4 code 720 29 720 33 308 1 , 720 33 720 34 219 8 byteCode 720 35 720 43 307 1 . 720 43 720 44 39 4 size 720 44 720 48 39 1 ( 720 48 720 49 39 1 ) 720 49 720 50 39 1 ) 720 50 720 51 219 1 ; 720 51 720 52 18446744073709551615 3 for 721 2 721 5 18446744073709551615 1 ( 721 6 721 7 18446744073709551615 4 auto 721 7 721 11 18446744073709551615 1 & 721 11 721 12 18446744073709551615 1 b 721 13 721 14 309 1 : 721 15 721 16 28 12 constantPool 721 17 721 29 306 1 ) 721 29 721 30 18446744073709551615 1 { 722 2 722 3 18446744073709551615 4 code 723 3 723 7 308 1 . 723 7 723 8 36 9 push_back 723 8 723 17 36 1 ( 723 17 723 18 36 1 b 723 18 723 19 309 1 ) 723 19 723 20 36 1 ; 723 20 723 21 18446744073709551615 1 } 724 2 724 3 18446744073709551615 3 for 725 2 725 5 18446744073709551615 1 ( 725 6 725 7 18446744073709551615 4 auto 725 7 725 11 18446744073709551615 1 & 725 11 725 12 18446744073709551615 1 b 725 13 725 14 310 1 : 725 15 725 16 28 8 byteCode 725 17 725 25 307 1 ) 725 25 725 26 18446744073709551615 1 { 726 2 726 3 18446744073709551615 4 code 727 3 727 7 308 1 . 727 7 727 8 36 9 push_back 727 8 727 17 36 1 ( 727 17 727 18 36 1 b 727 18 727 19 310 1 ) 727 19 727 20 36 1 ; 727 20 727 21 18446744073709551615 1 } 728 2 728 3 18446744073709551615 6 return 729 2 729 8 18446744073709551615 4 code 729 9 729 13 308 1 ; 729 13 729 14 18446744073709551615 1 } 730 1 730 2 18446744073709551615 22 CompiledNativeFunction 731 1 731 23 91 2 :: 731 23 731 25 91 22 CompiledNativeFunction 731 25 731 47 91 1 ( 731 47 731 48 91 1 ) 731 48 731 49 91 1 { 732 1 732 2 18446744073709551615 1 } 733 1 733 2 18446744073709551615 22 CompiledNativeFunction 734 1 734 23 91 2 :: 734 23 734 25 91 22 CompiledNativeFunction 734 25 734 47 91 1 ( 734 47 734 48 91 7 wstring 734 48 734 55 80 11 libraryPath 734 56 734 67 311 1 , 734 67 734 68 91 7 wstring 735 15 735 22 80 12 functionName 735 23 735 35 312 1 , 735 35 735 36 91 7 int32_t 736 15 736 22 65 5 index 736 23 736 28 313 1 , 736 28 736 29 91 7 int32_t 736 30 736 37 65 9 argsCount 736 38 736 47 314 1 ) 736 47 736 48 91 1 : 737 2 737 3 91 11 libraryPath 737 4 737 15 315 1 { 737 15 737 16 81 11 libraryPath 737 16 737 27 311 1 } 737 27 737 28 81 1 , 738 2 738 3 91 12 functionName 738 4 738 16 316 1 { 738 16 738 17 81 12 functionName 738 17 738 29 312 1 } 738 29 738 30 81 1 , 739 2 739 3 91 5 index 739 4 739 9 317 1 { 739 9 739 10 18446744073709551615 5 index 739 10 739 15 313 1 } 739 15 739 16 18446744073709551615 1 , 740 2 740 3 91 9 argsCount 740 4 740 13 318 1 { 740 13 740 14 18446744073709551615 9 argsCount 740 14 740 23 314 1 } 740 23 740 24 18446744073709551615 1 { 741 1 741 2 18446744073709551615 1 } 742 1 742 2 18446744073709551615 8 ByteCode 743 1 743 9 276 22 CompiledNativeFunction 743 10 743 32 91 2 :: 743 32 743 34 319 12 EmitByteCode 743 34 743 46 319 1 ( 743 46 743 47 319 1 ) 743 47 743 48 319 1 { 744 1 744 2 18446744073709551615 8 ByteCode 745 2 745 10 276 4 code 745 11 745 15 320 1 ; 745 15 745 16 18446744073709551615 12 BitConverter 746 2 746 14 110 2 :: 746 14 746 16 111 9 AppendInt 746 16 746 25 111 1 ( 746 25 746 26 111 4 code 746 26 746 30 320 1 , 746 30 746 31 111 5 index 746 32 746 37 317 1 ) 746 37 746 38 111 1 ; 746 38 746 39 18446744073709551615 12 BitConverter 747 2 747 14 110 2 :: 747 14 747 16 125 12 AppendString 747 16 747 28 125 1 ( 747 28 747 29 125 4 code 747 29 747 33 320 1 , 747 33 747 34 125 11 libraryPath 747 35 747 46 315 1 ) 747 46 747 47 125 1 ; 747 47 747 48 18446744073709551615 12 BitConverter 748 2 748 14 110 2 :: 748 14 748 16 125 12 AppendString 748 16 748 28 125 1 ( 748 28 748 29 125 4 code 748 29 748 33 320 1 , 748 33 748 34 125 12 functionName 748 35 748 47 316 1 ) 748 47 748 48 125 1 ; 748 48 748 49 18446744073709551615 6 return 749 2 749 8 18446744073709551615 4 code 749 9 749 13 320 1 ; 749 13 749 14 18446744073709551615 1 } 750 1 750 2 18446744073709551615 15 CompiledProgram 751 1 751 16 5 2 :: 751 16 751 18 5 15 CompiledProgram 751 18 751 33 5 1 ( 751 33 751 34 5 1 ) 751 34 751 35 5 1 { 752 1 752 2 18446744073709551615 1 } 753 1 753 2 18446744073709551615 15 CompiledProgram 754 1 754 16 5 2 :: 754 16 754 18 5 15 CompiledProgram 754 18 754 33 5 1 ( 754 33 754 34 5 6 vector 754 34 754 40 24 1 < 754 40 754 41 18446744073709551615 14 CompiledModule 754 41 754 55 37 1 > 754 55 754 56 18446744073709551615 7 modules 754 57 754 64 321 1 , 754 64 754 65 5 6 vector 755 10 755 16 24 1 < 755 16 755 17 18446744073709551615 13 CompiledClass 755 17 755 30 50 1 > 755 30 755 31 18446744073709551615 7 classes 755 32 755 39 322 1 ) 755 39 755 40 5 1 : 756 2 756 3 5 7 modules 756 4 756 11 323 1 { 756 11 756 12 24 7 modules 756 12 756 19 321 1 } 756 19 756 20 24 1 , 757 2 757 3 5 7 classes 757 4 757 11 324 1 { 757 11 757 12 24 7 classes 757 12 757 19 322 1 } 757 19 757 20 24 1 { 758 1 758 2 18446744073709551615 1 } 759 1 759 2 18446744073709551615 4 void 760 1 760 5 18446744073709551615 15 CompiledProgram 760 6 760 21 5 2 :: 760 21 760 23 325 18 SearchMainFunction 760 23 760 41 325 1 ( 760 41 760 42 325 1 ) 760 42 760 43 325 1 { 761 1 761 2 18446744073709551615 3 for 762 2 762 5 18446744073709551615 1 ( 762 6 762 7 18446744073709551615 4 auto 762 7 762 11 18446744073709551615 1 & 762 11 762 12 18446744073709551615 10 moduleInfo 762 13 762 23 326 1 : 762 24 762 25 28 7 modules 762 26 762 33 323 1 ) 762 33 762 34 18446744073709551615 1 { 763 2 763 3 18446744073709551615 3 for 764 3 764 6 18446744073709551615 1 ( 764 7 764 8 18446744073709551615 4 auto 764 8 764 12 18446744073709551615 1 & 764 12 764 13 18446744073709551615 1 f 764 14 764 15 327 1 : 764 16 764 17 28 10 moduleInfo 764 18 764 28 326 1 . 764 28 764 29 18446744073709551615 9 functions 764 29 764 38 275 1 ) 764 38 764 39 18446744073709551615 1 { 765 3 765 4 18446744073709551615 2 if 766 4 766 6 18446744073709551615 1 ( 766 7 766 8 18446744073709551615 1 f 766 8 766 9 327 1 . 766 9 766 10 18446744073709551615 4 name 766 10 766 14 300 2 == 766 15 766 17 328 7 L"Main" 766 18 766 25 18446744073709551615 1 ) 766 25 766 26 18446744073709551615 1 { 767 4 767 5 18446744073709551615 10 mainModule 768 5 768 15 329 1 = 768 16 768 17 18446744073709551615 10 moduleInfo 768 18 768 28 326 1 . 768 28 768 29 18446744073709551615 5 index 768 29 768 34 273 1 ; 768 34 768 35 18446744073709551615 12 mainFunction 769 5 769 17 330 1 = 769 18 769 19 18446744073709551615 1 f 769 20 769 21 327 1 . 769 21 769 22 18446744073709551615 5 index 769 22 769 27 301 1 ; 769 27 769 28 18446744073709551615 6 return 770 5 770 11 18446744073709551615 1 ; 770 11 770 12 18446744073709551615 1 } 771 4 771 5 18446744073709551615 1 } 772 3 772 4 18446744073709551615 1 } 773 2 773 3 18446744073709551615 10 mainModule 774 2 774 12 329 1 = 774 13 774 14 18446744073709551615 1 - 774 15 774 16 18446744073709551615 1 1 774 16 774 17 18446744073709551615 1 ; 774 17 774 18 18446744073709551615 12 mainFunction 775 2 775 14 330 1 = 775 15 775 16 18446744073709551615 1 - 775 17 775 18 18446744073709551615 1 1 775 18 775 19 18446744073709551615 1 ; 775 19 775 20 18446744073709551615 5 throw 776 2 776 7 18446744073709551615 7 wstring 776 8 776 15 80 1 ( 776 15 776 16 81 24 L"missing main function" 776 16 776 40 18446744073709551615 1 ) 776 40 776 41 81 1 ; 776 41 776 42 18446744073709551615 1 } 777 1 777 2 18446744073709551615 8 ByteCode 778 1 778 9 276 15 CompiledProgram 778 10 778 25 5 2 :: 778 25 778 27 331 12 EmitByteCode 778 27 778 39 331 1 ( 778 39 778 40 331 1 ) 778 40 778 41 331 1 { 779 1 779 2 18446744073709551615 18 SearchMainFunction 780 2 780 20 325 1 ( 780 20 780 21 325 1 ) 780 21 780 22 325 1 ; 780 22 780 23 18446744073709551615 8 ByteCode 781 2 781 10 276 4 code 781 11 781 15 332 1 ; 781 15 781 16 18446744073709551615 12 BitConverter 782 2 782 14 110 2 :: 782 14 782 16 111 9 AppendInt 782 16 782 25 111 1 ( 782 25 782 26 111 4 code 782 26 782 30 332 1 , 782 30 782 31 111 10 mainModule 782 32 782 42 329 1 ) 782 42 782 43 111 1 ; 782 43 782 44 18446744073709551615 4 code 783 2 783 6 332 1 . 783 6 783 7 36 9 push_back 783 7 783 16 36 1 ( 783 16 783 17 36 12 mainFunction 783 17 783 29 330 1 ) 783 29 783 30 36 1 ; 783 30 783 31 18446744073709551615 12 BitConverter 784 2 784 14 110 2 :: 784 14 784 16 111 9 AppendInt 784 16 784 25 111 1 ( 784 25 784 26 111 4 code 784 26 784 30 332 1 , 784 30 784 31 111 7 modules 784 32 784 39 323 1 . 784 39 784 40 39 4 size 784 40 784 44 39 1 ( 784 44 784 45 39 1 ) 784 45 784 46 39 1 ) 784 46 784 47 111 1 ; 784 47 784 48 18446744073709551615 12 BitConverter 785 2 785 14 110 2 :: 785 14 785 16 111 9 AppendInt 785 16 785 25 111 1 ( 785 25 785 26 111 4 code 785 26 785 30 332 1 , 785 30 785 31 111 7 classes 785 32 785 39 324 1 . 785 39 785 40 39 4 size 785 40 785 44 39 1 ( 785 44 785 45 39 1 ) 785 45 785 46 39 1 ) 785 46 785 47 111 1 ; 785 47 785 48 18446744073709551615 3 for 786 2 786 5 18446744073709551615 1 ( 786 6 786 7 18446744073709551615 4 auto 786 7 786 11 18446744073709551615 1 & 786 11 786 12 18446744073709551615 6 module 786 13 786 19 333 1 : 786 20 786 21 28 7 modules 786 22 786 29 323 1 ) 786 29 786 30 18446744073709551615 1 { 787 2 787 3 18446744073709551615 3 for 788 3 788 6 18446744073709551615 1 ( 788 7 788 8 18446744073709551615 4 auto 788 8 788 12 18446744073709551615 1 b 788 13 788 14 334 1 : 788 15 788 16 28 6 module 788 17 788 23 333 1 . 788 23 788 24 277 12 EmitByteCode 788 24 788 36 277 1 ( 788 36 788 37 277 1 ) 788 37 788 38 277 1 ) 788 38 788 39 18446744073709551615 1 { 789 3 789 4 18446744073709551615 4 code 790 4 790 8 332 1 . 790 8 790 9 36 9 push_back 790 9 790 18 36 1 ( 790 18 790 19 36 1 b 790 19 790 20 334 1 ) 790 20 790 21 36 1 ; 790 21 790 22 18446744073709551615 1 } 791 3 791 4 18446744073709551615 1 } 792 2 792 3 18446744073709551615 3 for 793 2 793 5 18446744073709551615 1 ( 793 6 793 7 18446744073709551615 4 auto 793 7 793 11 18446744073709551615 1 & 793 11 793 12 18446744073709551615 6 _class 793 13 793 19 335 1 : 793 20 793 21 28 7 classes 793 22 793 29 324 1 ) 793 29 793 30 18446744073709551615 1 { 794 2 794 3 18446744073709551615 3 for 795 3 795 6 18446744073709551615 1 ( 795 7 795 8 18446744073709551615 4 auto 795 8 795 12 18446744073709551615 1 b 795 13 795 14 336 1 : 795 15 795 16 28 6 _class 795 17 795 23 335 1 . 795 23 795 24 288 12 EmitByteCode 795 24 795 36 288 1 ( 795 36 795 37 288 1 ) 795 37 795 38 288 1 ) 795 38 795 39 18446744073709551615 1 { 796 3 796 4 18446744073709551615 4 code 797 4 797 8 332 1 . 797 8 797 9 36 9 push_back 797 9 797 18 36 1 ( 797 18 797 19 36 1 b 797 19 797 20 336 1 ) 797 20 797 21 36 1 ; 797 21 797 22 18446744073709551615 1 } 798 3 798 4 18446744073709551615 1 } 799 2 799 3 18446744073709551615 6 return 800 2 800 8 18446744073709551615 4 code 800 9 800 13 332 1 ; 800 13 800 14 18446744073709551615 1 } 801 1 801 2 18446744073709551615 0 0 337 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 4 endl 49 1 3 0 5 wcout 4 1 3 0 8 Compiler 4 1 3 0 15 CompiledProgram 21 1 3 0 16 Compile:Compiler 4 1 3 0 15 NamespaceRecord 10 1 3 0 74 12:52:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 14:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:_Node_iterator:__detail:std 6 1 3 0 22 record:NamespaceRecord 9 1 3 0 73 16:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 second:pair:std 21 1 3 0 25 CompileNamespace:Compiler 6 1 3 0 16 modules:Compiler 6 1 3 0 16 classes:Compiler 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 10 1 3 0 74 21:56:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 23:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 modules:Namespace 4 1 3 0 6 Module 9 1 3 0 74 25:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 31 1 3 0 10 vector:std 4 1 3 0 16 CompiledFunction 9 1 3 0 74 26:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 27:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 37 operator*:__normal_iterator:__gnu_cxx 6 1 3 0 13 fields:Module 6 1 3 0 11 value:Field 21 1 3 0 17 Accept:Expression 9 1 3 0 74 31:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 16 functions:Module 9 1 3 0 74 33:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 24 CompileFunction:Compiler 21 1 3 0 20 push_back:vector:std 4 1 3 0 14 CompiledModule 6 1 3 0 12 index:Module 21 1 3 0 15 size:vector:std 9 1 3 0 74 39:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 classes:Namespace 4 1 3 0 5 Class 9 1 3 0 74 41:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 42:28:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 74 43:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 12 fields:Class 9 1 3 0 74 47:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 15 functions:Class 9 1 3 0 74 49:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 CompiledClass 6 1 3 0 11 index:Class 9 1 3 0 74 55:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 subNamespaces:Namespace 9 1 3 0 73 57:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 8 Function 10 1 3 0 74 61:54:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 byteCode:Compiler 21 1 3 0 16 clear:vector:std 6 1 3 0 21 constantPool:Compiler 6 1 3 0 23 constantsCount:Compiler 4 1 3 0 13 LocalVariable 9 1 3 0 74 66:22:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 18 variables:Function 6 1 3 0 19 value:LocalVariable 20 1 3 0 7 int32_t 9 1 3 0 74 69:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 location:LocalVariable 6 1 3 0 15 offset:Location 6 1 3 0 18 type:LocalVariable 21 1 3 0 10 IsInt:Type 7 1 3 0 14 pop_local_int: 21 1 3 0 11 IsLong:Type 7 1 3 0 15 pop_local_long: 21 1 3 0 12 IsFloat:Type 7 1 3 0 16 pop_local_float: 21 1 3 0 13 IsDouble:Type 7 1 3 0 17 pop_local_double: 21 1 3 0 13 IsString:Type 7 1 3 0 17 pop_local_string: 20 1 3 0 19 wstring:__cxx11:std 24 1 3 0 24 basic_string:__cxx11:std 9 1 3 0 74 96:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 expressions:Function 9 1 3 0 75 100:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 17 location:Function 9 1 3 0 75 101:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 102:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 parameters:Function 9 1 3 0 75 103:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 13 name:Function 4 1 3 0 22 CompiledNativeFunction 21 1 3 0 30 CompileNativeFunction:Compiler 4 1 3 0 14 NativeFunction 10 1 3 0 75 109:50:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 115:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 location:NativeFunction 9 1 3 0 75 116:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 25 parameters:NativeFunction 6 1 3 0 26 libraryPath:NativeFunction 6 1 3 0 27 functionName:NativeFunction 21 2 3 0 24 Visit:Visitor:Expression 14 Visit:Compiler 4 1 3 0 18 ConstantExpression 10 1 3 0 75 121:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 7 any:std 9 1 3 0 74 123:6:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 value:ConstantExpression 21 1 3 0 12 type:any:std 21 1 3 0 24 operator==:type_info:std 7 1 3 0 13 constant_int: 22 1 3 0 12 BitConverter 8 1 3 0 22 AppendInt:BitConverter 8 1 3 0 12 any_cast:std 7 1 3 0 18 push_constant_int: 20 1 3 0 7 int64_t 7 1 3 0 14 constant_long: 8 1 3 0 23 AppendLong:BitConverter 7 1 3 0 19 push_constant_long: 7 1 3 0 15 constant_float: 8 1 3 0 24 AppendFloat:BitConverter 7 1 3 0 20 push_constant_float: 7 1 3 0 16 constant_double: 8 1 3 0 25 AppendDouble:BitConverter 7 1 3 0 21 push_constant_double: 7 1 3 0 16 constant_string: 8 1 3 0 25 AppendString:BitConverter 7 1 3 0 21 push_constant_string: 4 1 3 0 15 UnaryExpression 10 1 3 0 75 167:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 operand:UnaryExpression 6 1 3 0 15 type:Expression 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 24 UnaryPlus:ExpressionKind 7 1 3 0 25 UnaryMinus:ExpressionKind 7 1 3 0 10 minus_int: 7 1 3 0 11 minus_long: 7 1 3 0 12 minus_float: 7 1 3 0 13 minus_double: 21 1 3 0 14 IsBoolean:Type 7 1 3 0 18 Not:ExpressionKind 7 1 3 0 12 logical_not: 4 1 3 0 16 BinaryExpression 10 1 3 0 75 235:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 21 left:BinaryExpression 6 1 3 0 22 right:BinaryExpression 7 1 3 0 18 Add:ExpressionKind 7 1 3 0 8 add_int: 7 1 3 0 23 Subtract:ExpressionKind 7 1 3 0 8 sub_int: 7 1 3 0 23 Multiply:ExpressionKind 7 1 3 0 8 mul_int: 7 1 3 0 21 Divide:ExpressionKind 7 1 3 0 8 div_int: 7 1 3 0 21 Modulo:ExpressionKind 7 1 3 0 8 mod_int: 7 1 3 0 26 GreaterThan:ExpressionKind 7 1 3 0 7 gt_int: 7 1 3 0 23 LessThan:ExpressionKind 7 1 3 0 7 lt_int: 7 1 3 0 33 GreaterThanOrEqual:ExpressionKind 7 1 3 0 7 ge_int: 7 1 3 0 30 LessThanOrEqual:ExpressionKind 7 1 3 0 7 le_int: 7 1 3 0 20 Equal:ExpressionKind 7 1 3 0 7 eq_int: 7 1 3 0 23 NotEqual:ExpressionKind 7 1 3 0 7 ne_int: 7 1 3 0 9 add_long: 7 1 3 0 9 sub_long: 7 1 3 0 9 mul_long: 7 1 3 0 9 div_long: 7 1 3 0 9 mod_long: 7 1 3 0 8 gt_long: 7 1 3 0 8 lt_long: 7 1 3 0 8 ge_long: 7 1 3 0 8 le_long: 7 1 3 0 8 eq_long: 7 1 3 0 8 ne_long: 7 1 3 0 10 add_float: 7 1 3 0 10 sub_float: 7 1 3 0 10 mul_float: 7 1 3 0 10 div_float: 7 1 3 0 9 gt_float: 7 1 3 0 9 lt_float: 7 1 3 0 9 ge_float: 7 1 3 0 9 le_float: 7 1 3 0 9 eq_float: 7 1 3 0 9 ne_float: 7 1 3 0 11 add_double: 7 1 3 0 11 sub_double: 7 1 3 0 11 mul_double: 7 1 3 0 11 div_double: 7 1 3 0 10 gt_double: 7 1 3 0 10 lt_double: 7 1 3 0 10 ge_double: 7 1 3 0 10 le_double: 7 1 3 0 10 eq_double: 7 1 3 0 10 ne_double: 7 1 3 0 18 And:ExpressionKind 7 1 3 0 12 logical_and: 7 1 3 0 17 Or:ExpressionKind 7 1 3 0 11 logical_or: 4 1 3 0 16 AssignExpression 10 1 3 0 75 463:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:AssignExpression 6 1 3 0 25 location:AssignExpression 21 1 3 0 16 IsLocal:Location 7 1 3 0 14 pop_field_int: 6 1 3 0 14 index:Location 4 1 3 0 15 BlockExpression 10 1 3 0 75 489:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 491:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 expressions:BlockExpression 4 1 3 0 16 IfThenExpression 10 1 3 0 75 496:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 26 condition:IfThenExpression 7 1 3 0 14 jump_if_false: 9 1 3 0 75 500:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 25 AppendUShort:BitConverter 6 1 3 0 23 ifTrue:IfThenExpression 9 1 3 0 75 503:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 13 at:vector:std 4 1 3 0 20 IfThenElseExpression 10 1 3 0 75 507:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 30 condition:IfThenElseExpression 9 1 3 0 75 511:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 ifTrue:IfThenElseExpression 7 1 3 0 5 jump: 9 1 3 0 75 516:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 519:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 28 ifFalse:IfThenElseExpression 9 1 3 0 75 523:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 14 CallExpression 10 1 3 0 75 527:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 529:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 24 arguments:CallExpression 6 1 3 0 23 function:CallExpression 7 1 3 0 7 invoke: 4 1 3 0 18 VariableExpression 10 1 3 0 75 536:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 27 location:VariableExpression 7 1 3 0 15 push_local_int: 7 1 3 0 16 push_local_long: 7 1 3 0 17 push_local_float: 4 1 3 0 23 NotImplementedException 21 1 3 0 15 IsFunction:Type 7 1 3 0 14 push_function: 4 1 3 0 16 ReturnExpression 10 1 3 0 75 582:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 22 value:ReturnExpression 7 1 3 0 11 return_int: 7 1 3 0 12 return_long: 7 1 3 0 13 return_float: 7 1 3 0 14 return_double: 4 1 3 0 15 WhileExpression 10 1 3 0 75 606:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 608:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 25 condition:WhileExpression 9 1 3 0 75 611:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 body:WhileExpression 9 1 3 0 75 616:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 13 DotExpression 10 1 3 0 75 620:37:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 4 1 3 0 4 Type 9 1 3 0 74 622:8:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 object:DotExpression 21 1 3 0 13 IsModule:Type 6 1 3 0 19 value:DotExpression 9 1 3 0 75 627:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 648:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 648:55:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 649:36:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 20 index:CompiledModule 6 1 3 0 25 fieldCount:CompiledModule 6 1 3 0 24 functions:CompiledModule 20 1 3 0 8 ByteCode 21 1 3 0 27 EmitByteCode:CompiledModule 9 1 3 0 75 657:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 661:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 663:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 21 1 3 0 29 EmitByteCode:CompiledFunction 10 1 3 0 75 673:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 673:53:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 674:34:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 19 index:CompiledClass 6 1 3 0 24 fieldCount:CompiledClass 6 1 3 0 21 methods:CompiledClass 21 1 3 0 26 EmitByteCode:CompiledClass 9 1 3 0 75 682:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 686:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 688:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 698:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 698:58:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 699:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 699:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 700:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 700:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 701:21:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 701:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 21 name:CompiledFunction 6 1 3 0 22 index:CompiledFunction 6 1 3 0 26 stackSize:CompiledFunction 6 1 3 0 26 argsCount:CompiledFunction 6 1 3 0 28 localsCount:CompiledFunction 6 1 3 0 30 constantCount:CompiledFunction 6 1 3 0 29 constantPool:CompiledFunction 6 1 3 0 25 byteCode:CompiledFunction 9 1 3 0 75 714:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 721:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 725:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 734:56:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 735:23:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 736:23:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 736:38:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 34 libraryPath:CompiledNativeFunction 6 1 3 0 35 functionName:CompiledNativeFunction 6 1 3 0 28 index:CompiledNativeFunction 6 1 3 0 32 argsCount:CompiledNativeFunction 21 1 3 0 35 EmitByteCode:CompiledNativeFunction 9 1 3 0 75 745:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 754:57:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 10 1 3 0 75 755:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 6 1 3 0 23 modules:CompiledProgram 6 1 3 0 23 classes:CompiledProgram 21 1 3 0 34 SearchMainFunction:CompiledProgram 9 1 3 0 75 762:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 764:14:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 8 1 3 0 14 operator==:std 6 1 3 0 26 mainModule:CompiledProgram 6 1 3 0 28 mainFunction:CompiledProgram 21 1 3 0 28 EmitByteCode:CompiledProgram 9 1 3 0 75 781:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 786:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 788:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 793:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 9 1 3 0 75 795:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 0 0 9 0 0 0 72 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/BitConverter.hpp 1531646712 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.cpp 1531648425 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Compiler.hpp 1531648410 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1531709425 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1531290788 71 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Instruction.hpp 1531282532 68 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Location.hpp 1531671918 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1531484829 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912
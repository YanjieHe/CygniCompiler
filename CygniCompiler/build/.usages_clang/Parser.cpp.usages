22 serialization::archive 16 0 0 0 0 55 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler 61 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/build 0 0 3219 0 0 0 1 # 1 1 1 2 18446744073709551615 7 include 1 2 1 9 18446744073709551615 12 "Parser.hpp" 1 10 1 22 18446744073709551615 5 using 2 1 2 6 18446744073709551615 3 std 2 7 2 10 0 2 :: 2 10 2 12 18446744073709551615 8 any_cast 2 12 2 20 1 1 ; 2 20 2 21 18446744073709551615 5 using 3 1 3 6 18446744073709551615 3 std 3 7 3 10 0 2 :: 3 10 3 12 18446744073709551615 19 static_pointer_cast 3 12 3 31 2 1 ; 3 31 3 32 18446744073709551615 6 Parser 4 1 4 7 3 2 :: 4 7 4 9 3 6 Parser 4 9 4 15 3 1 ( 4 15 4 16 3 6 string 4 16 4 22 4 4 path 4 23 4 27 5 1 , 4 27 4 28 3 6 vector 4 29 4 35 6 1 < 4 35 4 36 18446744073709551615 5 Token 4 36 4 41 7 1 > 4 41 4 42 18446744073709551615 1 & 4 42 4 43 18446744073709551615 6 tokens 4 44 4 50 8 1 ) 4 50 4 51 3 1 : 5 2 5 3 3 4 path 5 4 5 8 9 1 { 5 8 5 9 10 4 path 5 9 5 13 5 1 } 5 13 5 14 10 1 , 6 2 6 3 3 6 tokens 6 4 6 10 11 1 { 6 10 6 11 18446744073709551615 6 tokens 6 11 6 17 8 1 } 6 17 6 18 18446744073709551615 1 , 7 2 7 3 3 12 tokenPointer 7 4 7 16 12 1 { 7 16 7 17 18446744073709551615 1 0 7 17 7 18 18446744073709551615 1 } 7 18 7 19 18446744073709551615 1 { 8 1 8 2 18446744073709551615 1 } 9 1 9 2 18446744073709551615 8 CodeFile 10 1 10 9 13 6 Parser 10 10 10 16 3 2 :: 10 16 10 18 14 7 Program 10 18 10 25 14 1 ( 10 25 10 26 14 1 ) 10 26 10 27 14 1 { 11 1 11 2 18446744073709551615 5 Match 12 2 12 7 15 1 ( 12 7 12 8 15 3 Tag 12 8 12 11 16 2 :: 12 11 12 13 18446744073709551615 9 Namespace 12 13 12 22 17 1 ) 12 22 12 23 15 1 ; 12 23 12 24 18446744073709551615 6 vector 13 2 13 8 6 1 < 13 8 13 9 18446744073709551615 7 wstring 13 9 13 16 18 1 > 13 16 13 17 18446744073709551615 2 ns 13 18 13 20 19 1 = 13 21 13 22 18446744073709551615 14 ParseNamespace 13 23 13 37 20 1 ( 13 37 13 38 20 1 ) 13 38 13 39 20 1 ; 13 39 13 40 18446744073709551615 13 unordered_map 15 2 15 15 21 1 < 15 15 15 16 18446744073709551615 7 wstring 15 16 15 23 18 1 , 15 23 15 24 18446744073709551615 6 Module 15 25 15 31 22 1 > 15 31 15 32 18446744073709551615 7 modules 15 33 15 40 23 1 ; 15 40 15 41 18446744073709551615 13 unordered_map 16 2 16 15 21 1 < 16 15 16 16 18446744073709551615 7 wstring 16 16 16 23 18 1 , 16 23 16 24 18446744073709551615 5 Class 16 25 16 30 24 1 > 16 30 16 31 18446744073709551615 7 classes 16 32 16 39 25 1 ; 16 39 16 40 18446744073709551615 13 unordered_map 17 2 17 15 21 1 < 17 15 17 16 18446744073709551615 7 wstring 17 16 17 23 18 1 , 17 23 17 24 18446744073709551615 10 shared_ptr 17 25 17 35 26 1 < 17 35 17 36 18446744073709551615 9 Namespace 17 36 17 45 27 2 >> 17 45 17 47 18446744073709551615 4 uses 17 48 17 52 28 1 ; 17 52 17 53 18446744073709551615 5 while 18 2 18 7 18446744073709551615 1 ( 18 8 18 9 18446744073709551615 1 ! 18 9 18 10 18446744073709551615 5 IsEof 18 10 18 15 29 1 ( 18 15 18 16 29 1 ) 18 16 18 17 29 1 ) 18 17 18 18 18446744073709551615 1 { 19 2 19 3 18446744073709551615 14 AccessModifier 20 3 20 17 30 2 am 20 18 20 20 31 1 = 20 21 20 22 18446744073709551615 7 ParseAM 20 23 20 30 32 1 ( 20 30 20 31 32 4 Look 20 31 20 35 33 1 ( 20 35 20 36 33 1 ) 20 36 20 37 33 1 ) 20 37 20 38 32 1 ; 20 38 20 39 18446744073709551615 4 Move 21 3 21 7 34 1 ( 21 7 21 8 34 1 ) 21 8 21 9 34 1 ; 21 9 21 10 18446744073709551615 2 if 22 3 22 5 18446744073709551615 1 ( 22 6 22 7 18446744073709551615 4 Look 22 7 22 11 33 1 ( 22 11 22 12 33 1 ) 22 12 22 13 33 1 . 22 13 22 14 18446744073709551615 3 tag 22 14 22 17 35 2 == 22 18 22 20 18446744073709551615 3 Tag 22 21 22 24 16 2 :: 22 24 22 26 18446744073709551615 5 Class 22 26 22 31 36 1 ) 22 31 22 32 18446744073709551615 1 { 23 3 23 4 18446744073709551615 5 Class 24 4 24 9 24 9 classInfo 24 10 24 19 37 1 = 24 20 24 21 18446744073709551615 8 DefClass 24 22 24 30 38 1 ( 24 30 24 31 38 2 am 24 31 24 33 31 1 ) 24 33 24 34 38 1 ; 24 34 24 35 18446744073709551615 7 classes 25 4 25 11 25 1 . 25 11 25 12 39 6 insert 25 12 25 18 39 1 ( 25 18 25 19 39 1 { 25 19 25 20 40 9 classInfo 25 20 25 29 37 1 . 25 29 25 30 18446744073709551615 4 type 25 30 25 34 41 1 . 25 34 25 35 18446744073709551615 4 name 25 35 25 39 42 1 , 25 39 25 40 40 9 classInfo 25 41 25 50 37 1 } 25 50 25 51 40 1 ) 25 51 25 52 39 1 ; 25 52 25 53 18446744073709551615 1 } 26 3 26 4 18446744073709551615 4 else 27 3 27 7 18446744073709551615 2 if 27 8 27 10 18446744073709551615 1 ( 27 11 27 12 18446744073709551615 4 Look 27 12 27 16 33 1 ( 27 16 27 17 33 1 ) 27 17 27 18 33 1 . 27 18 27 19 18446744073709551615 3 tag 27 19 27 22 35 2 == 27 23 27 25 18446744073709551615 3 Tag 27 26 27 29 16 2 :: 27 29 27 31 18446744073709551615 6 Module 27 31 27 37 43 1 ) 27 37 27 38 18446744073709551615 1 { 28 3 28 4 18446744073709551615 6 Module 29 4 29 10 22 10 moduleInfo 29 11 29 21 44 1 = 29 22 29 23 18446744073709551615 9 DefModule 29 24 29 33 45 1 ( 29 33 29 34 45 2 am 29 34 29 36 31 1 ) 29 36 29 37 45 1 ; 29 37 29 38 18446744073709551615 7 modules 30 4 30 11 23 1 . 30 11 30 12 39 6 insert 30 12 30 18 39 1 ( 30 18 30 19 39 1 { 30 19 30 20 40 10 moduleInfo 30 20 30 30 44 1 . 30 30 30 31 18446744073709551615 4 type 30 31 30 35 46 1 . 30 35 30 36 18446744073709551615 4 name 30 36 30 40 42 1 , 30 40 30 41 40 10 moduleInfo 30 42 30 52 44 1 } 30 52 30 53 40 1 ) 30 53 30 54 39 1 ; 30 54 30 55 18446744073709551615 1 } 31 3 31 4 18446744073709551615 4 else 32 3 32 7 18446744073709551615 1 { 33 3 33 4 18446744073709551615 5 throw 34 4 34 9 18446744073709551615 15 SyntaxException 34 10 34 25 47 1 ( 34 25 34 26 47 4 Look 34 26 34 30 33 1 ( 34 30 34 31 33 1 ) 34 31 34 32 33 1 . 34 32 34 33 18446744073709551615 4 line 34 33 34 37 48 1 , 34 37 34 38 47 4 Look 34 39 34 43 33 1 ( 34 43 34 44 33 1 ) 34 44 34 45 33 1 . 34 45 34 46 18446744073709551615 6 column 34 46 34 52 49 1 , 34 52 34 53 47 32 L"expecting 'class' or 'module'" 35 11 35 43 18446744073709551615 1 ) 35 43 35 44 47 1 ; 35 44 35 45 18446744073709551615 1 } 36 3 36 4 18446744073709551615 1 } 37 2 37 3 18446744073709551615 6 return 38 2 38 8 18446744073709551615 8 CodeFile 38 9 38 17 13 1 ( 38 17 38 18 13 4 path 38 18 38 22 9 1 , 38 22 38 23 13 2 ns 38 24 38 26 19 1 , 38 26 38 27 13 7 modules 38 28 38 35 23 1 , 38 35 38 36 13 7 classes 38 37 38 44 25 1 , 38 44 38 45 13 4 uses 38 46 38 50 28 1 ) 38 50 38 51 13 1 ; 38 51 38 52 18446744073709551615 1 } 39 1 39 2 18446744073709551615 6 ExpPtr 40 1 40 7 50 6 Parser 40 8 40 14 3 2 :: 40 14 40 16 51 5 Block 40 16 40 21 51 1 ( 40 21 40 22 51 1 ) 40 22 40 23 51 1 { 41 1 41 2 18446744073709551615 7 int32_t 42 2 42 9 52 4 line 42 10 42 14 53 1 = 42 15 42 16 18446744073709551615 4 Look 42 17 42 21 33 1 ( 42 21 42 22 33 1 ) 42 22 42 23 33 1 . 42 23 42 24 18446744073709551615 4 line 42 24 42 28 48 1 ; 42 28 42 29 18446744073709551615 7 int32_t 43 2 43 9 52 6 column 43 10 43 16 54 1 = 43 17 43 18 18446744073709551615 4 Look 43 19 43 23 33 1 ( 43 23 43 24 33 1 ) 43 24 43 25 33 1 . 43 25 43 26 18446744073709551615 6 column 43 26 43 32 49 1 ; 43 32 43 33 18446744073709551615 6 vector 44 2 44 8 6 1 < 44 8 44 9 18446744073709551615 6 ExpPtr 44 9 44 15 50 1 > 44 15 44 16 18446744073709551615 11 expressions 44 17 44 28 55 1 ; 44 28 44 29 18446744073709551615 5 Match 45 2 45 7 15 1 ( 45 7 45 8 15 3 Tag 45 8 45 11 16 2 :: 45 11 45 13 18446744073709551615 9 LeftBrace 45 13 45 22 56 1 ) 45 22 45 23 15 1 ; 45 23 45 24 18446744073709551615 5 while 46 2 46 7 18446744073709551615 1 ( 46 8 46 9 18446744073709551615 4 Look 46 9 46 13 33 1 ( 46 13 46 14 33 1 ) 46 14 46 15 33 1 . 46 15 46 16 18446744073709551615 3 tag 46 16 46 19 35 2 != 46 20 46 22 18446744073709551615 3 Tag 46 23 46 26 16 2 :: 46 26 46 28 18446744073709551615 10 RightBrace 46 28 46 38 57 1 ) 46 38 46 39 18446744073709551615 1 { 47 2 47 3 18446744073709551615 11 expressions 48 3 48 14 55 1 . 48 14 48 15 58 9 push_back 48 15 48 24 58 1 ( 48 24 48 25 58 9 Statement 48 25 48 34 59 1 ( 48 34 48 35 59 1 ) 48 35 48 36 59 1 ) 48 36 48 37 58 1 ; 48 37 48 38 18446744073709551615 1 } 49 2 49 3 18446744073709551615 4 Move 50 2 50 6 34 1 ( 50 6 50 7 34 1 ) 50 7 50 8 34 1 ; 50 8 50 9 18446744073709551615 6 return 51 2 51 8 18446744073709551615 3 Ast 51 9 51 12 60 2 :: 51 12 51 14 61 5 Block 51 14 51 19 61 1 ( 51 19 51 20 61 4 line 51 20 51 24 53 1 , 51 24 51 25 61 6 column 51 26 51 32 54 1 , 51 32 51 33 61 11 expressions 51 34 51 45 55 1 ) 51 45 51 46 61 1 ; 51 46 51 47 18446744073709551615 1 } 52 1 52 2 18446744073709551615 6 ExpPtr 53 1 53 7 50 6 Parser 53 8 53 14 3 2 :: 53 14 53 16 62 2 If 53 16 53 18 62 1 ( 53 18 53 19 62 1 ) 53 19 53 20 62 1 { 54 1 54 2 18446744073709551615 7 int32_t 55 2 55 9 52 4 line 55 10 55 14 63 1 = 55 15 55 16 18446744073709551615 4 Look 55 17 55 21 33 1 ( 55 21 55 22 33 1 ) 55 22 55 23 33 1 . 55 23 55 24 18446744073709551615 4 line 55 24 55 28 48 1 ; 55 28 55 29 18446744073709551615 7 int32_t 56 2 56 9 52 6 column 56 10 56 16 64 1 = 56 17 56 18 18446744073709551615 4 Look 56 19 56 23 33 1 ( 56 23 56 24 33 1 ) 56 24 56 25 33 1 . 56 25 56 26 18446744073709551615 6 column 56 26 56 32 49 1 ; 56 32 56 33 18446744073709551615 5 Match 57 2 57 7 15 1 ( 57 7 57 8 15 3 Tag 57 8 57 11 16 2 :: 57 11 57 13 18446744073709551615 2 If 57 13 57 15 65 1 ) 57 15 57 16 15 1 ; 57 16 57 17 18446744073709551615 6 ExpPtr 58 2 58 8 50 9 condition 58 9 58 18 66 1 = 58 19 58 20 18446744073709551615 3 And 58 21 58 24 67 1 ( 58 24 58 25 67 1 ) 58 25 58 26 67 1 ; 58 26 58 27 18446744073709551615 6 ExpPtr 59 2 59 8 50 6 ifTrue 59 9 59 15 68 1 = 59 16 59 17 18446744073709551615 5 Block 59 18 59 23 51 1 ( 59 23 59 24 51 1 ) 59 24 59 25 51 1 ; 59 25 59 26 18446744073709551615 2 if 60 2 60 4 18446744073709551615 1 ( 60 5 60 6 18446744073709551615 4 Look 60 6 60 10 33 1 ( 60 10 60 11 33 1 ) 60 11 60 12 33 1 . 60 12 60 13 18446744073709551615 3 tag 60 13 60 16 35 2 == 60 17 60 19 18446744073709551615 3 Tag 60 20 60 23 16 2 :: 60 23 60 25 18446744073709551615 4 Else 60 25 60 29 69 1 ) 60 29 60 30 18446744073709551615 1 { 61 2 61 3 18446744073709551615 4 Move 62 3 62 7 34 1 ( 62 7 62 8 34 1 ) 62 8 62 9 34 1 ; 62 9 62 10 18446744073709551615 2 if 63 3 63 5 18446744073709551615 1 ( 63 6 63 7 18446744073709551615 4 Look 63 7 63 11 33 1 ( 63 11 63 12 33 1 ) 63 12 63 13 33 1 . 63 13 63 14 18446744073709551615 3 tag 63 14 63 17 35 2 == 63 18 63 20 18446744073709551615 3 Tag 63 21 63 24 16 2 :: 63 24 63 26 18446744073709551615 2 If 63 26 63 28 65 1 ) 63 28 63 29 18446744073709551615 1 { 64 3 64 4 18446744073709551615 6 ExpPtr 65 4 65 10 50 7 ifFalse 65 11 65 18 70 1 = 65 19 65 20 18446744073709551615 2 If 65 21 65 23 62 1 ( 65 23 65 24 62 1 ) 65 24 65 25 62 1 ; 65 25 65 26 18446744073709551615 6 return 66 4 66 10 18446744073709551615 3 Ast 66 11 66 14 60 2 :: 66 14 66 16 71 10 IfThenElse 66 16 66 26 71 1 ( 66 26 66 27 71 4 line 66 27 66 31 63 1 , 66 31 66 32 71 6 column 66 33 66 39 64 1 , 66 39 66 40 71 9 condition 66 41 66 50 66 1 , 66 50 66 51 71 6 ifTrue 66 52 66 58 68 1 , 66 58 66 59 71 7 ifFalse 66 60 66 67 70 1 ) 66 67 66 68 71 1 ; 66 68 66 69 18446744073709551615 1 } 67 3 67 4 18446744073709551615 4 else 68 3 68 7 18446744073709551615 1 { 69 3 69 4 18446744073709551615 6 ExpPtr 70 4 70 10 50 7 ifFalse 70 11 70 18 72 1 = 70 19 70 20 18446744073709551615 5 Block 70 21 70 26 51 1 ( 70 26 70 27 51 1 ) 70 27 70 28 51 1 ; 70 28 70 29 18446744073709551615 6 return 71 4 71 10 18446744073709551615 3 Ast 71 11 71 14 60 2 :: 71 14 71 16 71 10 IfThenElse 71 16 71 26 71 1 ( 71 26 71 27 71 4 line 71 27 71 31 63 1 , 71 31 71 32 71 6 column 71 33 71 39 64 1 , 71 39 71 40 71 9 condition 71 41 71 50 66 1 , 71 50 71 51 71 6 ifTrue 71 52 71 58 68 1 , 71 58 71 59 71 7 ifFalse 71 60 71 67 72 1 ) 71 67 71 68 71 1 ; 71 68 71 69 18446744073709551615 1 } 72 3 72 4 18446744073709551615 1 } 73 2 73 3 18446744073709551615 4 else 74 2 74 6 18446744073709551615 1 { 75 2 75 3 18446744073709551615 6 return 76 3 76 9 18446744073709551615 3 Ast 76 10 76 13 60 2 :: 76 13 76 15 73 6 IfThen 76 15 76 21 73 1 ( 76 21 76 22 73 4 line 76 22 76 26 63 1 , 76 26 76 27 73 6 column 76 28 76 34 64 1 , 76 34 76 35 73 9 condition 76 36 76 45 66 1 , 76 45 76 46 73 6 ifTrue 76 47 76 53 68 1 ) 76 53 76 54 73 1 ; 76 54 76 55 18446744073709551615 1 } 77 2 77 3 18446744073709551615 1 } 78 1 78 2 18446744073709551615 6 ExpPtr 79 1 79 7 50 6 Parser 79 8 79 14 3 2 :: 79 14 79 16 74 5 While 79 16 79 21 74 1 ( 79 21 79 22 74 1 ) 79 22 79 23 74 1 { 80 1 80 2 18446744073709551615 7 int32_t 81 2 81 9 52 4 line 81 10 81 14 75 1 = 81 15 81 16 18446744073709551615 4 Look 81 17 81 21 33 1 ( 81 21 81 22 33 1 ) 81 22 81 23 33 1 . 81 23 81 24 18446744073709551615 4 line 81 24 81 28 48 1 ; 81 28 81 29 18446744073709551615 7 int32_t 82 2 82 9 52 6 column 82 10 82 16 76 1 = 82 17 82 18 18446744073709551615 4 Look 82 19 82 23 33 1 ( 82 23 82 24 33 1 ) 82 24 82 25 33 1 . 82 25 82 26 18446744073709551615 6 column 82 26 82 32 49 1 ; 82 32 82 33 18446744073709551615 5 Match 83 2 83 7 15 1 ( 83 7 83 8 15 3 Tag 83 8 83 11 16 2 :: 83 11 83 13 18446744073709551615 5 While 83 13 83 18 77 1 ) 83 18 83 19 15 1 ; 83 19 83 20 18446744073709551615 6 ExpPtr 84 2 84 8 50 9 condition 84 9 84 18 78 1 = 84 19 84 20 18446744073709551615 3 And 84 21 84 24 67 1 ( 84 24 84 25 67 1 ) 84 25 84 26 67 1 ; 84 26 84 27 18446744073709551615 6 ExpPtr 85 2 85 8 50 4 body 85 9 85 13 79 1 = 85 14 85 15 18446744073709551615 5 Block 85 16 85 21 51 1 ( 85 21 85 22 51 1 ) 85 22 85 23 51 1 ; 85 23 85 24 18446744073709551615 6 return 86 2 86 8 18446744073709551615 3 Ast 86 9 86 12 60 2 :: 86 12 86 14 80 5 While 86 14 86 19 80 1 ( 86 19 86 20 80 4 line 86 20 86 24 75 1 , 86 24 86 25 80 6 column 86 26 86 32 76 1 , 86 32 86 33 80 9 condition 86 34 86 43 78 1 , 86 43 86 44 80 4 body 86 45 86 49 79 1 ) 86 49 86 50 80 1 ; 86 50 86 51 18446744073709551615 1 } 87 1 87 2 18446744073709551615 14 AccessModifier 88 1 88 15 30 6 Parser 88 16 88 22 3 2 :: 88 22 88 24 32 7 ParseAM 88 24 88 31 32 1 ( 88 31 88 32 32 5 Token 88 32 88 37 7 1 & 88 37 88 38 18446744073709551615 5 token 88 39 88 44 81 1 ) 88 44 88 45 32 1 { 89 1 89 2 18446744073709551615 2 if 90 2 90 4 18446744073709551615 1 ( 90 5 90 6 18446744073709551615 5 token 90 6 90 11 81 1 . 90 11 90 12 18446744073709551615 3 tag 90 12 90 15 35 2 == 90 16 90 18 18446744073709551615 3 Tag 90 19 90 22 16 2 :: 90 22 90 24 18446744073709551615 6 Public 90 24 90 30 82 1 ) 90 30 90 31 18446744073709551615 1 { 91 2 91 3 18446744073709551615 6 return 92 3 92 9 18446744073709551615 14 AccessModifier 92 10 92 24 30 2 :: 92 24 92 26 18446744073709551615 6 Public 92 26 92 32 83 1 ; 92 32 92 33 18446744073709551615 1 } 93 2 93 3 18446744073709551615 4 else 94 2 94 6 18446744073709551615 2 if 94 7 94 9 18446744073709551615 1 ( 94 10 94 11 18446744073709551615 5 token 94 11 94 16 81 1 . 94 16 94 17 18446744073709551615 3 tag 94 17 94 20 35 2 == 94 21 94 23 18446744073709551615 3 Tag 94 24 94 27 16 2 :: 94 27 94 29 18446744073709551615 7 Private 94 29 94 36 84 1 ) 94 36 94 37 18446744073709551615 1 { 95 2 95 3 18446744073709551615 6 return 96 3 96 9 18446744073709551615 14 AccessModifier 96 10 96 24 30 2 :: 96 24 96 26 18446744073709551615 7 Private 96 26 96 33 85 1 ; 96 33 96 34 18446744073709551615 1 } 97 2 97 3 18446744073709551615 4 else 98 2 98 6 18446744073709551615 2 if 98 7 98 9 18446744073709551615 1 ( 98 10 98 11 18446744073709551615 5 token 98 11 98 16 81 1 . 98 16 98 17 18446744073709551615 3 tag 98 17 98 20 35 2 == 98 21 98 23 18446744073709551615 3 Tag 98 24 98 27 16 2 :: 98 27 98 29 18446744073709551615 9 Protected 98 29 98 38 86 1 ) 98 38 98 39 18446744073709551615 1 { 99 2 99 3 18446744073709551615 6 return 100 3 100 9 18446744073709551615 14 AccessModifier 100 10 100 24 30 2 :: 100 24 100 26 18446744073709551615 9 Protected 100 26 100 35 87 1 ; 100 35 100 36 18446744073709551615 1 } 101 2 101 3 18446744073709551615 4 else 102 2 102 6 18446744073709551615 2 if 102 7 102 9 18446744073709551615 1 ( 102 10 102 11 18446744073709551615 5 token 102 11 102 16 81 1 . 102 16 102 17 18446744073709551615 3 tag 102 17 102 20 35 2 == 102 21 102 23 18446744073709551615 3 Tag 102 24 102 27 16 2 :: 102 27 102 29 18446744073709551615 8 Internal 102 29 102 37 88 1 ) 102 37 102 38 18446744073709551615 1 { 103 2 103 3 18446744073709551615 6 return 104 3 104 9 18446744073709551615 14 AccessModifier 104 10 104 24 30 2 :: 104 24 104 26 18446744073709551615 8 Internal 104 26 104 34 89 1 ; 104 34 104 35 18446744073709551615 1 } 105 2 105 3 18446744073709551615 4 else 106 2 106 6 18446744073709551615 1 { 107 2 107 3 18446744073709551615 5 throw 108 3 108 8 18446744073709551615 15 SyntaxException 108 9 108 24 47 1 ( 108 24 108 25 47 5 token 108 25 108 30 81 1 . 108 30 108 31 18446744073709551615 4 line 108 31 108 35 48 1 , 108 35 108 36 47 5 token 108 37 108 42 81 1 . 108 42 108 43 18446744073709551615 6 column 108 43 108 49 49 1 , 108 49 108 50 47 28 L"expecting access modifier" 109 10 109 38 18446744073709551615 1 ) 109 38 109 39 47 1 ; 109 39 109 40 18446744073709551615 1 } 110 2 110 3 18446744073709551615 1 } 111 1 111 2 18446744073709551615 6 Module 112 1 112 7 22 6 Parser 112 8 112 14 3 2 :: 112 14 112 16 45 9 DefModule 112 16 112 25 45 1 ( 112 25 112 26 45 14 AccessModifier 112 26 112 40 30 8 modifier 112 41 112 49 90 1 ) 112 49 112 50 45 1 { 113 1 113 2 18446744073709551615 5 Match 114 2 114 7 15 1 ( 114 7 114 8 15 3 Tag 114 8 114 11 16 2 :: 114 11 114 13 18446744073709551615 6 Module 114 13 114 19 43 1 ) 114 19 114 20 15 1 ; 114 20 114 21 18446744073709551615 4 Type 115 2 115 6 91 10 moduleType 115 7 115 17 92 1 = 115 18 115 19 18446744073709551615 9 ParseType 115 20 115 29 93 1 ( 115 29 115 30 93 1 ) 115 30 115 31 93 1 ; 115 31 115 32 18446744073709551615 10 moduleType 116 2 116 12 92 1 . 116 12 116 13 18446744073709551615 4 kind 116 13 116 17 94 1 = 116 18 116 19 18446744073709551615 8 TypeKind 116 20 116 28 95 2 :: 116 28 116 30 18446744073709551615 6 Module 116 30 116 36 96 1 ; 116 36 116 37 18446744073709551615 5 Match 117 2 117 7 15 1 ( 117 7 117 8 15 3 Tag 117 8 117 11 16 2 :: 117 11 117 13 18446744073709551615 9 LeftBrace 117 13 117 22 56 1 ) 117 22 117 23 15 1 ; 117 23 117 24 18446744073709551615 6 vector 118 2 118 8 6 1 < 118 8 118 9 18446744073709551615 5 Field 118 9 118 14 97 1 > 118 14 118 15 18446744073709551615 6 fields 118 16 118 22 98 1 ; 118 22 118 23 18446744073709551615 13 unordered_map 119 2 119 15 21 1 < 119 15 119 16 18446744073709551615 7 wstring 119 16 119 23 18 1 , 119 23 119 24 18446744073709551615 8 Function 119 25 119 33 99 1 > 119 33 119 34 18446744073709551615 9 functions 119 35 119 44 100 1 ; 119 44 119 45 18446744073709551615 5 while 120 2 120 7 18446744073709551615 1 ( 120 8 120 9 18446744073709551615 4 Look 120 9 120 13 33 1 ( 120 13 120 14 33 1 ) 120 14 120 15 33 1 . 120 15 120 16 18446744073709551615 3 tag 120 16 120 19 35 2 != 120 20 120 22 18446744073709551615 3 Tag 120 23 120 26 16 2 :: 120 26 120 28 18446744073709551615 10 RightBrace 120 28 120 38 57 1 ) 120 38 120 39 18446744073709551615 1 { 121 2 121 3 18446744073709551615 14 AccessModifier 122 3 122 17 30 2 am 122 18 122 20 101 1 = 122 21 122 22 18446744073709551615 7 ParseAM 122 23 122 30 32 1 ( 122 30 122 31 32 4 Look 122 31 122 35 33 1 ( 122 35 122 36 33 1 ) 122 36 122 37 33 1 ) 122 37 122 38 32 1 ; 122 38 122 39 18446744073709551615 4 Move 123 3 123 7 34 1 ( 123 7 123 8 34 1 ) 123 8 123 9 34 1 ; 123 9 123 10 18446744073709551615 2 if 124 3 124 5 18446744073709551615 1 ( 124 6 124 7 18446744073709551615 4 Look 124 7 124 11 33 1 ( 124 11 124 12 33 1 ) 124 12 124 13 33 1 . 124 13 124 14 18446744073709551615 3 tag 124 14 124 17 35 2 == 124 18 124 20 18446744073709551615 3 Tag 124 21 124 24 16 2 :: 124 24 124 26 18446744073709551615 6 DefVar 124 26 124 32 102 1 ) 124 32 124 33 18446744073709551615 1 { 125 3 125 4 18446744073709551615 5 Field 126 4 126 9 97 5 field 126 10 126 15 103 1 = 126 16 126 17 18446744073709551615 8 DefField 126 18 126 26 104 1 ( 126 26 126 27 104 2 am 126 27 126 29 101 1 ) 126 29 126 30 104 1 ; 126 30 126 31 18446744073709551615 6 fields 127 4 127 10 98 1 . 127 10 127 11 58 9 push_back 127 11 127 20 58 1 ( 127 20 127 21 58 5 field 127 21 127 26 103 1 ) 127 26 127 27 58 1 ; 127 27 127 28 18446744073709551615 1 } 128 3 128 4 18446744073709551615 4 else 129 3 129 7 18446744073709551615 2 if 129 8 129 10 18446744073709551615 1 ( 129 11 129 12 18446744073709551615 4 Look 129 12 129 16 33 1 ( 129 16 129 17 33 1 ) 129 17 129 18 33 1 . 129 18 129 19 18446744073709551615 3 tag 129 19 129 22 35 2 == 129 23 129 25 18446744073709551615 3 Tag 129 26 129 29 16 2 :: 129 29 129 31 18446744073709551615 6 DefFun 129 31 129 37 105 1 ) 129 37 129 38 18446744073709551615 1 { 130 3 130 4 18446744073709551615 8 Function 131 4 131 12 99 8 function 131 13 131 21 106 1 = 131 22 131 23 18446744073709551615 11 DefFunction 131 24 131 35 107 1 ( 131 35 131 36 107 2 am 131 36 131 38 101 1 ) 131 38 131 39 107 1 ; 131 39 131 40 18446744073709551615 9 functions 132 4 132 13 100 1 . 132 13 132 14 39 6 insert 132 14 132 20 39 1 ( 132 20 132 21 39 1 { 132 21 132 22 40 8 function 132 22 132 30 106 1 . 132 30 132 31 18446744073709551615 4 name 132 31 132 35 108 1 , 132 35 132 36 40 8 function 132 37 132 45 106 1 } 132 45 132 46 40 1 ) 132 46 132 47 39 1 ; 132 47 132 48 18446744073709551615 1 } 133 3 133 4 18446744073709551615 4 else 134 3 134 7 18446744073709551615 1 { 135 3 135 4 18446744073709551615 5 throw 136 4 136 9 18446744073709551615 15 SyntaxException 136 10 136 25 47 1 ( 136 25 136 26 47 4 Look 136 26 136 30 33 1 ( 136 30 136 31 33 1 ) 136 31 136 32 33 1 . 136 32 136 33 18446744073709551615 4 line 136 33 136 37 48 1 , 136 37 136 38 47 4 Look 136 39 136 43 33 1 ( 136 43 136 44 33 1 ) 136 44 136 45 33 1 . 136 45 136 46 18446744073709551615 6 column 136 46 136 52 49 1 , 136 52 136 53 47 27 L"expecting 'var' or 'fun'" 137 11 137 38 18446744073709551615 1 ) 137 38 137 39 47 1 ; 137 39 137 40 18446744073709551615 1 } 138 3 138 4 18446744073709551615 1 } 139 2 139 3 18446744073709551615 5 Match 140 2 140 7 15 1 ( 140 7 140 8 15 3 Tag 140 8 140 11 16 2 :: 140 11 140 13 18446744073709551615 10 RightBrace 140 13 140 23 57 1 ) 140 23 140 24 15 1 ; 140 24 140 25 18446744073709551615 21 // TO DO: initializer 141 2 141 23 18446744073709551615 6 return 142 2 142 8 18446744073709551615 6 Module 142 9 142 15 22 1 ( 142 15 142 16 22 8 modifier 142 16 142 24 90 1 , 142 24 142 25 22 10 moduleType 142 26 142 36 92 1 , 142 36 142 37 22 6 fields 142 38 142 44 98 1 , 142 44 142 45 22 9 functions 142 46 142 55 100 1 ) 142 55 142 56 22 1 ; 142 56 142 57 18446744073709551615 1 } 143 1 143 2 18446744073709551615 5 Class 144 1 144 6 24 6 Parser 144 7 144 13 3 2 :: 144 13 144 15 38 8 DefClass 144 15 144 23 38 1 ( 144 23 144 24 38 14 AccessModifier 144 24 144 38 30 8 modifier 144 39 144 47 109 1 ) 144 47 144 48 38 1 { 145 1 145 2 18446744073709551615 5 Match 146 2 146 7 15 1 ( 146 7 146 8 15 3 Tag 146 8 146 11 16 2 :: 146 11 146 13 18446744073709551615 5 Class 146 13 146 18 36 1 ) 146 18 146 19 15 1 ; 146 19 146 20 18446744073709551615 4 Type 147 2 147 6 91 9 classType 147 7 147 16 110 1 = 147 17 147 18 18446744073709551615 9 ParseType 147 19 147 28 93 1 ( 147 28 147 29 93 1 ) 147 29 147 30 93 1 ; 147 30 147 31 18446744073709551615 9 classType 148 2 148 11 110 1 . 148 11 148 12 18446744073709551615 4 kind 148 12 148 16 94 1 = 148 17 148 18 18446744073709551615 8 TypeKind 148 19 148 27 95 2 :: 148 27 148 29 18446744073709551615 5 Class 148 29 148 34 111 1 ; 148 34 148 35 18446744073709551615 5 Match 149 2 149 7 15 1 ( 149 7 149 8 15 3 Tag 149 8 149 11 16 2 :: 149 11 149 13 18446744073709551615 9 LeftBrace 149 13 149 22 56 1 ) 149 22 149 23 15 1 ; 149 23 149 24 18446744073709551615 6 vector 150 2 150 8 6 1 < 150 8 150 9 18446744073709551615 5 Field 150 9 150 14 97 1 > 150 14 150 15 18446744073709551615 6 fields 150 16 150 22 112 1 ; 150 22 150 23 18446744073709551615 13 unordered_map 151 2 151 15 21 1 < 151 15 151 16 18446744073709551615 7 wstring 151 16 151 23 18 1 , 151 23 151 24 18446744073709551615 8 Function 151 25 151 33 99 1 > 151 33 151 34 18446744073709551615 7 methods 151 35 151 42 113 1 ; 151 42 151 43 18446744073709551615 13 unordered_map 152 2 152 15 21 1 < 152 15 152 16 18446744073709551615 7 wstring 152 16 152 23 18 1 , 152 23 152 24 18446744073709551615 8 Function 152 25 152 33 99 1 > 152 33 152 34 18446744073709551615 12 constructors 152 35 152 47 114 1 ; 152 47 152 48 18446744073709551615 5 while 153 2 153 7 18446744073709551615 1 ( 153 8 153 9 18446744073709551615 4 Look 153 9 153 13 33 1 ( 153 13 153 14 33 1 ) 153 14 153 15 33 1 . 153 15 153 16 18446744073709551615 3 tag 153 16 153 19 35 2 != 153 20 153 22 18446744073709551615 3 Tag 153 23 153 26 16 2 :: 153 26 153 28 18446744073709551615 10 RightBrace 153 28 153 38 57 1 ) 153 38 153 39 18446744073709551615 1 { 154 2 154 3 18446744073709551615 14 AccessModifier 155 3 155 17 30 2 am 155 18 155 20 115 1 = 155 21 155 22 18446744073709551615 7 ParseAM 155 23 155 30 32 1 ( 155 30 155 31 32 4 Look 155 31 155 35 33 1 ( 155 35 155 36 33 1 ) 155 36 155 37 33 1 ) 155 37 155 38 32 1 ; 155 38 155 39 18446744073709551615 4 Move 156 3 156 7 34 1 ( 156 7 156 8 34 1 ) 156 8 156 9 34 1 ; 156 9 156 10 18446744073709551615 2 if 157 3 157 5 18446744073709551615 1 ( 157 6 157 7 18446744073709551615 4 Look 157 7 157 11 33 1 ( 157 11 157 12 33 1 ) 157 12 157 13 33 1 . 157 13 157 14 18446744073709551615 3 tag 157 14 157 17 35 2 == 157 18 157 20 18446744073709551615 3 Tag 157 21 157 24 16 2 :: 157 24 157 26 18446744073709551615 6 DefVar 157 26 157 32 102 1 ) 157 32 157 33 18446744073709551615 1 { 158 3 158 4 18446744073709551615 5 Field 159 4 159 9 97 5 field 159 10 159 15 116 1 = 159 16 159 17 18446744073709551615 8 DefField 159 18 159 26 104 1 ( 159 26 159 27 104 2 am 159 27 159 29 115 1 ) 159 29 159 30 104 1 ; 159 30 159 31 18446744073709551615 6 fields 160 4 160 10 112 1 . 160 10 160 11 58 9 push_back 160 11 160 20 58 1 ( 160 20 160 21 58 5 field 160 21 160 26 116 1 ) 160 26 160 27 58 1 ; 160 27 160 28 18446744073709551615 1 } 161 3 161 4 18446744073709551615 4 else 162 3 162 7 18446744073709551615 2 if 162 8 162 10 18446744073709551615 1 ( 162 11 162 12 18446744073709551615 4 Look 162 12 162 16 33 1 ( 162 16 162 17 33 1 ) 162 17 162 18 33 1 . 162 18 162 19 18446744073709551615 3 tag 162 19 162 22 35 2 == 162 23 162 25 18446744073709551615 3 Tag 162 26 162 29 16 2 :: 162 29 162 31 18446744073709551615 6 DefFun 162 31 162 37 105 1 ) 162 37 162 38 18446744073709551615 1 { 163 3 163 4 18446744073709551615 8 Function 164 4 164 12 99 6 method 164 13 164 19 117 1 = 164 20 164 21 18446744073709551615 11 DefFunction 164 22 164 33 107 1 ( 164 33 164 34 107 2 am 164 34 164 36 115 1 ) 164 36 164 37 107 1 ; 164 37 164 38 18446744073709551615 7 methods 165 4 165 11 113 1 . 165 11 165 12 39 6 insert 165 12 165 18 39 1 ( 165 18 165 19 39 1 { 165 19 165 20 40 6 method 165 20 165 26 117 1 . 165 26 165 27 18446744073709551615 4 name 165 27 165 31 108 1 , 165 31 165 32 40 6 method 165 33 165 39 117 1 } 165 39 165 40 40 1 ) 165 40 165 41 39 1 ; 165 41 165 42 18446744073709551615 1 } 166 3 166 4 18446744073709551615 4 else 167 3 167 7 18446744073709551615 1 { 168 3 168 4 18446744073709551615 5 throw 169 4 169 9 18446744073709551615 15 SyntaxException 169 10 169 25 47 1 ( 169 25 169 26 47 4 Look 169 26 169 30 33 1 ( 169 30 169 31 33 1 ) 169 31 169 32 33 1 . 169 32 169 33 18446744073709551615 4 line 169 33 169 37 48 1 , 169 37 169 38 47 4 Look 169 39 169 43 33 1 ( 169 43 169 44 33 1 ) 169 44 169 45 33 1 . 169 45 169 46 18446744073709551615 6 column 169 46 169 52 49 1 , 169 52 169 53 47 27 L"expecting 'var' or 'fun'" 170 11 170 38 18446744073709551615 1 ) 170 38 170 39 47 1 ; 170 39 170 40 18446744073709551615 1 } 171 3 171 4 18446744073709551615 1 } 172 2 172 3 18446744073709551615 5 Match 173 2 173 7 15 1 ( 173 7 173 8 15 3 Tag 173 8 173 11 16 2 :: 173 11 173 13 18446744073709551615 10 RightBrace 173 13 173 23 57 1 ) 173 23 173 24 15 1 ; 173 24 173 25 18446744073709551615 6 return 174 2 174 8 18446744073709551615 5 Class 174 9 174 14 24 1 ( 174 14 174 15 24 8 modifier 174 15 174 23 109 1 , 174 23 174 24 24 9 classType 174 25 174 34 110 1 , 174 34 174 35 24 6 fields 174 36 174 42 112 1 , 174 42 174 43 24 7 methods 174 44 174 51 113 1 , 174 51 174 52 24 12 constructors 174 53 174 65 114 1 ) 174 65 174 66 24 1 ; 174 66 174 67 18446744073709551615 1 } 175 1 175 2 18446744073709551615 8 Function 176 1 176 9 99 6 Parser 176 10 176 16 3 2 :: 176 16 176 18 107 11 DefFunction 176 18 176 29 107 1 ( 176 29 176 30 107 14 AccessModifier 176 30 176 44 30 8 modifier 176 45 176 53 118 1 ) 176 53 176 54 107 1 { 177 1 177 2 18446744073709551615 5 Match 178 2 178 7 15 1 ( 178 7 178 8 15 3 Tag 178 8 178 11 16 2 :: 178 11 178 13 18446744073709551615 6 DefFun 178 13 178 19 105 1 ) 178 19 178 20 15 1 ; 178 20 178 21 18446744073709551615 7 wstring 179 2 179 9 18 4 name 179 10 179 14 119 1 = 179 15 179 16 18446744073709551615 15 ParseIdentifier 179 17 179 32 120 1 ( 179 32 179 33 120 1 ) 179 33 179 34 120 1 ; 179 34 179 35 18446744073709551615 5 Match 180 2 180 7 15 1 ( 180 7 180 8 15 3 Tag 180 8 180 11 16 2 :: 180 11 180 13 18446744073709551615 15 LeftParenthesis 180 13 180 28 121 1 ) 180 28 180 29 15 1 ; 180 29 180 30 18446744073709551615 6 vector 181 2 181 8 6 1 < 181 8 181 9 18446744073709551615 9 Parameter 181 9 181 18 122 1 > 181 18 181 19 18446744073709551615 10 parameters 181 20 181 30 123 1 ; 181 30 181 31 18446744073709551615 2 if 182 2 182 4 18446744073709551615 1 ( 182 5 182 6 18446744073709551615 4 Look 182 6 182 10 33 1 ( 182 10 182 11 33 1 ) 182 11 182 12 33 1 . 182 12 182 13 18446744073709551615 3 tag 182 13 182 16 35 2 == 182 17 182 19 18446744073709551615 3 Tag 182 20 182 23 16 2 :: 182 23 182 25 18446744073709551615 16 RightParenthesis 182 25 182 41 124 1 ) 182 41 182 42 18446744073709551615 1 { 183 2 183 3 18446744073709551615 5 Match 184 3 184 8 15 1 ( 184 8 184 9 15 3 Tag 184 9 184 12 16 2 :: 184 12 184 14 18446744073709551615 16 RightParenthesis 184 14 184 30 124 1 ) 184 30 184 31 15 1 ; 184 31 184 32 18446744073709551615 1 } 185 2 185 3 18446744073709551615 4 else 186 2 186 6 18446744073709551615 1 { 187 2 187 3 18446744073709551615 10 parameters 188 3 188 13 123 1 . 188 13 188 14 58 9 push_back 188 14 188 23 58 1 ( 188 23 188 24 58 14 ParseParameter 188 24 188 38 125 1 ( 188 38 188 39 125 1 ) 188 39 188 40 125 1 ) 188 40 188 41 58 1 ; 188 41 188 42 18446744073709551615 5 while 189 3 189 8 18446744073709551615 1 ( 189 9 189 10 18446744073709551615 4 Look 189 10 189 14 33 1 ( 189 14 189 15 33 1 ) 189 15 189 16 33 1 . 189 16 189 17 18446744073709551615 3 tag 189 17 189 20 35 2 != 189 21 189 23 18446744073709551615 3 Tag 189 24 189 27 16 2 :: 189 27 189 29 18446744073709551615 16 RightParenthesis 189 29 189 45 124 1 ) 189 45 189 46 18446744073709551615 1 { 190 3 190 4 18446744073709551615 5 Match 191 4 191 9 15 1 ( 191 9 191 10 15 3 Tag 191 10 191 13 16 2 :: 191 13 191 15 18446744073709551615 5 Comma 191 15 191 20 126 1 ) 191 20 191 21 15 1 ; 191 21 191 22 18446744073709551615 10 parameters 192 4 192 14 123 1 . 192 14 192 15 58 9 push_back 192 15 192 24 58 1 ( 192 24 192 25 58 14 ParseParameter 192 25 192 39 125 1 ( 192 39 192 40 125 1 ) 192 40 192 41 125 1 ) 192 41 192 42 58 1 ; 192 42 192 43 18446744073709551615 1 } 193 3 193 4 18446744073709551615 5 Match 194 3 194 8 15 1 ( 194 8 194 9 15 3 Tag 194 9 194 12 16 2 :: 194 12 194 14 18446744073709551615 16 RightParenthesis 194 14 194 30 124 1 ) 194 30 194 31 15 1 ; 194 31 194 32 18446744073709551615 1 } 195 2 195 3 18446744073709551615 5 Match 196 2 196 7 15 1 ( 196 7 196 8 15 3 Tag 196 8 196 11 16 2 :: 196 11 196 13 18446744073709551615 5 Colon 196 13 196 18 127 1 ) 196 18 196 19 15 1 ; 196 19 196 20 18446744073709551615 4 Type 197 2 197 6 91 10 returnType 197 7 197 17 128 1 = 197 18 197 19 18446744073709551615 9 ParseType 197 20 197 29 93 1 ( 197 29 197 30 93 1 ) 197 30 197 31 93 1 ; 197 31 197 32 18446744073709551615 5 Match 198 2 198 7 15 1 ( 198 7 198 8 15 3 Tag 198 8 198 11 16 2 :: 198 11 198 13 18446744073709551615 9 LeftBrace 198 13 198 22 56 1 ) 198 22 198 23 15 1 ; 198 23 198 24 18446744073709551615 6 vector 199 2 199 8 6 1 < 199 8 199 9 18446744073709551615 13 LocalVariable 199 9 199 22 129 1 > 199 22 199 23 18446744073709551615 9 variables 199 24 199 33 130 1 ; 199 33 199 34 18446744073709551615 5 while 200 2 200 7 18446744073709551615 1 ( 200 8 200 9 18446744073709551615 4 Look 200 9 200 13 33 1 ( 200 13 200 14 33 1 ) 200 14 200 15 33 1 . 200 15 200 16 18446744073709551615 3 tag 200 16 200 19 35 2 == 200 20 200 22 18446744073709551615 3 Tag 200 23 200 26 16 2 :: 200 26 200 28 18446744073709551615 6 DefVar 200 28 200 34 102 1 ) 200 34 200 35 18446744073709551615 1 { 201 2 201 3 18446744073709551615 9 variables 202 3 202 12 130 1 . 202 12 202 13 58 9 push_back 202 13 202 22 58 1 ( 202 22 202 23 58 16 DefLocalVariable 202 23 202 39 131 1 ( 202 39 202 40 131 1 ) 202 40 202 41 131 1 ) 202 41 202 42 58 1 ; 202 42 202 43 18446744073709551615 1 } 203 2 203 3 18446744073709551615 6 vector 204 2 204 8 6 1 < 204 8 204 9 18446744073709551615 6 ExpPtr 204 9 204 15 50 1 > 204 15 204 16 18446744073709551615 11 expressions 204 17 204 28 132 1 ; 204 28 204 29 18446744073709551615 5 while 205 2 205 7 18446744073709551615 1 ( 205 8 205 9 18446744073709551615 4 Look 205 9 205 13 33 1 ( 205 13 205 14 33 1 ) 205 14 205 15 33 1 . 205 15 205 16 18446744073709551615 3 tag 205 16 205 19 35 2 != 205 20 205 22 18446744073709551615 3 Tag 205 23 205 26 16 2 :: 205 26 205 28 18446744073709551615 10 RightBrace 205 28 205 38 57 1 ) 205 38 205 39 18446744073709551615 1 { 206 2 206 3 18446744073709551615 11 expressions 207 3 207 14 132 1 . 207 14 207 15 58 9 push_back 207 15 207 24 58 1 ( 207 24 207 25 58 9 Statement 207 25 207 34 59 1 ( 207 34 207 35 59 1 ) 207 35 207 36 59 1 ) 207 36 207 37 58 1 ; 207 37 207 38 18446744073709551615 1 } 208 2 208 3 18446744073709551615 5 Match 209 2 209 7 15 1 ( 209 7 209 8 15 3 Tag 209 8 209 11 16 2 :: 209 11 209 13 18446744073709551615 10 RightBrace 209 13 209 23 57 1 ) 209 23 209 24 15 1 ; 209 24 209 25 18446744073709551615 6 return 210 2 210 8 18446744073709551615 8 Function 210 9 210 17 99 1 ( 210 17 210 18 99 8 modifier 210 18 210 26 118 1 , 210 26 210 27 99 4 name 210 28 210 32 119 1 , 210 32 210 33 99 10 parameters 210 34 210 44 123 1 , 210 44 210 45 99 9 variables 210 46 210 55 130 1 , 210 55 210 56 99 11 expressions 210 57 210 68 132 1 , 210 68 210 69 99 10 returnType 211 6 211 16 128 1 ) 211 16 211 17 99 1 ; 211 17 211 18 18446744073709551615 1 } 212 1 212 2 18446744073709551615 9 Parameter 213 1 213 10 122 6 Parser 213 11 213 17 3 2 :: 213 17 213 19 125 14 ParseParameter 213 19 213 33 125 1 ( 213 33 213 34 125 1 ) 213 34 213 35 125 1 { 214 1 214 2 18446744073709551615 7 wstring 215 2 215 9 18 4 name 215 10 215 14 133 1 = 215 15 215 16 18446744073709551615 15 ParseIdentifier 215 17 215 32 120 1 ( 215 32 215 33 120 1 ) 215 33 215 34 120 1 ; 215 34 215 35 18446744073709551615 5 Match 216 2 216 7 15 1 ( 216 7 216 8 15 3 Tag 216 8 216 11 16 2 :: 216 11 216 13 18446744073709551615 5 Colon 216 13 216 18 127 1 ) 216 18 216 19 15 1 ; 216 19 216 20 18446744073709551615 4 Type 217 2 217 6 91 4 type 217 7 217 11 134 1 = 217 12 217 13 18446744073709551615 9 ParseType 217 14 217 23 93 1 ( 217 23 217 24 93 1 ) 217 24 217 25 93 1 ; 217 25 217 26 18446744073709551615 6 return 218 2 218 8 18446744073709551615 9 Parameter 218 9 218 18 122 1 ( 218 18 218 19 122 4 name 218 19 218 23 133 1 , 218 23 218 24 122 4 type 218 25 218 29 134 1 ) 218 29 218 30 122 1 ; 218 30 218 31 18446744073709551615 1 } 219 1 219 2 18446744073709551615 13 LocalVariable 220 1 220 14 129 6 Parser 220 15 220 21 3 2 :: 220 21 220 23 131 16 DefLocalVariable 220 23 220 39 131 1 ( 220 39 220 40 131 1 ) 220 40 220 41 131 1 { 221 1 221 2 18446744073709551615 5 Match 222 2 222 7 15 1 ( 222 7 222 8 15 3 Tag 222 8 222 11 16 2 :: 222 11 222 13 18446744073709551615 6 DefVar 222 13 222 19 102 1 ) 222 19 222 20 15 1 ; 222 20 222 21 18446744073709551615 7 wstring 223 2 223 9 18 4 name 223 10 223 14 135 1 = 223 15 223 16 18446744073709551615 15 ParseIdentifier 223 17 223 32 120 1 ( 223 32 223 33 120 1 ) 223 33 223 34 120 1 ; 223 34 223 35 18446744073709551615 5 Match 224 2 224 7 15 1 ( 224 7 224 8 15 3 Tag 224 8 224 11 16 2 :: 224 11 224 13 18446744073709551615 5 Colon 224 13 224 18 127 1 ) 224 18 224 19 15 1 ; 224 19 224 20 18446744073709551615 4 Type 225 2 225 6 91 4 type 225 7 225 11 136 1 = 225 12 225 13 18446744073709551615 9 ParseType 225 14 225 23 93 1 ( 225 23 225 24 93 1 ) 225 24 225 25 93 1 ; 225 25 225 26 18446744073709551615 5 Match 226 2 226 7 15 1 ( 226 7 226 8 15 3 Tag 226 8 226 11 16 2 :: 226 11 226 13 18446744073709551615 6 Assign 226 13 226 19 137 1 ) 226 19 226 20 15 1 ; 226 20 226 21 18446744073709551615 6 ExpPtr 227 2 227 8 50 5 value 227 9 227 14 138 1 = 227 15 227 16 18446744073709551615 2 Or 227 17 227 19 139 1 ( 227 19 227 20 139 1 ) 227 20 227 21 139 1 ; 227 21 227 22 18446744073709551615 6 return 228 2 228 8 18446744073709551615 13 LocalVariable 228 9 228 22 129 1 ( 228 22 228 23 129 4 name 228 23 228 27 135 1 , 228 27 228 28 129 4 type 228 29 228 33 136 1 , 228 33 228 34 129 5 value 228 35 228 40 138 1 ) 228 40 228 41 129 1 ; 228 41 228 42 18446744073709551615 1 } 229 1 229 2 18446744073709551615 5 Field 230 1 230 6 97 6 Parser 230 7 230 13 3 2 :: 230 13 230 15 104 8 DefField 230 15 230 23 104 1 ( 230 23 230 24 104 14 AccessModifier 230 24 230 38 30 8 modifier 230 39 230 47 140 1 ) 230 47 230 48 104 1 { 231 1 231 2 18446744073709551615 5 Match 232 2 232 7 15 1 ( 232 7 232 8 15 3 Tag 232 8 232 11 16 2 :: 232 11 232 13 18446744073709551615 6 DefVar 232 13 232 19 102 1 ) 232 19 232 20 15 1 ; 232 20 232 21 18446744073709551615 7 wstring 233 2 233 9 18 4 name 233 10 233 14 141 1 = 233 15 233 16 18446744073709551615 15 ParseIdentifier 233 17 233 32 120 1 ( 233 32 233 33 120 1 ) 233 33 233 34 120 1 ; 233 34 233 35 18446744073709551615 5 Match 234 2 234 7 15 1 ( 234 7 234 8 15 3 Tag 234 8 234 11 16 2 :: 234 11 234 13 18446744073709551615 5 Colon 234 13 234 18 127 1 ) 234 18 234 19 15 1 ; 234 19 234 20 18446744073709551615 4 Type 235 2 235 6 91 4 type 235 7 235 11 142 1 = 235 12 235 13 18446744073709551615 9 ParseType 235 14 235 23 93 1 ( 235 23 235 24 93 1 ) 235 24 235 25 93 1 ; 235 25 235 26 18446744073709551615 5 Match 236 2 236 7 15 1 ( 236 7 236 8 15 3 Tag 236 8 236 11 16 2 :: 236 11 236 13 18446744073709551615 6 Assign 236 13 236 19 137 1 ) 236 19 236 20 15 1 ; 236 20 236 21 18446744073709551615 6 ExpPtr 237 2 237 8 50 5 value 237 9 237 14 143 1 = 237 15 237 16 18446744073709551615 2 Or 237 17 237 19 139 1 ( 237 19 237 20 139 1 ) 237 20 237 21 139 1 ; 237 21 237 22 18446744073709551615 6 return 238 2 238 8 18446744073709551615 5 Field 238 9 238 14 97 1 ( 238 14 238 15 97 8 modifier 238 15 238 23 140 1 , 238 23 238 24 97 4 name 238 25 238 29 141 1 , 238 29 238 30 97 4 type 238 31 238 35 142 1 , 238 35 238 36 97 5 value 238 37 238 42 143 1 ) 238 42 238 43 97 1 ; 238 43 238 44 18446744073709551615 1 } 239 1 239 2 18446744073709551615 6 ExpPtr 240 1 240 7 50 6 Parser 240 8 240 14 3 2 :: 240 14 240 16 144 6 Return 240 16 240 22 144 1 ( 240 22 240 23 144 1 ) 240 23 240 24 144 1 { 241 1 241 2 18446744073709551615 5 Token 242 2 242 7 7 1 & 242 7 242 8 18446744073709551615 5 token 242 9 242 14 145 1 = 242 15 242 16 18446744073709551615 4 Look 242 17 242 21 33 1 ( 242 21 242 22 33 1 ) 242 22 242 23 33 1 ; 242 23 242 24 18446744073709551615 5 Match 243 2 243 7 15 1 ( 243 7 243 8 15 3 Tag 243 8 243 11 16 2 :: 243 11 243 13 18446744073709551615 6 Return 243 13 243 19 146 1 ) 243 19 243 20 15 1 ; 243 20 243 21 18446744073709551615 6 ExpPtr 244 2 244 8 50 5 value 244 9 244 14 147 1 = 244 15 244 16 18446744073709551615 3 And 244 17 244 20 67 1 ( 244 20 244 21 67 1 ) 244 21 244 22 67 1 ; 244 22 244 23 18446744073709551615 6 return 245 2 245 8 18446744073709551615 3 Ast 245 9 245 12 60 2 :: 245 12 245 14 148 6 Return 245 14 245 20 148 1 ( 245 20 245 21 148 5 token 245 21 245 26 145 1 . 245 26 245 27 18446744073709551615 4 line 245 27 245 31 48 1 , 245 31 245 32 148 5 token 245 33 245 38 145 1 . 245 38 245 39 18446744073709551615 6 column 245 39 245 45 49 1 , 245 45 245 46 148 5 value 245 47 245 52 147 1 ) 245 52 245 53 148 1 ; 245 53 245 54 18446744073709551615 1 } 246 1 246 2 18446744073709551615 6 ExpPtr 247 1 247 7 50 6 Parser 247 8 247 14 3 2 :: 247 14 247 16 59 9 Statement 247 16 247 25 59 1 ( 247 25 247 26 59 1 ) 247 26 247 27 59 1 { 248 1 248 2 18446744073709551615 6 switch 249 2 249 8 18446744073709551615 1 ( 249 9 249 10 18446744073709551615 4 Look 249 10 249 14 33 1 ( 249 14 249 15 33 1 ) 249 15 249 16 33 1 . 249 16 249 17 18446744073709551615 3 tag 249 17 249 20 35 1 ) 249 20 249 21 18446744073709551615 1 { 250 2 250 3 18446744073709551615 4 case 251 2 251 6 18446744073709551615 3 Tag 251 7 251 10 16 2 :: 251 10 251 12 18446744073709551615 2 If 251 12 251 14 65 1 : 251 14 251 15 18446744073709551615 6 return 252 3 252 9 18446744073709551615 2 If 252 10 252 12 62 1 ( 252 12 252 13 62 1 ) 252 13 252 14 62 1 ; 252 14 252 15 18446744073709551615 4 case 253 2 253 6 18446744073709551615 3 Tag 253 7 253 10 16 2 :: 253 10 253 12 18446744073709551615 6 Return 253 12 253 18 146 1 : 253 18 253 19 18446744073709551615 6 return 254 3 254 9 18446744073709551615 6 Return 254 10 254 16 144 1 ( 254 16 254 17 144 1 ) 254 17 254 18 144 1 ; 254 18 254 19 18446744073709551615 4 case 255 2 255 6 18446744073709551615 3 Tag 255 7 255 10 16 2 :: 255 10 255 12 18446744073709551615 5 While 255 12 255 17 77 1 : 255 17 255 18 18446744073709551615 6 return 256 3 256 9 18446744073709551615 5 While 256 10 256 15 74 1 ( 256 15 256 16 74 1 ) 256 16 256 17 74 1 ; 256 17 256 18 18446744073709551615 7 default 257 2 257 9 18446744073709551615 1 : 257 9 257 10 18446744073709551615 6 return 258 3 258 9 18446744073709551615 6 Assign 258 10 258 16 149 1 ( 258 16 258 17 149 1 ) 258 17 258 18 149 1 ; 258 18 258 19 18446744073709551615 1 } 259 2 259 3 18446744073709551615 1 } 260 1 260 2 18446744073709551615 6 ExpPtr 261 1 261 7 50 6 Parser 261 8 261 14 3 2 :: 261 14 261 16 149 6 Assign 261 16 261 22 149 1 ( 261 22 261 23 149 1 ) 261 23 261 24 149 1 { 262 1 262 2 18446744073709551615 6 ExpPtr 263 2 263 8 50 1 x 263 9 263 10 150 1 = 263 11 263 12 18446744073709551615 3 And 263 13 263 16 67 1 ( 263 16 263 17 67 1 ) 263 17 263 18 67 1 ; 263 18 263 19 18446744073709551615 2 if 264 2 264 4 18446744073709551615 1 ( 264 5 264 6 18446744073709551615 1 x 264 6 264 7 150 2 -> 264 7 264 9 18446744073709551615 4 kind 264 9 264 13 151 2 == 264 14 264 16 18446744073709551615 14 ExpressionKind 264 17 264 31 152 2 :: 264 31 264 33 18446744073709551615 8 Variable 264 33 264 41 153 2 && 264 42 264 44 18446744073709551615 4 Look 264 45 264 49 33 1 ( 264 49 264 50 33 1 ) 264 50 264 51 33 1 . 264 51 264 52 18446744073709551615 3 tag 264 52 264 55 35 2 == 264 56 264 58 18446744073709551615 3 Tag 264 59 264 62 16 2 :: 264 62 264 64 18446744073709551615 6 Assign 264 64 264 70 137 1 ) 264 70 264 71 18446744073709551615 1 { 265 2 265 3 18446744073709551615 3 int 266 3 266 6 18446744073709551615 4 line 266 7 266 11 154 1 = 266 12 266 13 18446744073709551615 4 Look 266 14 266 18 33 1 ( 266 18 266 19 33 1 ) 266 19 266 20 33 1 . 266 20 266 21 18446744073709551615 4 line 266 21 266 25 48 1 ; 266 25 266 26 18446744073709551615 3 int 267 3 267 6 18446744073709551615 6 column 267 7 267 13 155 1 = 267 14 267 15 18446744073709551615 4 Look 267 16 267 20 33 1 ( 267 20 267 21 33 1 ) 267 21 267 22 33 1 . 267 22 267 23 18446744073709551615 6 column 267 23 267 29 49 1 ; 267 29 267 30 18446744073709551615 4 Move 268 3 268 7 34 1 ( 268 7 268 8 34 1 ) 268 8 268 9 34 1 ; 268 9 268 10 18446744073709551615 14 VariableExpPtr 269 3 269 17 156 8 variable 269 18 269 26 157 1 = 269 27 269 28 18446744073709551615 19 static_pointer_cast 269 29 269 48 158 1 < 269 48 269 49 158 18 VariableExpression 269 49 269 67 159 1 > 269 67 269 68 158 1 ( 269 68 269 69 158 1 x 269 69 269 70 150 1 ) 269 70 269 71 158 1 ; 269 71 269 72 18446744073709551615 6 return 270 3 270 9 18446744073709551615 3 Ast 270 10 270 13 60 2 :: 270 13 270 15 160 6 Assign 270 15 270 21 160 1 ( 270 21 270 22 160 4 line 270 22 270 26 154 1 , 270 26 270 27 160 6 column 270 28 270 34 155 1 , 270 34 270 35 160 8 variable 270 36 270 44 157 2 -> 270 44 270 46 18446744073709551615 4 name 270 46 270 50 161 1 , 270 50 270 51 160 3 And 270 52 270 55 67 1 ( 270 55 270 56 67 1 ) 270 56 270 57 67 1 ) 270 57 270 58 160 1 ; 270 58 270 59 18446744073709551615 1 } 271 2 271 3 18446744073709551615 4 else 272 2 272 6 18446744073709551615 1 { 273 2 273 3 18446744073709551615 6 return 274 3 274 9 18446744073709551615 1 x 274 10 274 11 150 1 ; 274 11 274 12 18446744073709551615 1 } 275 2 275 3 18446744073709551615 1 } 276 1 276 2 18446744073709551615 6 ExpPtr 277 1 277 7 50 6 Parser 277 8 277 14 3 2 :: 277 14 277 16 139 2 Or 277 16 277 18 139 1 ( 277 18 277 19 139 1 ) 277 19 277 20 139 1 { 278 1 278 2 18446744073709551615 6 ExpPtr 279 2 279 8 50 1 x 279 9 279 10 162 1 = 279 11 279 12 18446744073709551615 3 And 279 13 279 16 67 1 ( 279 16 279 17 67 1 ) 279 17 279 18 67 1 ; 279 18 279 19 18446744073709551615 5 while 280 2 280 7 18446744073709551615 1 ( 280 8 280 9 18446744073709551615 4 Look 280 9 280 13 33 1 ( 280 13 280 14 33 1 ) 280 14 280 15 33 1 . 280 15 280 16 18446744073709551615 3 tag 280 16 280 19 35 2 == 280 20 280 22 18446744073709551615 3 Tag 280 23 280 26 16 2 :: 280 26 280 28 18446744073709551615 2 Or 280 28 280 30 163 1 ) 280 30 280 31 18446744073709551615 1 { 281 2 281 3 18446744073709551615 3 int 282 3 282 6 18446744073709551615 4 line 282 7 282 11 164 1 = 282 12 282 13 18446744073709551615 4 Look 282 14 282 18 33 1 ( 282 18 282 19 33 1 ) 282 19 282 20 33 1 . 282 20 282 21 18446744073709551615 4 line 282 21 282 25 48 1 ; 282 25 282 26 18446744073709551615 3 int 283 3 283 6 18446744073709551615 6 column 283 7 283 13 165 1 = 283 14 283 15 18446744073709551615 4 Look 283 16 283 20 33 1 ( 283 20 283 21 33 1 ) 283 21 283 22 33 1 . 283 22 283 23 18446744073709551615 6 column 283 23 283 29 49 1 ; 283 29 283 30 18446744073709551615 4 Move 284 3 284 7 34 1 ( 284 7 284 8 34 1 ) 284 8 284 9 34 1 ; 284 9 284 10 18446744073709551615 1 x 285 3 285 4 162 1 = 285 5 285 6 166 3 Ast 285 7 285 10 60 2 :: 285 10 285 12 167 2 Or 285 12 285 14 167 1 ( 285 14 285 15 167 4 line 285 15 285 19 164 1 , 285 19 285 20 167 6 column 285 21 285 27 165 1 , 285 27 285 28 167 1 x 285 29 285 30 162 1 , 285 30 285 31 167 3 And 285 32 285 35 67 1 ( 285 35 285 36 67 1 ) 285 36 285 37 67 1 ) 285 37 285 38 167 1 ; 285 38 285 39 18446744073709551615 1 } 286 2 286 3 18446744073709551615 6 return 287 2 287 8 18446744073709551615 1 x 287 9 287 10 162 1 ; 287 10 287 11 18446744073709551615 1 } 288 1 288 2 18446744073709551615 6 ExpPtr 289 1 289 7 50 6 Parser 289 8 289 14 3 2 :: 289 14 289 16 67 3 And 289 16 289 19 67 1 ( 289 19 289 20 67 1 ) 289 20 289 21 67 1 { 290 1 290 2 18446744073709551615 6 ExpPtr 291 2 291 8 50 1 x 291 9 291 10 168 1 = 291 11 291 12 18446744073709551615 8 Equality 291 13 291 21 169 1 ( 291 21 291 22 169 1 ) 291 22 291 23 169 1 ; 291 23 291 24 18446744073709551615 5 while 292 2 292 7 18446744073709551615 1 ( 292 8 292 9 18446744073709551615 4 Look 292 9 292 13 33 1 ( 292 13 292 14 33 1 ) 292 14 292 15 33 1 . 292 15 292 16 18446744073709551615 3 tag 292 16 292 19 35 2 == 292 20 292 22 18446744073709551615 3 Tag 292 23 292 26 16 2 :: 292 26 292 28 18446744073709551615 3 And 292 28 292 31 170 1 ) 292 31 292 32 18446744073709551615 1 { 293 2 293 3 18446744073709551615 3 int 294 3 294 6 18446744073709551615 4 line 294 7 294 11 171 1 = 294 12 294 13 18446744073709551615 4 Look 294 14 294 18 33 1 ( 294 18 294 19 33 1 ) 294 19 294 20 33 1 . 294 20 294 21 18446744073709551615 4 line 294 21 294 25 48 1 ; 294 25 294 26 18446744073709551615 3 int 295 3 295 6 18446744073709551615 6 column 295 7 295 13 172 1 = 295 14 295 15 18446744073709551615 4 Look 295 16 295 20 33 1 ( 295 20 295 21 33 1 ) 295 21 295 22 33 1 . 295 22 295 23 18446744073709551615 6 column 295 23 295 29 49 1 ; 295 29 295 30 18446744073709551615 4 Move 296 3 296 7 34 1 ( 296 7 296 8 34 1 ) 296 8 296 9 34 1 ; 296 9 296 10 18446744073709551615 1 x 297 3 297 4 168 1 = 297 5 297 6 166 3 Ast 297 7 297 10 60 2 :: 297 10 297 12 173 3 And 297 12 297 15 173 1 ( 297 15 297 16 173 4 line 297 16 297 20 171 1 , 297 20 297 21 173 6 column 297 22 297 28 172 1 , 297 28 297 29 173 1 x 297 30 297 31 168 1 , 297 31 297 32 173 8 Equality 297 33 297 41 169 1 ( 297 41 297 42 169 1 ) 297 42 297 43 169 1 ) 297 43 297 44 173 1 ; 297 44 297 45 18446744073709551615 1 } 298 2 298 3 18446744073709551615 6 return 299 2 299 8 18446744073709551615 1 x 299 9 299 10 168 1 ; 299 10 299 11 18446744073709551615 1 } 300 1 300 2 18446744073709551615 6 ExpPtr 301 1 301 7 50 6 Parser 301 8 301 14 3 2 :: 301 14 301 16 169 8 Equality 301 16 301 24 169 1 ( 301 24 301 25 169 1 ) 301 25 301 26 169 1 { 302 1 302 2 18446744073709551615 6 ExpPtr 303 2 303 8 50 1 x 303 9 303 10 174 1 = 303 11 303 12 18446744073709551615 8 Relation 303 13 303 21 175 1 ( 303 21 303 22 175 1 ) 303 22 303 23 175 1 ; 303 23 303 24 18446744073709551615 5 while 304 2 304 7 18446744073709551615 1 ( 304 8 304 9 18446744073709551615 4 Look 304 9 304 13 33 1 ( 304 13 304 14 33 1 ) 304 14 304 15 33 1 . 304 15 304 16 18446744073709551615 3 tag 304 16 304 19 35 2 == 304 20 304 22 18446744073709551615 3 Tag 304 23 304 26 16 2 :: 304 26 304 28 18446744073709551615 5 Equal 304 28 304 33 176 2 || 304 34 304 36 18446744073709551615 4 Look 304 37 304 41 33 1 ( 304 41 304 42 33 1 ) 304 42 304 43 33 1 . 304 43 304 44 18446744073709551615 3 tag 304 44 304 47 35 2 == 304 48 304 50 18446744073709551615 3 Tag 304 51 304 54 16 2 :: 304 54 304 56 18446744073709551615 8 NotEqual 304 56 304 64 177 1 ) 304 64 304 65 18446744073709551615 1 { 305 2 305 3 18446744073709551615 5 Token 306 3 306 8 7 1 & 306 8 306 9 18446744073709551615 5 token 306 10 306 15 178 1 = 306 16 306 17 18446744073709551615 4 Look 306 18 306 22 33 1 ( 306 22 306 23 33 1 ) 306 23 306 24 33 1 ; 306 24 306 25 18446744073709551615 4 Move 307 3 307 7 34 1 ( 307 7 307 8 34 1 ) 307 8 307 9 34 1 ; 307 9 307 10 18446744073709551615 2 if 308 3 308 5 18446744073709551615 1 ( 308 6 308 7 18446744073709551615 5 token 308 7 308 12 178 1 . 308 12 308 13 18446744073709551615 3 tag 308 13 308 16 35 2 == 308 17 308 19 18446744073709551615 3 Tag 308 20 308 23 16 2 :: 308 23 308 25 18446744073709551615 5 Equal 308 25 308 30 176 1 ) 308 30 308 31 18446744073709551615 1 { 309 3 309 4 18446744073709551615 1 x 310 4 310 5 174 1 = 310 6 310 7 166 3 Ast 310 8 310 11 60 2 :: 310 11 310 13 179 5 Equal 310 13 310 18 179 1 ( 310 18 310 19 179 5 token 310 19 310 24 178 1 . 310 24 310 25 18446744073709551615 4 line 310 25 310 29 48 1 , 310 29 310 30 179 5 token 310 31 310 36 178 1 . 310 36 310 37 18446744073709551615 6 column 310 37 310 43 49 1 , 310 43 310 44 179 1 x 310 45 310 46 174 1 , 310 46 310 47 179 8 Relation 310 48 310 56 175 1 ( 310 56 310 57 175 1 ) 310 57 310 58 175 1 ) 310 58 310 59 179 1 ; 310 59 310 60 18446744073709551615 1 } 311 3 311 4 18446744073709551615 4 else 312 3 312 7 18446744073709551615 1 { 313 3 313 4 18446744073709551615 1 x 314 4 314 5 174 1 = 314 6 314 7 166 3 Ast 314 8 314 11 60 2 :: 314 11 314 13 180 8 NotEqual 314 13 314 21 180 1 ( 314 21 314 22 180 5 token 314 22 314 27 178 1 . 314 27 314 28 18446744073709551615 4 line 314 28 314 32 48 1 , 314 32 314 33 180 5 token 314 34 314 39 178 1 . 314 39 314 40 18446744073709551615 6 column 314 40 314 46 49 1 , 314 46 314 47 180 1 x 314 48 314 49 174 1 , 314 49 314 50 180 8 Relation 314 51 314 59 175 1 ( 314 59 314 60 175 1 ) 314 60 314 61 175 1 ) 314 61 314 62 180 1 ; 314 62 314 63 18446744073709551615 1 } 315 3 315 4 18446744073709551615 1 } 316 2 316 3 18446744073709551615 6 return 317 2 317 8 18446744073709551615 1 x 317 9 317 10 174 1 ; 317 10 317 11 18446744073709551615 1 } 318 1 318 2 18446744073709551615 6 ExpPtr 319 1 319 7 50 6 Parser 319 8 319 14 3 2 :: 319 14 319 16 175 8 Relation 319 16 319 24 175 1 ( 319 24 319 25 175 1 ) 319 25 319 26 175 1 { 320 1 320 2 18446744073709551615 6 ExpPtr 321 2 321 8 50 1 x 321 9 321 10 181 1 = 321 11 321 12 18446744073709551615 4 Expr 321 13 321 17 182 1 ( 321 17 321 18 182 1 ) 321 18 321 19 182 1 ; 321 19 321 20 18446744073709551615 6 switch 322 2 322 8 18446744073709551615 1 ( 322 9 322 10 18446744073709551615 4 Look 322 10 322 14 33 1 ( 322 14 322 15 33 1 ) 322 15 322 16 33 1 . 322 16 322 17 18446744073709551615 3 tag 322 17 322 20 35 1 ) 322 20 322 21 18446744073709551615 1 { 323 2 323 3 18446744073709551615 4 case 324 2 324 6 18446744073709551615 3 Tag 324 7 324 10 16 2 :: 324 10 324 12 18446744073709551615 11 GreaterThan 324 12 324 23 183 1 : 324 23 324 24 18446744073709551615 1 { 325 2 325 3 18446744073709551615 3 int 326 3 326 6 18446744073709551615 4 line 326 7 326 11 184 1 = 326 12 326 13 18446744073709551615 4 Look 326 14 326 18 33 1 ( 326 18 326 19 33 1 ) 326 19 326 20 33 1 . 326 20 326 21 18446744073709551615 4 line 326 21 326 25 48 1 ; 326 25 326 26 18446744073709551615 3 int 327 3 327 6 18446744073709551615 6 column 327 7 327 13 185 1 = 327 14 327 15 18446744073709551615 4 Look 327 16 327 20 33 1 ( 327 20 327 21 33 1 ) 327 21 327 22 33 1 . 327 22 327 23 18446744073709551615 6 column 327 23 327 29 49 1 ; 327 29 327 30 18446744073709551615 4 Move 328 3 328 7 34 1 ( 328 7 328 8 34 1 ) 328 8 328 9 34 1 ; 328 9 328 10 18446744073709551615 6 return 329 3 329 9 18446744073709551615 3 Ast 329 10 329 13 60 2 :: 329 13 329 15 186 11 GreaterThan 329 15 329 26 186 1 ( 329 26 329 27 186 4 line 329 27 329 31 184 1 , 329 31 329 32 186 6 column 329 33 329 39 185 1 , 329 39 329 40 186 1 x 329 41 329 42 181 1 , 329 42 329 43 186 4 Expr 329 44 329 48 182 1 ( 329 48 329 49 182 1 ) 329 49 329 50 182 1 ) 329 50 329 51 186 1 ; 329 51 329 52 18446744073709551615 1 } 330 2 330 3 18446744073709551615 4 case 331 2 331 6 18446744073709551615 3 Tag 331 7 331 10 16 2 :: 331 10 331 12 18446744073709551615 8 LessThan 331 12 331 20 187 1 : 331 20 331 21 18446744073709551615 1 { 332 2 332 3 18446744073709551615 3 int 333 3 333 6 18446744073709551615 4 line 333 7 333 11 188 1 = 333 12 333 13 18446744073709551615 4 Look 333 14 333 18 33 1 ( 333 18 333 19 33 1 ) 333 19 333 20 33 1 . 333 20 333 21 18446744073709551615 4 line 333 21 333 25 48 1 ; 333 25 333 26 18446744073709551615 3 int 334 3 334 6 18446744073709551615 6 column 334 7 334 13 189 1 = 334 14 334 15 18446744073709551615 4 Look 334 16 334 20 33 1 ( 334 20 334 21 33 1 ) 334 21 334 22 33 1 . 334 22 334 23 18446744073709551615 6 column 334 23 334 29 49 1 ; 334 29 334 30 18446744073709551615 4 Move 335 3 335 7 34 1 ( 335 7 335 8 34 1 ) 335 8 335 9 34 1 ; 335 9 335 10 18446744073709551615 6 return 336 3 336 9 18446744073709551615 3 Ast 336 10 336 13 60 2 :: 336 13 336 15 190 8 LessThan 336 15 336 23 190 1 ( 336 23 336 24 190 4 line 336 24 336 28 188 1 , 336 28 336 29 190 6 column 336 30 336 36 189 1 , 336 36 336 37 190 1 x 336 38 336 39 181 1 , 336 39 336 40 190 4 Expr 336 41 336 45 182 1 ( 336 45 336 46 182 1 ) 336 46 336 47 182 1 ) 336 47 336 48 190 1 ; 336 48 336 49 18446744073709551615 1 } 337 2 337 3 18446744073709551615 4 case 338 2 338 6 18446744073709551615 3 Tag 338 7 338 10 16 2 :: 338 10 338 12 18446744073709551615 18 GreaterThanOrEqual 338 12 338 30 191 1 : 338 30 338 31 18446744073709551615 1 { 339 2 339 3 18446744073709551615 3 int 340 3 340 6 18446744073709551615 4 line 340 7 340 11 192 1 = 340 12 340 13 18446744073709551615 4 Look 340 14 340 18 33 1 ( 340 18 340 19 33 1 ) 340 19 340 20 33 1 . 340 20 340 21 18446744073709551615 4 line 340 21 340 25 48 1 ; 340 25 340 26 18446744073709551615 3 int 341 3 341 6 18446744073709551615 6 column 341 7 341 13 193 1 = 341 14 341 15 18446744073709551615 4 Look 341 16 341 20 33 1 ( 341 20 341 21 33 1 ) 341 21 341 22 33 1 . 341 22 341 23 18446744073709551615 6 column 341 23 341 29 49 1 ; 341 29 341 30 18446744073709551615 4 Move 342 3 342 7 34 1 ( 342 7 342 8 34 1 ) 342 8 342 9 34 1 ; 342 9 342 10 18446744073709551615 6 return 343 3 343 9 18446744073709551615 3 Ast 343 10 343 13 60 2 :: 343 13 343 15 194 18 GreaterThanOrEqual 343 15 343 33 194 1 ( 343 33 343 34 194 4 line 343 34 343 38 192 1 , 343 38 343 39 194 6 column 343 40 343 46 193 1 , 343 46 343 47 194 1 x 343 48 343 49 181 1 , 343 49 343 50 194 4 Expr 343 51 343 55 182 1 ( 343 55 343 56 182 1 ) 343 56 343 57 182 1 ) 343 57 343 58 194 1 ; 343 58 343 59 18446744073709551615 1 } 344 2 344 3 18446744073709551615 4 case 345 2 345 6 18446744073709551615 3 Tag 345 7 345 10 16 2 :: 345 10 345 12 18446744073709551615 15 LessThanOrEqual 345 12 345 27 195 1 : 345 27 345 28 18446744073709551615 1 { 346 2 346 3 18446744073709551615 3 int 347 3 347 6 18446744073709551615 4 line 347 7 347 11 196 1 = 347 12 347 13 18446744073709551615 4 Look 347 14 347 18 33 1 ( 347 18 347 19 33 1 ) 347 19 347 20 33 1 . 347 20 347 21 18446744073709551615 4 line 347 21 347 25 48 1 ; 347 25 347 26 18446744073709551615 3 int 348 3 348 6 18446744073709551615 6 column 348 7 348 13 197 1 = 348 14 348 15 18446744073709551615 4 Look 348 16 348 20 33 1 ( 348 20 348 21 33 1 ) 348 21 348 22 33 1 . 348 22 348 23 18446744073709551615 6 column 348 23 348 29 49 1 ; 348 29 348 30 18446744073709551615 4 Move 349 3 349 7 34 1 ( 349 7 349 8 34 1 ) 349 8 349 9 34 1 ; 349 9 349 10 18446744073709551615 6 return 350 3 350 9 18446744073709551615 3 Ast 350 10 350 13 60 2 :: 350 13 350 15 198 15 LessThanOrEqual 350 15 350 30 198 1 ( 350 30 350 31 198 4 line 350 31 350 35 196 1 , 350 35 350 36 198 6 column 350 37 350 43 197 1 , 350 43 350 44 198 1 x 350 45 350 46 181 1 , 350 46 350 47 198 4 Expr 350 48 350 52 182 1 ( 350 52 350 53 182 1 ) 350 53 350 54 182 1 ) 350 54 350 55 198 1 ; 350 55 350 56 18446744073709551615 1 } 351 2 351 3 18446744073709551615 7 default 352 2 352 9 18446744073709551615 1 : 352 9 352 10 18446744073709551615 6 return 353 3 353 9 18446744073709551615 1 x 353 10 353 11 181 1 ; 353 11 353 12 18446744073709551615 1 } 354 2 354 3 18446744073709551615 1 } 355 1 355 2 18446744073709551615 6 ExpPtr 356 1 356 7 50 6 Parser 356 8 356 14 3 2 :: 356 14 356 16 182 4 Expr 356 16 356 20 182 1 ( 356 20 356 21 182 1 ) 356 21 356 22 182 1 { 357 1 357 2 18446744073709551615 6 ExpPtr 358 2 358 8 50 1 x 358 9 358 10 199 1 = 358 11 358 12 18446744073709551615 4 Term 358 13 358 17 200 1 ( 358 17 358 18 200 1 ) 358 18 358 19 200 1 ; 358 19 358 20 18446744073709551615 5 while 359 2 359 7 18446744073709551615 1 ( 359 8 359 9 18446744073709551615 4 Look 359 9 359 13 33 1 ( 359 13 359 14 33 1 ) 359 14 359 15 33 1 . 359 15 359 16 18446744073709551615 3 tag 359 16 359 19 35 2 == 359 20 359 22 18446744073709551615 3 Tag 359 23 359 26 16 2 :: 359 26 359 28 18446744073709551615 3 Add 359 28 359 31 201 2 || 359 32 359 34 18446744073709551615 4 Look 359 35 359 39 33 1 ( 359 39 359 40 33 1 ) 359 40 359 41 33 1 . 359 41 359 42 18446744073709551615 3 tag 359 42 359 45 35 2 == 359 46 359 48 18446744073709551615 3 Tag 359 49 359 52 16 2 :: 359 52 359 54 18446744073709551615 8 Subtract 359 54 359 62 202 1 ) 359 62 359 63 18446744073709551615 1 { 360 2 360 3 18446744073709551615 5 Token 361 3 361 8 7 1 & 361 8 361 9 18446744073709551615 5 token 361 10 361 15 203 1 = 361 16 361 17 18446744073709551615 4 Look 361 18 361 22 33 1 ( 361 22 361 23 33 1 ) 361 23 361 24 33 1 ; 361 24 361 25 18446744073709551615 4 Move 362 3 362 7 34 1 ( 362 7 362 8 34 1 ) 362 8 362 9 34 1 ; 362 9 362 10 18446744073709551615 2 if 363 3 363 5 18446744073709551615 1 ( 363 6 363 7 18446744073709551615 5 token 363 7 363 12 203 1 . 363 12 363 13 18446744073709551615 3 tag 363 13 363 16 35 2 == 363 17 363 19 18446744073709551615 3 Tag 363 20 363 23 16 2 :: 363 23 363 25 18446744073709551615 3 Add 363 25 363 28 201 1 ) 363 28 363 29 18446744073709551615 1 { 364 3 364 4 18446744073709551615 1 x 365 4 365 5 199 1 = 365 6 365 7 166 3 Ast 365 8 365 11 60 2 :: 365 11 365 13 204 3 Add 365 13 365 16 204 1 ( 365 16 365 17 204 5 token 365 17 365 22 203 1 . 365 22 365 23 18446744073709551615 4 line 365 23 365 27 48 1 , 365 27 365 28 204 5 token 365 29 365 34 203 1 . 365 34 365 35 18446744073709551615 6 column 365 35 365 41 49 1 , 365 41 365 42 204 1 x 365 43 365 44 199 1 , 365 44 365 45 204 4 Term 365 46 365 50 200 1 ( 365 50 365 51 200 1 ) 365 51 365 52 200 1 ) 365 52 365 53 204 1 ; 365 53 365 54 18446744073709551615 1 } 366 3 366 4 18446744073709551615 4 else 367 3 367 7 18446744073709551615 1 { 368 3 368 4 18446744073709551615 1 x 369 4 369 5 199 1 = 369 6 369 7 166 3 Ast 369 8 369 11 60 2 :: 369 11 369 13 205 8 Subtract 369 13 369 21 205 1 ( 369 21 369 22 205 5 token 369 22 369 27 203 1 . 369 27 369 28 18446744073709551615 4 line 369 28 369 32 48 1 , 369 32 369 33 205 5 token 369 34 369 39 203 1 . 369 39 369 40 18446744073709551615 6 column 369 40 369 46 49 1 , 369 46 369 47 205 1 x 369 48 369 49 199 1 , 369 49 369 50 205 4 Term 369 51 369 55 200 1 ( 369 55 369 56 200 1 ) 369 56 369 57 200 1 ) 369 57 369 58 205 1 ; 369 58 369 59 18446744073709551615 1 } 370 3 370 4 18446744073709551615 1 } 371 2 371 3 18446744073709551615 6 return 372 2 372 8 18446744073709551615 1 x 372 9 372 10 199 1 ; 372 10 372 11 18446744073709551615 1 } 373 1 373 2 18446744073709551615 6 ExpPtr 374 1 374 7 50 6 Parser 374 8 374 14 3 2 :: 374 14 374 16 200 4 Term 374 16 374 20 200 1 ( 374 20 374 21 200 1 ) 374 21 374 22 200 1 { 375 1 375 2 18446744073709551615 6 ExpPtr 376 2 376 8 50 1 x 376 9 376 10 206 1 = 376 11 376 12 18446744073709551615 5 Unary 376 13 376 18 207 1 ( 376 18 376 19 207 1 ) 376 19 376 20 207 1 ; 376 20 376 21 18446744073709551615 5 while 377 2 377 7 18446744073709551615 1 ( 377 8 377 9 18446744073709551615 4 Look 377 9 377 13 33 1 ( 377 13 377 14 33 1 ) 377 14 377 15 33 1 . 377 15 377 16 18446744073709551615 3 tag 377 16 377 19 35 2 == 377 20 377 22 18446744073709551615 3 Tag 377 23 377 26 16 2 :: 377 26 377 28 18446744073709551615 8 Multiply 377 28 377 36 208 2 || 377 37 377 39 18446744073709551615 4 Look 377 40 377 44 33 1 ( 377 44 377 45 33 1 ) 377 45 377 46 33 1 . 377 46 377 47 18446744073709551615 3 tag 377 47 377 50 35 2 == 377 51 377 53 18446744073709551615 3 Tag 377 54 377 57 16 2 :: 377 57 377 59 18446744073709551615 6 Divide 377 59 377 65 209 2 || 377 66 377 68 18446744073709551615 4 Look 378 6 378 10 33 1 ( 378 10 378 11 33 1 ) 378 11 378 12 33 1 . 378 12 378 13 18446744073709551615 3 tag 378 13 378 16 35 2 == 378 17 378 19 18446744073709551615 3 Tag 378 20 378 23 16 2 :: 378 23 378 25 18446744073709551615 6 Modulo 378 25 378 31 210 1 ) 378 31 378 32 18446744073709551615 1 { 379 2 379 3 18446744073709551615 5 Token 380 3 380 8 7 1 & 380 8 380 9 18446744073709551615 5 token 380 10 380 15 211 1 = 380 16 380 17 18446744073709551615 4 Look 380 18 380 22 33 1 ( 380 22 380 23 33 1 ) 380 23 380 24 33 1 ; 380 24 380 25 18446744073709551615 4 Move 381 3 381 7 34 1 ( 381 7 381 8 34 1 ) 381 8 381 9 34 1 ; 381 9 381 10 18446744073709551615 2 if 382 3 382 5 18446744073709551615 1 ( 382 6 382 7 18446744073709551615 5 token 382 7 382 12 211 1 . 382 12 382 13 18446744073709551615 3 tag 382 13 382 16 35 2 == 382 17 382 19 18446744073709551615 3 Tag 382 20 382 23 16 2 :: 382 23 382 25 18446744073709551615 8 Multiply 382 25 382 33 208 1 ) 382 33 382 34 18446744073709551615 1 { 383 3 383 4 18446744073709551615 1 x 384 4 384 5 206 1 = 384 6 384 7 166 3 Ast 384 8 384 11 60 2 :: 384 11 384 13 212 8 Multiply 384 13 384 21 212 1 ( 384 21 384 22 212 5 token 384 22 384 27 211 1 . 384 27 384 28 18446744073709551615 4 line 384 28 384 32 48 1 , 384 32 384 33 212 5 token 384 34 384 39 211 1 . 384 39 384 40 18446744073709551615 6 column 384 40 384 46 49 1 , 384 46 384 47 212 1 x 384 48 384 49 206 1 , 384 49 384 50 212 5 Unary 384 51 384 56 207 1 ( 384 56 384 57 207 1 ) 384 57 384 58 207 1 ) 384 58 384 59 212 1 ; 384 59 384 60 18446744073709551615 1 } 385 3 385 4 18446744073709551615 4 else 386 3 386 7 18446744073709551615 2 if 386 8 386 10 18446744073709551615 1 ( 386 11 386 12 18446744073709551615 5 token 386 12 386 17 211 1 . 386 17 386 18 18446744073709551615 3 tag 386 18 386 21 35 2 == 386 22 386 24 18446744073709551615 3 Tag 386 25 386 28 16 2 :: 386 28 386 30 18446744073709551615 6 Divide 386 30 386 36 209 1 ) 386 36 386 37 18446744073709551615 1 { 387 3 387 4 18446744073709551615 1 x 388 4 388 5 206 1 = 388 6 388 7 166 3 Ast 388 8 388 11 60 2 :: 388 11 388 13 213 6 Divide 388 13 388 19 213 1 ( 388 19 388 20 213 5 token 388 20 388 25 211 1 . 388 25 388 26 18446744073709551615 4 line 388 26 388 30 48 1 , 388 30 388 31 213 5 token 388 32 388 37 211 1 . 388 37 388 38 18446744073709551615 6 column 388 38 388 44 49 1 , 388 44 388 45 213 1 x 388 46 388 47 206 1 , 388 47 388 48 213 5 Unary 388 49 388 54 207 1 ( 388 54 388 55 207 1 ) 388 55 388 56 207 1 ) 388 56 388 57 213 1 ; 388 57 388 58 18446744073709551615 1 } 389 3 389 4 18446744073709551615 4 else 390 3 390 7 18446744073709551615 1 { 391 3 391 4 18446744073709551615 1 x 392 4 392 5 206 1 = 392 6 392 7 166 3 Ast 392 8 392 11 60 2 :: 392 11 392 13 214 6 Modulo 392 13 392 19 214 1 ( 392 19 392 20 214 5 token 392 20 392 25 211 1 . 392 25 392 26 18446744073709551615 4 line 392 26 392 30 48 1 , 392 30 392 31 214 5 token 392 32 392 37 211 1 . 392 37 392 38 18446744073709551615 6 column 392 38 392 44 49 1 , 392 44 392 45 214 1 x 392 46 392 47 206 1 , 392 47 392 48 214 5 Unary 392 49 392 54 207 1 ( 392 54 392 55 207 1 ) 392 55 392 56 207 1 ) 392 56 392 57 214 1 ; 392 57 392 58 18446744073709551615 1 } 393 3 393 4 18446744073709551615 1 } 394 2 394 3 18446744073709551615 6 return 395 2 395 8 18446744073709551615 1 x 395 9 395 10 206 1 ; 395 10 395 11 18446744073709551615 1 } 396 1 396 2 18446744073709551615 6 ExpPtr 397 1 397 7 50 6 Parser 397 8 397 14 3 2 :: 397 14 397 16 207 5 Unary 397 16 397 21 207 1 ( 397 21 397 22 207 1 ) 397 22 397 23 207 1 { 398 1 398 2 18446744073709551615 2 if 399 2 399 4 18446744073709551615 1 ( 399 5 399 6 18446744073709551615 4 Look 399 6 399 10 33 1 ( 399 10 399 11 33 1 ) 399 11 399 12 33 1 . 399 12 399 13 18446744073709551615 3 tag 399 13 399 16 35 2 == 399 17 399 19 18446744073709551615 3 Tag 399 20 399 23 16 2 :: 399 23 399 25 18446744073709551615 3 Add 399 25 399 28 201 1 ) 399 28 399 29 18446744073709551615 1 { 400 2 400 3 18446744073709551615 3 int 401 3 401 6 18446744073709551615 4 line 401 7 401 11 215 1 = 401 12 401 13 18446744073709551615 4 Look 401 14 401 18 33 1 ( 401 18 401 19 33 1 ) 401 19 401 20 33 1 . 401 20 401 21 18446744073709551615 4 line 401 21 401 25 48 1 ; 401 25 401 26 18446744073709551615 3 int 402 3 402 6 18446744073709551615 6 column 402 7 402 13 216 1 = 402 14 402 15 18446744073709551615 4 Look 402 16 402 20 33 1 ( 402 20 402 21 33 1 ) 402 21 402 22 33 1 . 402 22 402 23 18446744073709551615 6 column 402 23 402 29 49 1 ; 402 29 402 30 18446744073709551615 4 Move 403 3 403 7 34 1 ( 403 7 403 8 34 1 ) 403 8 403 9 34 1 ; 403 9 403 10 18446744073709551615 6 return 404 3 404 9 18446744073709551615 3 Ast 404 10 404 13 60 2 :: 404 13 404 15 217 9 UnaryPlus 404 15 404 24 217 1 ( 404 24 404 25 217 4 line 404 25 404 29 215 1 , 404 29 404 30 217 6 column 404 31 404 37 216 1 , 404 37 404 38 217 5 Unary 404 39 404 44 207 1 ( 404 44 404 45 207 1 ) 404 45 404 46 207 1 ) 404 46 404 47 217 1 ; 404 47 404 48 18446744073709551615 1 } 405 2 405 3 18446744073709551615 4 else 406 2 406 6 18446744073709551615 2 if 406 7 406 9 18446744073709551615 1 ( 406 10 406 11 18446744073709551615 4 Look 406 11 406 15 33 1 ( 406 15 406 16 33 1 ) 406 16 406 17 33 1 . 406 17 406 18 18446744073709551615 3 tag 406 18 406 21 35 2 == 406 22 406 24 18446744073709551615 3 Tag 406 25 406 28 16 2 :: 406 28 406 30 18446744073709551615 8 Subtract 406 30 406 38 202 1 ) 406 38 406 39 18446744073709551615 1 { 407 2 407 3 18446744073709551615 3 int 408 3 408 6 18446744073709551615 4 line 408 7 408 11 218 1 = 408 12 408 13 18446744073709551615 4 Look 408 14 408 18 33 1 ( 408 18 408 19 33 1 ) 408 19 408 20 33 1 . 408 20 408 21 18446744073709551615 4 line 408 21 408 25 48 1 ; 408 25 408 26 18446744073709551615 3 int 409 3 409 6 18446744073709551615 6 column 409 7 409 13 219 1 = 409 14 409 15 18446744073709551615 4 Look 409 16 409 20 33 1 ( 409 20 409 21 33 1 ) 409 21 409 22 33 1 . 409 22 409 23 18446744073709551615 6 column 409 23 409 29 49 1 ; 409 29 409 30 18446744073709551615 4 Move 410 3 410 7 34 1 ( 410 7 410 8 34 1 ) 410 8 410 9 34 1 ; 410 9 410 10 18446744073709551615 6 return 411 3 411 9 18446744073709551615 3 Ast 411 10 411 13 60 2 :: 411 13 411 15 220 10 UnaryMinus 411 15 411 25 220 1 ( 411 25 411 26 220 4 line 411 26 411 30 218 1 , 411 30 411 31 220 6 column 411 32 411 38 219 1 , 411 38 411 39 220 5 Unary 411 40 411 45 207 1 ( 411 45 411 46 207 1 ) 411 46 411 47 207 1 ) 411 47 411 48 220 1 ; 411 48 411 49 18446744073709551615 1 } 412 2 412 3 18446744073709551615 4 else 413 2 413 6 18446744073709551615 2 if 413 7 413 9 18446744073709551615 1 ( 413 10 413 11 18446744073709551615 4 Look 413 11 413 15 33 1 ( 413 15 413 16 33 1 ) 413 16 413 17 33 1 . 413 17 413 18 18446744073709551615 3 tag 413 18 413 21 35 2 == 413 22 413 24 18446744073709551615 3 Tag 413 25 413 28 16 2 :: 413 28 413 30 18446744073709551615 3 Not 413 30 413 33 221 1 ) 413 33 413 34 18446744073709551615 1 { 414 2 414 3 18446744073709551615 3 int 415 3 415 6 18446744073709551615 4 line 415 7 415 11 222 1 = 415 12 415 13 18446744073709551615 4 Look 415 14 415 18 33 1 ( 415 18 415 19 33 1 ) 415 19 415 20 33 1 . 415 20 415 21 18446744073709551615 4 line 415 21 415 25 48 1 ; 415 25 415 26 18446744073709551615 3 int 416 3 416 6 18446744073709551615 6 column 416 7 416 13 223 1 = 416 14 416 15 18446744073709551615 4 Look 416 16 416 20 33 1 ( 416 20 416 21 33 1 ) 416 21 416 22 33 1 . 416 22 416 23 18446744073709551615 6 column 416 23 416 29 49 1 ; 416 29 416 30 18446744073709551615 4 Move 417 3 417 7 34 1 ( 417 7 417 8 34 1 ) 417 8 417 9 34 1 ; 417 9 417 10 18446744073709551615 6 return 418 3 418 9 18446744073709551615 3 Ast 418 10 418 13 60 2 :: 418 13 418 15 224 3 Not 418 15 418 18 224 1 ( 418 18 418 19 224 4 line 418 19 418 23 222 1 , 418 23 418 24 224 6 column 418 25 418 31 223 1 , 418 31 418 32 224 5 Unary 418 33 418 38 207 1 ( 418 38 418 39 207 1 ) 418 39 418 40 207 1 ) 418 40 418 41 224 1 ; 418 41 418 42 18446744073709551615 1 } 419 2 419 3 18446744073709551615 4 else 420 2 420 6 18446744073709551615 1 { 421 2 421 3 18446744073709551615 6 return 422 3 422 9 18446744073709551615 7 Postfix 422 10 422 17 225 1 ( 422 17 422 18 225 1 ) 422 18 422 19 225 1 ; 422 19 422 20 18446744073709551615 1 } 423 2 423 3 18446744073709551615 1 } 424 1 424 2 18446744073709551615 6 ExpPtr 425 1 425 7 50 6 Parser 425 8 425 14 3 2 :: 425 14 425 16 225 7 Postfix 425 16 425 23 225 1 ( 425 23 425 24 225 1 ) 425 24 425 25 225 1 { 426 1 426 2 18446744073709551615 6 ExpPtr 427 2 427 8 50 1 x 427 9 427 10 226 1 = 427 11 427 12 18446744073709551615 6 Factor 427 13 427 19 227 1 ( 427 19 427 20 227 1 ) 427 20 427 21 227 1 ; 427 21 427 22 18446744073709551615 5 while 428 2 428 7 18446744073709551615 1 ( 428 8 428 9 18446744073709551615 4 Look 428 9 428 13 33 1 ( 428 13 428 14 33 1 ) 428 14 428 15 33 1 . 428 15 428 16 18446744073709551615 3 tag 428 16 428 19 35 2 == 428 20 428 22 18446744073709551615 3 Tag 428 23 428 26 16 2 :: 428 26 428 28 18446744073709551615 15 LeftParenthesis 428 28 428 43 121 2 || 428 44 428 46 18446744073709551615 4 Look 428 47 428 51 33 1 ( 428 51 428 52 33 1 ) 428 52 428 53 33 1 . 428 53 428 54 18446744073709551615 3 tag 428 54 428 57 35 2 == 428 58 428 60 18446744073709551615 3 Tag 428 61 428 64 16 2 :: 428 64 428 66 18446744073709551615 3 Dot 428 66 428 69 228 2 || 428 70 428 72 18446744073709551615 4 Look 429 6 429 10 33 1 ( 429 10 429 11 33 1 ) 429 11 429 12 33 1 . 429 12 429 13 18446744073709551615 3 tag 429 13 429 16 35 2 == 429 17 429 19 18446744073709551615 3 Tag 429 20 429 23 16 2 :: 429 23 429 25 18446744073709551615 11 LeftBracket 429 25 429 36 229 1 ) 429 36 429 37 18446744073709551615 1 { 430 2 430 3 18446744073709551615 5 Token 431 3 431 8 7 1 & 431 8 431 9 18446744073709551615 5 token 431 10 431 15 230 1 = 431 16 431 17 18446744073709551615 4 Look 431 18 431 22 33 1 ( 431 22 431 23 33 1 ) 431 23 431 24 33 1 ; 431 24 431 25 18446744073709551615 4 Move 432 3 432 7 34 1 ( 432 7 432 8 34 1 ) 432 8 432 9 34 1 ; 432 9 432 10 18446744073709551615 2 if 433 3 433 5 18446744073709551615 1 ( 433 6 433 7 18446744073709551615 5 token 433 7 433 12 230 1 . 433 12 433 13 18446744073709551615 3 tag 433 13 433 16 35 2 == 433 17 433 19 18446744073709551615 3 Tag 433 20 433 23 16 2 :: 433 23 433 25 18446744073709551615 15 LeftParenthesis 433 25 433 40 121 1 ) 433 40 433 41 18446744073709551615 1 { 434 3 434 4 18446744073709551615 6 vector 435 4 435 10 6 1 < 435 10 435 11 18446744073709551615 6 ExpPtr 435 11 435 17 50 1 > 435 17 435 18 18446744073709551615 9 arguments 435 19 435 28 231 1 ; 435 28 435 29 18446744073709551615 2 if 436 4 436 6 18446744073709551615 1 ( 436 7 436 8 18446744073709551615 4 Look 436 8 436 12 33 1 ( 436 12 436 13 33 1 ) 436 13 436 14 33 1 . 436 14 436 15 18446744073709551615 3 tag 436 15 436 18 35 2 == 436 19 436 21 18446744073709551615 3 Tag 436 22 436 25 16 2 :: 436 25 436 27 18446744073709551615 16 RightParenthesis 436 27 436 43 124 1 ) 436 43 436 44 18446744073709551615 1 { 437 4 437 5 18446744073709551615 1 x 438 5 438 6 226 1 = 438 7 438 8 166 3 Ast 438 9 438 12 60 2 :: 438 12 438 14 232 4 Call 438 14 438 18 232 1 ( 438 18 438 19 232 5 token 438 19 438 24 230 1 . 438 24 438 25 18446744073709551615 4 line 438 25 438 29 48 1 , 438 29 438 30 232 5 token 438 31 438 36 230 1 . 438 36 438 37 18446744073709551615 6 column 438 37 438 43 49 1 , 438 43 438 44 232 1 x 438 45 438 46 226 1 , 438 46 438 47 232 9 arguments 438 48 438 57 231 1 ) 438 57 438 58 232 1 ; 438 58 438 59 18446744073709551615 1 } 439 4 439 5 18446744073709551615 4 else 440 4 440 8 18446744073709551615 1 { 441 4 441 5 18446744073709551615 9 arguments 442 5 442 14 231 1 . 442 14 442 15 58 9 push_back 442 15 442 24 58 1 ( 442 24 442 25 58 3 And 442 25 442 28 67 1 ( 442 28 442 29 67 1 ) 442 29 442 30 67 1 ) 442 30 442 31 58 1 ; 442 31 442 32 18446744073709551615 1 } 443 4 443 5 18446744073709551615 5 while 444 4 444 9 18446744073709551615 1 ( 444 10 444 11 18446744073709551615 4 Look 444 11 444 15 33 1 ( 444 15 444 16 33 1 ) 444 16 444 17 33 1 . 444 17 444 18 18446744073709551615 3 tag 444 18 444 21 35 2 != 444 22 444 24 18446744073709551615 3 Tag 444 25 444 28 16 2 :: 444 28 444 30 18446744073709551615 16 RightParenthesis 444 30 444 46 124 1 ) 444 46 444 47 18446744073709551615 1 { 445 4 445 5 18446744073709551615 5 Match 446 5 446 10 15 1 ( 446 10 446 11 15 3 Tag 446 11 446 14 16 2 :: 446 14 446 16 18446744073709551615 5 Comma 446 16 446 21 126 1 ) 446 21 446 22 15 1 ; 446 22 446 23 18446744073709551615 9 arguments 447 5 447 14 231 1 . 447 14 447 15 58 9 push_back 447 15 447 24 58 1 ( 447 24 447 25 58 3 And 447 25 447 28 67 1 ( 447 28 447 29 67 1 ) 447 29 447 30 67 1 ) 447 30 447 31 58 1 ; 447 31 447 32 18446744073709551615 1 } 448 4 448 5 18446744073709551615 4 Move 449 4 449 8 34 1 ( 449 8 449 9 34 1 ) 449 9 449 10 34 1 ; 449 10 449 11 18446744073709551615 1 x 450 4 450 5 226 1 = 450 6 450 7 166 3 Ast 450 8 450 11 60 2 :: 450 11 450 13 232 4 Call 450 13 450 17 232 1 ( 450 17 450 18 232 5 token 450 18 450 23 230 1 . 450 23 450 24 18446744073709551615 4 line 450 24 450 28 48 1 , 450 28 450 29 232 5 token 450 30 450 35 230 1 . 450 35 450 36 18446744073709551615 6 column 450 36 450 42 49 1 , 450 42 450 43 232 1 x 450 44 450 45 226 1 , 450 45 450 46 232 9 arguments 450 47 450 56 231 1 ) 450 56 450 57 232 1 ; 450 57 450 58 18446744073709551615 1 } 451 3 451 4 18446744073709551615 4 else 452 3 452 7 18446744073709551615 2 if 452 8 452 10 18446744073709551615 1 ( 452 11 452 12 18446744073709551615 5 token 452 12 452 17 230 1 . 452 17 452 18 18446744073709551615 3 tag 452 18 452 21 35 2 == 452 22 452 24 18446744073709551615 3 Tag 452 25 452 28 16 2 :: 452 28 452 30 18446744073709551615 3 Dot 452 30 452 33 228 1 ) 452 33 452 34 18446744073709551615 1 { 453 3 453 4 18446744073709551615 7 wstring 454 4 454 11 18 4 name 454 12 454 16 233 1 = 454 17 454 18 18446744073709551615 15 ParseIdentifier 454 19 454 34 120 1 ( 454 34 454 35 120 1 ) 454 35 454 36 120 1 ; 454 36 454 37 18446744073709551615 1 x 455 4 455 5 226 1 = 455 6 455 7 166 3 Ast 455 8 455 11 60 2 :: 455 11 455 13 234 3 Dot 455 13 455 16 234 1 ( 455 16 455 17 234 5 token 455 17 455 22 230 1 . 455 22 455 23 18446744073709551615 4 line 455 23 455 27 48 1 , 455 27 455 28 234 5 token 455 29 455 34 230 1 . 455 34 455 35 18446744073709551615 6 column 455 35 455 41 49 1 , 455 41 455 42 234 1 x 455 43 455 44 226 1 , 455 44 455 45 234 4 name 455 46 455 50 233 1 ) 455 50 455 51 234 1 ; 455 51 455 52 18446744073709551615 1 } 456 3 456 4 18446744073709551615 4 else 457 3 457 7 18446744073709551615 1 { 458 3 458 4 18446744073709551615 5 throw 459 4 459 9 18446744073709551615 7 wstring 459 10 459 17 18 1 ( 459 17 459 18 10 18 L"not implemented" 459 18 459 36 18446744073709551615 1 ) 459 36 459 37 10 1 ; 459 37 459 38 18446744073709551615 1 } 460 3 460 4 18446744073709551615 1 } 461 2 461 3 18446744073709551615 6 return 462 2 462 8 18446744073709551615 1 x 462 9 462 10 226 1 ; 462 10 462 11 18446744073709551615 1 } 463 1 463 2 18446744073709551615 6 ExpPtr 464 1 464 7 50 6 Parser 464 8 464 14 3 2 :: 464 14 464 16 227 6 Factor 464 16 464 22 227 1 ( 464 22 464 23 227 1 ) 464 23 464 24 227 1 { 465 1 465 2 18446744073709551615 5 Token 466 2 466 7 7 1 & 466 7 466 8 18446744073709551615 5 token 466 9 466 14 235 1 = 466 15 466 16 18446744073709551615 4 Look 466 17 466 21 33 1 ( 466 21 466 22 33 1 ) 466 22 466 23 33 1 ; 466 23 466 24 18446744073709551615 6 switch 467 2 467 8 18446744073709551615 1 ( 467 9 467 10 18446744073709551615 5 token 467 10 467 15 235 1 . 467 15 467 16 18446744073709551615 3 tag 467 16 467 19 35 1 ) 467 19 467 20 18446744073709551615 1 { 468 2 468 3 18446744073709551615 4 case 469 2 469 6 18446744073709551615 3 Tag 469 7 469 10 16 2 :: 469 10 469 12 18446744073709551615 3 Int 469 12 469 15 236 1 : 469 15 469 16 18446744073709551615 4 case 470 2 470 6 18446744073709551615 3 Tag 470 7 470 10 16 2 :: 470 10 470 12 18446744073709551615 4 Long 470 12 470 16 237 1 : 470 16 470 17 18446744073709551615 4 case 471 2 471 6 18446744073709551615 3 Tag 471 7 471 10 16 2 :: 471 10 471 12 18446744073709551615 5 Float 471 12 471 17 238 1 : 471 17 471 18 18446744073709551615 4 case 472 2 472 6 18446744073709551615 3 Tag 472 7 472 10 16 2 :: 472 10 472 12 18446744073709551615 6 Double 472 12 472 18 239 1 : 472 18 472 19 18446744073709551615 4 case 473 2 473 6 18446744073709551615 3 Tag 473 7 473 10 16 2 :: 473 10 473 12 18446744073709551615 4 Char 473 12 473 16 240 1 : 473 16 473 17 18446744073709551615 4 case 474 2 474 6 18446744073709551615 3 Tag 474 7 474 10 16 2 :: 474 10 474 12 18446744073709551615 6 String 474 12 474 18 241 1 : 474 18 474 19 18446744073709551615 1 { 475 2 475 3 18446744073709551615 4 Move 476 3 476 7 34 1 ( 476 7 476 8 34 1 ) 476 8 476 9 34 1 ; 476 9 476 10 18446744073709551615 6 return 477 3 477 9 18446744073709551615 3 Ast 477 10 477 13 60 2 :: 477 13 477 15 242 8 Constant 477 15 477 23 242 1 ( 477 23 477 24 242 5 token 477 24 477 29 235 1 . 477 29 477 30 18446744073709551615 4 line 477 30 477 34 48 1 , 477 34 477 35 242 5 token 477 36 477 41 235 1 . 477 41 477 42 18446744073709551615 6 column 477 42 477 48 49 1 , 477 48 477 49 242 5 token 477 50 477 55 235 1 . 477 55 477 56 18446744073709551615 5 value 477 56 477 61 243 1 ) 477 61 477 62 242 1 ; 477 62 477 63 18446744073709551615 1 } 478 2 478 3 18446744073709551615 4 case 479 2 479 6 18446744073709551615 3 Tag 479 7 479 10 16 2 :: 479 10 479 12 18446744073709551615 4 True 479 12 479 16 244 1 : 479 16 479 17 18446744073709551615 1 { 480 2 480 3 18446744073709551615 4 Move 481 3 481 7 34 1 ( 481 7 481 8 34 1 ) 481 8 481 9 34 1 ; 481 9 481 10 18446744073709551615 6 return 482 3 482 9 18446744073709551615 3 Ast 482 10 482 13 60 2 :: 482 13 482 15 242 8 Constant 482 15 482 23 242 1 ( 482 23 482 24 242 5 token 482 24 482 29 235 1 . 482 29 482 30 18446744073709551615 4 line 482 30 482 34 48 1 , 482 34 482 35 242 5 token 482 36 482 41 235 1 . 482 41 482 42 18446744073709551615 6 column 482 42 482 48 49 1 , 482 48 482 49 242 4 true 482 50 482 54 18446744073709551615 1 ) 482 54 482 55 242 1 ; 482 55 482 56 18446744073709551615 1 } 483 2 483 3 18446744073709551615 4 case 484 2 484 6 18446744073709551615 3 Tag 484 7 484 10 16 2 :: 484 10 484 12 18446744073709551615 5 False 484 12 484 17 245 1 : 484 17 484 18 18446744073709551615 1 { 485 2 485 3 18446744073709551615 4 Move 486 3 486 7 34 1 ( 486 7 486 8 34 1 ) 486 8 486 9 34 1 ; 486 9 486 10 18446744073709551615 6 return 487 3 487 9 18446744073709551615 3 Ast 487 10 487 13 60 2 :: 487 13 487 15 242 8 Constant 487 15 487 23 242 1 ( 487 23 487 24 242 5 token 487 24 487 29 235 1 . 487 29 487 30 18446744073709551615 4 line 487 30 487 34 48 1 , 487 34 487 35 242 5 token 487 36 487 41 235 1 . 487 41 487 42 18446744073709551615 6 column 487 42 487 48 49 1 , 487 48 487 49 242 5 false 487 50 487 55 18446744073709551615 1 ) 487 55 487 56 242 1 ; 487 56 487 57 18446744073709551615 1 } 488 2 488 3 18446744073709551615 4 case 489 2 489 6 18446744073709551615 3 Tag 489 7 489 10 16 2 :: 489 10 489 12 18446744073709551615 15 LeftParenthesis 489 12 489 27 121 1 : 489 27 489 28 18446744073709551615 1 { 490 2 490 3 18446744073709551615 4 Move 491 3 491 7 34 1 ( 491 7 491 8 34 1 ) 491 8 491 9 34 1 ; 491 9 491 10 18446744073709551615 6 ExpPtr 492 3 492 9 50 3 exp 492 10 492 13 246 1 = 492 14 492 15 18446744073709551615 3 And 492 16 492 19 67 1 ( 492 19 492 20 67 1 ) 492 20 492 21 67 1 ; 492 21 492 22 18446744073709551615 5 Match 493 3 493 8 15 1 ( 493 8 493 9 15 3 Tag 493 9 493 12 16 2 :: 493 12 493 14 18446744073709551615 16 RightParenthesis 493 14 493 30 124 1 ) 493 30 493 31 15 1 ; 493 31 493 32 18446744073709551615 6 return 494 3 494 9 18446744073709551615 3 exp 494 10 494 13 246 1 ; 494 13 494 14 18446744073709551615 1 } 495 2 495 3 18446744073709551615 4 case 496 2 496 6 18446744073709551615 3 Tag 496 7 496 10 16 2 :: 496 10 496 12 18446744073709551615 10 Identifier 496 12 496 22 247 1 : 496 22 496 23 18446744073709551615 1 { 497 2 497 3 18446744073709551615 4 Move 498 3 498 7 34 1 ( 498 7 498 8 34 1 ) 498 8 498 9 34 1 ; 498 9 498 10 18446744073709551615 7 wstring 499 3 499 10 18 4 name 499 11 499 15 248 1 = 499 16 499 17 18446744073709551615 8 any_cast 499 18 499 26 249 1 < 499 26 499 27 249 7 wstring 499 27 499 34 18 1 > 499 34 499 35 249 1 ( 499 35 499 36 249 5 token 499 36 499 41 235 1 . 499 41 499 42 18446744073709551615 5 value 499 42 499 47 243 1 ) 499 47 499 48 249 1 ; 499 48 499 49 18446744073709551615 6 return 500 3 500 9 18446744073709551615 3 Ast 500 10 500 13 60 2 :: 500 13 500 15 250 8 Variable 500 15 500 23 250 1 ( 500 23 500 24 250 5 token 500 24 500 29 235 1 . 500 29 500 30 18446744073709551615 4 line 500 30 500 34 48 1 , 500 34 500 35 250 5 token 500 36 500 41 235 1 . 500 41 500 42 18446744073709551615 6 column 500 42 500 48 49 1 , 500 48 500 49 250 4 name 500 50 500 54 248 1 ) 500 54 500 55 250 1 ; 500 55 500 56 18446744073709551615 1 } 501 2 501 3 18446744073709551615 7 default 502 2 502 9 18446744073709551615 1 : 502 9 502 10 18446744073709551615 5 throw 503 3 503 8 18446744073709551615 15 SyntaxException 503 9 503 24 47 1 ( 503 24 503 25 47 5 token 503 25 503 30 235 1 . 503 30 503 31 18446744073709551615 4 line 503 31 503 35 48 1 , 503 35 503 36 47 5 token 503 37 503 42 235 1 . 503 42 503 43 18446744073709551615 6 column 503 43 503 49 49 1 , 503 49 503 50 47 17 L"syntax error: " 504 10 504 27 18446744073709551615 1 + 504 28 504 29 251 16 TokenTagToString 504 30 504 46 252 1 ( 504 46 504 47 252 5 token 504 47 504 52 235 1 . 504 52 504 53 18446744073709551615 3 tag 504 53 504 56 35 1 ) 504 56 504 57 252 1 ) 504 57 504 58 47 1 ; 504 58 504 59 18446744073709551615 1 } 505 2 505 3 18446744073709551615 1 } 506 1 506 2 18446744073709551615 4 Type 507 1 507 5 91 6 Parser 507 6 507 12 3 2 :: 507 12 507 14 93 9 ParseType 507 14 507 23 93 1 ( 507 23 507 24 93 1 ) 507 24 507 25 93 1 { 508 1 508 2 18446744073709551615 7 wstring 509 2 509 9 18 4 name 509 10 509 14 253 1 = 509 15 509 16 18446744073709551615 15 ParseIdentifier 509 17 509 32 120 1 ( 509 32 509 33 120 1 ) 509 33 509 34 120 1 ; 509 34 509 35 18446744073709551615 2 if 510 2 510 4 18446744073709551615 1 ( 510 5 510 6 18446744073709551615 4 Look 510 6 510 10 33 1 ( 510 10 510 11 33 1 ) 510 11 510 12 33 1 . 510 12 510 13 18446744073709551615 3 tag 510 13 510 16 35 2 == 510 17 510 19 18446744073709551615 3 Tag 510 20 510 23 16 2 :: 510 23 510 25 18446744073709551615 11 LeftBracket 510 25 510 36 229 1 ) 510 36 510 37 18446744073709551615 1 { 511 2 511 3 18446744073709551615 4 Move 512 3 512 7 34 1 ( 512 7 512 8 34 1 ) 512 8 512 9 34 1 ; 512 9 512 10 18446744073709551615 6 vector 513 3 513 9 6 1 < 513 9 513 10 18446744073709551615 4 Type 513 10 513 14 91 1 > 513 14 513 15 18446744073709551615 5 types 513 16 513 21 254 1 ; 513 21 513 22 18446744073709551615 5 types 514 3 514 8 254 1 . 514 8 514 9 58 9 push_back 514 9 514 18 58 1 ( 514 18 514 19 58 9 ParseType 514 19 514 28 93 1 ( 514 28 514 29 93 1 ) 514 29 514 30 93 1 ) 514 30 514 31 58 1 ; 514 31 514 32 18446744073709551615 5 while 515 3 515 8 18446744073709551615 1 ( 515 9 515 10 18446744073709551615 4 Look 515 10 515 14 33 1 ( 515 14 515 15 33 1 ) 515 15 515 16 33 1 . 515 16 515 17 18446744073709551615 3 tag 515 17 515 20 35 2 != 515 21 515 23 18446744073709551615 3 Tag 515 24 515 27 16 2 :: 515 27 515 29 18446744073709551615 12 RightBracket 515 29 515 41 255 1 ) 515 41 515 42 18446744073709551615 1 { 516 3 516 4 18446744073709551615 5 Match 517 4 517 9 15 1 ( 517 9 517 10 15 3 Tag 517 10 517 13 16 2 :: 517 13 517 15 18446744073709551615 5 Comma 517 15 517 20 126 1 ) 517 20 517 21 15 1 ; 517 21 517 22 18446744073709551615 4 Type 518 4 518 8 91 1 t 518 9 518 10 256 1 = 518 11 518 12 18446744073709551615 9 ParseType 518 13 518 22 93 1 ( 518 22 518 23 93 1 ) 518 23 518 24 93 1 ; 518 24 518 25 18446744073709551615 5 types 519 4 519 9 254 1 . 519 9 519 10 58 9 push_back 519 10 519 19 58 1 ( 519 19 519 20 58 1 t 519 20 519 21 256 1 ) 519 21 519 22 58 1 ; 519 22 519 23 18446744073709551615 1 } 520 3 520 4 18446744073709551615 4 Move 521 3 521 7 34 1 ( 521 7 521 8 34 1 ) 521 8 521 9 34 1 ; 521 9 521 10 18446744073709551615 6 return 522 3 522 9 18446744073709551615 4 Type 522 10 522 14 91 1 ( 522 14 522 15 91 13 ParseTypeKind 522 15 522 28 257 1 ( 522 28 522 29 257 4 name 522 29 522 33 253 1 ) 522 33 522 34 257 1 , 522 34 522 35 91 4 name 522 36 522 40 253 1 , 522 40 522 41 91 5 types 522 42 522 47 254 1 ) 522 47 522 48 91 1 ; 522 48 522 49 18446744073709551615 1 } 523 2 523 3 18446744073709551615 4 else 524 2 524 6 18446744073709551615 1 { 525 2 525 3 18446744073709551615 6 return 526 3 526 9 18446744073709551615 4 Type 526 10 526 14 91 1 ( 526 14 526 15 91 13 ParseTypeKind 526 15 526 28 257 1 ( 526 28 526 29 257 4 name 526 29 526 33 253 1 ) 526 33 526 34 257 1 , 526 34 526 35 91 4 name 526 36 526 40 253 1 , 526 40 526 41 91 6 vector 526 42 526 48 6 1 < 526 48 526 49 6 4 Type 526 49 526 53 91 1 > 526 53 526 54 6 1 ( 526 54 526 55 6 1 ) 526 55 526 56 6 1 ) 526 56 526 57 91 1 ; 526 57 526 58 18446744073709551615 1 } 527 2 527 3 18446744073709551615 1 } 528 1 528 2 18446744073709551615 8 TypeKind 529 1 529 9 95 6 Parser 529 10 529 16 3 2 :: 529 16 529 18 257 13 ParseTypeKind 529 18 529 31 257 1 ( 529 31 529 32 257 7 wstring 529 32 529 39 18 4 text 529 40 529 44 258 1 ) 529 44 529 45 257 1 { 530 1 530 2 18446744073709551615 6 static 531 2 531 8 18446744073709551615 13 unordered_map 531 9 531 22 21 1 < 531 22 531 23 18446744073709551615 7 wstring 531 23 531 30 18 1 , 531 30 531 31 18446744073709551615 8 TypeKind 531 32 531 40 95 1 > 531 40 531 41 18446744073709551615 5 kinds 531 42 531 47 259 1 = 531 48 531 49 18446744073709551615 1 { 531 50 531 51 18446744073709551615 1 { 532 3 532 4 18446744073709551615 6 L"Int" 532 4 532 10 18446744073709551615 1 , 532 10 532 11 18446744073709551615 8 TypeKind 532 12 532 20 95 2 :: 532 20 532 22 18446744073709551615 3 Int 532 22 532 25 260 1 } 532 25 532 26 18446744073709551615 1 , 532 26 532 27 18446744073709551615 1 { 532 30 532 31 18446744073709551615 7 L"Long" 532 31 532 38 18446744073709551615 1 , 532 38 532 39 18446744073709551615 8 TypeKind 532 40 532 48 95 2 :: 532 48 532 50 18446744073709551615 4 Long 532 50 532 54 261 1 } 532 54 532 55 18446744073709551615 1 , 532 55 532 56 18446744073709551615 1 { 533 3 533 4 18446744073709551615 8 L"Float" 533 4 533 12 18446744073709551615 1 , 533 12 533 13 18446744073709551615 8 TypeKind 533 14 533 22 95 2 :: 533 22 533 24 18446744073709551615 5 Float 533 24 533 29 262 1 } 533 29 533 30 18446744073709551615 1 , 533 30 533 31 18446744073709551615 1 { 533 33 533 34 18446744073709551615 9 L"Double" 533 34 533 43 18446744073709551615 1 , 533 43 533 44 18446744073709551615 8 TypeKind 533 45 533 53 95 2 :: 533 53 533 55 18446744073709551615 6 Double 533 55 533 61 263 1 } 533 61 533 62 18446744073709551615 1 , 533 62 533 63 18446744073709551615 1 { 534 3 534 4 18446744073709551615 10 L"Boolean" 534 4 534 14 18446744073709551615 1 , 534 14 534 15 18446744073709551615 8 TypeKind 534 16 534 24 95 2 :: 534 24 534 26 18446744073709551615 7 Boolean 534 26 534 33 264 1 } 534 33 534 34 18446744073709551615 1 , 534 34 534 35 18446744073709551615 1 { 534 36 534 37 18446744073709551615 7 L"Char" 534 37 534 44 18446744073709551615 1 , 534 44 534 45 18446744073709551615 8 TypeKind 534 46 534 54 95 2 :: 534 54 534 56 18446744073709551615 4 Char 534 56 534 60 265 1 } 534 60 534 61 18446744073709551615 1 , 534 61 534 62 18446744073709551615 1 { 535 3 535 4 18446744073709551615 9 L"String" 535 4 535 13 18446744073709551615 1 , 535 13 535 14 18446744073709551615 8 TypeKind 535 15 535 23 95 2 :: 535 23 535 25 18446744073709551615 6 String 535 25 535 31 266 1 } 535 31 535 32 18446744073709551615 1 , 535 32 535 33 18446744073709551615 1 { 535 36 535 37 18446744073709551615 7 L"Unit" 535 37 535 44 18446744073709551615 1 , 535 44 535 45 18446744073709551615 8 TypeKind 535 46 535 54 95 2 :: 535 54 535 56 18446744073709551615 4 Unit 535 56 535 60 267 1 } 535 60 535 61 18446744073709551615 1 , 535 61 535 62 18446744073709551615 1 { 536 3 536 4 18446744073709551615 8 L"Array" 536 4 536 12 18446744073709551615 1 , 536 12 536 13 18446744073709551615 8 TypeKind 536 14 536 22 95 2 :: 536 22 536 24 18446744073709551615 5 Array 536 24 536 29 268 1 } 536 29 536 30 18446744073709551615 1 , 536 30 536 31 18446744073709551615 1 { 536 33 536 34 18446744073709551615 11 L"Function" 536 34 536 45 18446744073709551615 1 , 536 45 536 46 18446744073709551615 8 TypeKind 536 47 536 55 95 2 :: 536 55 536 57 18446744073709551615 8 Function 536 57 536 65 269 1 } 536 65 536 66 18446744073709551615 1 } 536 66 536 67 18446744073709551615 1 ; 536 67 536 68 18446744073709551615 2 if 537 2 537 4 18446744073709551615 1 ( 537 5 537 6 18446744073709551615 5 kinds 537 6 537 11 259 1 . 537 11 537 12 270 4 find 537 12 537 16 270 1 ( 537 16 537 17 270 4 text 537 17 537 21 258 1 ) 537 21 537 22 270 2 != 537 23 537 25 271 5 kinds 537 26 537 31 259 1 . 537 31 537 32 272 3 end 537 32 537 35 272 1 ( 537 35 537 36 272 1 ) 537 36 537 37 272 1 ) 537 37 537 38 18446744073709551615 1 { 538 2 538 3 18446744073709551615 6 return 539 3 539 9 18446744073709551615 5 kinds 539 10 539 15 259 1 [ 539 15 539 16 273 4 text 539 16 539 20 258 1 ] 539 20 539 21 273 1 ; 539 21 539 22 18446744073709551615 1 } 540 2 540 3 18446744073709551615 4 else 541 2 541 6 18446744073709551615 1 { 542 2 542 3 18446744073709551615 6 return 543 3 543 9 18446744073709551615 8 TypeKind 543 10 543 18 95 2 :: 543 18 543 20 18446744073709551615 6 Object 543 20 543 26 274 1 ; 543 26 543 27 18446744073709551615 1 } 544 2 544 3 18446744073709551615 1 } 545 1 545 2 18446744073709551615 6 vector 546 1 546 7 6 1 < 546 7 546 8 20 7 wstring 546 8 546 15 18 1 > 546 15 546 16 20 6 Parser 546 17 546 23 3 2 :: 546 23 546 25 20 14 ParseNamespace 546 25 546 39 20 1 ( 546 39 546 40 20 1 ) 546 40 546 41 20 1 { 547 1 547 2 18446744073709551615 6 vector 548 2 548 8 6 1 < 548 8 548 9 18446744073709551615 7 wstring 548 9 548 16 18 1 > 548 16 548 17 18446744073709551615 2 ns 548 18 548 20 275 1 ; 548 20 548 21 18446744073709551615 2 ns 549 2 549 4 275 1 . 549 4 549 5 58 9 push_back 549 5 549 14 58 1 ( 549 14 549 15 58 15 ParseIdentifier 549 15 549 30 120 1 ( 549 30 549 31 120 1 ) 549 31 549 32 120 1 ) 549 32 549 33 58 1 ; 549 33 549 34 18446744073709551615 5 while 550 2 550 7 18446744073709551615 1 ( 550 8 550 9 18446744073709551615 4 Look 550 9 550 13 33 1 ( 550 13 550 14 33 1 ) 550 14 550 15 33 1 . 550 15 550 16 18446744073709551615 3 tag 550 16 550 19 35 2 == 550 20 550 22 18446744073709551615 3 Tag 550 23 550 26 16 2 :: 550 26 550 28 18446744073709551615 3 Dot 550 28 550 31 228 1 ) 550 31 550 32 18446744073709551615 1 { 551 2 551 3 18446744073709551615 5 Match 552 3 552 8 15 1 ( 552 8 552 9 15 3 Tag 552 9 552 12 16 2 :: 552 12 552 14 18446744073709551615 3 Dot 552 14 552 17 228 1 ) 552 17 552 18 15 1 ; 552 18 552 19 18446744073709551615 2 ns 553 3 553 5 275 1 . 553 5 553 6 58 9 push_back 553 6 553 15 58 1 ( 553 15 553 16 58 15 ParseIdentifier 553 16 553 31 120 1 ( 553 31 553 32 120 1 ) 553 32 553 33 120 1 ) 553 33 553 34 58 1 ; 553 34 553 35 18446744073709551615 1 } 554 2 554 3 18446744073709551615 6 return 555 2 555 8 18446744073709551615 2 ns 555 9 555 11 275 1 ; 555 11 555 12 18446744073709551615 1 } 556 1 556 2 18446744073709551615 0 0 276 0 0 0 22 0 0 1 3 0 3 std 49 1 3 0 8 any_cast 49 1 3 0 19 static_pointer_cast 4 1 3 0 6 Parser 20 1 3 0 18 string:__cxx11:std 10 1 3 0 71 4:23:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 31 1 3 0 10 vector:std 4 1 3 0 5 Token 10 1 3 0 71 4:44:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 6 1 3 0 11 path:Parser 24 1 3 0 24 basic_string:__cxx11:std 6 1 3 0 13 tokens:Parser 6 1 3 0 19 tokenPointer:Parser 4 1 3 0 8 CodeFile 21 1 3 0 14 Program:Parser 21 1 3 0 12 Match:Parser 5 1 3 0 3 Tag 7 1 3 0 13 Namespace:Tag 20 1 3 0 19 wstring:__cxx11:std 9 1 3 0 72 13:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 21 ParseNamespace:Parser 31 1 3 0 17 unordered_map:std 4 1 3 0 6 Module 9 1 3 0 72 15:33:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 4 1 3 0 5 Class 9 1 3 0 72 16:32:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 31 1 3 0 14 shared_ptr:std 4 1 3 0 9 Namespace 9 1 3 0 72 17:48:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 12 IsEof:Parser 5 1 3 0 14 AccessModifier 9 1 3 0 72 20:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 14 ParseAM:Parser 21 1 3 0 11 Look:Parser 21 1 3 0 11 Move:Parser 6 1 3 0 9 tag:Token 7 1 3 0 9 Class:Tag 9 1 3 0 72 24:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 15 DefClass:Parser 21 1 3 0 24 insert:unordered_map:std 24 1 3 0 8 pair:std 6 1 3 0 10 type:Class 6 1 3 0 9 name:Type 7 1 3 0 10 Module:Tag 9 1 3 0 72 29:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 16 DefModule:Parser 6 1 3 0 11 type:Module 4 1 3 0 15 SyntaxException 6 1 3 0 10 line:Token 6 1 3 0 12 column:Token 36 1 3 0 6 ExpPtr 21 1 3 0 12 Block:Parser 20 1 3 0 7 int32_t 9 1 3 0 72 42:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 43:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 44:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 13 LeftBrace:Tag 7 1 3 0 14 RightBrace:Tag 21 1 3 0 20 push_back:vector:std 21 1 3 0 16 Statement:Parser 22 1 3 0 3 Ast 8 1 3 0 9 Block:Ast 21 1 3 0 9 If:Parser 9 1 3 0 72 55:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 56:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 6 If:Tag 9 1 3 0 71 58:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 10 And:Parser 9 1 3 0 71 59:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 8 Else:Tag 9 1 3 0 72 65:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 14 IfThenElse:Ast 9 1 3 0 72 70:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 10 IfThen:Ast 21 1 3 0 12 While:Parser 9 1 3 0 72 81:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 82:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 9 While:Tag 9 1 3 0 71 84:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 71 85:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 9 While:Ast 10 1 3 0 72 88:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 10 Public:Tag 7 1 3 0 21 Public:AccessModifier 7 1 3 0 11 Private:Tag 7 1 3 0 22 Private:AccessModifier 7 1 3 0 13 Protected:Tag 7 1 3 0 24 Protected:AccessModifier 7 1 3 0 12 Internal:Tag 7 1 3 0 23 Internal:AccessModifier 10 1 3 0 73 112:41:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 4 1 3 0 4 Type 9 1 3 0 72 115:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 16 ParseType:Parser 6 1 3 0 9 kind:Type 5 1 3 0 8 TypeKind 7 1 3 0 15 Module:TypeKind 4 1 3 0 5 Field 9 1 3 0 73 118:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 4 1 3 0 8 Function 9 1 3 0 73 119:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 122:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 10 DefVar:Tag 9 1 3 0 73 126:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 15 DefField:Parser 7 1 3 0 10 DefFun:Tag 9 1 3 0 73 131:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 18 DefFunction:Parser 6 1 3 0 13 name:Function 10 1 3 0 73 144:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 147:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 14 Class:TypeKind 9 1 3 0 73 150:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 151:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 152:35:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 155:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 159:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 164:13:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 10 1 3 0 73 176:45:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 179:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 22 ParseIdentifier:Parser 7 1 3 0 19 LeftParenthesis:Tag 4 1 3 0 9 Parameter 9 1 3 0 73 181:20:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 20 RightParenthesis:Tag 21 1 3 0 21 ParseParameter:Parser 7 1 3 0 9 Comma:Tag 7 1 3 0 9 Colon:Tag 9 1 3 0 72 197:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 4 1 3 0 13 LocalVariable 9 1 3 0 73 199:24:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 23 DefLocalVariable:Parser 9 1 3 0 73 204:17:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 215:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 217:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 223:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 225:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 10 Assign:Tag 9 1 3 0 72 227:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 9 Or:Parser 10 1 3 0 73 230:39:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 233:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 235:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 237:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 13 Return:Parser 9 1 3 0 72 242:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 10 Return:Tag 9 1 3 0 72 244:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 10 Return:Ast 21 1 3 0 13 Assign:Parser 9 1 3 0 72 263:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 6 1 3 0 15 kind:Expression 5 1 3 0 14 ExpressionKind 7 1 3 0 23 Variable:ExpressionKind 9 1 3 0 72 266:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 267:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 36 1 3 0 14 VariableExpPtr 9 1 3 0 73 269:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 23 static_pointer_cast:std 4 1 3 0 18 VariableExpression 8 1 3 0 10 Assign:Ast 6 1 3 0 23 name:VariableExpression 9 1 3 0 72 279:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 6 Or:Tag 9 1 3 0 72 282:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 283:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 24 operator=:shared_ptr:std 8 1 3 0 6 Or:Ast 9 1 3 0 72 291:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 15 Equality:Parser 7 1 3 0 7 And:Tag 9 1 3 0 72 294:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 295:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 7 And:Ast 9 1 3 0 72 303:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 15 Relation:Parser 7 1 3 0 9 Equal:Tag 7 1 3 0 12 NotEqual:Tag 9 1 3 0 73 306:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 9 Equal:Ast 8 1 3 0 12 NotEqual:Ast 9 1 3 0 72 321:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 11 Expr:Parser 7 1 3 0 15 GreaterThan:Tag 9 1 3 0 72 326:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 327:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 15 GreaterThan:Ast 7 1 3 0 12 LessThan:Tag 9 1 3 0 72 333:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 334:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 12 LessThan:Ast 7 1 3 0 22 GreaterThanOrEqual:Tag 9 1 3 0 72 340:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 341:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 22 GreaterThanOrEqual:Ast 7 1 3 0 19 LessThanOrEqual:Tag 9 1 3 0 72 347:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 348:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 19 LessThanOrEqual:Ast 9 1 3 0 72 358:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 11 Term:Parser 7 1 3 0 7 Add:Tag 7 1 3 0 12 Subtract:Tag 9 1 3 0 73 361:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 7 Add:Ast 8 1 3 0 12 Subtract:Ast 9 1 3 0 72 376:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 12 Unary:Parser 7 1 3 0 12 Multiply:Tag 7 1 3 0 10 Divide:Tag 7 1 3 0 10 Modulo:Tag 9 1 3 0 73 380:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 12 Multiply:Ast 8 1 3 0 10 Divide:Ast 8 1 3 0 10 Modulo:Ast 9 1 3 0 72 401:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 402:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 13 UnaryPlus:Ast 9 1 3 0 72 408:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 409:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 14 UnaryMinus:Ast 7 1 3 0 7 Not:Tag 9 1 3 0 72 415:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 72 416:7:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 7 Not:Ast 21 1 3 0 14 Postfix:Parser 9 1 3 0 72 427:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 13 Factor:Parser 7 1 3 0 7 Dot:Tag 7 1 3 0 15 LeftBracket:Tag 9 1 3 0 73 431:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 435:19:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 8 Call:Ast 9 1 3 0 73 454:12:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 7 Dot:Ast 9 1 3 0 72 466:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 7 Int:Tag 7 1 3 0 8 Long:Tag 7 1 3 0 9 Float:Tag 7 1 3 0 10 Double:Tag 7 1 3 0 8 Char:Tag 7 1 3 0 10 String:Tag 8 1 3 0 12 Constant:Ast 6 1 3 0 11 value:Token 7 1 3 0 8 True:Tag 7 1 3 0 9 False:Tag 9 1 3 0 73 492:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 14 Identifier:Tag 9 1 3 0 73 499:11:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 8 1 3 0 12 any_cast:std 8 1 3 0 12 Variable:Ast 8 1 3 0 13 operator+:std 8 1 3 0 16 TokenTagToString 9 1 3 0 73 509:10:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 513:16:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 16 RightBracket:Tag 9 1 3 0 72 518:9:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 21 1 3 0 20 ParseTypeKind:Parser 10 1 3 0 73 529:40:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 9 1 3 0 73 531:42:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 7 1 3 0 12 Int:TypeKind 7 1 3 0 13 Long:TypeKind 7 1 3 0 14 Float:TypeKind 7 1 3 0 15 Double:TypeKind 7 1 3 0 16 Boolean:TypeKind 7 1 3 0 13 Char:TypeKind 7 1 3 0 15 String:TypeKind 7 1 3 0 13 Unit:TypeKind 7 1 3 0 14 Array:TypeKind 7 1 3 0 17 Function:TypeKind 21 1 3 0 22 find:unordered_map:std 8 1 3 0 23 operator!=:__detail:std 21 1 3 0 21 end:unordered_map:std 21 1 3 0 28 operator[]:unordered_map:std 7 1 3 0 15 Object:TypeKind 9 1 3 0 73 548:18:/home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 0 0 7 0 0 0 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Exception.hpp 1529755055 70 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Expression.hpp 1530592503 69 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Namespace.hpp 1530611193 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.cpp 1530720680 66 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Parser.hpp 1530592110 65 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Token.hpp 1530679194 64 /home/jasonhe/Documents/MyCode/CPP/JuCi++/CygniCompiler/Type.hpp 1530591912